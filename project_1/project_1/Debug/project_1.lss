
project_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d40  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00000d40  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000220  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002744  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cad  00000000  00000000  00003838  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000157d  00000000  00000000  000044e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004dc  00000000  00000000  00005a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d0a  00000000  00000000  00005f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001744  00000000  00000000  00006c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  0000838e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 31       	cpi	r26, 0x12	; 18
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 56 04 	call	0x8ac	; 0x8ac <main>
  7a:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
  82:	0e 94 8d 06 	call	0xd1a	; 0xd1a <UART_voidInit>
  86:	08 95       	ret

00000088 <EEPROM_voidInit>:
	{
		//error
	}
	
	
}
  88:	0e 94 02 06 	call	0xc04	; 0xc04 <TWI_voidInitMaster>
  8c:	08 95       	ret

0000008e <EEPROM_voidWritePage>:
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	61 15       	cp	r22, r1
  98:	71 05       	cpc	r23, r1
  9a:	f9 f0       	breq	.+62     	; 0xda <EEPROM_voidWritePage+0x4c>
  9c:	8b 01       	movw	r16, r22
  9e:	d8 2f       	mov	r29, r24
  a0:	c9 2f       	mov	r28, r25
  a2:	c0 65       	ori	r28, 0x50	; 80
  a4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <TWI_voidSendStartCondition>
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 31 06 	call	0xc62	; 0xc62 <TWI_voidSendSlaveAddWithWrite>
  ae:	8d 2f       	mov	r24, r29
  b0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_voidTransmitMasterDataByte>
  b4:	c0 e0       	ldi	r28, 0x00	; 0
  b6:	07 c0       	rjmp	.+14     	; 0xc6 <EEPROM_voidWritePage+0x38>
  b8:	f8 01       	movw	r30, r16
  ba:	ec 0f       	add	r30, r28
  bc:	f1 1d       	adc	r31, r1
  be:	80 81       	ld	r24, Z
  c0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_voidTransmitMasterDataByte>
  c4:	cf 5f       	subi	r28, 0xFF	; 255
  c6:	c8 30       	cpi	r28, 0x08	; 8
  c8:	b8 f3       	brcs	.-18     	; 0xb8 <EEPROM_voidWritePage+0x2a>
  ca:	0e 94 2a 06 	call	0xc54	; 0xc54 <TWI_voidSendStopCondition>
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <EEPROM_voidWritePage+0x44>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <EEPROM_voidWritePage+0x4a>
  d8:	00 00       	nop
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	08 95       	ret

000000e4 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
  f0:	41 15       	cp	r20, r1
  f2:	51 05       	cpc	r21, r1
  f4:	81 f1       	breq	.+96     	; 0x156 <EEPROM_voidSequentialRead+0x72>
  f6:	61 15       	cp	r22, r1
  f8:	22 e0       	ldi	r18, 0x02	; 2
  fa:	72 07       	cpc	r23, r18
  fc:	60 f5       	brcc	.+88     	; 0x156 <EEPROM_voidSequentialRead+0x72>
  fe:	8a 01       	movw	r16, r20
 100:	7b 01       	movw	r14, r22
 102:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
 104:	c9 2f       	mov	r28, r25
 106:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
 108:	0e 94 0e 06 	call	0xc1c	; 0xc1c <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 31 06 	call	0xc62	; 0xc62 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
 112:	8d 2f       	mov	r24, r29
 114:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
 118:	0e 94 1c 06 	call	0xc38	; 0xc38 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 46 06 	call	0xc8c	; 0xc8c <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
 122:	c0 e0       	ldi	r28, 0x00	; 0
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	06 c0       	rjmp	.+12     	; 0x134 <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
 128:	c8 01       	movw	r24, r16
 12a:	8c 0f       	add	r24, r28
 12c:	9d 1f       	adc	r25, r29
 12e:	0e 94 67 06 	call	0xcce	; 0xcce <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c7 01       	movw	r24, r14
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	c8 17       	cp	r28, r24
 13a:	d9 07       	cpc	r29, r25
 13c:	a8 f3       	brcs	.-22     	; 0x128 <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
 13e:	80 0f       	add	r24, r16
 140:	91 1f       	adc	r25, r17
 142:	0e 94 7d 06 	call	0xcfa	; 0xcfa <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
 146:	0e 94 2a 06 	call	0xc54	; 0xc54 <TWI_voidSendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <EEPROM_voidSequentialRead+0x6a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <EEPROM_voidSequentialRead+0x70>
 154:	00 00       	nop
	{
		//error state
	}


 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	08 95       	ret

00000164 <KEYPAD_voidInit>:


void KEYPAD_voidInit(void)
{
	//inti keypad rowa as inpts pins
	DIO_voidSetPinDirection(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN,DIO_PIN_INPUT);
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	63 e0       	ldi	r22, 0x03	; 3
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN,DIO_PIN_INPUT);
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	64 e0       	ldi	r22, 0x04	; 4
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN,DIO_PIN_INPUT);
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	65 e0       	ldi	r22, 0x05	; 5
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN,DIO_PIN_INPUT);
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	66 e0       	ldi	r22, 0x06	; 6
 186:	82 e0       	ldi	r24, 0x02	; 2
 188:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	
	//inti keypad cols as outputs pins
	DIO_voidSetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PIN_OUTPUT);
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PIN_OUTPUT);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	65 e0       	ldi	r22, 0x05	; 5
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PIN_OUTPUT);
 1a0:	41 e0       	ldi	r20, 0x01	; 1
 1a2:	66 e0       	ldi	r22, 0x06	; 6
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PIN_OUTPUT);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	67 e0       	ldi	r22, 0x07	; 7
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	
	//active pull up res for inpts pins
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN);
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidActivePinPullUpResistance>
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN);
 1bc:	64 e0       	ldi	r22, 0x04	; 4
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidActivePinPullUpResistance>
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN);
 1c4:	65 e0       	ldi	r22, 0x05	; 5
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidActivePinPullUpResistance>
	DIO_voidActivePinPullUpResistance (KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN);
 1cc:	66 e0       	ldi	r22, 0x06	; 6
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <DIO_voidActivePinPullUpResistance>
 1d4:	08 95       	ret

000001d6 <KEYPAD_voidGetValue>:
	
}

void KEYPAD_voidGetValue(u8* copy_pu8ReturnedValue)
{
 1d6:	6f 92       	push	r6
 1d8:	7f 92       	push	r7
 1da:	8f 92       	push	r8
 1dc:	9f 92       	push	r9
 1de:	af 92       	push	r10
 1e0:	bf 92       	push	r11
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	a1 97       	sbiw	r28, 0x21	; 33
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
	if(copy_pu8ReturnedValue!=NULL)
 202:	00 97       	sbiw	r24, 0x00	; 0
 204:	09 f4       	brne	.+2      	; 0x208 <KEYPAD_voidGetValue+0x32>
 206:	80 c0       	rjmp	.+256    	; 0x308 <KEYPAD_voidGetValue+0x132>
 208:	5c 01       	movw	r10, r24
	{
		//case i didnt press anything on keypad
		*copy_pu8ReturnedValue=KEYPAD_NOT_PRESSED;
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	f5 01       	movw	r30, r10
 20e:	80 83       	st	Z, r24
		
		u8 Local_u8ColsCounter;
		//matrics for cols port and pins
		u8 Local_u8ColsPorts[4]={KEYPAD_COL0_PORT,KEYPAD_COL1_PORT,KEYPAD_COL2_PORT,KEYPAD_COL3_PORT};
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	8d 8f       	std	Y+29, r24	; 0x1d
 214:	8e 8f       	std	Y+30, r24	; 0x1e
 216:	8f 8f       	std	Y+31, r24	; 0x1f
 218:	88 a3       	std	Y+32, r24	; 0x20
		u8 Local_u8ColsPins[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN};
 21a:	34 e0       	ldi	r19, 0x04	; 4
 21c:	39 8f       	std	Y+25, r19	; 0x19
 21e:	25 e0       	ldi	r18, 0x05	; 5
 220:	2a 8f       	std	Y+26, r18	; 0x1a
 222:	96 e0       	ldi	r25, 0x06	; 6
 224:	9b 8f       	std	Y+27, r25	; 0x1b
 226:	87 e0       	ldi	r24, 0x07	; 7
 228:	8c 8f       	std	Y+28, r24	; 0x1c
		
		u8 Local_u8RowsCounter;
		//matrics for rows port and pins
		u8 Local_u8RowsPorts[4]={KEYPAD_ROW0_PORT,KEYPAD_ROW1_PORT,KEYPAD_ROW2_PORT,KEYPAD_ROW3_PORT};
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	8d 8b       	std	Y+21, r24	; 0x15
 22e:	8e 8b       	std	Y+22, r24	; 0x16
 230:	8f 8b       	std	Y+23, r24	; 0x17
 232:	88 8f       	std	Y+24, r24	; 0x18
		u8 Local_u8RowsPins[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	89 8b       	std	Y+17, r24	; 0x11
 238:	3a 8b       	std	Y+18, r19	; 0x12
 23a:	2b 8b       	std	Y+19, r18	; 0x13
 23c:	9c 8b       	std	Y+20, r25	; 0x14
		
		u8 Local_u8RowValue;
		
		//keypad chars
		u8 Local_u8Keys[4][4]=KeyPAD_KEYS;
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	e0 e6       	ldi	r30, 0x60	; 96
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	de 01       	movw	r26, r28
 246:	11 96       	adiw	r26, 0x01	; 1
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	8a 95       	dec	r24
 24e:	e1 f7       	brne	.-8      	; 0x248 <KEYPAD_voidGetValue+0x72>
		
		for(Local_u8ColsCounter=0;Local_u8ColsCounter<4;Local_u8ColsCounter++)
 250:	81 2c       	mov	r8, r1
 252:	56 c0       	rjmp	.+172    	; 0x300 <KEYPAD_voidGetValue+0x12a>
		{
			//activate each colomns
			DIO_voidSetPinValue(Local_u8ColsPorts[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW );
 254:	c8 2c       	mov	r12, r8
 256:	d1 2c       	mov	r13, r1
 258:	e9 e1       	ldi	r30, 0x19	; 25
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 0f       	add	r30, r28
 25e:	fd 1f       	adc	r31, r29
 260:	ec 0d       	add	r30, r12
 262:	fd 1d       	adc	r31, r13
 264:	60 80       	ld	r6, Z
 266:	ed e1       	ldi	r30, 0x1D	; 29
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ec 0f       	add	r30, r28
 26c:	fd 1f       	adc	r31, r29
 26e:	ec 0d       	add	r30, r12
 270:	fd 1d       	adc	r31, r13
 272:	70 80       	ld	r7, Z
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	66 2d       	mov	r22, r6
 278:	87 2d       	mov	r24, r7
 27a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
			
			//read each row
			for(Local_u8RowsCounter=0;Local_u8RowsCounter<4;Local_u8RowsCounter++)
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	37 c0       	rjmp	.+110    	; 0x2f0 <KEYPAD_voidGetValue+0x11a>
			{
				//read each row
				DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
 282:	e1 2e       	mov	r14, r17
 284:	f1 2c       	mov	r15, r1
 286:	e1 e1       	ldi	r30, 0x11	; 17
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	ec 0f       	add	r30, r28
 28c:	fd 1f       	adc	r31, r29
 28e:	ee 0d       	add	r30, r14
 290:	ff 1d       	adc	r31, r15
 292:	00 81       	ld	r16, Z
 294:	e5 e1       	ldi	r30, 0x15	; 21
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ec 0f       	add	r30, r28
 29a:	fd 1f       	adc	r31, r29
 29c:	ee 0d       	add	r30, r14
 29e:	ff 1d       	adc	r31, r15
 2a0:	90 80       	ld	r9, Z
 2a2:	ae 01       	movw	r20, r28
 2a4:	4f 5d       	subi	r20, 0xDF	; 223
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	60 2f       	mov	r22, r16
 2aa:	89 2d       	mov	r24, r9
 2ac:	0e 94 8f 05 	call	0xb1e	; 0xb1e <DIO_voidGetPinValue>
				//is pressed
				if(0==Local_u8RowValue)
 2b0:	89 a1       	ldd	r24, Y+33	; 0x21
 2b2:	81 11       	cpse	r24, r1
 2b4:	1c c0       	rjmp	.+56     	; 0x2ee <KEYPAD_voidGetValue+0x118>
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <KEYPAD_voidGetValue+0xf0>
				{
					//to make loop until i move my finger
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
 2b8:	ae 01       	movw	r20, r28
 2ba:	4f 5d       	subi	r20, 0xDF	; 223
 2bc:	5f 4f       	sbci	r21, 0xFF	; 255
 2be:	60 2f       	mov	r22, r16
 2c0:	89 2d       	mov	r24, r9
 2c2:	0e 94 8f 05 	call	0xb1e	; 0xb1e <DIO_voidGetPinValue>
				DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
				//is pressed
				if(0==Local_u8RowValue)
				{
					//to make loop until i move my finger
					while(0==Local_u8RowValue)
 2c6:	89 a1       	ldd	r24, Y+33	; 0x21
 2c8:	88 23       	and	r24, r24
 2ca:	b1 f3       	breq	.-20     	; 0x2b8 <KEYPAD_voidGetValue+0xe2>
					{
						DIO_voidGetPinValue(Local_u8RowsPorts[Local_u8RowsCounter],Local_u8RowsPins[Local_u8RowsCounter],&Local_u8RowValue);
						
					}
					
					*copy_pu8ReturnedValue=Local_u8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
 2cc:	ee 0c       	add	r14, r14
 2ce:	ff 1c       	adc	r15, r15
 2d0:	ee 0c       	add	r14, r14
 2d2:	ff 1c       	adc	r15, r15
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	8c 0f       	add	r24, r28
 2da:	9d 1f       	adc	r25, r29
 2dc:	e8 0e       	add	r14, r24
 2de:	f9 1e       	adc	r15, r25
 2e0:	f7 01       	movw	r30, r14
 2e2:	ec 0d       	add	r30, r12
 2e4:	fd 1d       	adc	r31, r13
 2e6:	80 81       	ld	r24, Z
 2e8:	f5 01       	movw	r30, r10
 2ea:	80 83       	st	Z, r24
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <KEYPAD_voidGetValue+0x132>
		{
			//activate each colomns
			DIO_voidSetPinValue(Local_u8ColsPorts[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW );
			
			//read each row
			for(Local_u8RowsCounter=0;Local_u8RowsCounter<4;Local_u8RowsCounter++)
 2ee:	1f 5f       	subi	r17, 0xFF	; 255
 2f0:	14 30       	cpi	r17, 0x04	; 4
 2f2:	38 f2       	brcs	.-114    	; 0x282 <KEYPAD_voidGetValue+0xac>
				
				
			}
			
			//decativate current colomns
			DIO_voidSetPinValue(Local_u8ColsPorts[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_High);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	66 2d       	mov	r22, r6
 2f8:	87 2d       	mov	r24, r7
 2fa:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
		u8 Local_u8RowValue;
		
		//keypad chars
		u8 Local_u8Keys[4][4]=KeyPAD_KEYS;
		
		for(Local_u8ColsCounter=0;Local_u8ColsCounter<4;Local_u8ColsCounter++)
 2fe:	83 94       	inc	r8
 300:	f3 e0       	ldi	r31, 0x03	; 3
 302:	f8 15       	cp	r31, r8
 304:	08 f0       	brcs	.+2      	; 0x308 <KEYPAD_voidGetValue+0x132>
 306:	a6 cf       	rjmp	.-180    	; 0x254 <KEYPAD_voidGetValue+0x7e>
	{
		//error
	}
	
	
}
 308:	a1 96       	adiw	r28, 0x21	; 33
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	df 90       	pop	r13
 322:	cf 90       	pop	r12
 324:	bf 90       	pop	r11
 326:	af 90       	pop	r10
 328:	9f 90       	pop	r9
 32a:	8f 90       	pop	r8
 32c:	7f 90       	pop	r7
 32e:	6f 90       	pop	r6
 330:	08 95       	ret

00000332 <PRV_voidWriteHalfPort>:
		LCD_voidSendCommand(0b00011100);
		break;
		
		//move display to left
		case LCD_SHIFT_DIS_LEFT:
		LCD_voidSendCommand(0b00011000);
 332:	cf 93       	push	r28
 334:	c8 2f       	mov	r28, r24
 336:	80 ff       	sbrs	r24, 0
 338:	06 c0       	rjmp	.+12     	; 0x346 <PRV_voidWriteHalfPort+0x14>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	64 e0       	ldi	r22, 0x04	; 4
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 344:	05 c0       	rjmp	.+10     	; 0x350 <PRV_voidWriteHalfPort+0x1e>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 350:	c1 ff       	sbrs	r28, 1
 352:	06 c0       	rjmp	.+12     	; 0x360 <PRV_voidWriteHalfPort+0x2e>
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	65 e0       	ldi	r22, 0x05	; 5
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 35e:	05 c0       	rjmp	.+10     	; 0x36a <PRV_voidWriteHalfPort+0x38>
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	65 e0       	ldi	r22, 0x05	; 5
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 36a:	c2 ff       	sbrs	r28, 2
 36c:	06 c0       	rjmp	.+12     	; 0x37a <PRV_voidWriteHalfPort+0x48>
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	66 e0       	ldi	r22, 0x06	; 6
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 378:	05 c0       	rjmp	.+10     	; 0x384 <PRV_voidWriteHalfPort+0x52>
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	66 e0       	ldi	r22, 0x06	; 6
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 384:	c3 ff       	sbrs	r28, 3
 386:	06 c0       	rjmp	.+12     	; 0x394 <PRV_voidWriteHalfPort+0x62>
 388:	41 e0       	ldi	r20, 0x01	; 1
 38a:	67 e0       	ldi	r22, 0x07	; 7
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 392:	05 c0       	rjmp	.+10     	; 0x39e <PRV_voidWriteHalfPort+0x6c>
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	67 e0       	ldi	r22, 0x07	; 7
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <LCD_voidSendCommand>:
 3a2:	cf 93       	push	r28
 3a4:	c8 2f       	mov	r28, r24
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	62 e0       	ldi	r22, 0x02	; 2
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 3ba:	8c 2f       	mov	r24, r28
 3bc:	82 95       	swap	r24
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	63 e0       	ldi	r22, 0x03	; 3
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 3ce:	8f e9       	ldi	r24, 0x9F	; 159
 3d0:	9f e0       	ldi	r25, 0x0F	; 15
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <LCD_voidSendCommand+0x30>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_voidSendCommand+0x36>
 3d8:	00 00       	nop
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	63 e0       	ldi	r22, 0x03	; 3
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 3e4:	8c 2f       	mov	r24, r28
 3e6:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 3ea:	41 e0       	ldi	r20, 0x01	; 1
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 3f4:	8f e9       	ldi	r24, 0x9F	; 159
 3f6:	9f e0       	ldi	r25, 0x0F	; 15
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_voidSendCommand+0x56>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_voidSendCommand+0x5c>
 3fe:	00 00       	nop
 400:	40 e0       	ldi	r20, 0x00	; 0
 402:	63 e0       	ldi	r22, 0x03	; 3
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <LCD_voidInit>:
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	62 e0       	ldi	r22, 0x02	; 2
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	64 e0       	ldi	r22, 0x04	; 4
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	65 e0       	ldi	r22, 0x05	; 5
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	66 e0       	ldi	r22, 0x06	; 6
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	67 e0       	ldi	r22, 0x07	; 7
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 454:	2f e7       	ldi	r18, 0x7F	; 127
 456:	85 eb       	ldi	r24, 0xB5	; 181
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <LCD_voidInit+0x4c>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_voidInit+0x56>
 464:	00 00       	nop
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 470:	40 e0       	ldi	r20, 0x00	; 0
 472:	62 e0       	ldi	r22, 0x02	; 2
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_voidInit+0x80>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_voidInit+0x86>
 494:	00 00       	nop
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	63 e0       	ldi	r22, 0x03	; 3
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 4a0:	88 e2       	ldi	r24, 0x28	; 40
 4a2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4a6:	90 ef       	ldi	r25, 0xF0	; 240
 4a8:	9a 95       	dec	r25
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_voidInit+0x9a>
 4ac:	8f e0       	ldi	r24, 0x0F	; 15
 4ae:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4b2:	20 ef       	ldi	r18, 0xF0	; 240
 4b4:	2a 95       	dec	r18
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCD_voidInit+0xa6>
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4be:	8f e3       	ldi	r24, 0x3F	; 63
 4c0:	9f e1       	ldi	r25, 0x1F	; 31
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <LCD_voidInit+0xb4>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_voidInit+0xba>
 4c8:	00 00       	nop
 4ca:	86 e0       	ldi	r24, 0x06	; 6
 4cc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 4d0:	08 95       	ret

000004d2 <LCD_voidDisplayChar>:
 4d2:	cf 93       	push	r28
 4d4:	c8 2f       	mov	r28, r24
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	62 e0       	ldi	r22, 0x02	; 2
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 4ea:	8c 2f       	mov	r24, r28
 4ec:	82 95       	swap	r24
 4ee:	8f 70       	andi	r24, 0x0F	; 15
 4f0:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	63 e0       	ldi	r22, 0x03	; 3
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 4fe:	8f e9       	ldi	r24, 0x9F	; 159
 500:	9f e0       	ldi	r25, 0x0F	; 15
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <LCD_voidDisplayChar+0x30>
 506:	00 c0       	rjmp	.+0      	; 0x508 <LCD_voidDisplayChar+0x36>
 508:	00 00       	nop
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	63 e0       	ldi	r22, 0x03	; 3
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 514:	8c 2f       	mov	r24, r28
 516:	0e 94 99 01 	call	0x332	; 0x332 <PRV_voidWriteHalfPort>
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	63 e0       	ldi	r22, 0x03	; 3
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 524:	8f e9       	ldi	r24, 0x9F	; 159
 526:	9f e0       	ldi	r25, 0x0F	; 15
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <LCD_voidDisplayChar+0x56>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <LCD_voidDisplayChar+0x5c>
 52e:	00 00       	nop
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	63 e0       	ldi	r22, 0x03	; 3
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 0f 05 	call	0xa1e	; 0xa1e <DIO_voidSetPinValue>
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <LCD_voidDisplayString>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	71 f4       	brne	.+28     	; 0x564 <LCD_voidDisplayString+0x26>
 548:	15 c0       	rjmp	.+42     	; 0x574 <LCD_voidDisplayString+0x36>
 54a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidDisplayChar>
 54e:	2f ef       	ldi	r18, 0xFF	; 255
 550:	80 e7       	ldi	r24, 0x70	; 112
 552:	92 e0       	ldi	r25, 0x02	; 2
 554:	21 50       	subi	r18, 0x01	; 1
 556:	80 40       	sbci	r24, 0x00	; 0
 558:	90 40       	sbci	r25, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <LCD_voidDisplayString+0x16>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_voidDisplayString+0x20>
 55e:	00 00       	nop
 560:	cf 5f       	subi	r28, 0xFF	; 255
 562:	02 c0       	rjmp	.+4      	; 0x568 <LCD_voidDisplayString+0x2a>
 564:	8c 01       	movw	r16, r24
 566:	c0 e0       	ldi	r28, 0x00	; 0
 568:	f8 01       	movw	r30, r16
 56a:	ec 0f       	add	r30, r28
 56c:	f1 1d       	adc	r31, r1
 56e:	80 81       	ld	r24, Z
 570:	81 11       	cpse	r24, r1
 572:	eb cf       	rjmp	.-42     	; 0x54a <LCD_voidDisplayString+0xc>
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	0f 91       	pop	r16
 57a:	08 95       	ret

0000057c <LCD_voidClear>:
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
 582:	08 95       	ret

00000584 <LCD_voidGoTOSpecificPosition>:
	}
	
}

void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
	if(copy_u8Position<40)
 588:	68 32       	cpi	r22, 0x28	; 40
 58a:	a0 f4       	brcc	.+40     	; 0x5b4 <LCD_voidGoTOSpecificPosition+0x30>
 58c:	c6 2f       	mov	r28, r22
 58e:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
 590:	82 e0       	ldi	r24, 0x02	; 2
 592:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
 596:	d1 30       	cpi	r29, 0x01	; 1
 598:	19 f0       	breq	.+6      	; 0x5a0 <LCD_voidGoTOSpecificPosition+0x1c>
 59a:	d2 30       	cpi	r29, 0x02	; 2
 59c:	31 f0       	breq	.+12     	; 0x5aa <LCD_voidGoTOSpecificPosition+0x26>
 59e:	0a c0       	rjmp	.+20     	; 0x5b4 <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
 5a0:	8c 2f       	mov	r24, r28
 5a2:	80 68       	ori	r24, 0x80	; 128
 5a4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
		
			
			break;
 5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
 5aa:	80 e4       	ldi	r24, 0x40	; 64
 5ac:	8c 0f       	add	r24, r28
 5ae:	80 68       	ori	r24, 0x80	; 128
 5b0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <HOME_voidInit>:



void HOME_voidInit(void)
{
	EEPROM_voidInit();
 5ba:	0e 94 44 00 	call	0x88	; 0x88 <EEPROM_voidInit>
	
	LCD_voidInit();
 5be:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidInit>
	
	KEYPAD_voidInit();
 5c2:	0e 94 b2 00 	call	0x164	; 0x164 <KEYPAD_voidInit>
	
	BL_voidInit();
 5c6:	0e 94 41 00 	call	0x82	; 0x82 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
 5ca:	41 e0       	ldi	r20, 0x01	; 1
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	0e 94 98 04 	call	0x930	; 0x930 <DIO_voidSetPinDirection>
 5de:	08 95       	ret

000005e0 <HOME_voidLocalGetUserAndPass>:
}

void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
 5e0:	cf 92       	push	r12
 5e2:	df 92       	push	r13
 5e4:	ef 92       	push	r14
 5e6:	ff 92       	push	r15
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
 5ee:	00 97       	sbiw	r24, 0x00	; 0
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <HOME_voidLocalGetUserAndPass+0x14>
 5f2:	5f c0       	rjmp	.+190    	; 0x6b2 <HOME_voidLocalGetUserAndPass+0xd2>
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	09 f4       	brne	.+2      	; 0x5fc <HOME_voidLocalGetUserAndPass+0x1c>
 5fa:	5b c0       	rjmp	.+182    	; 0x6b2 <HOME_voidLocalGetUserAndPass+0xd2>
 5fc:	7b 01       	movw	r14, r22
 5fe:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
 600:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("Please Enter User");
 60c:	82 e8       	ldi	r24, 0x82	; 130
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("Name&Password");
 61c:	84 e9       	ldi	r24, 0x94	; 148
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 624:	2f ef       	ldi	r18, 0xFF	; 255
 626:	83 ed       	ldi	r24, 0xD3	; 211
 628:	90 e3       	ldi	r25, 0x30	; 48
 62a:	21 50       	subi	r18, 0x01	; 1
 62c:	80 40       	sbci	r24, 0x00	; 0
 62e:	90 40       	sbci	r25, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <HOME_voidLocalGetUserAndPass+0x4a>
 632:	00 c0       	rjmp	.+0      	; 0x634 <HOME_voidLocalGetUserAndPass+0x54>
 634:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
 636:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("User Name:");
 642:	82 ea       	ldi	r24, 0xA2	; 162
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
 64a:	10 e0       	ldi	r17, 0x00	; 0
 64c:	11 c0       	rjmp	.+34     	; 0x670 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KEYPAD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
 64e:	e6 01       	movw	r28, r12
 650:	c1 0f       	add	r28, r17
 652:	d1 1d       	adc	r29, r1
 654:	ce 01       	movw	r24, r28
 656:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <KEYPAD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KEYPAD_NOT_PRESSED);
 65a:	98 81       	ld	r25, Y
 65c:	9f 3f       	cpi	r25, 0xFF	; 255
 65e:	b9 f3       	breq	.-18     	; 0x64e <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
 660:	61 2f       	mov	r22, r17
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
 668:	88 81       	ld	r24, Y
 66a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString("User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
 66e:	1f 5f       	subi	r17, 0xFF	; 255
 670:	18 30       	cpi	r17, 0x08	; 8
 672:	68 f3       	brcs	.-38     	; 0x64e <HOME_voidLocalGetUserAndPass+0x6e>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
	
		//display request for pass
		LCD_voidClear();
 674:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString("PASSWORD:");
 680:	8d ea       	ldi	r24, 0xAD	; 173
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
 688:	10 e0       	ldi	r17, 0x00	; 0
 68a:	11 c0       	rjmp	.+34     	; 0x6ae <HOME_voidLocalGetUserAndPass+0xce>
			{
				do
				{
					KEYPAD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
 68c:	e7 01       	movw	r28, r14
 68e:	c1 0f       	add	r28, r17
 690:	d1 1d       	adc	r29, r1
 692:	ce 01       	movw	r24, r28
 694:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <KEYPAD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KEYPAD_NOT_PRESSED);
 698:	88 81       	ld	r24, Y
 69a:	8f 3f       	cpi	r24, 0xFF	; 255
 69c:	b9 f3       	breq	.-18     	; 0x68c <HOME_voidLocalGetUserAndPass+0xac>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
 69e:	61 2f       	mov	r22, r17
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
 6a6:	88 81       	ld	r24, Y
 6a8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString("PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
 6ac:	1f 5f       	subi	r17, 0xFF	; 255
 6ae:	18 30       	cpi	r17, 0x08	; 8
 6b0:	68 f3       	brcs	.-38     	; 0x68c <HOME_voidLocalGetUserAndPass+0xac>
		//error massage
	}
			
	
		
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	ff 90       	pop	r15
 6ba:	ef 90       	pop	r14
 6bc:	df 90       	pop	r13
 6be:	cf 90       	pop	r12
 6c0:	08 95       	ret

000006c2 <HOME_voidCheckUserAndPass>:

void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType )
{
 6c2:	af 92       	push	r10
 6c4:	bf 92       	push	r11
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	a0 97       	sbiw	r28, 0x20	; 32
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
	//we have 512 byte in EEPROM consists of 64 page first 0 to 29 page for local user and password the first page for user name the followed by password
	//page 30 &31 for admin user name and password the first page for user name the followed by password
	//page 32 to 62 for remote user name and password the first page for user name the followed by password
	
	
	if(copy_pu8UserType!=NULL)
 6e4:	67 2b       	or	r22, r23
 6e6:	09 f4       	brne	.+2      	; 0x6ea <HOME_voidCheckUserAndPass+0x28>
 6e8:	d1 c0       	rjmp	.+418    	; 0x88c <__stack+0x2d>
	{
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
 6ea:	81 30       	cpi	r24, 0x01	; 1
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <HOME_voidCheckUserAndPass+0x2e>
 6ee:	ce c0       	rjmp	.+412    	; 0x88c <__stack+0x2d>
 6f0:	c7 c0       	rjmp	.+398    	; 0x880 <__stack+0x21>
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm=Local_u8TrailsCounter;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
 6f2:	be 01       	movw	r22, r28
 6f4:	6f 5e       	subi	r22, 0xEF	; 239
 6f6:	7f 4f       	sbci	r23, 0xFF	; 255
 6f8:	ce 01       	movw	r24, r28
 6fa:	49 96       	adiw	r24, 0x19	; 25
 6fc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <HOME_voidLocalGetUserAndPass>
			
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm=Local_u8TrailsCounter;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
 700:	f1 2c       	mov	r15, r1
			Local_u8FireAnAlarm,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm=Local_u8TrailsCounter;
				Local_u8WrongUserNameCounter=0;
 702:	00 e0       	ldi	r16, 0x00	; 0
				Local_u8WrongUserPassCounter=0;
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<16;Local_u8PagesCounter++)
 704:	10 e0       	ldi	r17, 0x00	; 0
 706:	52 c0       	rjmp	.+164    	; 0x7ac <HOME_voidCheckUserAndPass+0xea>
				{
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
 708:	a1 2e       	mov	r10, r17
 70a:	aa 0c       	add	r10, r10
 70c:	aa 0c       	add	r10, r10
 70e:	aa 0c       	add	r10, r10
 710:	aa 0c       	add	r10, r10
 712:	b1 2c       	mov	r11, r1
 714:	ae 01       	movw	r20, r28
 716:	47 5f       	subi	r20, 0xF7	; 247
 718:	5f 4f       	sbci	r21, 0xFF	; 255
 71a:	68 e0       	ldi	r22, 0x08	; 8
 71c:	70 e0       	ldi	r23, 0x00	; 0
 71e:	c5 01       	movw	r24, r10
 720:	0e 94 72 00 	call	0xe4	; 0xe4 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
 724:	ae 01       	movw	r20, r28
 726:	4f 5f       	subi	r20, 0xFF	; 255
 728:	5f 4f       	sbci	r21, 0xFF	; 255
 72a:	68 e0       	ldi	r22, 0x08	; 8
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	c5 01       	movw	r24, r10
 730:	08 96       	adiw	r24, 0x08	; 8
 732:	0e 94 72 00 	call	0xe4	; 0xe4 <EEPROM_voidSequentialRead>
				
				//loop on all local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<16;Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
 736:	40 e0       	ldi	r20, 0x00	; 0
					
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	14 c0       	rjmp	.+40     	; 0x764 <HOME_voidCheckUserAndPass+0xa2>
					{
						
						
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
 73c:	82 2f       	mov	r24, r18
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	e9 e1       	ldi	r30, 0x19	; 25
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	ec 0f       	add	r30, r28
 746:	fd 1f       	adc	r31, r29
 748:	e8 0f       	add	r30, r24
 74a:	f9 1f       	adc	r31, r25
 74c:	30 81       	ld	r19, Z
 74e:	e9 e0       	ldi	r30, 0x09	; 9
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	ec 0f       	add	r30, r28
 754:	fd 1f       	adc	r31, r29
 756:	e8 0f       	add	r30, r24
 758:	f9 1f       	adc	r31, r25
 75a:	80 81       	ld	r24, Z
 75c:	38 13       	cpse	r19, r24
 75e:	01 c0       	rjmp	.+2      	; 0x762 <HOME_voidCheckUserAndPass+0xa0>
						{
							Local_u8NameByteCheck++;
 760:	4f 5f       	subi	r20, 0xFF	; 255
					
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
 762:	2f 5f       	subi	r18, 0xFF	; 255
 764:	28 30       	cpi	r18, 0x08	; 8
 766:	50 f3       	brcs	.-44     	; 0x73c <HOME_voidCheckUserAndPass+0x7a>
						}
					}
					
				
					
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
 768:	48 30       	cpi	r20, 0x08	; 8
 76a:	f1 f4       	brne	.+60     	; 0x7a8 <HOME_voidCheckUserAndPass+0xe6>
 76c:	15 c0       	rjmp	.+42     	; 0x798 <HOME_voidCheckUserAndPass+0xd6>
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
 76e:	82 2f       	mov	r24, r18
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	e1 e1       	ldi	r30, 0x11	; 17
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	ec 0f       	add	r30, r28
 778:	fd 1f       	adc	r31, r29
 77a:	e8 0f       	add	r30, r24
 77c:	f9 1f       	adc	r31, r25
 77e:	30 81       	ld	r19, Z
 780:	e1 e0       	ldi	r30, 0x01	; 1
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	ec 0f       	add	r30, r28
 786:	fd 1f       	adc	r31, r29
 788:	e8 0f       	add	r30, r24
 78a:	f9 1f       	adc	r31, r25
 78c:	80 81       	ld	r24, Z
 78e:	38 13       	cpse	r19, r24
 790:	01 c0       	rjmp	.+2      	; 0x794 <HOME_voidCheckUserAndPass+0xd2>
							{
								Local_u8PassByteCheck++;
 792:	4f 5f       	subi	r20, 0xFF	; 255
				
					
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
 794:	2f 5f       	subi	r18, 0xFF	; 255
 796:	02 c0       	rjmp	.+4      	; 0x79c <HOME_voidCheckUserAndPass+0xda>
 798:	40 e0       	ldi	r20, 0x00	; 0
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	28 30       	cpi	r18, 0x08	; 8
 79e:	38 f3       	brcs	.-50     	; 0x76e <HOME_voidCheckUserAndPass+0xac>
							}
									
						}
						
						
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
 7a0:	48 30       	cpi	r20, 0x08	; 8
 7a2:	41 f0       	breq	.+16     	; 0x7b4 <HOME_voidCheckUserAndPass+0xf2>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
 7a4:	f3 94       	inc	r15
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <HOME_voidCheckUserAndPass+0xe8>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
 7a8:	0f 5f       	subi	r16, 0xFF	; 255
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<16;Local_u8PagesCounter++)
 7aa:	1f 5f       	subi	r17, 0xFF	; 255
 7ac:	10 31       	cpi	r17, 0x10	; 16
 7ae:	08 f4       	brcc	.+2      	; 0x7b2 <HOME_voidCheckUserAndPass+0xf0>
 7b0:	ab cf       	rjmp	.-170    	; 0x708 <HOME_voidCheckUserAndPass+0x46>
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <HOME_voidCheckUserAndPass+0xf6>
						
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							
							
							LocaL_u8RightEntery=1;
 7b4:	dd 24       	eor	r13, r13
 7b6:	d3 94       	inc	r13
					}
				
				}
			
				
				if(LocaL_u8RightEntery==1)
 7b8:	21 e0       	ldi	r18, 0x01	; 1
 7ba:	d2 12       	cpse	r13, r18
 7bc:	14 c0       	rjmp	.+40     	; 0x7e6 <HOME_voidCheckUserAndPass+0x124>
				{
					LCD_voidClear();
 7be:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS PERMITED");
 7ca:	87 eb       	ldi	r24, 0xB7	; 183
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 7d2:	8f ef       	ldi	r24, 0xFF	; 255
 7d4:	99 e6       	ldi	r25, 0x69	; 105
 7d6:	28 e1       	ldi	r18, 0x18	; 24
 7d8:	81 50       	subi	r24, 0x01	; 1
 7da:	90 40       	sbci	r25, 0x00	; 0
 7dc:	20 40       	sbci	r18, 0x00	; 0
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <HOME_voidCheckUserAndPass+0x116>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <HOME_voidCheckUserAndPass+0x120>
 7e2:	00 00       	nop
 7e4:	53 c0       	rjmp	.+166    	; 0x88c <__stack+0x2d>
					_delay_ms(500);
					break;
				}
				else if(Local_u8WrongUserNameCounter==16)
 7e6:	00 31       	cpi	r16, 0x10	; 16
 7e8:	21 f5       	brne	.+72     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
				{
					LCD_voidClear();
 7ea:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 7ee:	60 e0       	ldi	r22, 0x00	; 0
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
 7f6:	87 ec       	ldi	r24, 0xC7	; 199
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 7fe:	60 e0       	ldi	r22, 0x00	; 0
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong User Name");
 806:	85 ed       	ldi	r24, 0xD5	; 213
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	93 ed       	ldi	r25, 0xD3	; 211
 812:	20 e3       	ldi	r18, 0x30	; 48
 814:	81 50       	subi	r24, 0x01	; 1
 816:	90 40       	sbci	r25, 0x00	; 0
 818:	20 40       	sbci	r18, 0x00	; 0
 81a:	e1 f7       	brne	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 81c:	00 c0       	rjmp	.+0      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81e:	00 00       	nop
					_delay_ms(1000);
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Please Try Again");	
 828:	85 ee       	ldi	r24, 0xE5	; 229
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 830:	25 c0       	rjmp	.+74     	; 0x87c <__stack+0x1d>
				}
				else if(Local_u8WrongUserPassCounter!=0)
 832:	ff 20       	and	r15, r15
 834:	19 f1       	breq	.+70     	; 0x87c <__stack+0x1d>
				{
					LCD_voidClear();
 836:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
 842:	87 ec       	ldi	r24, 0xC7	; 199
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	82 e0       	ldi	r24, 0x02	; 2
 84e:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong Password");
 852:	86 ef       	ldi	r24, 0xF6	; 246
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	93 ed       	ldi	r25, 0xD3	; 211
 85e:	20 e3       	ldi	r18, 0x30	; 48
 860:	81 50       	subi	r24, 0x01	; 1
 862:	90 40       	sbci	r25, 0x00	; 0
 864:	20 40       	sbci	r18, 0x00	; 0
 866:	e1 f7       	brne	.-8      	; 0x860 <__stack+0x1>
 868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
 86a:	00 00       	nop
					_delay_ms(1000);
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
 86c:	60 e0       	ldi	r22, 0x00	; 0
 86e:	82 e0       	ldi	r24, 0x02	; 2
 870:	0e 94 c2 02 	call	0x584	; 0x584 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Please Try Again");
 874:	85 ee       	ldi	r24, 0xE5	; 229
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
			u8 local_u8EnteredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,
			Local_u8FireAnAlarm,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
 87c:	e3 94       	inc	r14
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	d1 2c       	mov	r13, r1
 882:	e1 2c       	mov	r14, r1
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	8e 15       	cp	r24, r14
 888:	08 f0       	brcs	.+2      	; 0x88c <__stack+0x2d>
 88a:	33 cf       	rjmp	.-410    	; 0x6f2 <HOME_voidCheckUserAndPass+0x30>
	}
	else
	{
		//error massage
	}
 88c:	a0 96       	adiw	r28, 0x20	; 32
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	f8 94       	cli
 892:	de bf       	out	0x3e, r29	; 62
 894:	0f be       	out	0x3f, r0	; 63
 896:	cd bf       	out	0x3d, r28	; 61
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	df 90       	pop	r13
 8a6:	bf 90       	pop	r11
 8a8:	af 90       	pop	r10
 8aa:	08 95       	ret

000008ac <main>:
void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass);
void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType );


int main(void)
{
 8ac:	cf 93       	push	r28
 8ae:	df 93       	push	r29
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	61 97       	sbiw	r28, 0x11	; 17
 8b6:	0f b6       	in	r0, 0x3f	; 63
 8b8:	f8 94       	cli
 8ba:	de bf       	out	0x3e, r29	; 62
 8bc:	0f be       	out	0x3f, r0	; 63
 8be:	cd bf       	out	0x3d, r28	; 61

	
	
    HOME_voidInit();
 8c0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <HOME_voidInit>
	
	
	
	LCD_voidDisplayString((u8*)"Welcome Home");
 8c4:	85 e0       	ldi	r24, 0x05	; 5
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	0e 94 9f 02 	call	0x53e	; 0x53e <LCD_voidDisplayString>
 8cc:	2f ef       	ldi	r18, 0xFF	; 255
 8ce:	89 e6       	ldi	r24, 0x69	; 105
 8d0:	98 e1       	ldi	r25, 0x18	; 24
 8d2:	21 50       	subi	r18, 0x01	; 1
 8d4:	80 40       	sbci	r24, 0x00	; 0
 8d6:	90 40       	sbci	r25, 0x00	; 0
 8d8:	e1 f7       	brne	.-8      	; 0x8d2 <main+0x26>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <main+0x30>
 8dc:	00 00       	nop
	_delay_ms(500);
	LCD_voidClear();
 8de:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
 8e2:	88 e0       	ldi	r24, 0x08	; 8
 8e4:	e0 e7       	ldi	r30, 0x70	; 112
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	de 01       	movw	r26, r28
 8ea:	11 96       	adiw	r26, 0x01	; 1
 8ec:	01 90       	ld	r0, Z+
 8ee:	0d 92       	st	X+, r0
 8f0:	8a 95       	dec	r24
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <main+0x40>
	u8 testuserpass[8]={"22222222"};
 8f4:	88 e0       	ldi	r24, 0x08	; 8
 8f6:	e9 e7       	ldi	r30, 0x79	; 121
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	de 01       	movw	r26, r28
 8fc:	19 96       	adiw	r26, 0x09	; 9
 8fe:	01 90       	ld	r0, Z+
 900:	0d 92       	st	X+, r0
 902:	8a 95       	dec	r24
 904:	e1 f7       	brne	.-8      	; 0x8fe <main+0x52>
	u8 pCounter;	
	
	EEPROM_voidWritePage(16,&testusername[0]);
 906:	be 01       	movw	r22, r28
 908:	6f 5f       	subi	r22, 0xFF	; 255
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	80 e1       	ldi	r24, 0x10	; 16
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	0e 94 47 00 	call	0x8e	; 0x8e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
 914:	be 01       	movw	r22, r28
 916:	67 5f       	subi	r22, 0xF7	; 247
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	88 e1       	ldi	r24, 0x18	; 24
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 47 00 	call	0x8e	; 0x8e <EEPROM_voidWritePage>
	
	HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&pCounter);
 922:	be 01       	movw	r22, r28
 924:	6f 5e       	subi	r22, 0xEF	; 239
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <HOME_voidCheckUserAndPass>
 92e:	ff cf       	rjmp	.-2      	; 0x92e <main+0x82>

00000930 <DIO_voidSetPinDirection>:
		break;
		case DIO_PORTC:
		TOG_BIT(PORTC_REG,copy_u8PinId);
		break;
		case DIO_PORTD:
		TOG_BIT(PORTD_REG,copy_u8PinId);
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	19 f1       	breq	.+70     	; 0x97a <DIO_voidSetPinDirection+0x4a>
 934:	30 f0       	brcs	.+12     	; 0x942 <DIO_voidSetPinDirection+0x12>
 936:	82 30       	cpi	r24, 0x02	; 2
 938:	e1 f1       	breq	.+120    	; 0x9b2 <DIO_voidSetPinDirection+0x82>
 93a:	83 30       	cpi	r24, 0x03	; 3
 93c:	09 f4       	brne	.+2      	; 0x940 <DIO_voidSetPinDirection+0x10>
 93e:	54 c0       	rjmp	.+168    	; 0x9e8 <DIO_voidSetPinDirection+0xb8>
 940:	08 95       	ret
 942:	44 23       	and	r20, r20
 944:	71 f0       	breq	.+28     	; 0x962 <DIO_voidSetPinDirection+0x32>
 946:	41 30       	cpi	r20, 0x01	; 1
 948:	09 f0       	breq	.+2      	; 0x94c <DIO_voidSetPinDirection+0x1c>
 94a:	68 c0       	rjmp	.+208    	; 0xa1c <DIO_voidSetPinDirection+0xec>
 94c:	2a b3       	in	r18, 0x1a	; 26
 94e:	81 e0       	ldi	r24, 0x01	; 1
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <DIO_voidSetPinDirection+0x28>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	6a 95       	dec	r22
 95a:	e2 f7       	brpl	.-8      	; 0x954 <DIO_voidSetPinDirection+0x24>
 95c:	82 2b       	or	r24, r18
 95e:	8a bb       	out	0x1a, r24	; 26
 960:	08 95       	ret
 962:	2a b3       	in	r18, 0x1a	; 26
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	02 c0       	rjmp	.+4      	; 0x96e <DIO_voidSetPinDirection+0x3e>
 96a:	88 0f       	add	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	6a 95       	dec	r22
 970:	e2 f7       	brpl	.-8      	; 0x96a <DIO_voidSetPinDirection+0x3a>
 972:	80 95       	com	r24
 974:	82 23       	and	r24, r18
 976:	8a bb       	out	0x1a, r24	; 26
 978:	08 95       	ret
 97a:	44 23       	and	r20, r20
 97c:	71 f0       	breq	.+28     	; 0x99a <DIO_voidSetPinDirection+0x6a>
 97e:	41 30       	cpi	r20, 0x01	; 1
 980:	09 f0       	breq	.+2      	; 0x984 <DIO_voidSetPinDirection+0x54>
 982:	4c c0       	rjmp	.+152    	; 0xa1c <DIO_voidSetPinDirection+0xec>
 984:	27 b3       	in	r18, 0x17	; 23
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_voidSetPinDirection+0x60>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	6a 95       	dec	r22
 992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_voidSetPinDirection+0x5c>
 994:	82 2b       	or	r24, r18
 996:	87 bb       	out	0x17, r24	; 23
 998:	08 95       	ret
 99a:	27 b3       	in	r18, 0x17	; 23
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <DIO_voidSetPinDirection+0x76>
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	6a 95       	dec	r22
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <DIO_voidSetPinDirection+0x72>
 9aa:	80 95       	com	r24
 9ac:	82 23       	and	r24, r18
 9ae:	87 bb       	out	0x17, r24	; 23
 9b0:	08 95       	ret
 9b2:	44 23       	and	r20, r20
 9b4:	69 f0       	breq	.+26     	; 0x9d0 <DIO_voidSetPinDirection+0xa0>
 9b6:	41 30       	cpi	r20, 0x01	; 1
 9b8:	89 f5       	brne	.+98     	; 0xa1c <DIO_voidSetPinDirection+0xec>
 9ba:	24 b3       	in	r18, 0x14	; 20
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_voidSetPinDirection+0x96>
 9c2:	88 0f       	add	r24, r24
 9c4:	99 1f       	adc	r25, r25
 9c6:	6a 95       	dec	r22
 9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_voidSetPinDirection+0x92>
 9ca:	82 2b       	or	r24, r18
 9cc:	84 bb       	out	0x14, r24	; 20
 9ce:	08 95       	ret
 9d0:	24 b3       	in	r18, 0x14	; 20
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <DIO_voidSetPinDirection+0xac>
 9d8:	88 0f       	add	r24, r24
 9da:	99 1f       	adc	r25, r25
 9dc:	6a 95       	dec	r22
 9de:	e2 f7       	brpl	.-8      	; 0x9d8 <DIO_voidSetPinDirection+0xa8>
 9e0:	80 95       	com	r24
 9e2:	82 23       	and	r24, r18
 9e4:	84 bb       	out	0x14, r24	; 20
 9e6:	08 95       	ret
 9e8:	44 23       	and	r20, r20
 9ea:	69 f0       	breq	.+26     	; 0xa06 <DIO_voidSetPinDirection+0xd6>
 9ec:	41 30       	cpi	r20, 0x01	; 1
 9ee:	b1 f4       	brne	.+44     	; 0xa1c <DIO_voidSetPinDirection+0xec>
 9f0:	21 b3       	in	r18, 0x11	; 17
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_voidSetPinDirection+0xcc>
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	6a 95       	dec	r22
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_voidSetPinDirection+0xc8>
 a00:	82 2b       	or	r24, r18
 a02:	81 bb       	out	0x11, r24	; 17
 a04:	08 95       	ret
 a06:	21 b3       	in	r18, 0x11	; 17
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_voidSetPinDirection+0xe2>
 a0e:	88 0f       	add	r24, r24
 a10:	99 1f       	adc	r25, r25
 a12:	6a 95       	dec	r22
 a14:	e2 f7       	brpl	.-8      	; 0xa0e <DIO_voidSetPinDirection+0xde>
 a16:	80 95       	com	r24
 a18:	82 23       	and	r24, r18
 a1a:	81 bb       	out	0x11, r24	; 17
 a1c:	08 95       	ret

00000a1e <DIO_voidSetPinValue>:
 a1e:	84 30       	cpi	r24, 0x04	; 4
 a20:	08 f0       	brcs	.+2      	; 0xa24 <DIO_voidSetPinValue+0x6>
 a22:	7c c0       	rjmp	.+248    	; 0xb1c <DIO_voidSetPinValue+0xfe>
 a24:	68 30       	cpi	r22, 0x08	; 8
 a26:	08 f0       	brcs	.+2      	; 0xa2a <DIO_voidSetPinValue+0xc>
 a28:	79 c0       	rjmp	.+242    	; 0xb1c <DIO_voidSetPinValue+0xfe>
 a2a:	43 30       	cpi	r20, 0x03	; 3
 a2c:	08 f0       	brcs	.+2      	; 0xa30 <DIO_voidSetPinValue+0x12>
 a2e:	76 c0       	rjmp	.+236    	; 0xb1c <DIO_voidSetPinValue+0xfe>
 a30:	81 30       	cpi	r24, 0x01	; 1
 a32:	19 f1       	breq	.+70     	; 0xa7a <DIO_voidSetPinValue+0x5c>
 a34:	30 f0       	brcs	.+12     	; 0xa42 <DIO_voidSetPinValue+0x24>
 a36:	82 30       	cpi	r24, 0x02	; 2
 a38:	e1 f1       	breq	.+120    	; 0xab2 <DIO_voidSetPinValue+0x94>
 a3a:	83 30       	cpi	r24, 0x03	; 3
 a3c:	09 f4       	brne	.+2      	; 0xa40 <DIO_voidSetPinValue+0x22>
 a3e:	54 c0       	rjmp	.+168    	; 0xae8 <DIO_voidSetPinValue+0xca>
 a40:	08 95       	ret
 a42:	44 23       	and	r20, r20
 a44:	71 f0       	breq	.+28     	; 0xa62 <DIO_voidSetPinValue+0x44>
 a46:	41 30       	cpi	r20, 0x01	; 1
 a48:	09 f0       	breq	.+2      	; 0xa4c <DIO_voidSetPinValue+0x2e>
 a4a:	68 c0       	rjmp	.+208    	; 0xb1c <DIO_voidSetPinValue+0xfe>
 a4c:	2b b3       	in	r18, 0x1b	; 27
 a4e:	81 e0       	ldi	r24, 0x01	; 1
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <DIO_voidSetPinValue+0x3a>
 a54:	88 0f       	add	r24, r24
 a56:	99 1f       	adc	r25, r25
 a58:	6a 95       	dec	r22
 a5a:	e2 f7       	brpl	.-8      	; 0xa54 <DIO_voidSetPinValue+0x36>
 a5c:	82 2b       	or	r24, r18
 a5e:	8b bb       	out	0x1b, r24	; 27
 a60:	08 95       	ret
 a62:	2b b3       	in	r18, 0x1b	; 27
 a64:	81 e0       	ldi	r24, 0x01	; 1
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <DIO_voidSetPinValue+0x50>
 a6a:	88 0f       	add	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	6a 95       	dec	r22
 a70:	e2 f7       	brpl	.-8      	; 0xa6a <DIO_voidSetPinValue+0x4c>
 a72:	80 95       	com	r24
 a74:	82 23       	and	r24, r18
 a76:	8b bb       	out	0x1b, r24	; 27
 a78:	08 95       	ret
 a7a:	44 23       	and	r20, r20
 a7c:	71 f0       	breq	.+28     	; 0xa9a <DIO_voidSetPinValue+0x7c>
 a7e:	41 30       	cpi	r20, 0x01	; 1
 a80:	09 f0       	breq	.+2      	; 0xa84 <DIO_voidSetPinValue+0x66>
 a82:	4c c0       	rjmp	.+152    	; 0xb1c <DIO_voidSetPinValue+0xfe>
 a84:	28 b3       	in	r18, 0x18	; 24
 a86:	81 e0       	ldi	r24, 0x01	; 1
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_voidSetPinValue+0x72>
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	6a 95       	dec	r22
 a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_voidSetPinValue+0x6e>
 a94:	82 2b       	or	r24, r18
 a96:	88 bb       	out	0x18, r24	; 24
 a98:	08 95       	ret
 a9a:	28 b3       	in	r18, 0x18	; 24
 a9c:	81 e0       	ldi	r24, 0x01	; 1
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <DIO_voidSetPinValue+0x88>
 aa2:	88 0f       	add	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	6a 95       	dec	r22
 aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <DIO_voidSetPinValue+0x84>
 aaa:	80 95       	com	r24
 aac:	82 23       	and	r24, r18
 aae:	88 bb       	out	0x18, r24	; 24
 ab0:	08 95       	ret
 ab2:	44 23       	and	r20, r20
 ab4:	69 f0       	breq	.+26     	; 0xad0 <DIO_voidSetPinValue+0xb2>
 ab6:	41 30       	cpi	r20, 0x01	; 1
 ab8:	89 f5       	brne	.+98     	; 0xb1c <DIO_voidSetPinValue+0xfe>
 aba:	25 b3       	in	r18, 0x15	; 21
 abc:	81 e0       	ldi	r24, 0x01	; 1
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_voidSetPinValue+0xa8>
 ac2:	88 0f       	add	r24, r24
 ac4:	99 1f       	adc	r25, r25
 ac6:	6a 95       	dec	r22
 ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_voidSetPinValue+0xa4>
 aca:	82 2b       	or	r24, r18
 acc:	85 bb       	out	0x15, r24	; 21
 ace:	08 95       	ret
 ad0:	25 b3       	in	r18, 0x15	; 21
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_voidSetPinValue+0xbe>
 ad8:	88 0f       	add	r24, r24
 ada:	99 1f       	adc	r25, r25
 adc:	6a 95       	dec	r22
 ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_voidSetPinValue+0xba>
 ae0:	80 95       	com	r24
 ae2:	82 23       	and	r24, r18
 ae4:	85 bb       	out	0x15, r24	; 21
 ae6:	08 95       	ret
 ae8:	44 23       	and	r20, r20
 aea:	69 f0       	breq	.+26     	; 0xb06 <DIO_voidSetPinValue+0xe8>
 aec:	41 30       	cpi	r20, 0x01	; 1
 aee:	b1 f4       	brne	.+44     	; 0xb1c <DIO_voidSetPinValue+0xfe>
 af0:	22 b3       	in	r18, 0x12	; 18
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_voidSetPinValue+0xde>
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	6a 95       	dec	r22
 afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_voidSetPinValue+0xda>
 b00:	82 2b       	or	r24, r18
 b02:	82 bb       	out	0x12, r24	; 18
 b04:	08 95       	ret
 b06:	22 b3       	in	r18, 0x12	; 18
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <DIO_voidSetPinValue+0xf4>
 b0e:	88 0f       	add	r24, r24
 b10:	99 1f       	adc	r25, r25
 b12:	6a 95       	dec	r22
 b14:	e2 f7       	brpl	.-8      	; 0xb0e <DIO_voidSetPinValue+0xf0>
 b16:	80 95       	com	r24
 b18:	82 23       	and	r24, r18
 b1a:	82 bb       	out	0x12, r24	; 18
 b1c:	08 95       	ret

00000b1e <DIO_voidGetPinValue>:
 b1e:	84 30       	cpi	r24, 0x04	; 4
 b20:	c0 f5       	brcc	.+112    	; 0xb92 <DIO_voidGetPinValue+0x74>
 b22:	68 30       	cpi	r22, 0x08	; 8
 b24:	b0 f5       	brcc	.+108    	; 0xb92 <DIO_voidGetPinValue+0x74>
 b26:	41 15       	cp	r20, r1
 b28:	51 05       	cpc	r21, r1
 b2a:	99 f1       	breq	.+102    	; 0xb92 <DIO_voidGetPinValue+0x74>
 b2c:	81 30       	cpi	r24, 0x01	; 1
 b2e:	89 f0       	breq	.+34     	; 0xb52 <DIO_voidGetPinValue+0x34>
 b30:	28 f0       	brcs	.+10     	; 0xb3c <DIO_voidGetPinValue+0x1e>
 b32:	82 30       	cpi	r24, 0x02	; 2
 b34:	c9 f0       	breq	.+50     	; 0xb68 <DIO_voidGetPinValue+0x4a>
 b36:	83 30       	cpi	r24, 0x03	; 3
 b38:	11 f1       	breq	.+68     	; 0xb7e <DIO_voidGetPinValue+0x60>
 b3a:	08 95       	ret
 b3c:	89 b3       	in	r24, 0x19	; 25
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_voidGetPinValue+0x28>
 b42:	95 95       	asr	r25
 b44:	87 95       	ror	r24
 b46:	6a 95       	dec	r22
 b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_voidGetPinValue+0x24>
 b4a:	81 70       	andi	r24, 0x01	; 1
 b4c:	fa 01       	movw	r30, r20
 b4e:	80 83       	st	Z, r24
 b50:	08 95       	ret
 b52:	86 b3       	in	r24, 0x16	; 22
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_voidGetPinValue+0x3e>
 b58:	95 95       	asr	r25
 b5a:	87 95       	ror	r24
 b5c:	6a 95       	dec	r22
 b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_voidGetPinValue+0x3a>
 b60:	81 70       	andi	r24, 0x01	; 1
 b62:	fa 01       	movw	r30, r20
 b64:	80 83       	st	Z, r24
 b66:	08 95       	ret
 b68:	83 b3       	in	r24, 0x13	; 19
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <DIO_voidGetPinValue+0x54>
 b6e:	95 95       	asr	r25
 b70:	87 95       	ror	r24
 b72:	6a 95       	dec	r22
 b74:	e2 f7       	brpl	.-8      	; 0xb6e <DIO_voidGetPinValue+0x50>
 b76:	81 70       	andi	r24, 0x01	; 1
 b78:	fa 01       	movw	r30, r20
 b7a:	80 83       	st	Z, r24
 b7c:	08 95       	ret
 b7e:	80 b3       	in	r24, 0x10	; 16
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <DIO_voidGetPinValue+0x6a>
 b84:	95 95       	asr	r25
 b86:	87 95       	ror	r24
 b88:	6a 95       	dec	r22
 b8a:	e2 f7       	brpl	.-8      	; 0xb84 <DIO_voidGetPinValue+0x66>
 b8c:	81 70       	andi	r24, 0x01	; 1
 b8e:	fa 01       	movw	r30, r20
 b90:	80 83       	st	Z, r24
 b92:	08 95       	ret

00000b94 <DIO_voidActivePinPullUpResistance>:
		//do nothing
	}
}
void DIO_voidActivePinPullUpResistance (u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
 b94:	84 30       	cpi	r24, 0x04	; 4
 b96:	a8 f5       	brcc	.+106    	; 0xc02 <DIO_voidActivePinPullUpResistance+0x6e>
 b98:	68 30       	cpi	r22, 0x08	; 8
 b9a:	98 f5       	brcc	.+102    	; 0xc02 <DIO_voidActivePinPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
 b9c:	81 30       	cpi	r24, 0x01	; 1
 b9e:	89 f0       	breq	.+34     	; 0xbc2 <DIO_voidActivePinPullUpResistance+0x2e>
 ba0:	28 f0       	brcs	.+10     	; 0xbac <DIO_voidActivePinPullUpResistance+0x18>
 ba2:	82 30       	cpi	r24, 0x02	; 2
 ba4:	c9 f0       	breq	.+50     	; 0xbd8 <DIO_voidActivePinPullUpResistance+0x44>
 ba6:	83 30       	cpi	r24, 0x03	; 3
 ba8:	11 f1       	breq	.+68     	; 0xbee <DIO_voidActivePinPullUpResistance+0x5a>
 baa:	08 95       	ret
	{
		case DIO_PORTA:
		SET_BIT(PORTA_REG,copy_u8PinId);
 bac:	2b b3       	in	r18, 0x1b	; 27
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <DIO_voidActivePinPullUpResistance+0x24>
 bb4:	88 0f       	add	r24, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	6a 95       	dec	r22
 bba:	e2 f7       	brpl	.-8      	; 0xbb4 <DIO_voidActivePinPullUpResistance+0x20>
 bbc:	82 2b       	or	r24, r18
 bbe:	8b bb       	out	0x1b, r24	; 27
		break;
 bc0:	08 95       	ret
		case DIO_PORTB:
		SET_BIT(PORTB_REG,copy_u8PinId);
 bc2:	28 b3       	in	r18, 0x18	; 24
 bc4:	81 e0       	ldi	r24, 0x01	; 1
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_voidActivePinPullUpResistance+0x3a>
 bca:	88 0f       	add	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	6a 95       	dec	r22
 bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_voidActivePinPullUpResistance+0x36>
 bd2:	82 2b       	or	r24, r18
 bd4:	88 bb       	out	0x18, r24	; 24
		break;
 bd6:	08 95       	ret
		case DIO_PORTC:
		SET_BIT(PORTC_REG,copy_u8PinId);
 bd8:	25 b3       	in	r18, 0x15	; 21
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_voidActivePinPullUpResistance+0x50>
 be0:	88 0f       	add	r24, r24
 be2:	99 1f       	adc	r25, r25
 be4:	6a 95       	dec	r22
 be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_voidActivePinPullUpResistance+0x4c>
 be8:	82 2b       	or	r24, r18
 bea:	85 bb       	out	0x15, r24	; 21
		break;
 bec:	08 95       	ret
		case DIO_PORTD:
		SET_BIT(PORTD_REG,copy_u8PinId);
 bee:	22 b3       	in	r18, 0x12	; 18
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_voidActivePinPullUpResistance+0x66>
 bf6:	88 0f       	add	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	6a 95       	dec	r22
 bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_voidActivePinPullUpResistance+0x62>
 bfe:	82 2b       	or	r24, r18
 c00:	82 bb       	out	0x12, r24	; 18
 c02:	08 95       	ret

00000c04 <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
 c04:	8c e0       	ldi	r24, 0x0C	; 12
 c06:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
 c08:	81 b1       	in	r24, 0x01	; 1
 c0a:	8d 7f       	andi	r24, 0xFD	; 253
 c0c:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
 c0e:	81 b1       	in	r24, 0x01	; 1
 c10:	8e 7f       	andi	r24, 0xFE	; 254
 c12:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
 c14:	86 b7       	in	r24, 0x36	; 54
 c16:	84 60       	ori	r24, 0x04	; 4
 c18:	86 bf       	out	0x36, r24	; 54
 c1a:	08 95       	ret

00000c1c <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
 c1c:	86 b7       	in	r24, 0x36	; 54
 c1e:	80 62       	ori	r24, 0x20	; 32
 c20:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
 c22:	86 b7       	in	r24, 0x36	; 54
 c24:	80 68       	ori	r24, 0x80	; 128
 c26:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
 c28:	06 b6       	in	r0, 0x36	; 54
 c2a:	07 fe       	sbrs	r0, 7
 c2c:	fd cf       	rjmp	.-6      	; 0xc28 <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
 c2e:	81 b1       	in	r24, 0x01	; 1
 c30:	88 7f       	andi	r24, 0xF8	; 248
 c32:	88 30       	cpi	r24, 0x08	; 8
 c34:	e1 f7       	brne	.-8      	; 0xc2e <TWI_voidSendStartCondition+0x12>
}
 c36:	08 95       	ret

00000c38 <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
 c38:	86 b7       	in	r24, 0x36	; 54
 c3a:	80 62       	ori	r24, 0x20	; 32
 c3c:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
 c3e:	86 b7       	in	r24, 0x36	; 54
 c40:	80 68       	ori	r24, 0x80	; 128
 c42:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
 c44:	06 b6       	in	r0, 0x36	; 54
 c46:	07 fe       	sbrs	r0, 7
 c48:	fd cf       	rjmp	.-6      	; 0xc44 <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
 c4a:	81 b1       	in	r24, 0x01	; 1
 c4c:	88 7f       	andi	r24, 0xF8	; 248
 c4e:	80 31       	cpi	r24, 0x10	; 16
 c50:	e1 f7       	brne	.-8      	; 0xc4a <TWI_voidSendRepeatedStartCondition+0x12>
}
 c52:	08 95       	ret

00000c54 <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
 c54:	86 b7       	in	r24, 0x36	; 54
 c56:	80 61       	ori	r24, 0x10	; 16
 c58:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
 c5a:	86 b7       	in	r24, 0x36	; 54
 c5c:	80 68       	ori	r24, 0x80	; 128
 c5e:	86 bf       	out	0x36, r24	; 54
 c60:	08 95       	ret

00000c62 <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
 c62:	88 23       	and	r24, r24
 c64:	94 f0       	brlt	.+36     	; 0xc8a <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
 c66:	88 0f       	add	r24, r24
 c68:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
 c6a:	83 b1       	in	r24, 0x03	; 3
 c6c:	8e 7f       	andi	r24, 0xFE	; 254
 c6e:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
 c70:	86 b7       	in	r24, 0x36	; 54
 c72:	8f 7d       	andi	r24, 0xDF	; 223
 c74:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 c76:	86 b7       	in	r24, 0x36	; 54
 c78:	80 68       	ori	r24, 0x80	; 128
 c7a:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 c7c:	06 b6       	in	r0, 0x36	; 54
 c7e:	07 fe       	sbrs	r0, 7
 c80:	fd cf       	rjmp	.-6      	; 0xc7c <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
 c82:	81 b1       	in	r24, 0x01	; 1
 c84:	88 7f       	andi	r24, 0xF8	; 248
 c86:	88 31       	cpi	r24, 0x18	; 24
 c88:	e1 f7       	brne	.-8      	; 0xc82 <TWI_voidSendSlaveAddWithWrite+0x20>
 c8a:	08 95       	ret

00000c8c <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
 c8c:	88 23       	and	r24, r24
 c8e:	94 f0       	brlt	.+36     	; 0xcb4 <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
 c90:	88 0f       	add	r24, r24
 c92:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
 c94:	83 b1       	in	r24, 0x03	; 3
 c96:	81 60       	ori	r24, 0x01	; 1
 c98:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
 c9a:	86 b7       	in	r24, 0x36	; 54
 c9c:	8f 7d       	andi	r24, 0xDF	; 223
 c9e:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 ca0:	86 b7       	in	r24, 0x36	; 54
 ca2:	80 68       	ori	r24, 0x80	; 128
 ca4:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 ca6:	06 b6       	in	r0, 0x36	; 54
 ca8:	07 fe       	sbrs	r0, 7
 caa:	fd cf       	rjmp	.-6      	; 0xca6 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
 cac:	81 b1       	in	r24, 0x01	; 1
 cae:	88 7f       	andi	r24, 0xF8	; 248
 cb0:	80 34       	cpi	r24, 0x40	; 64
 cb2:	e1 f7       	brne	.-8      	; 0xcac <TWI_voidSendSlaveAddWithRead+0x20>
 cb4:	08 95       	ret

00000cb6 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
 cb6:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
 cb8:	86 b7       	in	r24, 0x36	; 54
 cba:	80 68       	ori	r24, 0x80	; 128
 cbc:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
 cbe:	06 b6       	in	r0, 0x36	; 54
 cc0:	07 fe       	sbrs	r0, 7
 cc2:	fd cf       	rjmp	.-6      	; 0xcbe <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
 cc4:	81 b1       	in	r24, 0x01	; 1
 cc6:	88 7f       	andi	r24, 0xF8	; 248
 cc8:	88 32       	cpi	r24, 0x28	; 40
 cca:	e1 f7       	brne	.-8      	; 0xcc4 <TWI_voidTransmitMasterDataByte+0xe>
}
 ccc:	08 95       	ret

00000cce <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
 cce:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
 cd0:	89 2b       	or	r24, r25
 cd2:	91 f0       	breq	.+36     	; 0xcf8 <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
 cd4:	96 b7       	in	r25, 0x36	; 54
 cd6:	90 64       	ori	r25, 0x40	; 64
 cd8:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 cda:	96 b7       	in	r25, 0x36	; 54
 cdc:	90 68       	ori	r25, 0x80	; 128
 cde:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 ce0:	06 b6       	in	r0, 0x36	; 54
 ce2:	07 fe       	sbrs	r0, 7
 ce4:	fd cf       	rjmp	.-6      	; 0xce0 <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
 ce6:	91 b1       	in	r25, 0x01	; 1
 ce8:	98 7f       	andi	r25, 0xF8	; 248
 cea:	90 35       	cpi	r25, 0x50	; 80
 cec:	e1 f7       	brne	.-8      	; 0xce6 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
 cee:	83 b1       	in	r24, 0x03	; 3
 cf0:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
 cf2:	86 b7       	in	r24, 0x36	; 54
 cf4:	8f 7b       	andi	r24, 0xBF	; 191
 cf6:	86 bf       	out	0x36, r24	; 54
 cf8:	08 95       	ret

00000cfa <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
 cfa:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
 cfc:	89 2b       	or	r24, r25
 cfe:	61 f0       	breq	.+24     	; 0xd18 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
 d00:	96 b7       	in	r25, 0x36	; 54
 d02:	90 68       	ori	r25, 0x80	; 128
 d04:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
 d06:	06 b6       	in	r0, 0x36	; 54
 d08:	07 fe       	sbrs	r0, 7
 d0a:	fd cf       	rjmp	.-6      	; 0xd06 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
 d0c:	91 b1       	in	r25, 0x01	; 1
 d0e:	98 7f       	andi	r25, 0xF8	; 248
 d10:	98 35       	cpi	r25, 0x58	; 88
 d12:	e1 f7       	brne	.-8      	; 0xd0c <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
 d14:	83 b1       	in	r24, 0x03	; 3
 d16:	80 83       	st	Z, r24
 d18:	08 95       	ret

00000d1a <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
 d1a:	8b b1       	in	r24, 0x0b	; 11
 d1c:	8d 7f       	andi	r24, 0xFD	; 253
 d1e:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
 d20:	87 e6       	ldi	r24, 0x67	; 103
 d22:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
 d24:	8a b1       	in	r24, 0x0a	; 10
 d26:	8b 7f       	andi	r24, 0xFB	; 251
 d28:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
 d2a:	86 e8       	ldi	r24, 0x86	; 134
 d2c:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
 d2e:	8a b1       	in	r24, 0x0a	; 10
 d30:	80 61       	ori	r24, 0x10	; 16
 d32:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
 d34:	8a b1       	in	r24, 0x0a	; 10
 d36:	88 60       	ori	r24, 0x08	; 8
 d38:	8a b9       	out	0x0a, r24	; 10
 d3a:	08 95       	ret

00000d3c <_exit>:
 d3c:	f8 94       	cli

00000d3e <__stop_program>:
 d3e:	ff cf       	rjmp	.-2      	; 0xd3e <__stop_program>
