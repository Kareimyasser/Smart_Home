
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  000016e4  00001778  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800260  00800260  00001978  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f1c  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c2  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002216  00000000  00000000  00006d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000079c  00000000  00000000  00008f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001021  00000000  00000000  000096cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fa6  00000000  00000000  0000a6ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000c693  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_10>
      2c:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 36       	cpi	r26, 0x67	; 103
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 08 	call	0x1056	; 0x1056 <main>
      8a:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_DisplayTemp>:
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    _delay_ms(1000);
}

void LCD_DisplayTemp()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
    u8 local_tempValue=0;
      9c:	19 82       	std	Y+1, r1	; 0x01

    LCD_voidClear();
      9e:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>

    while (local_KPDIdleValue == KPD_Not_Pressed)
      a2:	19 c0       	rjmp	.+50     	; 0xd6 <LCD_DisplayTemp+0x44>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
      a4:	81 e6       	ldi	r24, 0x61	; 97
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>

        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_tempValue);
      ac:	be 01       	movw	r22, r28
      ae:	6f 5f       	subi	r22, 0xFF	; 255
      b0:	7f 4f       	sbci	r23, 0xFF	; 255
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 76 08 	call	0x10ec	; 0x10ec <ADC_voidGetDigitalValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b8:	2f ef       	ldi	r18, 0xFF	; 255
      ba:	81 ee       	ldi	r24, 0xE1	; 225
      bc:	94 e0       	ldi	r25, 0x04	; 4
      be:	21 50       	subi	r18, 0x01	; 1
      c0:	80 40       	sbci	r24, 0x00	; 0
      c2:	90 40       	sbci	r25, 0x00	; 0
      c4:	e1 f7       	brne	.-8      	; 0xbe <LCD_DisplayTemp+0x2c>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_DisplayTemp+0x36>
      c8:	00 00       	nop
        _delay_ms(100);
        LCD_voidDisplayNumber(local_tempValue);
      ca:	69 81       	ldd	r22, Y+1	; 0x01
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_voidDisplayNumber>
{
    u8 local_tempValue=0;

    LCD_voidClear();

    while (local_KPDIdleValue == KPD_Not_Pressed)
      d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
      da:	8f 3f       	cpi	r24, 0xFF	; 255
      dc:	19 f3       	breq	.-58     	; 0xa4 <LCD_DisplayTemp+0x12>
        // LCD_voidSendCommand(Write_SecondLine);
        // LCD_voidDisplayStringDelay((u8 *)"0-go to home");
        
        
    }
    if (local_KPDIdleValue == '0')
      de:	80 33       	cpi	r24, 0x30	; 48
      e0:	11 f4       	brne	.+4      	; 0xe6 <LCD_DisplayTemp+0x54>
    {
        LCD_voidClear();
      e2:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
    }
    TMR0clear_flag();
      e6:	0e 94 35 0a 	call	0x146a	; 0x146a <TMR0clear_flag>
    LCD_voidClear();
      ea:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>

}
      ee:	0f 90       	pop	r0
      f0:	df 91       	pop	r29
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <HOME_voidInit>:



void HOME_voidInit(void)
{
	EEPROM_voidInit();
      f6:	0e 94 e5 04 	call	0x9ca	; 0x9ca <EEPROM_voidInit>
	
    // initialize the LCD
    LCD_voidInit();
      fa:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_voidInit>
	
	// initialize the KPD
    KPD_voidInit();
      fe:	0e 94 53 05 	call	0xaa6	; 0xaa6 <KPD_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
     102:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
     106:	41 e0       	ldi	r20, 0x01	; 1
     108:	61 e0       	ldi	r22, 0x01	; 1
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	83 e0       	ldi	r24, 0x03	; 3
     116:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
     11a:	0e 94 00 0a 	call	0x1400	; 0x1400 <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
     11e:	0e 94 04 0a 	call	0x1408	; 0x1408 <TMR0_voidInit>
    // initialize the LEDs(1-5)
    LED_voidInit(DIO_PORTD, DIO_PIN3);
     122:	63 e0       	ldi	r22, 0x03	; 3
     124:	83 e0       	ldi	r24, 0x03	; 3
     126:	0e 94 0d 08 	call	0x101a	; 0x101a <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN1);
     12a:	61 e0       	ldi	r22, 0x01	; 1
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 0d 08 	call	0x101a	; 0x101a <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     132:	62 e0       	ldi	r22, 0x02	; 2
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	0e 94 0d 08 	call	0x101a	; 0x101a <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     13a:	63 e0       	ldi	r22, 0x03	; 3
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 0d 08 	call	0x101a	; 0x101a <LED_voidInit>
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	0e 94 0d 08 	call	0x101a	; 0x101a <LED_voidInit>
     14a:	08 95       	ret

0000014c <HOME_voidLocalGetUserAndPass>:
	//check alarm 
}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     15a:	00 97       	sbiw	r24, 0x00	; 0
     15c:	09 f4       	brne	.+2      	; 0x160 <HOME_voidLocalGetUserAndPass+0x14>
     15e:	5f c0       	rjmp	.+190    	; 0x21e <HOME_voidLocalGetUserAndPass+0xd2>
     160:	61 15       	cp	r22, r1
     162:	71 05       	cpc	r23, r1
     164:	09 f4       	brne	.+2      	; 0x168 <HOME_voidLocalGetUserAndPass+0x1c>
     166:	5b c0       	rjmp	.+182    	; 0x21e <HOME_voidLocalGetUserAndPass+0xd2>
     168:	7b 01       	movw	r14, r22
     16a:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     16c:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     178:	8c e8       	ldi	r24, 0x8C	; 140
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     188:	8e e9       	ldi	r24, 0x9E	; 158
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
     190:	2f ef       	ldi	r18, 0xFF	; 255
     192:	83 ed       	ldi	r24, 0xD3	; 211
     194:	90 e3       	ldi	r25, 0x30	; 48
     196:	21 50       	subi	r18, 0x01	; 1
     198:	80 40       	sbci	r24, 0x00	; 0
     19a:	90 40       	sbci	r25, 0x00	; 0
     19c:	e1 f7       	brne	.-8      	; 0x196 <HOME_voidLocalGetUserAndPass+0x4a>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <HOME_voidLocalGetUserAndPass+0x54>
     1a0:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     1a2:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1a6:	60 e0       	ldi	r22, 0x00	; 0
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     1ae:	8c ea       	ldi	r24, 0xAC	; 172
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     1b6:	10 e0       	ldi	r17, 0x00	; 0
     1b8:	11 c0       	rjmp	.+34     	; 0x1dc <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1ba:	e6 01       	movw	r28, r12
     1bc:	c1 0f       	add	r28, r17
     1be:	d1 1d       	adc	r29, r1
     1c0:	ce 01       	movw	r24, r28
     1c2:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     1c6:	98 81       	ld	r25, Y
     1c8:	9f 3f       	cpi	r25, 0xFF	; 255
     1ca:	b9 f3       	breq	.-18     	; 0x1ba <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     1cc:	61 2f       	mov	r22, r17
     1ce:	82 e0       	ldi	r24, 0x02	; 2
     1d0:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1d4:	88 81       	ld	r24, Y
     1d6:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     1da:	1f 5f       	subi	r17, 0xFF	; 255
     1dc:	18 30       	cpi	r17, 0x08	; 8
     1de:	68 f3       	brcs	.-38     	; 0x1ba <HOME_voidLocalGetUserAndPass+0x6e>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
	
		//display request for pass
		LCD_voidClear();
     1e0:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     1ec:	87 eb       	ldi	r24, 0xB7	; 183
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     1f4:	10 e0       	ldi	r17, 0x00	; 0
     1f6:	11 c0       	rjmp	.+34     	; 0x21a <HOME_voidLocalGetUserAndPass+0xce>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     1f8:	e7 01       	movw	r28, r14
     1fa:	c1 0f       	add	r28, r17
     1fc:	d1 1d       	adc	r29, r1
     1fe:	ce 01       	movw	r24, r28
     200:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     204:	88 81       	ld	r24, Y
     206:	8f 3f       	cpi	r24, 0xFF	; 255
     208:	b9 f3       	breq	.-18     	; 0x1f8 <HOME_voidLocalGetUserAndPass+0xac>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     20a:	61 2f       	mov	r22, r17
     20c:	82 e0       	ldi	r24, 0x02	; 2
     20e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     212:	88 81       	ld	r24, Y
     214:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     218:	1f 5f       	subi	r17, 0xFF	; 255
     21a:	18 30       	cpi	r17, 0x08	; 8
     21c:	68 f3       	brcs	.-38     	; 0x1f8 <HOME_voidLocalGetUserAndPass+0xac>
		//error massage
	}
			
	
		
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	ff 90       	pop	r15
     226:	ef 90       	pop	r14
     228:	df 90       	pop	r13
     22a:	cf 90       	pop	r12
     22c:	08 95       	ret

0000022e <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType )
{
     22e:	8f 92       	push	r8
     230:	9f 92       	push	r9
     232:	af 92       	push	r10
     234:	bf 92       	push	r11
     236:	cf 92       	push	r12
     238:	df 92       	push	r13
     23a:	ef 92       	push	r14
     23c:	ff 92       	push	r15
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	a0 97       	sbiw	r28, 0x20	; 32
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	f8 94       	cli
     250:	de bf       	out	0x3e, r29	; 62
     252:	0f be       	out	0x3f, r0	; 63
     254:	cd bf       	out	0x3d, r28	; 61
	//page 32 to 61 for remote user name and password the first page for user name the followed by password
	//word 500 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserType!=NULL)
     256:	61 15       	cp	r22, r1
     258:	71 05       	cpc	r23, r1
     25a:	09 f4       	brne	.+2      	; 0x25e <HOME_voidCheckUserAndPass+0x30>
     25c:	ee c0       	rjmp	.+476    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
	{
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     25e:	81 30       	cpi	r24, 0x01	; 1
     260:	09 f0       	breq	.+2      	; 0x264 <HOME_voidCheckUserAndPass+0x36>
     262:	eb c0       	rjmp	.+470    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     264:	da c0       	rjmp	.+436    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     266:	93 94       	inc	r9
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     268:	be 01       	movw	r22, r28
     26a:	6f 5e       	subi	r22, 0xEF	; 239
     26c:	7f 4f       	sbci	r23, 0xFF	; 255
     26e:	ce 01       	movw	r24, r28
     270:	49 96       	adiw	r24, 0x19	; 25
     272:	0e 94 a6 00 	call	0x14c	; 0x14c <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     276:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     278:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     27a:	d1 2c       	mov	r13, r1
     27c:	5f c0       	rjmp	.+190    	; 0x33c <HOME_voidCheckUserAndPass+0x10e>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     27e:	0d 2d       	mov	r16, r13
     280:	02 95       	swap	r16
     282:	00 7f       	andi	r16, 0xF0	; 240
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	ae 01       	movw	r20, r28
     288:	47 5f       	subi	r20, 0xF7	; 247
     28a:	5f 4f       	sbci	r21, 0xFF	; 255
     28c:	68 e0       	ldi	r22, 0x08	; 8
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	c8 01       	movw	r24, r16
     292:	0e 94 13 05 	call	0xa26	; 0xa26 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     296:	ae 01       	movw	r20, r28
     298:	4f 5f       	subi	r20, 0xFF	; 255
     29a:	5f 4f       	sbci	r21, 0xFF	; 255
     29c:	68 e0       	ldi	r22, 0x08	; 8
     29e:	70 e0       	ldi	r23, 0x00	; 0
     2a0:	c8 01       	movw	r24, r16
     2a2:	08 96       	adiw	r24, 0x08	; 8
     2a4:	0e 94 13 05 	call	0xa26	; 0xa26 <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     2a8:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     2aa:	20 e0       	ldi	r18, 0x00	; 0
     2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <HOME_voidCheckUserAndPass+0xa8>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     2ae:	82 2f       	mov	r24, r18
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	e9 e1       	ldi	r30, 0x19	; 25
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	ec 0f       	add	r30, r28
     2b8:	fd 1f       	adc	r31, r29
     2ba:	e8 0f       	add	r30, r24
     2bc:	f9 1f       	adc	r31, r25
     2be:	30 81       	ld	r19, Z
     2c0:	e9 e0       	ldi	r30, 0x09	; 9
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	ec 0f       	add	r30, r28
     2c6:	fd 1f       	adc	r31, r29
     2c8:	e8 0f       	add	r30, r24
     2ca:	f9 1f       	adc	r31, r25
     2cc:	80 81       	ld	r24, Z
     2ce:	38 13       	cpse	r19, r24
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <HOME_voidCheckUserAndPass+0xa6>
						{
							Local_u8NameByteCheck++;
     2d2:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     2d4:	2f 5f       	subi	r18, 0xFF	; 255
     2d6:	28 30       	cpi	r18, 0x08	; 8
     2d8:	50 f3       	brcs	.-44     	; 0x2ae <HOME_voidCheckUserAndPass+0x80>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     2da:	48 30       	cpi	r20, 0x08	; 8
     2dc:	69 f5       	brne	.+90     	; 0x338 <HOME_voidCheckUserAndPass+0x10a>
     2de:	15 c0       	rjmp	.+42     	; 0x30a <HOME_voidCheckUserAndPass+0xdc>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     2e0:	82 2f       	mov	r24, r18
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	e1 e1       	ldi	r30, 0x11	; 17
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ec 0f       	add	r30, r28
     2ea:	fd 1f       	adc	r31, r29
     2ec:	e8 0f       	add	r30, r24
     2ee:	f9 1f       	adc	r31, r25
     2f0:	30 81       	ld	r19, Z
     2f2:	e1 e0       	ldi	r30, 0x01	; 1
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	ec 0f       	add	r30, r28
     2f8:	fd 1f       	adc	r31, r29
     2fa:	e8 0f       	add	r30, r24
     2fc:	f9 1f       	adc	r31, r25
     2fe:	80 81       	ld	r24, Z
     300:	38 13       	cpse	r19, r24
     302:	01 c0       	rjmp	.+2      	; 0x306 <HOME_voidCheckUserAndPass+0xd8>
							{
								Local_u8PassByteCheck++;
     304:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	02 c0       	rjmp	.+4      	; 0x30e <HOME_voidCheckUserAndPass+0xe0>
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	28 30       	cpi	r18, 0x08	; 8
     310:	38 f3       	brcs	.-50     	; 0x2e0 <HOME_voidCheckUserAndPass+0xb2>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     312:	48 30       	cpi	r20, 0x08	; 8
     314:	79 f4       	brne	.+30     	; 0x334 <HOME_voidCheckUserAndPass+0x106>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     316:	2f e0       	ldi	r18, 0x0F	; 15
     318:	d2 12       	cpse	r13, r18
     31a:	06 c0       	rjmp	.+12     	; 0x328 <HOME_voidCheckUserAndPass+0xfa>
							{
								*copy_pu8UserType=HOME_ADMIN;	
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	f7 01       	movw	r30, r14
     320:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     322:	88 24       	eor	r8, r8
     324:	83 94       	inc	r8
     326:	0e c0       	rjmp	.+28     	; 0x344 <HOME_voidCheckUserAndPass+0x116>
							{
								*copy_pu8UserType=HOME_ADMIN;	
							}
							else
							{
								*copy_pu8UserType=HOME_USER;
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	f7 01       	movw	r30, r14
     32c:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     32e:	88 24       	eor	r8, r8
     330:	83 94       	inc	r8
     332:	08 c0       	rjmp	.+16     	; 0x344 <HOME_voidCheckUserAndPass+0x116>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     334:	b3 94       	inc	r11
     336:	01 c0       	rjmp	.+2      	; 0x33a <HOME_voidCheckUserAndPass+0x10c>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     338:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     33a:	d3 94       	inc	r13
     33c:	ff e0       	ldi	r31, 0x0F	; 15
     33e:	fd 15       	cp	r31, r13
     340:	08 f0       	brcs	.+2      	; 0x344 <HOME_voidCheckUserAndPass+0x116>
     342:	9d cf       	rjmp	.-198    	; 0x27e <HOME_voidCheckUserAndPass+0x50>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     344:	21 e0       	ldi	r18, 0x01	; 1
     346:	82 12       	cpse	r8, r18
     348:	14 c0       	rjmp	.+40     	; 0x372 <HOME_voidCheckUserAndPass+0x144>
				{
					LCD_voidClear();
     34a:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS PERMITED");
     356:	81 ec       	ldi	r24, 0xC1	; 193
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	99 e6       	ldi	r25, 0x69	; 105
     362:	e8 e1       	ldi	r30, 0x18	; 24
     364:	81 50       	subi	r24, 0x01	; 1
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	e0 40       	sbci	r30, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <HOME_voidCheckUserAndPass+0x136>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <HOME_voidCheckUserAndPass+0x140>
     36e:	00 00       	nop
     370:	5c c0       	rjmp	.+184    	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
					_delay_ms(500);
                    
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==16)
     372:	f0 e1       	ldi	r31, 0x10	; 16
     374:	cf 12       	cpse	r12, r31
     376:	27 c0       	rjmp	.+78     	; 0x3c6 <HOME_voidCheckUserAndPass+0x198>
				{
					LCD_voidClear();
     378:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS DENIED");
     384:	81 ed       	ldi	r24, 0xD1	; 209
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"Wrong User Name");
     394:	8f ed       	ldi	r24, 0xDF	; 223
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     39c:	22 e0       	ldi	r18, 0x02	; 2
     39e:	a2 16       	cp	r10, r18
     3a0:	d1 f1       	breq	.+116    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	93 ed       	ldi	r25, 0xD3	; 211
     3a6:	e0 e3       	ldi	r30, 0x30	; 48
     3a8:	81 50       	subi	r24, 0x01	; 1
     3aa:	90 40       	sbci	r25, 0x00	; 0
     3ac:	e0 40       	sbci	r30, 0x00	; 0
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <HOME_voidCheckUserAndPass+0x17a>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <HOME_voidCheckUserAndPass+0x184>
     3b2:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString((u8 *)"Please Try Again");
     3bc:	8f ee       	ldi	r24, 0xEF	; 239
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
     3c4:	28 c0       	rjmp	.+80     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     3c6:	bb 20       	and	r11, r11
     3c8:	31 f1       	breq	.+76     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
				{
					LCD_voidClear();
     3ca:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS DENIED");
     3d6:	81 ed       	ldi	r24, 0xD1	; 209
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"Wrong Password");
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     3ee:	f2 e0       	ldi	r31, 0x02	; 2
     3f0:	af 16       	cp	r10, r31
     3f2:	89 f0       	breq	.+34     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	83 ed       	ldi	r24, 0xD3	; 211
     3f8:	90 e3       	ldi	r25, 0x30	; 48
     3fa:	21 50       	subi	r18, 0x01	; 1
     3fc:	80 40       	sbci	r24, 0x00	; 0
     3fe:	90 40       	sbci	r25, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <HOME_voidCheckUserAndPass+0x1cc>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString((u8 *)"Please Try Again");
     40e:	8f ee       	ldi	r24, 0xEF	; 239
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     416:	a3 94       	inc	r10
     418:	04 c0       	rjmp	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     41a:	7b 01       	movw	r14, r22
     41c:	81 2c       	mov	r8, r1
     41e:	91 2c       	mov	r9, r1
     420:	a1 2c       	mov	r10, r1
     422:	e2 e0       	ldi	r30, 0x02	; 2
     424:	ea 15       	cp	r30, r10
     426:	08 f0       	brcs	.+2      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     428:	1e cf       	rjmp	.-452    	; 0x266 <HOME_voidCheckUserAndPass+0x38>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     42a:	f3 e0       	ldi	r31, 0x03	; 3
     42c:	9f 12       	cpse	r9, r31
     42e:	05 c0       	rjmp	.+10     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     430:	81 10       	cpse	r8, r1
     432:	03 c0       	rjmp	.+6      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
			{
				*copy_pu8UserType=HOME_USER_FAILED;
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	f7 01       	movw	r30, r14
     438:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
}
     43a:	a0 96       	adiw	r28, 0x20	; 32
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
     452:	df 90       	pop	r13
     454:	cf 90       	pop	r12
     456:	bf 90       	pop	r11
     458:	af 90       	pop	r10
     45a:	9f 90       	pop	r9
     45c:	8f 90       	pop	r8
     45e:	08 95       	ret

00000460 <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     460:	8f e0       	ldi	r24, 0x0F	; 15
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     468:	80 ec       	ldi	r24, 0xC0	; 192
     46a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     46e:	80 e2       	ldi	r24, 0x20	; 32
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
     476:	2f ef       	ldi	r18, 0xFF	; 255
     478:	83 ed       	ldi	r24, 0xD3	; 211
     47a:	90 e3       	ldi	r25, 0x30	; 48
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	80 40       	sbci	r24, 0x00	; 0
     480:	90 40       	sbci	r25, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <WelcomeScreen+0x1c>
     484:	00 c0       	rjmp	.+0      	; 0x486 <WelcomeScreen+0x26>
     486:	00 00       	nop
     488:	08 95       	ret

0000048a <APP_init>:




void APP_init(void)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	a1 97       	sbiw	r28, 0x21	; 33
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	f8 94       	cli
     498:	de bf       	out	0x3e, r29	; 62
     49a:	0f be       	out	0x3f, r0	; 63
     49c:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     49e:	0e 94 7b 00 	call	0xf6	; 0xf6 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_AVCC);
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	0e 94 46 08 	call	0x108c	; 0x108c <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	
    // display the welcome screen
    WelcomeScreen();
     4b2:	0e 94 30 02 	call	0x460	; 0x460 <WelcomeScreen>
	LCD_voidClear();
     4b6:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	e5 e6       	ldi	r30, 0x65	; 101
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	de 01       	movw	r26, r28
     4c2:	11 96       	adiw	r26, 0x01	; 1
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	8a 95       	dec	r24
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <APP_init+0x3a>
	u8 testuserpass[8]={"22222222"};
     4cc:	88 e0       	ldi	r24, 0x08	; 8
     4ce:	ee e6       	ldi	r30, 0x6E	; 110
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	de 01       	movw	r26, r28
     4d4:	19 96       	adiw	r26, 0x09	; 9
     4d6:	01 90       	ld	r0, Z+
     4d8:	0d 92       	st	X+, r0
     4da:	8a 95       	dec	r24
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <APP_init+0x4c>
	u8 testadminname[8]={"99999999"};
     4de:	88 e0       	ldi	r24, 0x08	; 8
     4e0:	e7 e7       	ldi	r30, 0x77	; 119
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	de 01       	movw	r26, r28
     4e6:	51 96       	adiw	r26, 0x11	; 17
     4e8:	01 90       	ld	r0, Z+
     4ea:	0d 92       	st	X+, r0
     4ec:	8a 95       	dec	r24
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <APP_init+0x5e>
	u8 testadminpass[8]={"99999999"};
     4f0:	88 e0       	ldi	r24, 0x08	; 8
     4f2:	e7 e7       	ldi	r30, 0x77	; 119
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	de 01       	movw	r26, r28
     4f8:	59 96       	adiw	r26, 0x19	; 25
     4fa:	01 90       	ld	r0, Z+
     4fc:	0d 92       	st	X+, r0
     4fe:	8a 95       	dec	r24
     500:	e1 f7       	brne	.-8      	; 0x4fa <APP_init+0x70>
	u8 usertype;	
	
	EEPROM_voidWritePage(16,&testusername[0]);
     502:	be 01       	movw	r22, r28
     504:	6f 5f       	subi	r22, 0xFF	; 255
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	80 e1       	ldi	r24, 0x10	; 16
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
     510:	be 01       	movw	r22, r28
     512:	67 5f       	subi	r22, 0xF7	; 247
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	88 e1       	ldi	r24, 0x18	; 24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
     51e:	be 01       	movw	r22, r28
     520:	6f 5e       	subi	r22, 0xEF	; 239
     522:	7f 4f       	sbci	r23, 0xFF	; 255
     524:	80 ef       	ldi	r24, 0xF0	; 240
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
     52c:	be 01       	movw	r22, r28
     52e:	67 5e       	subi	r22, 0xE7	; 231
     530:	7f 4f       	sbci	r23, 0xFF	; 255
     532:	88 ef       	ldi	r24, 0xF8	; 248
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_voidWritePage>
	
	HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
     53a:	be 01       	movw	r22, r28
     53c:	6f 5d       	subi	r22, 0xDF	; 223
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0e 94 17 01 	call	0x22e	; 0x22e <HOME_voidCheckUserAndPass>
	LCD_voidClear();
     546:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(usertype);
     552:	69 a1       	ldd	r22, Y+33	; 0x21
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_voidDisplayNumber>
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	83 ed       	ldi	r24, 0xD3	; 211
     562:	90 e3       	ldi	r25, 0x30	; 48
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <APP_init+0xda>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <APP_init+0xe4>
     56e:	00 00       	nop





}
     570:	a1 96       	adiw	r28, 0x21	; 33
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     588:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     58c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     590:	08 95       	ret

00000592 <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     592:	0e 94 c1 02 	call	0x582	; 0x582 <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     596:	89 e4       	ldi	r24, 0x49	; 73
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 2e 0a 	call	0x145c	; 0x145c <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     59e:	0e 94 16 0a 	call	0x142c	; 0x142c <TMR0_voidStart>
        LCD_voidClear();
     5a2:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     5a6:	8e e2       	ldi	r24, 0x2E	; 46
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     5ae:	80 ec       	ldi	r24, 0xC0	; 192
     5b0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temperature");
     5b4:	8b e3       	ldi	r24, 0x3B	; 59
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
        Reset_AllKPDValues();
     5bc:	0e 94 c1 02 	call	0x582	; 0x582 <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     5c0:	0c c0       	rjmp	.+24     	; 0x5da <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     5c2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     5c6:	80 33       	cpi	r24, 0x30	; 48
     5c8:	21 f4       	brne	.+8      	; 0x5d2 <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
     5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     5d2:	84 e6       	ldi	r24, 0x64	; 100
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temperature");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     5da:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     5de:	8f 3f       	cpi	r24, 0xFF	; 255
     5e0:	81 f3       	breq	.-32     	; 0x5c2 <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     5e2:	0e 94 24 0a 	call	0x1448	; 0x1448 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     5e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     5ea:	81 33       	cpi	r24, 0x31	; 49
     5ec:	19 f0       	breq	.+6      	; 0x5f4 <KPD_Interface_user+0x62>
     5ee:	82 33       	cpi	r24, 0x32	; 50
     5f0:	79 f0       	breq	.+30     	; 0x610 <KPD_Interface_user+0x7e>
     5f2:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     5f4:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     5f8:	89 e4       	ldi	r24, 0x49	; 73
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     600:	80 ec       	ldi	r24, 0xC0	; 192
     602:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     606:	86 e5       	ldi	r24, 0x56	; 86
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>

            break;
     60e:	08 95       	ret

        case ('2'):

            LCD_voidClear();
     610:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     614:	85 e6       	ldi	r24, 0x65	; 101
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     61c:	80 ec       	ldi	r24, 0xC0	; 192
     61e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     622:	85 e7       	ldi	r24, 0x75	; 117
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     62a:	89 e4       	ldi	r24, 0x49	; 73
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 2e 0a 	call	0x145c	; 0x145c <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     632:	0e 94 16 0a 	call	0x142c	; 0x142c <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     636:	0c c0       	rjmp	.+24     	; 0x650 <KPD_Interface_user+0xbe>
            {
                KPD_voidGetValue(&local_lightNum);
     638:	83 e6       	ldi	r24, 0x63	; 99
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     640:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     644:	80 33       	cpi	r24, 0x30	; 48
     646:	21 f4       	brne	.+8      	; 0x650 <KPD_Interface_user+0xbe>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
     64e:	04 c0       	rjmp	.+8      	; 0x658 <KPD_Interface_user+0xc6>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     650:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     654:	8f 3f       	cpi	r24, 0xFF	; 255
     656:	81 f3       	breq	.-32     	; 0x638 <KPD_Interface_user+0xa6>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     658:	0e 94 24 0a 	call	0x1448	; 0x1448 <TMR0_voidStop>
            switch (local_lightNum)
     65c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     660:	83 33       	cpi	r24, 0x33	; 51
     662:	09 f4       	brne	.+2      	; 0x666 <KPD_Interface_user+0xd4>
     664:	a6 c0       	rjmp	.+332    	; 0x7b2 <KPD_Interface_user+0x220>
     666:	30 f4       	brcc	.+12     	; 0x674 <KPD_Interface_user+0xe2>
     668:	81 33       	cpi	r24, 0x31	; 49
     66a:	69 f0       	breq	.+26     	; 0x686 <KPD_Interface_user+0xf4>
     66c:	82 33       	cpi	r24, 0x32	; 50
     66e:	09 f4       	brne	.+2      	; 0x672 <KPD_Interface_user+0xe0>
     670:	54 c0       	rjmp	.+168    	; 0x71a <KPD_Interface_user+0x188>
     672:	a2 c1       	rjmp	.+836    	; 0x9b8 <__stack+0x159>
     674:	85 33       	cpi	r24, 0x35	; 53
     676:	09 f4       	brne	.+2      	; 0x67a <KPD_Interface_user+0xe8>
     678:	34 c1       	rjmp	.+616    	; 0x8e2 <__stack+0x83>
     67a:	08 f4       	brcc	.+2      	; 0x67e <KPD_Interface_user+0xec>
     67c:	e6 c0       	rjmp	.+460    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     67e:	86 33       	cpi	r24, 0x36	; 54
     680:	09 f4       	brne	.+2      	; 0x684 <KPD_Interface_user+0xf2>
     682:	7b c1       	rjmp	.+758    	; 0x97a <__stack+0x11b>
     684:	99 c1       	rjmp	.+818    	; 0x9b8 <__stack+0x159>
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN0, &led_status);
     686:	40 e6       	ldi	r20, 0x60	; 96
     688:	52 e0       	ldi	r21, 0x02	; 2
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_voidGetPinValue>
                LCD_voidClear();
     692:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
                if (led_status == 1)
     696:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
     69a:	81 30       	cpi	r24, 0x01	; 1
     69c:	f1 f4       	brne	.+60     	; 0x6da <KPD_Interface_user+0x148>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     69e:	82 e8       	ldi	r24, 0x82	; 130
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     6a6:	80 ec       	ldi	r24, 0xC0	; 192
     6a8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     6ac:	80 e9       	ldi	r24, 0x90	; 144
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     6b4:	04 c0       	rjmp	.+8      	; 0x6be <KPD_Interface_user+0x12c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     6b6:	82 e6       	ldi	r24, 0x62	; 98
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     6be:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     6c2:	8f 3f       	cpi	r24, 0xFF	; 255
     6c4:	c1 f3       	breq	.-16     	; 0x6b6 <KPD_Interface_user+0x124>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     6c6:	81 33       	cpi	r24, 0x31	; 49
     6c8:	29 f4       	brne	.+10     	; 0x6d4 <KPD_Interface_user+0x142>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
     6ca:	41 e0       	ldi	r20, 0x01	; 1
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 1e 08 	call	0x103c	; 0x103c <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     6d4:	0e 94 c1 02 	call	0x582	; 0x582 <Reset_AllKPDValues>
     6d8:	6f c1       	rjmp	.+734    	; 0x9b8 <__stack+0x159>
                }
                else if (led_status == 0)
     6da:	81 11       	cpse	r24, r1
     6dc:	6d c1       	rjmp	.+730    	; 0x9b8 <__stack+0x159>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     6de:	81 ea       	ldi	r24, 0xA1	; 161
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     6e6:	80 ec       	ldi	r24, 0xC0	; 192
     6e8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     6ec:	80 eb       	ldi	r24, 0xB0	; 176
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <KPD_Interface_user+0x16c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     6f6:	82 e6       	ldi	r24, 0x62	; 98
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     6fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     702:	8f 3f       	cpi	r24, 0xFF	; 255
     704:	c1 f3       	breq	.-16     	; 0x6f6 <KPD_Interface_user+0x164>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     706:	81 33       	cpi	r24, 0x31	; 49
     708:	29 f4       	brne	.+10     	; 0x714 <KPD_Interface_user+0x182>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     714:	0e 94 c1 02 	call	0x582	; 0x582 <Reset_AllKPDValues>
     718:	4f c1       	rjmp	.+670    	; 0x9b8 <__stack+0x159>
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN1, &led_status);
     71a:	40 e6       	ldi	r20, 0x60	; 96
     71c:	52 e0       	ldi	r21, 0x02	; 2
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_voidGetPinValue>
                LCD_voidClear();
     726:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
                if (led_status == 1)
     72a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	f9 f4       	brne	.+62     	; 0x770 <KPD_Interface_user+0x1de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     732:	80 ec       	ldi	r24, 0xC0	; 192
     734:	91 e0       	ldi	r25, 0x01	; 1
     736:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     73a:	80 ec       	ldi	r24, 0xC0	; 192
     73c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     740:	80 e9       	ldi	r24, 0x90	; 144
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     748:	04 c0       	rjmp	.+8      	; 0x752 <KPD_Interface_user+0x1c0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     74a:	82 e6       	ldi	r24, 0x62	; 98
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     752:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     756:	8f 3f       	cpi	r24, 0xFF	; 255
     758:	c1 f3       	breq	.-16     	; 0x74a <KPD_Interface_user+0x1b8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     75a:	81 33       	cpi	r24, 0x31	; 49
     75c:	29 f4       	brne	.+10     	; 0x768 <KPD_Interface_user+0x1d6>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     75e:	41 e0       	ldi	r20, 0x01	; 1
     760:	61 e0       	ldi	r22, 0x01	; 1
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 1e 08 	call	0x103c	; 0x103c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     768:	8f ef       	ldi	r24, 0xFF	; 255
     76a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     76e:	24 c1       	rjmp	.+584    	; 0x9b8 <__stack+0x159>
                }
                else if (led_status == 0)
     770:	81 11       	cpse	r24, r1
     772:	22 c1       	rjmp	.+580    	; 0x9b8 <__stack+0x159>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     774:	8e ec       	ldi	r24, 0xCE	; 206
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     77c:	80 ec       	ldi	r24, 0xC0	; 192
     77e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     782:	80 eb       	ldi	r24, 0xB0	; 176
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     78a:	04 c0       	rjmp	.+8      	; 0x794 <KPD_Interface_user+0x202>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     78c:	82 e6       	ldi	r24, 0x62	; 98
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     794:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     798:	8f 3f       	cpi	r24, 0xFF	; 255
     79a:	c1 f3       	breq	.-16     	; 0x78c <KPD_Interface_user+0x1fa>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     79c:	81 33       	cpi	r24, 0x31	; 49
     79e:	29 f4       	brne	.+10     	; 0x7aa <KPD_Interface_user+0x218>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	61 e0       	ldi	r22, 0x01	; 1
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     7b0:	03 c1       	rjmp	.+518    	; 0x9b8 <__stack+0x159>
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     7b2:	40 e6       	ldi	r20, 0x60	; 96
     7b4:	52 e0       	ldi	r21, 0x02	; 2
     7b6:	62 e0       	ldi	r22, 0x02	; 2
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_voidGetPinValue>
                LCD_voidClear();
     7be:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
                if (led_status == 1)
     7c2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	f9 f4       	brne	.+62     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     7ca:	8d ed       	ldi	r24, 0xDD	; 221
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     7d2:	80 ec       	ldi	r24, 0xC0	; 192
     7d4:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     7d8:	80 e9       	ldi	r24, 0x90	; 144
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <KPD_Interface_user+0x258>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     7e2:	82 e6       	ldi	r24, 0x62	; 98
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     7ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     7ee:	8f 3f       	cpi	r24, 0xFF	; 255
     7f0:	c1 f3       	breq	.-16     	; 0x7e2 <KPD_Interface_user+0x250>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     7f2:	81 33       	cpi	r24, 0x31	; 49
     7f4:	29 f4       	brne	.+10     	; 0x800 <__DATA_REGION_LENGTH__>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	62 e0       	ldi	r22, 0x02	; 2
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 1e 08 	call	0x103c	; 0x103c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     800:	8f ef       	ldi	r24, 0xFF	; 255
     802:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     806:	d8 c0       	rjmp	.+432    	; 0x9b8 <__stack+0x159>
                }
                else if (led_status == 0)
     808:	81 11       	cpse	r24, r1
     80a:	d6 c0       	rjmp	.+428    	; 0x9b8 <__stack+0x159>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     80c:	8b ee       	ldi	r24, 0xEB	; 235
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     814:	80 ec       	ldi	r24, 0xC0	; 192
     816:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     81a:	80 eb       	ldi	r24, 0xB0	; 176
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     822:	04 c0       	rjmp	.+8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     824:	82 e6       	ldi	r24, 0x62	; 98
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     82c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     830:	8f 3f       	cpi	r24, 0xFF	; 255
     832:	c1 f3       	breq	.-16     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     834:	81 33       	cpi	r24, 0x31	; 49
     836:	29 f4       	brne	.+10     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	62 e0       	ldi	r22, 0x02	; 2
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     848:	b7 c0       	rjmp	.+366    	; 0x9b8 <__stack+0x159>
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     84a:	40 e6       	ldi	r20, 0x60	; 96
     84c:	52 e0       	ldi	r21, 0x02	; 2
     84e:	63 e0       	ldi	r22, 0x03	; 3
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_voidGetPinValue>
                LCD_voidClear();
     856:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
                if (led_status == 1)
     85a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	f9 f4       	brne	.+62     	; 0x8a0 <__stack+0x41>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     862:	8a ef       	ldi	r24, 0xFA	; 250
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     86a:	80 ec       	ldi	r24, 0xC0	; 192
     86c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     870:	80 e9       	ldi	r24, 0x90	; 144
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     878:	04 c0       	rjmp	.+8      	; 0x882 <__stack+0x23>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     87a:	82 e6       	ldi	r24, 0x62	; 98
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     882:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     886:	8f 3f       	cpi	r24, 0xFF	; 255
     888:	c1 f3       	breq	.-16     	; 0x87a <__stack+0x1b>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     88a:	81 33       	cpi	r24, 0x31	; 49
     88c:	29 f4       	brne	.+10     	; 0x898 <__stack+0x39>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     88e:	41 e0       	ldi	r20, 0x01	; 1
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	0e 94 1e 08 	call	0x103c	; 0x103c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     89e:	8c c0       	rjmp	.+280    	; 0x9b8 <__stack+0x159>
                }
                else if (led_status == 0)
     8a0:	81 11       	cpse	r24, r1
     8a2:	8a c0       	rjmp	.+276    	; 0x9b8 <__stack+0x159>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     8ac:	80 ec       	ldi	r24, 0xC0	; 192
     8ae:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     8b2:	80 eb       	ldi	r24, 0xB0	; 176
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <__stack+0x65>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     8bc:	82 e6       	ldi	r24, 0x62	; 98
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     8c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	c1 f3       	breq	.-16     	; 0x8bc <__stack+0x5d>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     8cc:	81 33       	cpi	r24, 0x31	; 49
     8ce:	29 f4       	brne	.+10     	; 0x8da <__stack+0x7b>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	63 e0       	ldi	r22, 0x03	; 3
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     8e0:	6b c0       	rjmp	.+214    	; 0x9b8 <__stack+0x159>
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     8e2:	40 e6       	ldi	r20, 0x60	; 96
     8e4:	52 e0       	ldi	r21, 0x02	; 2
     8e6:	62 e0       	ldi	r22, 0x02	; 2
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_voidGetPinValue>
                LCD_voidClear();
     8ee:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
                if (led_status == 1)
     8f2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	f9 f4       	brne	.+62     	; 0x938 <__stack+0xd9>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     8fa:	87 e1       	ldi	r24, 0x17	; 23
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     902:	80 ec       	ldi	r24, 0xC0	; 192
     904:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     908:	80 e9       	ldi	r24, 0x90	; 144
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0xbb>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     912:	82 e6       	ldi	r24, 0x62	; 98
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     91a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     91e:	8f 3f       	cpi	r24, 0xFF	; 255
     920:	c1 f3       	breq	.-16     	; 0x912 <__stack+0xb3>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     922:	81 33       	cpi	r24, 0x31	; 49
     924:	29 f4       	brne	.+10     	; 0x930 <__stack+0xd1>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	62 e0       	ldi	r22, 0x02	; 2
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	0e 94 1e 08 	call	0x103c	; 0x103c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     936:	40 c0       	rjmp	.+128    	; 0x9b8 <__stack+0x159>
                }
                else if (led_status == 0)
     938:	81 11       	cpse	r24, r1
     93a:	3e c0       	rjmp	.+124    	; 0x9b8 <__stack+0x159>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     93c:	85 e2       	ldi	r24, 0x25	; 37
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     944:	80 ec       	ldi	r24, 0xC0	; 192
     946:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     94a:	80 eb       	ldi	r24, 0xB0	; 176
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0xfd>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     954:	82 e6       	ldi	r24, 0x62	; 98
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0e 94 87 05 	call	0xb0e	; 0xb0e <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     95c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     960:	8f 3f       	cpi	r24, 0xFF	; 255
     962:	c1 f3       	breq	.-16     	; 0x954 <__stack+0xf5>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     964:	81 33       	cpi	r24, 0x31	; 49
     966:	29 f4       	brne	.+10     	; 0x972 <__stack+0x113>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     968:	41 e0       	ldi	r20, 0x01	; 1
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	0e 94 11 08 	call	0x1022	; 0x1022 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     978:	1f c0       	rjmp	.+62     	; 0x9b8 <__stack+0x159>
                break;
                // if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     97a:	0e 94 c1 07 	call	0xf82	; 0xf82 <LCD_voidClear>
                if (led_status == 1)
     97e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <__data_end>
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	61 f4       	brne	.+24     	; 0x99e <__stack+0x13f>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     986:	84 e3       	ldi	r24, 0x34	; 52
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     98e:	80 ec       	ldi	r24, 0xC0	; 192
     990:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     994:	80 e9       	ldi	r24, 0x90	; 144
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
     99c:	0d c0       	rjmp	.+26     	; 0x9b8 <__stack+0x159>
                }
                else if (led_status == 0)
     99e:	81 11       	cpse	r24, r1
     9a0:	0b c0       	rjmp	.+22     	; 0x9b8 <__stack+0x159>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     9a2:	82 e4       	ldi	r24, 0x42	; 66
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     9aa:	80 ec       	ldi	r24, 0xC0	; 192
     9ac:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     9b0:	80 eb       	ldi	r24, 0xB0	; 176
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <LCD_voidDisplayStringDelay>
                }
                break;

            }

            local_lightNum = KPD_Not_Pressed;
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
            Local_copyKPDValue = KPD_Not_Pressed;
     9be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
     9c2:	08 95       	ret

000009c4 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     9c4:	0e 94 3d 0b 	call	0x167a	; 0x167a <UART_voidInit>
     9c8:	08 95       	ret

000009ca <EEPROM_voidInit>:
	{
		//error
	}
	
	
}
     9ca:	0e 94 b2 0a 	call	0x1564	; 0x1564 <TWI_voidInitMaster>
     9ce:	08 95       	ret

000009d0 <EEPROM_voidWritePage>:
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	61 15       	cp	r22, r1
     9da:	71 05       	cpc	r23, r1
     9dc:	f9 f0       	breq	.+62     	; 0xa1c <EEPROM_voidWritePage+0x4c>
     9de:	8b 01       	movw	r16, r22
     9e0:	d8 2f       	mov	r29, r24
     9e2:	c9 2f       	mov	r28, r25
     9e4:	c0 65       	ori	r28, 0x50	; 80
     9e6:	0e 94 be 0a 	call	0x157c	; 0x157c <TWI_voidSendStartCondition>
     9ea:	8c 2f       	mov	r24, r28
     9ec:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <TWI_voidSendSlaveAddWithWrite>
     9f0:	8d 2f       	mov	r24, r29
     9f2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <TWI_voidTransmitMasterDataByte>
     9f6:	c0 e0       	ldi	r28, 0x00	; 0
     9f8:	07 c0       	rjmp	.+14     	; 0xa08 <EEPROM_voidWritePage+0x38>
     9fa:	f8 01       	movw	r30, r16
     9fc:	ec 0f       	add	r30, r28
     9fe:	f1 1d       	adc	r31, r1
     a00:	80 81       	ld	r24, Z
     a02:	0e 94 0b 0b 	call	0x1616	; 0x1616 <TWI_voidTransmitMasterDataByte>
     a06:	cf 5f       	subi	r28, 0xFF	; 255
     a08:	c8 30       	cpi	r28, 0x08	; 8
     a0a:	b8 f3       	brcs	.-18     	; 0x9fa <EEPROM_voidWritePage+0x2a>
     a0c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_voidSendStopCondition>
     a10:	8f e1       	ldi	r24, 0x1F	; 31
     a12:	9e e4       	ldi	r25, 0x4E	; 78
     a14:	01 97       	sbiw	r24, 0x01	; 1
     a16:	f1 f7       	brne	.-4      	; 0xa14 <EEPROM_voidWritePage+0x44>
     a18:	00 c0       	rjmp	.+0      	; 0xa1a <EEPROM_voidWritePage+0x4a>
     a1a:	00 00       	nop
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
     a32:	41 15       	cp	r20, r1
     a34:	51 05       	cpc	r21, r1
     a36:	81 f1       	breq	.+96     	; 0xa98 <EEPROM_voidSequentialRead+0x72>
     a38:	61 15       	cp	r22, r1
     a3a:	22 e0       	ldi	r18, 0x02	; 2
     a3c:	72 07       	cpc	r23, r18
     a3e:	60 f5       	brcc	.+88     	; 0xa98 <EEPROM_voidSequentialRead+0x72>
     a40:	8a 01       	movw	r16, r20
     a42:	7b 01       	movw	r14, r22
     a44:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     a46:	c9 2f       	mov	r28, r25
     a48:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
     a4a:	0e 94 be 0a 	call	0x157c	; 0x157c <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     a4e:	8c 2f       	mov	r24, r28
     a50:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     a54:	8d 2f       	mov	r24, r29
     a56:	0e 94 0b 0b 	call	0x1616	; 0x1616 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
     a5a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
     a5e:	8c 2f       	mov	r24, r28
     a60:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
     a64:	c0 e0       	ldi	r28, 0x00	; 0
     a66:	d0 e0       	ldi	r29, 0x00	; 0
     a68:	06 c0       	rjmp	.+12     	; 0xa76 <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
     a6a:	c8 01       	movw	r24, r16
     a6c:	8c 0f       	add	r24, r28
     a6e:	9d 1f       	adc	r25, r29
     a70:	0e 94 17 0b 	call	0x162e	; 0x162e <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
     a74:	21 96       	adiw	r28, 0x01	; 1
     a76:	c7 01       	movw	r24, r14
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	c8 17       	cp	r28, r24
     a7c:	d9 07       	cpc	r29, r25
     a7e:	a8 f3       	brcs	.-22     	; 0xa6a <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
     a80:	80 0f       	add	r24, r16
     a82:	91 1f       	adc	r25, r17
     a84:	0e 94 2d 0b 	call	0x165a	; 0x165a <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
     a88:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_voidSendStopCondition>
     a8c:	8f e1       	ldi	r24, 0x1F	; 31
     a8e:	9e e4       	ldi	r25, 0x4E	; 78
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <EEPROM_voidSequentialRead+0x6a>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <EEPROM_voidSequentialRead+0x70>
     a96:	00 00       	nop
	{
		//error state
	}


     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	65 e0       	ldi	r22, 0x05	; 5
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     aba:	41 e0       	ldi	r20, 0x01	; 1
     abc:	66 e0       	ldi	r22, 0x06	; 6
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	63 e0       	ldi	r22, 0x03	; 3
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	64 e0       	ldi	r22, 0x04	; 4
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	65 e0       	ldi	r22, 0x05	; 5
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	66 e0       	ldi	r22, 0x06	; 6
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     aec:	63 e0       	ldi	r22, 0x03	; 3
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     af4:	64 e0       	ldi	r22, 0x04	; 4
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     afc:	65 e0       	ldi	r22, 0x05	; 5
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     b04:	66 e0       	ldi	r22, 0x06	; 6
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_voidActivePinInPullUpResistance>
     b0c:	08 95       	ret

00000b0e <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     b0e:	6f 92       	push	r6
     b10:	7f 92       	push	r7
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	cd b7       	in	r28, 0x3d	; 61
     b2c:	de b7       	in	r29, 0x3e	; 62
     b2e:	6b 97       	sbiw	r28, 0x1b	; 27
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	09 f4       	brne	.+2      	; 0xb40 <KPD_voidGetValue+0x32>
     b3e:	7e c0       	rjmp	.+252    	; 0xc3c <KPD_voidGetValue+0x12e>
     b40:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	88 8f       	std	Y+24, r24	; 0x18
     b46:	89 8f       	std	Y+25, r24	; 0x19
     b48:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     b4a:	34 e0       	ldi	r19, 0x04	; 4
     b4c:	3d 8b       	std	Y+21, r19	; 0x15
     b4e:	25 e0       	ldi	r18, 0x05	; 5
     b50:	2e 8b       	std	Y+22, r18	; 0x16
     b52:	96 e0       	ldi	r25, 0x06	; 6
     b54:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	89 8b       	std	Y+17, r24	; 0x11
     b5a:	8a 8b       	std	Y+18, r24	; 0x12
     b5c:	8b 8b       	std	Y+19, r24	; 0x13
     b5e:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	8d 87       	std	Y+13, r24	; 0x0d
     b64:	3e 87       	std	Y+14, r19	; 0x0e
     b66:	2f 87       	std	Y+15, r18	; 0x0f
     b68:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     b6a:	8c e0       	ldi	r24, 0x0C	; 12
     b6c:	e0 e8       	ldi	r30, 0x80	; 128
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	de 01       	movw	r26, r28
     b72:	11 96       	adiw	r26, 0x01	; 1
     b74:	01 90       	ld	r0, Z+
     b76:	0d 92       	st	X+, r0
     b78:	8a 95       	dec	r24
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	f5 01       	movw	r30, r10
     b80:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     b82:	81 2c       	mov	r8, r1
     b84:	57 c0       	rjmp	.+174    	; 0xc34 <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     b86:	c8 2c       	mov	r12, r8
     b88:	d1 2c       	mov	r13, r1
     b8a:	e5 e1       	ldi	r30, 0x15	; 21
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	ec 0f       	add	r30, r28
     b90:	fd 1f       	adc	r31, r29
     b92:	ec 0d       	add	r30, r12
     b94:	fd 1d       	adc	r31, r13
     b96:	60 80       	ld	r6, Z
     b98:	e8 e1       	ldi	r30, 0x18	; 24
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ec 0f       	add	r30, r28
     b9e:	fd 1f       	adc	r31, r29
     ba0:	ec 0d       	add	r30, r12
     ba2:	fd 1d       	adc	r31, r13
     ba4:	70 80       	ld	r7, Z
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	66 2d       	mov	r22, r6
     baa:	87 2d       	mov	r24, r7
     bac:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	38 c0       	rjmp	.+112    	; 0xc24 <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     bb4:	e1 2e       	mov	r14, r17
     bb6:	f1 2c       	mov	r15, r1
     bb8:	ed e0       	ldi	r30, 0x0D	; 13
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ec 0f       	add	r30, r28
     bbe:	fd 1f       	adc	r31, r29
     bc0:	ee 0d       	add	r30, r14
     bc2:	ff 1d       	adc	r31, r15
     bc4:	00 81       	ld	r16, Z
     bc6:	e1 e1       	ldi	r30, 0x11	; 17
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	ec 0f       	add	r30, r28
     bcc:	fd 1f       	adc	r31, r29
     bce:	ee 0d       	add	r30, r14
     bd0:	ff 1d       	adc	r31, r15
     bd2:	90 80       	ld	r9, Z
     bd4:	ae 01       	movw	r20, r28
     bd6:	45 5e       	subi	r20, 0xE5	; 229
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	60 2f       	mov	r22, r16
     bdc:	89 2d       	mov	r24, r9
     bde:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     be2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     be4:	81 11       	cpse	r24, r1
     be6:	1d c0       	rjmp	.+58     	; 0xc22 <KPD_voidGetValue+0x114>
     be8:	07 c0       	rjmp	.+14     	; 0xbf8 <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     bea:	ae 01       	movw	r20, r28
     bec:	45 5e       	subi	r20, 0xE5	; 229
     bee:	5f 4f       	sbci	r21, 0xFF	; 255
     bf0:	60 2f       	mov	r22, r16
     bf2:	89 2d       	mov	r24, r9
     bf4:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfa:	88 23       	and	r24, r24
     bfc:	b1 f3       	breq	.-20     	; 0xbea <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     bfe:	c7 01       	movw	r24, r14
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	e8 0e       	add	r14, r24
     c06:	f9 1e       	adc	r15, r25
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	8c 0f       	add	r24, r28
     c0e:	9d 1f       	adc	r25, r29
     c10:	e8 0e       	add	r14, r24
     c12:	f9 1e       	adc	r15, r25
     c14:	f7 01       	movw	r30, r14
     c16:	ec 0d       	add	r30, r12
     c18:	fd 1d       	adc	r31, r13
     c1a:	80 81       	ld	r24, Z
     c1c:	f5 01       	movw	r30, r10
     c1e:	80 83       	st	Z, r24
     c20:	0d c0       	rjmp	.+26     	; 0xc3c <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     c22:	1f 5f       	subi	r17, 0xFF	; 255
     c24:	14 30       	cpi	r17, 0x04	; 4
     c26:	30 f2       	brcs	.-116    	; 0xbb4 <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	66 2d       	mov	r22, r6
     c2c:	87 2d       	mov	r24, r7
     c2e:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     c32:	83 94       	inc	r8
     c34:	f2 e0       	ldi	r31, 0x02	; 2
     c36:	f8 15       	cp	r31, r8
     c38:	08 f0       	brcs	.+2      	; 0xc3c <KPD_voidGetValue+0x12e>
     c3a:	a5 cf       	rjmp	.-182    	; 0xb86 <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
     c3c:	6b 96       	adiw	r28, 0x1b	; 27
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	df 90       	pop	r13
     c56:	cf 90       	pop	r12
     c58:	bf 90       	pop	r11
     c5a:	af 90       	pop	r10
     c5c:	9f 90       	pop	r9
     c5e:	8f 90       	pop	r8
     c60:	7f 90       	pop	r7
     c62:	6f 90       	pop	r6
     c64:	08 95       	ret

00000c66 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     c66:	cf 93       	push	r28
     c68:	c8 2f       	mov	r28, r24
     c6a:	80 ff       	sbrs	r24, 0
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <PRV_voidWriteHalfPort+0x14>
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	64 e0       	ldi	r22, 0x04	; 4
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <PRV_voidWriteHalfPort+0x1e>
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	64 e0       	ldi	r22, 0x04	; 4
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     c84:	c1 ff       	sbrs	r28, 1
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <PRV_voidWriteHalfPort+0x2e>
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	65 e0       	ldi	r22, 0x05	; 5
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <PRV_voidWriteHalfPort+0x38>
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	65 e0       	ldi	r22, 0x05	; 5
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     c9e:	c2 ff       	sbrs	r28, 2
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <PRV_voidWriteHalfPort+0x48>
     ca2:	41 e0       	ldi	r20, 0x01	; 1
     ca4:	66 e0       	ldi	r22, 0x06	; 6
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <PRV_voidWriteHalfPort+0x52>
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	66 e0       	ldi	r22, 0x06	; 6
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     cb8:	c3 ff       	sbrs	r28, 3
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <PRV_voidWriteHalfPort+0x62>
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	67 e0       	ldi	r22, 0x07	; 7
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <PRV_voidWriteHalfPort+0x6c>
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	67 e0       	ldi	r22, 0x07	; 7
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <LCD_voidSendCommand>:
     cd6:	cf 93       	push	r28
     cd8:	c8 2f       	mov	r28, r24
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	62 e0       	ldi	r22, 0x02	; 2
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     cee:	8c 2f       	mov	r24, r28
     cf0:	82 95       	swap	r24
     cf2:	8f 70       	andi	r24, 0x0F	; 15
     cf4:	0e 94 33 06 	call	0xc66	; 0xc66 <PRV_voidWriteHalfPort>
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	63 e0       	ldi	r22, 0x03	; 3
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     d02:	8f e9       	ldi	r24, 0x9F	; 159
     d04:	9f e0       	ldi	r25, 0x0F	; 15
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCD_voidSendCommand+0x30>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <LCD_voidSendCommand+0x36>
     d0c:	00 00       	nop
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	63 e0       	ldi	r22, 0x03	; 3
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     d18:	8c 2f       	mov	r24, r28
     d1a:	0e 94 33 06 	call	0xc66	; 0xc66 <PRV_voidWriteHalfPort>
     d1e:	41 e0       	ldi	r20, 0x01	; 1
     d20:	63 e0       	ldi	r22, 0x03	; 3
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     d28:	8f e9       	ldi	r24, 0x9F	; 159
     d2a:	9f e0       	ldi	r25, 0x0F	; 15
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <LCD_voidSendCommand+0x56>
     d30:	00 c0       	rjmp	.+0      	; 0xd32 <LCD_voidSendCommand+0x5c>
     d32:	00 00       	nop
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	63 e0       	ldi	r22, 0x03	; 3
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <LCD_voidInit>:
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	61 e0       	ldi	r22, 0x01	; 1
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	62 e0       	ldi	r22, 0x02	; 2
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	63 e0       	ldi	r22, 0x03	; 3
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	64 e0       	ldi	r22, 0x04	; 4
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	65 e0       	ldi	r22, 0x05	; 5
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	66 e0       	ldi	r22, 0x06	; 6
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	67 e0       	ldi	r22, 0x07	; 7
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
     d88:	2f e7       	ldi	r18, 0x7F	; 127
     d8a:	85 eb       	ldi	r24, 0xB5	; 181
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	80 40       	sbci	r24, 0x00	; 0
     d92:	90 40       	sbci	r25, 0x00	; 0
     d94:	e1 f7       	brne	.-8      	; 0xd8e <LCD_voidInit+0x4c>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <LCD_voidInit+0x56>
     d98:	00 00       	nop
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	61 e0       	ldi	r22, 0x01	; 1
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	62 e0       	ldi	r22, 0x02	; 2
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	0e 94 33 06 	call	0xc66	; 0xc66 <PRV_voidWriteHalfPort>
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	63 e0       	ldi	r22, 0x03	; 3
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     dbe:	8f e9       	ldi	r24, 0x9F	; 159
     dc0:	9f e0       	ldi	r25, 0x0F	; 15
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <LCD_voidInit+0x80>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <LCD_voidInit+0x86>
     dc8:	00 00       	nop
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	63 e0       	ldi	r22, 0x03	; 3
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     dd4:	88 e2       	ldi	r24, 0x28	; 40
     dd6:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
     dda:	90 ef       	ldi	r25, 0xF0	; 240
     ddc:	9a 95       	dec	r25
     dde:	f1 f7       	brne	.-4      	; 0xddc <LCD_voidInit+0x9a>
     de0:	8f e0       	ldi	r24, 0x0F	; 15
     de2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
     de6:	20 ef       	ldi	r18, 0xF0	; 240
     de8:	2a 95       	dec	r18
     dea:	f1 f7       	brne	.-4      	; 0xde8 <LCD_voidInit+0xa6>
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
     df2:	8f e3       	ldi	r24, 0x3F	; 63
     df4:	9f e1       	ldi	r25, 0x1F	; 31
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <LCD_voidInit+0xb4>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <LCD_voidInit+0xba>
     dfc:	00 00       	nop
     dfe:	86 e0       	ldi	r24, 0x06	; 6
     e00:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
     e04:	08 95       	ret

00000e06 <LCD_voidDisplayChar>:
     e06:	cf 93       	push	r28
     e08:	c8 2f       	mov	r28, r24
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	62 e0       	ldi	r22, 0x02	; 2
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     e1e:	8c 2f       	mov	r24, r28
     e20:	82 95       	swap	r24
     e22:	8f 70       	andi	r24, 0x0F	; 15
     e24:	0e 94 33 06 	call	0xc66	; 0xc66 <PRV_voidWriteHalfPort>
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	63 e0       	ldi	r22, 0x03	; 3
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     e32:	8f e9       	ldi	r24, 0x9F	; 159
     e34:	9f e0       	ldi	r25, 0x0F	; 15
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <LCD_voidDisplayChar+0x30>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <LCD_voidDisplayChar+0x36>
     e3c:	00 00       	nop
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	63 e0       	ldi	r22, 0x03	; 3
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     e48:	8c 2f       	mov	r24, r28
     e4a:	0e 94 33 06 	call	0xc66	; 0xc66 <PRV_voidWriteHalfPort>
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	63 e0       	ldi	r22, 0x03	; 3
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     e58:	8f e9       	ldi	r24, 0x9F	; 159
     e5a:	9f e0       	ldi	r25, 0x0F	; 15
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <LCD_voidDisplayChar+0x56>
     e60:	00 c0       	rjmp	.+0      	; 0xe62 <LCD_voidDisplayChar+0x5c>
     e62:	00 00       	nop
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	63 e0       	ldi	r22, 0x03	; 3
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <LCD_voidDisplayString>:
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	29 f4       	brne	.+10     	; 0xe86 <LCD_voidDisplayString+0x14>
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <LCD_voidDisplayString+0x24>
     e7e:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayChar>
     e82:	cf 5f       	subi	r28, 0xFF	; 255
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <LCD_voidDisplayString+0x18>
     e86:	8c 01       	movw	r16, r24
     e88:	c0 e0       	ldi	r28, 0x00	; 0
     e8a:	f8 01       	movw	r30, r16
     e8c:	ec 0f       	add	r30, r28
     e8e:	f1 1d       	adc	r31, r1
     e90:	80 81       	ld	r24, Z
     e92:	81 11       	cpse	r24, r1
     e94:	f4 cf       	rjmp	.-24     	; 0xe7e <LCD_voidDisplayString+0xc>
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <LCD_voidDisplayStringDelay>:
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	71 f4       	brne	.+28     	; 0xec4 <LCD_voidDisplayStringDelay+0x26>
     ea8:	15 c0       	rjmp	.+42     	; 0xed4 <LCD_voidDisplayStringDelay+0x36>
     eaa:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayChar>
     eae:	cf 5f       	subi	r28, 0xFF	; 255
     eb0:	2f ef       	ldi	r18, 0xFF	; 255
     eb2:	80 e7       	ldi	r24, 0x70	; 112
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	21 50       	subi	r18, 0x01	; 1
     eb8:	80 40       	sbci	r24, 0x00	; 0
     eba:	90 40       	sbci	r25, 0x00	; 0
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <LCD_voidDisplayStringDelay+0x18>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <LCD_voidDisplayStringDelay+0x22>
     ec0:	00 00       	nop
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <LCD_voidDisplayStringDelay+0x2a>
     ec4:	8c 01       	movw	r16, r24
     ec6:	c0 e0       	ldi	r28, 0x00	; 0
     ec8:	f8 01       	movw	r30, r16
     eca:	ec 0f       	add	r30, r28
     ecc:	f1 1d       	adc	r31, r1
     ece:	80 81       	ld	r24, Z
     ed0:	81 11       	cpse	r24, r1
     ed2:	eb cf       	rjmp	.-42     	; 0xeaa <LCD_voidDisplayStringDelay+0xc>
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	08 95       	ret

00000edc <LCD_voidDisplayNumber>:
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <LCD_voidDisplayNumber+0xa>
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <LCD_voidDisplayNumber+0xc>
     ee8:	1f 92       	push	r1
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	26 2f       	mov	r18, r22
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	08 c0       	rjmp	.+16     	; 0xf04 <LCD_voidDisplayNumber+0x28>
     ef4:	1f 5f       	subi	r17, 0xFF	; 255
     ef6:	ed ec       	ldi	r30, 0xCD	; 205
     ef8:	6e 9f       	mul	r22, r30
     efa:	61 2d       	mov	r22, r1
     efc:	11 24       	eor	r1, r1
     efe:	66 95       	lsr	r22
     f00:	66 95       	lsr	r22
     f02:	66 95       	lsr	r22
     f04:	61 11       	cpse	r22, r1
     f06:	f6 cf       	rjmp	.-20     	; 0xef4 <LCD_voidDisplayNumber+0x18>
     f08:	00 e0       	ldi	r16, 0x00	; 0
     f0a:	1a c0       	rjmp	.+52     	; 0xf40 <LCD_voidDisplayNumber+0x64>
     f0c:	62 2f       	mov	r22, r18
     f0e:	2a e0       	ldi	r18, 0x0A	; 10
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	0e 94 4e 0b 	call	0x169c	; 0x169c <__udivmodsi4>
     f1a:	73 2f       	mov	r23, r19
     f1c:	84 2f       	mov	r24, r20
     f1e:	95 2f       	mov	r25, r21
     f20:	a0 2f       	mov	r26, r16
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	e1 2f       	mov	r30, r17
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ea 1b       	sub	r30, r26
     f2c:	fb 0b       	sbc	r31, r27
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	4c 0f       	add	r20, r28
     f34:	5d 1f       	adc	r21, r29
     f36:	e4 0f       	add	r30, r20
     f38:	f5 1f       	adc	r31, r21
     f3a:	60 5d       	subi	r22, 0xD0	; 208
     f3c:	60 83       	st	Z, r22
     f3e:	0f 5f       	subi	r16, 0xFF	; 255
     f40:	01 17       	cp	r16, r17
     f42:	20 f3       	brcs	.-56     	; 0xf0c <LCD_voidDisplayNumber+0x30>
     f44:	e1 e0       	ldi	r30, 0x01	; 1
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	ec 0f       	add	r30, r28
     f4a:	fd 1f       	adc	r31, r29
     f4c:	e1 0f       	add	r30, r17
     f4e:	f1 1d       	adc	r31, r1
     f50:	10 82       	st	Z, r1
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <LCD_voidDisplayNumber+0x80>
     f56:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayChar>
     f5a:	1f 5f       	subi	r17, 0xFF	; 255
     f5c:	e1 e0       	ldi	r30, 0x01	; 1
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	ec 0f       	add	r30, r28
     f62:	fd 1f       	adc	r31, r29
     f64:	e1 0f       	add	r30, r17
     f66:	f1 1d       	adc	r31, r1
     f68:	80 81       	ld	r24, Z
     f6a:	81 11       	cpse	r24, r1
     f6c:	f4 cf       	rjmp	.-24     	; 0xf56 <LCD_voidDisplayNumber+0x7a>
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	08 95       	ret

00000f82 <LCD_voidClear>:
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	62 e0       	ldi	r22, 0x02	; 2
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	0e 94 33 06 	call	0xc66	; 0xc66 <PRV_voidWriteHalfPort>
     f9c:	41 e0       	ldi	r20, 0x01	; 1
     f9e:	63 e0       	ldi	r22, 0x03	; 3
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     fa6:	8f e9       	ldi	r24, 0x9F	; 159
     fa8:	9f e0       	ldi	r25, 0x0F	; 15
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <LCD_voidClear+0x28>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <LCD_voidClear+0x2e>
     fb0:	00 00       	nop
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	63 e0       	ldi	r22, 0x03	; 3
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 33 06 	call	0xc66	; 0xc66 <PRV_voidWriteHalfPort>
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	63 e0       	ldi	r22, 0x03	; 3
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     fcc:	8f e9       	ldi	r24, 0x9F	; 159
     fce:	9f e0       	ldi	r25, 0x0F	; 15
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <LCD_voidClear+0x4e>
     fd4:	00 c0       	rjmp	.+0      	; 0xfd6 <LCD_voidClear+0x54>
     fd6:	00 00       	nop
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	63 e0       	ldi	r22, 0x03	; 3
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
     fe2:	08 95       	ret

00000fe4 <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
	if(copy_u8Position<40)
     fe8:	68 32       	cpi	r22, 0x28	; 40
     fea:	a0 f4       	brcc	.+40     	; 0x1014 <LCD_voidGoTOSpecificPosition+0x30>
     fec:	c6 2f       	mov	r28, r22
     fee:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     ff6:	d1 30       	cpi	r29, 0x01	; 1
     ff8:	19 f0       	breq	.+6      	; 0x1000 <LCD_voidGoTOSpecificPosition+0x1c>
     ffa:	d2 30       	cpi	r29, 0x02	; 2
     ffc:	31 f0       	breq	.+12     	; 0x100a <LCD_voidGoTOSpecificPosition+0x26>
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
    1000:	8c 2f       	mov	r24, r28
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
		
			
			break;
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
    100a:	80 e4       	ldi	r24, 0x40	; 64
    100c:	8c 0f       	add	r24, r28
    100e:	80 68       	ori	r24, 0x80	; 128
    1010:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
    101a:	41 e0       	ldi	r20, 0x01	; 1
    101c:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_voidSetPinDirection>
    1020:	08 95       	ret

00001022 <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    1022:	41 30       	cpi	r20, 0x01	; 1
    1024:	19 f0       	breq	.+6      	; 0x102c <LED_voidOn+0xa>
    1026:	42 30       	cpi	r20, 0x02	; 2
    1028:	29 f0       	breq	.+10     	; 0x1034 <LED_voidOn+0x12>
    102a:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
		break;
    1032:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
    103a:	08 95       	ret

0000103c <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    103c:	41 30       	cpi	r20, 0x01	; 1
    103e:	19 f0       	breq	.+6      	; 0x1046 <LED_voidOff+0xa>
    1040:	42 30       	cpi	r20, 0x02	; 2
    1042:	29 f0       	breq	.+10     	; 0x104e <LED_voidOff+0x12>
    1044:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
		break;
    104c:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 0d 09 	call	0x121a	; 0x121a <DIO_voidSetPinValue>
    1054:	08 95       	ret

00001056 <main>:

extern u8 global_accessType;

int main()
{
	APP_init();
    1056:	0e 94 45 02 	call	0x48a	; 0x48a <APP_init>
    105a:	2f ef       	ldi	r18, 0xFF	; 255
    105c:	83 ed       	ldi	r24, 0xD3	; 211
    105e:	90 e3       	ldi	r25, 0x30	; 48
    1060:	21 50       	subi	r18, 0x01	; 1
    1062:	80 40       	sbci	r24, 0x00	; 0
    1064:	90 40       	sbci	r25, 0x00	; 0
    1066:	e1 f7       	brne	.-8      	; 0x1060 <main+0xa>
    1068:	00 c0       	rjmp	.+0      	; 0x106a <main+0x14>
    106a:	00 00       	nop
_delay_ms(1000);


	while(1)
	{
		if (global_accessType ==accessPermited)
    106c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	19 f4       	brne	.+6      	; 0x107a <main+0x24>
		{
		KPD_Interface_user();
    1074:	0e 94 c9 02 	call	0x592	; 0x592 <KPD_Interface_user>
    1078:	f9 cf       	rjmp	.-14     	; 0x106c <main+0x16>
		}
		else if (global_accessType ==accessDenied)
    107a:	81 11       	cpse	r24, r1
    107c:	f7 cf       	rjmp	.-18     	; 0x106c <main+0x16>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
    107e:	81 e5       	ldi	r24, 0x51	; 81
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	0e 94 39 07 	call	0xe72	; 0xe72 <LCD_voidDisplayString>
		}
		
		
		
	}
}
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	08 95       	ret

0000108c <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	59 f0       	breq	.+22     	; 0x10a6 <ADC_voidInit+0x1a>
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	81 f0       	breq	.+32     	; 0x10b4 <ADC_voidInit+0x28>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	a1 f4       	brne	.+40     	; 0x10c0 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
    1098:	87 b1       	in	r24, 0x07	; 7
    109a:	80 64       	ori	r24, 0x40	; 64
    109c:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    109e:	87 b1       	in	r24, 0x07	; 7
    10a0:	8f 77       	andi	r24, 0x7F	; 127
    10a2:	87 b9       	out	0x07, r24	; 7
		break;
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
    10a6:	87 b1       	in	r24, 0x07	; 7
    10a8:	8f 7b       	andi	r24, 0xBF	; 191
    10aa:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    10ac:	87 b1       	in	r24, 0x07	; 7
    10ae:	8f 77       	andi	r24, 0x7F	; 127
    10b0:	87 b9       	out	0x07, r24	; 7
		break;
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
    10b4:	87 b1       	in	r24, 0x07	; 7
    10b6:	80 64       	ori	r24, 0x40	; 64
    10b8:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
    10ba:	87 b1       	in	r24, 0x07	; 7
    10bc:	80 68       	ori	r24, 0x80	; 128
    10be:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
    10c0:	87 b1       	in	r24, 0x07	; 7
    10c2:	8f 7d       	andi	r24, 0xDF	; 223
    10c4:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
    10c6:	86 b1       	in	r24, 0x06	; 6
    10c8:	8f 7d       	andi	r24, 0xDF	; 223
    10ca:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
    10cc:	86 b1       	in	r24, 0x06	; 6
    10ce:	87 7f       	andi	r24, 0xF7	; 247
    10d0:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
    10d2:	86 b1       	in	r24, 0x06	; 6
    10d4:	84 60       	ori	r24, 0x04	; 4
    10d6:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
    10d8:	86 b1       	in	r24, 0x06	; 6
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
    10de:	86 b1       	in	r24, 0x06	; 6
    10e0:	81 60       	ori	r24, 0x01	; 1
    10e2:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
    10e4:	86 b1       	in	r24, 0x06	; 6
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	86 b9       	out	0x06, r24	; 6
    10ea:	08 95       	ret

000010ec <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
    10ec:	61 15       	cp	r22, r1
    10ee:	71 05       	cpc	r23, r1
    10f0:	99 f0       	breq	.+38     	; 0x1118 <ADC_voidGetDigitalValue+0x2c>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
    10f2:	97 b1       	in	r25, 0x07	; 7
    10f4:	90 7e       	andi	r25, 0xE0	; 224
    10f6:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
    10f8:	97 b1       	in	r25, 0x07	; 7
    10fa:	89 2b       	or	r24, r25
    10fc:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
    10fe:	86 b1       	in	r24, 0x06	; 6
    1100:	80 64       	ori	r24, 0x40	; 64
    1102:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
    1104:	34 9b       	sbis	0x06, 4	; 6
    1106:	fe cf       	rjmp	.-4      	; 0x1104 <ADC_voidGetDigitalValue+0x18>
		//Clear Flag(write one to clear)
		SET_BIT(ADCSRA_REG,ADIF);
    1108:	86 b1       	in	r24, 0x06	; 6
    110a:	80 61       	ori	r24, 0x10	; 16
    110c:	86 b9       	out	0x06, r24	; 6
		
		*copy_pu16DigitalValue = ADC_u16_REG;
    110e:	84 b1       	in	r24, 0x04	; 4
    1110:	95 b1       	in	r25, 0x05	; 5
    1112:	fb 01       	movw	r30, r22
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
    1118:	08 95       	ret

0000111a <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    111a:	84 30       	cpi	r24, 0x04	; 4
    111c:	08 f0       	brcs	.+2      	; 0x1120 <DIO_voidSetPinDirection+0x6>
    111e:	7c c0       	rjmp	.+248    	; 0x1218 <DIO_voidSetPinDirection+0xfe>
    1120:	68 30       	cpi	r22, 0x08	; 8
    1122:	08 f0       	brcs	.+2      	; 0x1126 <DIO_voidSetPinDirection+0xc>
    1124:	79 c0       	rjmp	.+242    	; 0x1218 <DIO_voidSetPinDirection+0xfe>
    1126:	42 30       	cpi	r20, 0x02	; 2
    1128:	08 f0       	brcs	.+2      	; 0x112c <DIO_voidSetPinDirection+0x12>
    112a:	76 c0       	rjmp	.+236    	; 0x1218 <DIO_voidSetPinDirection+0xfe>
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	19 f1       	breq	.+70     	; 0x1176 <DIO_voidSetPinDirection+0x5c>
    1130:	30 f0       	brcs	.+12     	; 0x113e <DIO_voidSetPinDirection+0x24>
    1132:	82 30       	cpi	r24, 0x02	; 2
    1134:	e1 f1       	breq	.+120    	; 0x11ae <DIO_voidSetPinDirection+0x94>
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	09 f4       	brne	.+2      	; 0x113c <DIO_voidSetPinDirection+0x22>
    113a:	54 c0       	rjmp	.+168    	; 0x11e4 <DIO_voidSetPinDirection+0xca>
    113c:	08 95       	ret
    113e:	44 23       	and	r20, r20
    1140:	71 f0       	breq	.+28     	; 0x115e <DIO_voidSetPinDirection+0x44>
    1142:	41 30       	cpi	r20, 0x01	; 1
    1144:	09 f0       	breq	.+2      	; 0x1148 <DIO_voidSetPinDirection+0x2e>
    1146:	68 c0       	rjmp	.+208    	; 0x1218 <DIO_voidSetPinDirection+0xfe>
    1148:	2a b3       	in	r18, 0x1a	; 26
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_voidSetPinDirection+0x3a>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	6a 95       	dec	r22
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_voidSetPinDirection+0x36>
    1158:	82 2b       	or	r24, r18
    115a:	8a bb       	out	0x1a, r24	; 26
    115c:	08 95       	ret
    115e:	2a b3       	in	r18, 0x1a	; 26
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_voidSetPinDirection+0x50>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	6a 95       	dec	r22
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_voidSetPinDirection+0x4c>
    116e:	80 95       	com	r24
    1170:	82 23       	and	r24, r18
    1172:	8a bb       	out	0x1a, r24	; 26
    1174:	08 95       	ret
    1176:	44 23       	and	r20, r20
    1178:	71 f0       	breq	.+28     	; 0x1196 <DIO_voidSetPinDirection+0x7c>
    117a:	41 30       	cpi	r20, 0x01	; 1
    117c:	09 f0       	breq	.+2      	; 0x1180 <DIO_voidSetPinDirection+0x66>
    117e:	4c c0       	rjmp	.+152    	; 0x1218 <DIO_voidSetPinDirection+0xfe>
    1180:	27 b3       	in	r18, 0x17	; 23
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_voidSetPinDirection+0x72>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	6a 95       	dec	r22
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_voidSetPinDirection+0x6e>
    1190:	82 2b       	or	r24, r18
    1192:	87 bb       	out	0x17, r24	; 23
    1194:	08 95       	ret
    1196:	27 b3       	in	r18, 0x17	; 23
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_voidSetPinDirection+0x88>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	6a 95       	dec	r22
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_voidSetPinDirection+0x84>
    11a6:	80 95       	com	r24
    11a8:	82 23       	and	r24, r18
    11aa:	87 bb       	out	0x17, r24	; 23
    11ac:	08 95       	ret
    11ae:	44 23       	and	r20, r20
    11b0:	69 f0       	breq	.+26     	; 0x11cc <DIO_voidSetPinDirection+0xb2>
    11b2:	41 30       	cpi	r20, 0x01	; 1
    11b4:	89 f5       	brne	.+98     	; 0x1218 <DIO_voidSetPinDirection+0xfe>
    11b6:	24 b3       	in	r18, 0x14	; 20
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_voidSetPinDirection+0xa8>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	6a 95       	dec	r22
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_voidSetPinDirection+0xa4>
    11c6:	82 2b       	or	r24, r18
    11c8:	84 bb       	out	0x14, r24	; 20
    11ca:	08 95       	ret
    11cc:	24 b3       	in	r18, 0x14	; 20
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_voidSetPinDirection+0xbe>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	6a 95       	dec	r22
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_voidSetPinDirection+0xba>
    11dc:	80 95       	com	r24
    11de:	82 23       	and	r24, r18
    11e0:	84 bb       	out	0x14, r24	; 20
    11e2:	08 95       	ret
    11e4:	44 23       	and	r20, r20
    11e6:	69 f0       	breq	.+26     	; 0x1202 <DIO_voidSetPinDirection+0xe8>
    11e8:	41 30       	cpi	r20, 0x01	; 1
    11ea:	b1 f4       	brne	.+44     	; 0x1218 <DIO_voidSetPinDirection+0xfe>
    11ec:	21 b3       	in	r18, 0x11	; 17
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_voidSetPinDirection+0xde>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	6a 95       	dec	r22
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_voidSetPinDirection+0xda>
    11fc:	82 2b       	or	r24, r18
    11fe:	81 bb       	out	0x11, r24	; 17
    1200:	08 95       	ret
    1202:	21 b3       	in	r18, 0x11	; 17
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_voidSetPinDirection+0xf4>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	6a 95       	dec	r22
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_voidSetPinDirection+0xf0>
    1212:	80 95       	com	r24
    1214:	82 23       	and	r24, r18
    1216:	81 bb       	out	0x11, r24	; 17
    1218:	08 95       	ret

0000121a <DIO_voidSetPinValue>:
    121a:	84 30       	cpi	r24, 0x04	; 4
    121c:	08 f0       	brcs	.+2      	; 0x1220 <DIO_voidSetPinValue+0x6>
    121e:	7c c0       	rjmp	.+248    	; 0x1318 <DIO_voidSetPinValue+0xfe>
    1220:	68 30       	cpi	r22, 0x08	; 8
    1222:	08 f0       	brcs	.+2      	; 0x1226 <DIO_voidSetPinValue+0xc>
    1224:	79 c0       	rjmp	.+242    	; 0x1318 <DIO_voidSetPinValue+0xfe>
    1226:	42 30       	cpi	r20, 0x02	; 2
    1228:	08 f0       	brcs	.+2      	; 0x122c <DIO_voidSetPinValue+0x12>
    122a:	76 c0       	rjmp	.+236    	; 0x1318 <DIO_voidSetPinValue+0xfe>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	19 f1       	breq	.+70     	; 0x1276 <DIO_voidSetPinValue+0x5c>
    1230:	30 f0       	brcs	.+12     	; 0x123e <DIO_voidSetPinValue+0x24>
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	e1 f1       	breq	.+120    	; 0x12ae <DIO_voidSetPinValue+0x94>
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	09 f4       	brne	.+2      	; 0x123c <DIO_voidSetPinValue+0x22>
    123a:	54 c0       	rjmp	.+168    	; 0x12e4 <DIO_voidSetPinValue+0xca>
    123c:	08 95       	ret
    123e:	44 23       	and	r20, r20
    1240:	71 f0       	breq	.+28     	; 0x125e <DIO_voidSetPinValue+0x44>
    1242:	41 30       	cpi	r20, 0x01	; 1
    1244:	09 f0       	breq	.+2      	; 0x1248 <DIO_voidSetPinValue+0x2e>
    1246:	68 c0       	rjmp	.+208    	; 0x1318 <DIO_voidSetPinValue+0xfe>
    1248:	2b b3       	in	r18, 0x1b	; 27
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_voidSetPinValue+0x3a>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	6a 95       	dec	r22
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_voidSetPinValue+0x36>
    1258:	82 2b       	or	r24, r18
    125a:	8b bb       	out	0x1b, r24	; 27
    125c:	08 95       	ret
    125e:	2b b3       	in	r18, 0x1b	; 27
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 c0       	rjmp	.+4      	; 0x126a <DIO_voidSetPinValue+0x50>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	6a 95       	dec	r22
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <DIO_voidSetPinValue+0x4c>
    126e:	80 95       	com	r24
    1270:	82 23       	and	r24, r18
    1272:	8b bb       	out	0x1b, r24	; 27
    1274:	08 95       	ret
    1276:	44 23       	and	r20, r20
    1278:	71 f0       	breq	.+28     	; 0x1296 <DIO_voidSetPinValue+0x7c>
    127a:	41 30       	cpi	r20, 0x01	; 1
    127c:	09 f0       	breq	.+2      	; 0x1280 <DIO_voidSetPinValue+0x66>
    127e:	4c c0       	rjmp	.+152    	; 0x1318 <DIO_voidSetPinValue+0xfe>
    1280:	28 b3       	in	r18, 0x18	; 24
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_voidSetPinValue+0x72>
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	6a 95       	dec	r22
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_voidSetPinValue+0x6e>
    1290:	82 2b       	or	r24, r18
    1292:	88 bb       	out	0x18, r24	; 24
    1294:	08 95       	ret
    1296:	28 b3       	in	r18, 0x18	; 24
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_voidSetPinValue+0x88>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	6a 95       	dec	r22
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_voidSetPinValue+0x84>
    12a6:	80 95       	com	r24
    12a8:	82 23       	and	r24, r18
    12aa:	88 bb       	out	0x18, r24	; 24
    12ac:	08 95       	ret
    12ae:	44 23       	and	r20, r20
    12b0:	69 f0       	breq	.+26     	; 0x12cc <DIO_voidSetPinValue+0xb2>
    12b2:	41 30       	cpi	r20, 0x01	; 1
    12b4:	89 f5       	brne	.+98     	; 0x1318 <DIO_voidSetPinValue+0xfe>
    12b6:	25 b3       	in	r18, 0x15	; 21
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_voidSetPinValue+0xa8>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	6a 95       	dec	r22
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_voidSetPinValue+0xa4>
    12c6:	82 2b       	or	r24, r18
    12c8:	85 bb       	out	0x15, r24	; 21
    12ca:	08 95       	ret
    12cc:	25 b3       	in	r18, 0x15	; 21
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_voidSetPinValue+0xbe>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	6a 95       	dec	r22
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_voidSetPinValue+0xba>
    12dc:	80 95       	com	r24
    12de:	82 23       	and	r24, r18
    12e0:	85 bb       	out	0x15, r24	; 21
    12e2:	08 95       	ret
    12e4:	44 23       	and	r20, r20
    12e6:	69 f0       	breq	.+26     	; 0x1302 <DIO_voidSetPinValue+0xe8>
    12e8:	41 30       	cpi	r20, 0x01	; 1
    12ea:	b1 f4       	brne	.+44     	; 0x1318 <DIO_voidSetPinValue+0xfe>
    12ec:	22 b3       	in	r18, 0x12	; 18
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_voidSetPinValue+0xde>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	6a 95       	dec	r22
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_voidSetPinValue+0xda>
    12fc:	82 2b       	or	r24, r18
    12fe:	82 bb       	out	0x12, r24	; 18
    1300:	08 95       	ret
    1302:	22 b3       	in	r18, 0x12	; 18
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <DIO_voidSetPinValue+0xf4>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	6a 95       	dec	r22
    1310:	e2 f7       	brpl	.-8      	; 0x130a <DIO_voidSetPinValue+0xf0>
    1312:	80 95       	com	r24
    1314:	82 23       	and	r24, r18
    1316:	82 bb       	out	0x12, r24	; 18
    1318:	08 95       	ret

0000131a <DIO_voidGetPinValue>:
    131a:	84 30       	cpi	r24, 0x04	; 4
    131c:	c0 f5       	brcc	.+112    	; 0x138e <DIO_voidGetPinValue+0x74>
    131e:	68 30       	cpi	r22, 0x08	; 8
    1320:	b0 f5       	brcc	.+108    	; 0x138e <DIO_voidGetPinValue+0x74>
    1322:	41 15       	cp	r20, r1
    1324:	51 05       	cpc	r21, r1
    1326:	99 f1       	breq	.+102    	; 0x138e <DIO_voidGetPinValue+0x74>
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	89 f0       	breq	.+34     	; 0x134e <DIO_voidGetPinValue+0x34>
    132c:	28 f0       	brcs	.+10     	; 0x1338 <DIO_voidGetPinValue+0x1e>
    132e:	82 30       	cpi	r24, 0x02	; 2
    1330:	c9 f0       	breq	.+50     	; 0x1364 <DIO_voidGetPinValue+0x4a>
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	11 f1       	breq	.+68     	; 0x137a <DIO_voidGetPinValue+0x60>
    1336:	08 95       	ret
    1338:	89 b3       	in	r24, 0x19	; 25
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_voidGetPinValue+0x28>
    133e:	95 95       	asr	r25
    1340:	87 95       	ror	r24
    1342:	6a 95       	dec	r22
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_voidGetPinValue+0x24>
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	fa 01       	movw	r30, r20
    134a:	80 83       	st	Z, r24
    134c:	08 95       	ret
    134e:	86 b3       	in	r24, 0x16	; 22
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_voidGetPinValue+0x3e>
    1354:	95 95       	asr	r25
    1356:	87 95       	ror	r24
    1358:	6a 95       	dec	r22
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_voidGetPinValue+0x3a>
    135c:	81 70       	andi	r24, 0x01	; 1
    135e:	fa 01       	movw	r30, r20
    1360:	80 83       	st	Z, r24
    1362:	08 95       	ret
    1364:	83 b3       	in	r24, 0x13	; 19
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_voidGetPinValue+0x54>
    136a:	95 95       	asr	r25
    136c:	87 95       	ror	r24
    136e:	6a 95       	dec	r22
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_voidGetPinValue+0x50>
    1372:	81 70       	andi	r24, 0x01	; 1
    1374:	fa 01       	movw	r30, r20
    1376:	80 83       	st	Z, r24
    1378:	08 95       	ret
    137a:	80 b3       	in	r24, 0x10	; 16
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_voidGetPinValue+0x6a>
    1380:	95 95       	asr	r25
    1382:	87 95       	ror	r24
    1384:	6a 95       	dec	r22
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_voidGetPinValue+0x66>
    1388:	81 70       	andi	r24, 0x01	; 1
    138a:	fa 01       	movw	r30, r20
    138c:	80 83       	st	Z, r24
    138e:	08 95       	ret

00001390 <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	a8 f5       	brcc	.+106    	; 0x13fe <DIO_voidActivePinInPullUpResistance+0x6e>
    1394:	68 30       	cpi	r22, 0x08	; 8
    1396:	98 f5       	brcc	.+102    	; 0x13fe <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	89 f0       	breq	.+34     	; 0x13be <DIO_voidActivePinInPullUpResistance+0x2e>
    139c:	28 f0       	brcs	.+10     	; 0x13a8 <DIO_voidActivePinInPullUpResistance+0x18>
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	c9 f0       	breq	.+50     	; 0x13d4 <DIO_voidActivePinInPullUpResistance+0x44>
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	11 f1       	breq	.+68     	; 0x13ea <DIO_voidActivePinInPullUpResistance+0x5a>
    13a6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    13a8:	2b b3       	in	r18, 0x1b	; 27
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <DIO_voidActivePinInPullUpResistance+0x24>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	6a 95       	dec	r22
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <DIO_voidActivePinInPullUpResistance+0x20>
    13b8:	82 2b       	or	r24, r18
    13ba:	8b bb       	out	0x1b, r24	; 27
			break;
    13bc:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    13be:	28 b3       	in	r18, 0x18	; 24
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_voidActivePinInPullUpResistance+0x3a>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	6a 95       	dec	r22
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_voidActivePinInPullUpResistance+0x36>
    13ce:	82 2b       	or	r24, r18
    13d0:	88 bb       	out	0x18, r24	; 24
			break;
    13d2:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    13d4:	25 b3       	in	r18, 0x15	; 21
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_voidActivePinInPullUpResistance+0x50>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	6a 95       	dec	r22
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_voidActivePinInPullUpResistance+0x4c>
    13e4:	82 2b       	or	r24, r18
    13e6:	85 bb       	out	0x15, r24	; 21
			break;
    13e8:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    13ea:	22 b3       	in	r18, 0x12	; 18
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_voidActivePinInPullUpResistance+0x66>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	6a 95       	dec	r22
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_voidActivePinInPullUpResistance+0x62>
    13fa:	82 2b       	or	r24, r18
    13fc:	82 bb       	out	0x12, r24	; 18
    13fe:	08 95       	ret

00001400 <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    1400:	8f b7       	in	r24, 0x3f	; 63
    1402:	80 68       	ori	r24, 0x80	; 128
    1404:	8f bf       	out	0x3f, r24	; 63
    1406:	08 95       	ret

00001408 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    1408:	83 b7       	in	r24, 0x33	; 51
    140a:	8f 7b       	andi	r24, 0xBF	; 191
    140c:	83 bf       	out	0x33, r24	; 51
    140e:	83 b7       	in	r24, 0x33	; 51
    1410:	88 60       	ori	r24, 0x08	; 8
    1412:	83 bf       	out	0x33, r24	; 51
    1414:	83 b7       	in	r24, 0x33	; 51
    1416:	8f 7e       	andi	r24, 0xEF	; 239
    1418:	83 bf       	out	0x33, r24	; 51
    141a:	83 b7       	in	r24, 0x33	; 51
    141c:	8f 7d       	andi	r24, 0xDF	; 223
    141e:	83 bf       	out	0x33, r24	; 51
    1420:	89 b7       	in	r24, 0x39	; 57
    1422:	82 60       	ori	r24, 0x02	; 2
    1424:	89 bf       	out	0x39, r24	; 57
    1426:	89 ef       	ldi	r24, 0xF9	; 249
    1428:	8c bf       	out	0x3c, r24	; 60
    142a:	08 95       	ret

0000142c <TMR0_voidStart>:
    142c:	83 b7       	in	r24, 0x33	; 51
    142e:	81 60       	ori	r24, 0x01	; 1
    1430:	83 bf       	out	0x33, r24	; 51
    1432:	83 b7       	in	r24, 0x33	; 51
    1434:	82 60       	ori	r24, 0x02	; 2
    1436:	83 bf       	out	0x33, r24	; 51
    1438:	83 b7       	in	r24, 0x33	; 51
    143a:	8b 7f       	andi	r24, 0xFB	; 251
    143c:	83 bf       	out	0x33, r24	; 51
    143e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <local_u16Counter+0x1>
    1442:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <local_u16Counter>
    1446:	08 95       	ret

00001448 <TMR0_voidStop>:
    1448:	83 b7       	in	r24, 0x33	; 51
    144a:	8e 7f       	andi	r24, 0xFE	; 254
    144c:	83 bf       	out	0x33, r24	; 51
    144e:	83 b7       	in	r24, 0x33	; 51
    1450:	8d 7f       	andi	r24, 0xFD	; 253
    1452:	83 bf       	out	0x33, r24	; 51
    1454:	83 b7       	in	r24, 0x33	; 51
    1456:	8b 7f       	andi	r24, 0xFB	; 251
    1458:	83 bf       	out	0x33, r24	; 51
    145a:	08 95       	ret

0000145c <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	21 f0       	breq	.+8      	; 0x1468 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    1460:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <PRV_pFunCallBackCTC+0x1>
    1464:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <PRV_pFunCallBackCTC>
    1468:	08 95       	ret

0000146a <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    146a:	88 b7       	in	r24, 0x38	; 56
    146c:	82 60       	ori	r24, 0x02	; 2
    146e:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    1470:	88 b7       	in	r24, 0x38	; 56
    1472:	81 60       	ori	r24, 0x01	; 1
    1474:	88 bf       	out	0x38, r24	; 56
    1476:	08 95       	ret

00001478 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
	
	
	local_u16Counter++;
    149a:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <local_u16Counter>
    149e:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <local_u16Counter+0x1>
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <local_u16Counter+0x1>
    14a8:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    14ac:	88 3e       	cpi	r24, 0xE8	; 232
    14ae:	93 40       	sbci	r25, 0x03	; 3
    14b0:	69 f4       	brne	.+26     	; 0x14cc <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    14b2:	81 e7       	ldi	r24, 0x71	; 113
    14b4:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    14b6:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <local_u16Counter+0x1>
    14ba:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    14be:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <PRV_pFunCallBackOVF>
    14c2:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <PRV_pFunCallBackOVF+0x1>
    14c6:	30 97       	sbiw	r30, 0x00	; 0
    14c8:	09 f0       	breq	.+2      	; 0x14cc <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    14ca:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    14cc:	ff 91       	pop	r31
    14ce:	ef 91       	pop	r30
    14d0:	bf 91       	pop	r27
    14d2:	af 91       	pop	r26
    14d4:	9f 91       	pop	r25
    14d6:	8f 91       	pop	r24
    14d8:	7f 91       	pop	r23
    14da:	6f 91       	pop	r22
    14dc:	5f 91       	pop	r21
    14de:	4f 91       	pop	r20
    14e0:	3f 91       	pop	r19
    14e2:	2f 91       	pop	r18
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti

000014ee <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	2f 93       	push	r18
    14fa:	3f 93       	push	r19
    14fc:	4f 93       	push	r20
    14fe:	5f 93       	push	r21
    1500:	6f 93       	push	r22
    1502:	7f 93       	push	r23
    1504:	8f 93       	push	r24
    1506:	9f 93       	push	r25
    1508:	af 93       	push	r26
    150a:	bf 93       	push	r27
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
	

	
	local_u16Counter++;
    1510:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <local_u16Counter>
    1514:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <local_u16Counter+0x1>
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <local_u16Counter+0x1>
    151e:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    1522:	88 38       	cpi	r24, 0x88	; 136
    1524:	93 41       	sbci	r25, 0x13	; 19
    1526:	69 f4       	brne	.+26     	; 0x1542 <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    1528:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <local_u16Counter+0x1>
    152c:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    1530:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <PRV_pFunCallBackCTC>
    1534:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <PRV_pFunCallBackCTC+0x1>
    1538:	30 97       	sbiw	r30, 0x00	; 0
    153a:	19 f0       	breq	.+6      	; 0x1542 <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    153c:	09 95       	icall
			TMR0clear_flag();
    153e:	0e 94 35 0a 	call	0x146a	; 0x146a <TMR0clear_flag>
		{
				//error state
		}
	}
	
    1542:	ff 91       	pop	r31
    1544:	ef 91       	pop	r30
    1546:	bf 91       	pop	r27
    1548:	af 91       	pop	r26
    154a:	9f 91       	pop	r25
    154c:	8f 91       	pop	r24
    154e:	7f 91       	pop	r23
    1550:	6f 91       	pop	r22
    1552:	5f 91       	pop	r21
    1554:	4f 91       	pop	r20
    1556:	3f 91       	pop	r19
    1558:	2f 91       	pop	r18
    155a:	0f 90       	pop	r0
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	0f 90       	pop	r0
    1560:	1f 90       	pop	r1
    1562:	18 95       	reti

00001564 <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
    1564:	8c e0       	ldi	r24, 0x0C	; 12
    1566:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
    1568:	81 b1       	in	r24, 0x01	; 1
    156a:	8d 7f       	andi	r24, 0xFD	; 253
    156c:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
    156e:	81 b1       	in	r24, 0x01	; 1
    1570:	8e 7f       	andi	r24, 0xFE	; 254
    1572:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
    1574:	86 b7       	in	r24, 0x36	; 54
    1576:	84 60       	ori	r24, 0x04	; 4
    1578:	86 bf       	out	0x36, r24	; 54
    157a:	08 95       	ret

0000157c <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    157c:	86 b7       	in	r24, 0x36	; 54
    157e:	80 62       	ori	r24, 0x20	; 32
    1580:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    1582:	86 b7       	in	r24, 0x36	; 54
    1584:	80 68       	ori	r24, 0x80	; 128
    1586:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    1588:	06 b6       	in	r0, 0x36	; 54
    158a:	07 fe       	sbrs	r0, 7
    158c:	fd cf       	rjmp	.-6      	; 0x1588 <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
    158e:	81 b1       	in	r24, 0x01	; 1
    1590:	88 7f       	andi	r24, 0xF8	; 248
    1592:	88 30       	cpi	r24, 0x08	; 8
    1594:	e1 f7       	brne	.-8      	; 0x158e <TWI_voidSendStartCondition+0x12>
}
    1596:	08 95       	ret

00001598 <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    1598:	86 b7       	in	r24, 0x36	; 54
    159a:	80 62       	ori	r24, 0x20	; 32
    159c:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    159e:	86 b7       	in	r24, 0x36	; 54
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    15a4:	06 b6       	in	r0, 0x36	; 54
    15a6:	07 fe       	sbrs	r0, 7
    15a8:	fd cf       	rjmp	.-6      	; 0x15a4 <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
    15aa:	81 b1       	in	r24, 0x01	; 1
    15ac:	88 7f       	andi	r24, 0xF8	; 248
    15ae:	80 31       	cpi	r24, 0x10	; 16
    15b0:	e1 f7       	brne	.-8      	; 0x15aa <TWI_voidSendRepeatedStartCondition+0x12>
}
    15b2:	08 95       	ret

000015b4 <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
    15b4:	86 b7       	in	r24, 0x36	; 54
    15b6:	80 61       	ori	r24, 0x10	; 16
    15b8:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    15ba:	86 b7       	in	r24, 0x36	; 54
    15bc:	80 68       	ori	r24, 0x80	; 128
    15be:	86 bf       	out	0x36, r24	; 54
    15c0:	08 95       	ret

000015c2 <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    15c2:	88 23       	and	r24, r24
    15c4:	94 f0       	brlt	.+36     	; 0x15ea <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    15c6:	88 0f       	add	r24, r24
    15c8:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
    15ca:	83 b1       	in	r24, 0x03	; 3
    15cc:	8e 7f       	andi	r24, 0xFE	; 254
    15ce:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    15d0:	86 b7       	in	r24, 0x36	; 54
    15d2:	8f 7d       	andi	r24, 0xDF	; 223
    15d4:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    15d6:	86 b7       	in	r24, 0x36	; 54
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    15dc:	06 b6       	in	r0, 0x36	; 54
    15de:	07 fe       	sbrs	r0, 7
    15e0:	fd cf       	rjmp	.-6      	; 0x15dc <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    15e2:	81 b1       	in	r24, 0x01	; 1
    15e4:	88 7f       	andi	r24, 0xF8	; 248
    15e6:	88 31       	cpi	r24, 0x18	; 24
    15e8:	e1 f7       	brne	.-8      	; 0x15e2 <TWI_voidSendSlaveAddWithWrite+0x20>
    15ea:	08 95       	ret

000015ec <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    15ec:	88 23       	and	r24, r24
    15ee:	94 f0       	brlt	.+36     	; 0x1614 <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    15f0:	88 0f       	add	r24, r24
    15f2:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
    15f4:	83 b1       	in	r24, 0x03	; 3
    15f6:	81 60       	ori	r24, 0x01	; 1
    15f8:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    15fa:	86 b7       	in	r24, 0x36	; 54
    15fc:	8f 7d       	andi	r24, 0xDF	; 223
    15fe:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    1600:	86 b7       	in	r24, 0x36	; 54
    1602:	80 68       	ori	r24, 0x80	; 128
    1604:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    1606:	06 b6       	in	r0, 0x36	; 54
    1608:	07 fe       	sbrs	r0, 7
    160a:	fd cf       	rjmp	.-6      	; 0x1606 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    160c:	81 b1       	in	r24, 0x01	; 1
    160e:	88 7f       	andi	r24, 0xF8	; 248
    1610:	80 34       	cpi	r24, 0x40	; 64
    1612:	e1 f7       	brne	.-8      	; 0x160c <TWI_voidSendSlaveAddWithRead+0x20>
    1614:	08 95       	ret

00001616 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    1616:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    1618:	86 b7       	in	r24, 0x36	; 54
    161a:	80 68       	ori	r24, 0x80	; 128
    161c:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    161e:	06 b6       	in	r0, 0x36	; 54
    1620:	07 fe       	sbrs	r0, 7
    1622:	fd cf       	rjmp	.-6      	; 0x161e <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    1624:	81 b1       	in	r24, 0x01	; 1
    1626:	88 7f       	andi	r24, 0xF8	; 248
    1628:	88 32       	cpi	r24, 0x28	; 40
    162a:	e1 f7       	brne	.-8      	; 0x1624 <TWI_voidTransmitMasterDataByte+0xe>
}
    162c:	08 95       	ret

0000162e <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
    162e:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    1630:	89 2b       	or	r24, r25
    1632:	91 f0       	breq	.+36     	; 0x1658 <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
    1634:	96 b7       	in	r25, 0x36	; 54
    1636:	90 64       	ori	r25, 0x40	; 64
    1638:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    163a:	96 b7       	in	r25, 0x36	; 54
    163c:	90 68       	ori	r25, 0x80	; 128
    163e:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    1640:	06 b6       	in	r0, 0x36	; 54
    1642:	07 fe       	sbrs	r0, 7
    1644:	fd cf       	rjmp	.-6      	; 0x1640 <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
    1646:	91 b1       	in	r25, 0x01	; 1
    1648:	98 7f       	andi	r25, 0xF8	; 248
    164a:	90 35       	cpi	r25, 0x50	; 80
    164c:	e1 f7       	brne	.-8      	; 0x1646 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
    164e:	83 b1       	in	r24, 0x03	; 3
    1650:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
    1652:	86 b7       	in	r24, 0x36	; 54
    1654:	8f 7b       	andi	r24, 0xBF	; 191
    1656:	86 bf       	out	0x36, r24	; 54
    1658:	08 95       	ret

0000165a <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
    165a:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    165c:	89 2b       	or	r24, r25
    165e:	61 f0       	breq	.+24     	; 0x1678 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    1660:	96 b7       	in	r25, 0x36	; 54
    1662:	90 68       	ori	r25, 0x80	; 128
    1664:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    1666:	06 b6       	in	r0, 0x36	; 54
    1668:	07 fe       	sbrs	r0, 7
    166a:	fd cf       	rjmp	.-6      	; 0x1666 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
    166c:	91 b1       	in	r25, 0x01	; 1
    166e:	98 7f       	andi	r25, 0xF8	; 248
    1670:	98 35       	cpi	r25, 0x58	; 88
    1672:	e1 f7       	brne	.-8      	; 0x166c <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
    1674:	83 b1       	in	r24, 0x03	; 3
    1676:	80 83       	st	Z, r24
    1678:	08 95       	ret

0000167a <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    167a:	8b b1       	in	r24, 0x0b	; 11
    167c:	8d 7f       	andi	r24, 0xFD	; 253
    167e:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    1680:	87 e6       	ldi	r24, 0x67	; 103
    1682:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    1684:	8a b1       	in	r24, 0x0a	; 10
    1686:	8b 7f       	andi	r24, 0xFB	; 251
    1688:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    168a:	86 e8       	ldi	r24, 0x86	; 134
    168c:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    168e:	8a b1       	in	r24, 0x0a	; 10
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    1694:	8a b1       	in	r24, 0x0a	; 10
    1696:	88 60       	ori	r24, 0x08	; 8
    1698:	8a b9       	out	0x0a, r24	; 10
    169a:	08 95       	ret

0000169c <__udivmodsi4>:
    169c:	a1 e2       	ldi	r26, 0x21	; 33
    169e:	1a 2e       	mov	r1, r26
    16a0:	aa 1b       	sub	r26, r26
    16a2:	bb 1b       	sub	r27, r27
    16a4:	fd 01       	movw	r30, r26
    16a6:	0d c0       	rjmp	.+26     	; 0x16c2 <__udivmodsi4_ep>

000016a8 <__udivmodsi4_loop>:
    16a8:	aa 1f       	adc	r26, r26
    16aa:	bb 1f       	adc	r27, r27
    16ac:	ee 1f       	adc	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	a2 17       	cp	r26, r18
    16b2:	b3 07       	cpc	r27, r19
    16b4:	e4 07       	cpc	r30, r20
    16b6:	f5 07       	cpc	r31, r21
    16b8:	20 f0       	brcs	.+8      	; 0x16c2 <__udivmodsi4_ep>
    16ba:	a2 1b       	sub	r26, r18
    16bc:	b3 0b       	sbc	r27, r19
    16be:	e4 0b       	sbc	r30, r20
    16c0:	f5 0b       	sbc	r31, r21

000016c2 <__udivmodsi4_ep>:
    16c2:	66 1f       	adc	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	88 1f       	adc	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	1a 94       	dec	r1
    16cc:	69 f7       	brne	.-38     	; 0x16a8 <__udivmodsi4_loop>
    16ce:	60 95       	com	r22
    16d0:	70 95       	com	r23
    16d2:	80 95       	com	r24
    16d4:	90 95       	com	r25
    16d6:	9b 01       	movw	r18, r22
    16d8:	ac 01       	movw	r20, r24
    16da:	bd 01       	movw	r22, r26
    16dc:	cf 01       	movw	r24, r30
    16de:	08 95       	ret

000016e0 <_exit>:
    16e0:	f8 94       	cli

000016e2 <__stop_program>:
    16e2:	ff cf       	rjmp	.-2      	; 0x16e2 <__stop_program>
