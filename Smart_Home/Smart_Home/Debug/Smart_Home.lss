
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< Updated upstream
  0 .text         00001986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028c  00800060  00001986  00001a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008002ec  008002ec  00001ca6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000480f  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ff  00000000  00000000  000068fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000273b  00000000  00000000  00007afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b8  00000000  00000000  0000a238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000127e  00000000  00000000  0000aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002573  00000000  00000000  0000bd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000e2e1  2**0
=======
  0 .text         00000bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b6  00800060  00000bec  00000c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800316  00800316  00000f36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000468b  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107b  00000000  00000000  0000599f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002517  00000000  00000000  00006a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000824  00000000  00000000  00008f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001283  00000000  00000000  00009758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000259b  00000000  00000000  0000a9db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  0000cf76  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
<<<<<<< Updated upstream
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_10>
      2c:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
=======
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_10>
  2c:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
>>>>>>> Stashed changes

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
<<<<<<< Updated upstream
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>
=======
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 31       	cpi	r26, 0x16	; 22
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a6 e1       	ldi	r26, 0x16	; 22
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>
>>>>>>> Stashed changes

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
<<<<<<< Updated upstream
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <main>
      8a:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <_exit>
=======
  80:	ac 31       	cpi	r26, 0x1C	; 28
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 44 03 	call	0x688	; 0x688 <main>
  8a:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <_exit>
>>>>>>> Stashed changes

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HOME_voidInit>:
<<<<<<< Updated upstream
	}
	else
	{
		//error massage
	}
}
      92:	0e 94 2f 05 	call	0xa5e	; 0xa5e <LCD_voidInit>
      96:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <PWM_voidInitChannel_1A>
      9a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <PWM_voidInitChannel_1B>
      9e:	0e 94 b3 03 	call	0x766	; 0x766 <EEPROM_voidInit>
      a2:	64 e0       	ldi	r22, 0x04	; 4
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	0e 94 b9 06 	call	0xd72	; 0xd72 <SERVO_voidInit>
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	cb 01       	movw	r24, r22
      b0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <SERVO_voidStartByAngle>
      b4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <KPD_voidInit>
      b8:	0e 94 b0 03 	call	0x760	; 0x760 <BL_voidInit>
      bc:	41 e0       	ldi	r20, 0x01	; 1
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	83 e0       	ldi	r24, 0x03	; 3
      c2:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	83 e0       	ldi	r24, 0x03	; 3
      cc:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
      d0:	0e 94 ad 08 	call	0x115a	; 0x115a <GI_voidEnable>
      d4:	0e 94 44 09 	call	0x1288	; 0x1288 <TMR0_voidInit>
      d8:	63 e0       	ldi	r22, 0x03	; 3
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 9b 06 	call	0xd36	; 0xd36 <LED_voidInit>
      e0:	60 e0       	ldi	r22, 0x00	; 0
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 9b 06 	call	0xd36	; 0xd36 <LED_voidInit>
      e8:	62 e0       	ldi	r22, 0x02	; 2
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	0e 94 9b 06 	call	0xd36	; 0xd36 <LED_voidInit>
      f0:	63 e0       	ldi	r22, 0x03	; 3
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 9b 06 	call	0xd36	; 0xd36 <LED_voidInit>
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	0e 94 9b 06 	call	0xd36	; 0xd36 <LED_voidInit>
     100:	65 e0       	ldi	r22, 0x05	; 5
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 9b 06 	call	0xd36	; 0xd36 <LED_voidInit>
     108:	08 95       	ret

0000010a <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     10a:	84 e5       	ldi	r24, 0x54	; 84
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     112:	80 ec       	ldi	r24, 0xC0	; 192
     114:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     118:	85 e6       	ldi	r24, 0x65	; 101
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
=======

	}

	
	
}
  92:	0e 94 30 01 	call	0x260	; 0x260 <EEPROM_voidInit>
  96:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_voidInit>
  9a:	0e 94 a4 01 	call	0x348	; 0x348 <KPD_voidInit>
  9e:	0e 94 24 01 	call	0x248	; 0x248 <BL_voidInit>
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
  b6:	0e 94 b9 04 	call	0x972	; 0x972 <GI_voidEnable>
  ba:	0e 94 bd 04 	call	0x97a	; 0x97a <TMR0_voidInit>
  be:	63 e0       	ldi	r22, 0x03	; 3
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 40 03 	call	0x680	; 0x680 <LED_voidInit>
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 40 03 	call	0x680	; 0x680 <LED_voidInit>
  ce:	62 e0       	ldi	r22, 0x02	; 2
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 40 03 	call	0x680	; 0x680 <LED_voidInit>
  d6:	63 e0       	ldi	r22, 0x03	; 3
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 40 03 	call	0x680	; 0x680 <LED_voidInit>
  de:	62 e0       	ldi	r22, 0x02	; 2
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 40 03 	call	0x680	; 0x680 <LED_voidInit>
  e6:	08 95       	ret

000000e8 <APP_init>:
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	e0 97       	sbiw	r28, 0x30	; 48
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	0e 94 49 00 	call	0x92	; 0x92 <HOME_voidInit>
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 51 03 	call	0x6a2	; 0x6a2 <ADC_voidInit>
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	e0 e6       	ldi	r30, 0x60	; 96
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	de 01       	movw	r26, r28
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	01 90       	ld	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	8a 95       	dec	r24
 116:	e1 f7       	brne	.-8      	; 0x110 <APP_init+0x28>
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	e0 e6       	ldi	r30, 0x60	; 96
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	de 01       	movw	r26, r28
 120:	19 96       	adiw	r26, 0x09	; 9
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <APP_init+0x3a>
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	e8 e6       	ldi	r30, 0x68	; 104
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	de 01       	movw	r26, r28
 132:	51 96       	adiw	r26, 0x11	; 17
 134:	01 90       	ld	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <APP_init+0x4c>
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	e8 e6       	ldi	r30, 0x68	; 104
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	de 01       	movw	r26, r28
 144:	59 96       	adiw	r26, 0x19	; 25
 146:	01 90       	ld	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	8a 95       	dec	r24
 14c:	e1 f7       	brne	.-8      	; 0x146 <APP_init+0x5e>
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	e0 e7       	ldi	r30, 0x70	; 112
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	de 01       	movw	r26, r28
 156:	91 96       	adiw	r26, 0x21	; 33
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	8a 95       	dec	r24
 15e:	e1 f7       	brne	.-8      	; 0x158 <APP_init+0x70>
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	e0 e7       	ldi	r30, 0x70	; 112
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	de 01       	movw	r26, r28
 168:	99 96       	adiw	r26, 0x29	; 41
 16a:	01 90       	ld	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	8a 95       	dec	r24
 170:	e1 f7       	brne	.-8      	; 0x16a <APP_init+0x82>
 172:	be 01       	movw	r22, r28
 174:	6f 5f       	subi	r22, 0xFF	; 255
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_voidWritePage>
 180:	be 01       	movw	r22, r28
 182:	67 5f       	subi	r22, 0xF7	; 247
 184:	7f 4f       	sbci	r23, 0xFF	; 255
 186:	88 e1       	ldi	r24, 0x18	; 24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_voidWritePage>
 18e:	be 01       	movw	r22, r28
 190:	6f 5e       	subi	r22, 0xEF	; 239
 192:	7f 4f       	sbci	r23, 0xFF	; 255
 194:	80 e5       	ldi	r24, 0x50	; 80
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_voidWritePage>
 19c:	be 01       	movw	r22, r28
 19e:	67 5e       	subi	r22, 0xE7	; 231
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	88 e5       	ldi	r24, 0x58	; 88
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_voidWritePage>
 1aa:	be 01       	movw	r22, r28
 1ac:	6f 5d       	subi	r22, 0xDF	; 223
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	80 e6       	ldi	r24, 0x60	; 96
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_voidWritePage>
 1b8:	be 01       	movw	r22, r28
 1ba:	67 5d       	subi	r22, 0xD7	; 215
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	88 e6       	ldi	r24, 0x68	; 104
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 51 01 	call	0x2a2	; 0x2a2 <EEPROM_voidWritePage>
 1c6:	e0 96       	adiw	r28, 0x30	; 48
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	f8 94       	cli
 1cc:	de bf       	out	0x3e, r29	; 62
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	cd bf       	out	0x3d, r28	; 61
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <HOME_voidFireAnALarm>:


void HOME_voidFireAnALarm(u8 copy_pu8UserStatus)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	00 d0       	rcall	.+0      	; 0x1de <HOME_voidFireAnALarm+0x6>
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CheckAlarm,Local_u8ResetValue;
	
	// fire alarm if the user entry failed
	if(copy_pu8UserStatus==HOME_LOGIN_FAILED)
 1e2:	85 30       	cpi	r24, 0x05	; 5
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <HOME_voidFireAnALarm+0x18>
	{
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_VALUE);
 1e6:	6f ef       	ldi	r22, 0xFF	; 255
 1e8:	84 eb       	ldi	r24, 0xB4	; 180
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 33 01 	call	0x266	; 0x266 <EEPROM_voidWriteByte>
	}
	
	//check alarm status
	EEPROM_voidReadByte(HOME_ALARM_LOCATION,&Local_u8CheckAlarm);
 1f0:	be 01       	movw	r22, r28
 1f2:	6f 5f       	subi	r22, 0xFF	; 255
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255
 1f6:	84 eb       	ldi	r24, 0xB4	; 180
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <EEPROM_voidReadByte>
	
	//block system if there is an alarm
	if(Local_u8CheckAlarm==HOME_ALARM_VALUE)
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	8f 3f       	cpi	r24, 0xFF	; 255
 202:	e9 f4       	brne	.+58     	; 0x23e <HOME_voidFireAnALarm+0x66>
	{
		while(1)
		{
			BL_voidTxString	("ACCESS DENIED");
 204:	8d ed       	ldi	r24, 0xDD	; 221
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 2d 01 	call	0x25a	; 0x25a <BL_voidTxString>
			BL_voidTxChar('\n');
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	0e 94 27 01 	call	0x24e	; 0x24e <BL_voidTxChar>
			
			LCD_voidClear();
 212:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCD_voidClear>
			LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 25 03 	call	0x64a	; 0x64a <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayString("ACCESS DENIED");
 21e:	8d ed       	ldi	r24, 0xDD	; 221
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 de 02 	call	0x5bc	; 0x5bc <LCD_voidDisplayString>
			
			//if the user enter # end alarm
			BL_voidRxChar(&Local_u8ResetValue);
 226:	ce 01       	movw	r24, r28
 228:	02 96       	adiw	r24, 0x02	; 2
 22a:	0e 94 2a 01 	call	0x254	; 0x254 <BL_voidRxChar>
			if(Local_u8ResetValue=='#')
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	83 32       	cpi	r24, 0x23	; 35
 232:	41 f7       	brne	.-48     	; 0x204 <HOME_voidFireAnALarm+0x2c>
				break;
			}
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	84 eb       	ldi	r24, 0xB4	; 180
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 33 01 	call	0x266	; 0x266 <EEPROM_voidWriteByte>
	}
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	08 95       	ret

00000248 <BL_voidInit>:
 248:	0e 94 c1 05 	call	0xb82	; 0xb82 <UART_voidInit>
 24c:	08 95       	ret

0000024e <BL_voidTxChar>:
 24e:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_voidTxChar>
 252:	08 95       	ret

00000254 <BL_voidRxChar>:
 254:	0e 94 d6 05 	call	0xbac	; 0xbac <UART_voidRxChar>
 258:	08 95       	ret

0000025a <BL_voidTxString>:
 25a:	0e 94 de 05 	call	0xbbc	; 0xbbc <UART_voidTxString>
 25e:	08 95       	ret

00000260 <EEPROM_voidInit>:
 260:	0e 94 4c 05 	call	0xa98	; 0xa98 <TWI_voidInitMaster>
 264:	08 95       	ret

00000266 <EEPROM_voidWriteByte>:
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	d8 2f       	mov	r29, r24
 26e:	c6 2f       	mov	r28, r22
 270:	19 2f       	mov	r17, r25
 272:	10 65       	ori	r17, 0x50	; 80
 274:	0e 94 58 05 	call	0xab0	; 0xab0 <TWI_voidSendStartCondition>
 278:	81 2f       	mov	r24, r17
 27a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TWI_voidSendSlaveAddWithWrite>
 27e:	8d 2f       	mov	r24, r29
 280:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TWI_voidTransmitMasterDataByte>
 284:	8c 2f       	mov	r24, r28
 286:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TWI_voidTransmitMasterDataByte>
 28a:	0e 94 74 05 	call	0xae8	; 0xae8 <TWI_voidSendStopCondition>
>>>>>>> Stashed changes
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
<<<<<<< Updated upstream
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	83 ed       	ldi	r24, 0xD3	; 211
     124:	90 e3       	ldi	r25, 0x30	; 48
     126:	21 50       	subi	r18, 0x01	; 1
     128:	80 40       	sbci	r24, 0x00	; 0
     12a:	90 40       	sbci	r25, 0x00	; 0
     12c:	e1 f7       	brne	.-8      	; 0x126 <WelcomeScreen+0x1c>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <WelcomeScreen+0x26>
     130:	00 00       	nop
     132:	08 95       	ret

00000134 <APP_init>:




void APP_init(void)
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	a0 97       	sbiw	r28, 0x20	; 32
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	f8 94       	cli
     142:	de bf       	out	0x3e, r29	; 62
     144:	0f be       	out	0x3f, r0	; 63
     146:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     148:	0e 94 49 00 	call	0x92	; 0x92 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_INTRNAL);
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	0e 94 ef 06 	call	0xdde	; 0xdde <ADC_voidInit>
	PWM_voidInitChannel_0();
     152:	0e 94 b1 08 	call	0x1162	; 0x1162 <PWM_voidInitChannel_0>

	


    // display the welcome screen
    WelcomeScreen();
     156:	0e 94 85 00 	call	0x10a	; 0x10a <WelcomeScreen>
	LCD_voidClear();
     15a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
     15e:	88 e0       	ldi	r24, 0x08	; 8
     160:	e5 e6       	ldi	r30, 0x65	; 101
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	de 01       	movw	r26, r28
     166:	11 96       	adiw	r26, 0x01	; 1
     168:	01 90       	ld	r0, Z+
     16a:	0d 92       	st	X+, r0
     16c:	8a 95       	dec	r24
     16e:	e1 f7       	brne	.-8      	; 0x168 <APP_init+0x34>
	u8 testuserpass[8]={"22222222"};
     170:	88 e0       	ldi	r24, 0x08	; 8
     172:	ee e6       	ldi	r30, 0x6E	; 110
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	de 01       	movw	r26, r28
     178:	19 96       	adiw	r26, 0x09	; 9
     17a:	01 90       	ld	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	8a 95       	dec	r24
     180:	e1 f7       	brne	.-8      	; 0x17a <APP_init+0x46>
	u8 testadminname[8]={"12345678"};
     182:	88 e0       	ldi	r24, 0x08	; 8
     184:	e7 e7       	ldi	r30, 0x77	; 119
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	de 01       	movw	r26, r28
     18a:	51 96       	adiw	r26, 0x11	; 17
     18c:	01 90       	ld	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	8a 95       	dec	r24
     192:	e1 f7       	brne	.-8      	; 0x18c <APP_init+0x58>
	u8 testadminpass[8]={"12345678"};
     194:	88 e0       	ldi	r24, 0x08	; 8
     196:	e7 e7       	ldi	r30, 0x77	; 119
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	de 01       	movw	r26, r28
     19c:	59 96       	adiw	r26, 0x19	; 25
     19e:	01 90       	ld	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	8a 95       	dec	r24
     1a4:	e1 f7       	brne	.-8      	; 0x19e <APP_init+0x6a>
	u8 usertype;	
	
	EEPROM_voidWritePage(304,&testusername[0]);
     1a6:	be 01       	movw	r22, r28
     1a8:	6f 5f       	subi	r22, 0xFF	; 255
     1aa:	7f 4f       	sbci	r23, 0xFF	; 255
     1ac:	80 e3       	ldi	r24, 0x30	; 48
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	0e 94 b6 03 	call	0x76c	; 0x76c <EEPROM_voidWritePage>
	EEPROM_voidWritePage(312,&testuserpass[0]);
     1b4:	be 01       	movw	r22, r28
     1b6:	67 5f       	subi	r22, 0xF7	; 247
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	88 e3       	ldi	r24, 0x38	; 56
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 b6 03 	call	0x76c	; 0x76c <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
     1c2:	be 01       	movw	r22, r28
     1c4:	6f 5e       	subi	r22, 0xEF	; 239
     1c6:	7f 4f       	sbci	r23, 0xFF	; 255
     1c8:	80 ef       	ldi	r24, 0xF0	; 240
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 b6 03 	call	0x76c	; 0x76c <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
     1d0:	be 01       	movw	r22, r28
     1d2:	67 5e       	subi	r22, 0xE7	; 231
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	88 ef       	ldi	r24, 0xF8	; 248
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 b6 03 	call	0x76c	; 0x76c <EEPROM_voidWritePage>





}
     1de:	a0 96       	adiw	r28, 0x20	; 32
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	08 95       	ret

000001f0 <Display_temp>:

}

void Display_temp(void)
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     1f0:	6c ee       	ldi	r22, 0xEC	; 236
     1f2:	72 e0       	ldi	r23, 0x02	; 2
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     1fa:	6b e0       	ldi	r22, 0x0B	; 11
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 80 06 	call	0xd00	; 0xd00 <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
     202:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <__data_end>
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <LCD_voidDisplayNumber>
     210:	08 95       	ret

00000212 <Idle_Action>:
    _delay_ms(1000);
}

void Idle_Action()
{ 
    LCD_voidClear();
     212:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
     216:	80 e8       	ldi	r24, 0x80	; 128
     218:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
     21c:	83 e7       	ldi	r24, 0x73	; 115
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_voidDisplayString>
	Display_temp();
     224:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
     228:	80 ec       	ldi	r24, 0xC0	; 192
     22a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
     22e:	82 e8       	ldi	r24, 0x82	; 130
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     236:	06 c0       	rjmp	.+12     	; 0x244 <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
     238:	81 e6       	ldi	r24, 0x61	; 97
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
		Display_temp();
     240:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     244:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     248:	8f 3f       	cpi	r24, 0xFF	; 255
     24a:	b1 f3       	breq	.-20     	; 0x238 <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
     24c:	80 33       	cpi	r24, 0x30	; 48
     24e:	11 f4       	brne	.+4      	; 0x254 <Idle_Action+0x42>
    {
        LCD_voidClear();
     250:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
    }
    TMR0clear_flag();
     254:	0e 94 75 09 	call	0x12ea	; 0x12ea <TMR0clear_flag>
    LCD_voidClear();
     258:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
     25c:	08 95       	ret

0000025e <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     25e:	8f ef       	ldi	r24, 0xFF	; 255
     260:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     264:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     268:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
     26c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
     270:	08 95       	ret

00000272 <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     272:	0e 94 2f 01 	call	0x25e	; 0x25e <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&Idle_Action);
     276:	89 e0       	ldi	r24, 0x09	; 9
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     27e:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_voidStart>
        LCD_voidClear();
     282:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     286:	8f e8       	ldi	r24, 0x8F	; 143
     288:	91 e0       	ldi	r25, 0x01	; 1
     28a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     28e:	80 ec       	ldi	r24, 0xC0	; 192
     290:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
     294:	8c e9       	ldi	r24, 0x9C	; 156
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_voidDisplayString>
        Reset_AllKPDValues();
     29c:	0e 94 2f 01 	call	0x25e	; 0x25e <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     2a0:	0c c0       	rjmp	.+24     	; 0x2ba <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     2a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     2a6:	80 33       	cpi	r24, 0x30	; 48
     2a8:	21 f4       	brne	.+8      	; 0x2b2 <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     2b2:	84 e6       	ldi	r24, 0x64	; 100
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     2ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     2be:	8f 3f       	cpi	r24, 0xFF	; 255
     2c0:	81 f3       	breq	.-32     	; 0x2a2 <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     2c2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     2c6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     2ca:	82 33       	cpi	r24, 0x32	; 50
     2cc:	c9 f0       	breq	.+50     	; 0x300 <KPD_Interface_user+0x8e>
     2ce:	18 f4       	brcc	.+6      	; 0x2d6 <KPD_Interface_user+0x64>
     2d0:	81 33       	cpi	r24, 0x31	; 49
     2d2:	41 f0       	breq	.+16     	; 0x2e4 <KPD_Interface_user+0x72>
     2d4:	08 95       	ret
     2d6:	83 33       	cpi	r24, 0x33	; 51
     2d8:	09 f4       	brne	.+2      	; 0x2dc <KPD_Interface_user+0x6a>
     2da:	f8 c1       	rjmp	.+1008   	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
     2dc:	84 33       	cpi	r24, 0x34	; 52
     2de:	09 f4       	brne	.+2      	; 0x2e2 <KPD_Interface_user+0x70>
     2e0:	23 c2       	rjmp	.+1094   	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
     2e2:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     2e4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     2e8:	8a ea       	ldi	r24, 0xAA	; 170
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     2f0:	80 ec       	ldi	r24, 0xC0	; 192
     2f2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     2f6:	87 eb       	ldi	r24, 0xB7	; 183
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>

            break;
     2fe:	08 95       	ret
			

        case ('2'):

            LCD_voidClear();
     300:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     304:	86 ec       	ldi	r24, 0xC6	; 198
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     30c:	80 ec       	ldi	r24, 0xC0	; 192
     30e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     312:	86 ed       	ldi	r24, 0xD6	; 214
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
     31a:	89 e0       	ldi	r24, 0x09	; 9
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     322:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     326:	0c c0       	rjmp	.+24     	; 0x340 <KPD_Interface_user+0xce>
            {
                KPD_voidGetValue(&local_lightNum);
     328:	83 e6       	ldi	r24, 0x63	; 99
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     330:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     334:	80 33       	cpi	r24, 0x30	; 48
     336:	21 f4       	brne	.+8      	; 0x340 <KPD_Interface_user+0xce>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
     33e:	04 c0       	rjmp	.+8      	; 0x348 <KPD_Interface_user+0xd6>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     340:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     344:	8f 3f       	cpi	r24, 0xFF	; 255
     346:	81 f3       	breq	.-32     	; 0x328 <KPD_Interface_user+0xb6>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     348:	0e 94 64 09 	call	0x12c8	; 0x12c8 <TMR0_voidStop>
            switch (local_lightNum)
     34c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     350:	83 33       	cpi	r24, 0x33	; 51
     352:	09 f4       	brne	.+2      	; 0x356 <KPD_Interface_user+0xe4>
     354:	a6 c0       	rjmp	.+332    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
     356:	30 f4       	brcc	.+12     	; 0x364 <KPD_Interface_user+0xf2>
     358:	81 33       	cpi	r24, 0x31	; 49
     35a:	69 f0       	breq	.+26     	; 0x376 <KPD_Interface_user+0x104>
     35c:	82 33       	cpi	r24, 0x32	; 50
     35e:	09 f4       	brne	.+2      	; 0x362 <KPD_Interface_user+0xf0>
     360:	54 c0       	rjmp	.+168    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     362:	08 95       	ret
     364:	85 33       	cpi	r24, 0x35	; 53
     366:	09 f4       	brne	.+2      	; 0x36a <KPD_Interface_user+0xf8>
     368:	34 c1       	rjmp	.+616    	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
     36a:	08 f4       	brcc	.+2      	; 0x36e <KPD_Interface_user+0xfc>
     36c:	e6 c0       	rjmp	.+460    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     36e:	86 33       	cpi	r24, 0x36	; 54
     370:	09 f4       	brne	.+2      	; 0x374 <KPD_Interface_user+0x102>
     372:	7b c1       	rjmp	.+758    	; 0x66a <__EEPROM_REGION_LENGTH__+0x26a>
     374:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     376:	4d ee       	ldi	r20, 0xED	; 237
     378:	52 e0       	ldi	r21, 0x02	; 2
     37a:	63 e0       	ldi	r22, 0x03	; 3
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	0e 94 3a 08 	call	0x1074	; 0x1074 <DIO_voidGetPinValue>
                LCD_voidClear();
     382:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
                if (led_status == 1)
     386:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	f1 f4       	brne	.+60     	; 0x3ca <KPD_Interface_user+0x158>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     38e:	83 ee       	ldi	r24, 0xE3	; 227
     390:	91 e0       	ldi	r25, 0x01	; 1
     392:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     396:	80 ec       	ldi	r24, 0xC0	; 192
     398:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     39c:	81 ef       	ldi	r24, 0xF1	; 241
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <KPD_Interface_user+0x13c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     3a6:	82 e6       	ldi	r24, 0x62	; 98
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     3ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     3b2:	8f 3f       	cpi	r24, 0xFF	; 255
     3b4:	c1 f3       	breq	.-16     	; 0x3a6 <KPD_Interface_user+0x134>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     3b6:	81 33       	cpi	r24, 0x31	; 49
     3b8:	29 f4       	brne	.+10     	; 0x3c4 <KPD_Interface_user+0x152>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     3ba:	41 e0       	ldi	r20, 0x01	; 1
     3bc:	63 e0       	ldi	r22, 0x03	; 3
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	0e 94 ac 06 	call	0xd58	; 0xd58 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     3c4:	0e 94 2f 01 	call	0x25e	; 0x25e <Reset_AllKPDValues>
					break;
     3c8:	08 95       	ret
                }
                else if (led_status == 0)
     3ca:	81 11       	cpse	r24, r1
     3cc:	c8 c1       	rjmp	.+912    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	92 e0       	ldi	r25, 0x02	; 2
     3d2:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     3d6:	80 ec       	ldi	r24, 0xC0	; 192
     3d8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     3dc:	81 e1       	ldi	r24, 0x11	; 17
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <KPD_Interface_user+0x17c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     3e6:	82 e6       	ldi	r24, 0x62	; 98
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     3ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     3f2:	8f 3f       	cpi	r24, 0xFF	; 255
     3f4:	c1 f3       	breq	.-16     	; 0x3e6 <KPD_Interface_user+0x174>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     3f6:	81 33       	cpi	r24, 0x31	; 49
     3f8:	29 f4       	brne	.+10     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	63 e0       	ldi	r22, 0x03	; 3
     3fe:	83 e0       	ldi	r24, 0x03	; 3
     400:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     404:	0e 94 2f 01 	call	0x25e	; 0x25e <Reset_AllKPDValues>
     408:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
     40a:	4d ee       	ldi	r20, 0xED	; 237
     40c:	52 e0       	ldi	r21, 0x02	; 2
     40e:	64 e0       	ldi	r22, 0x04	; 4
     410:	83 e0       	ldi	r24, 0x03	; 3
     412:	0e 94 3a 08 	call	0x1074	; 0x1074 <DIO_voidGetPinValue>
                LCD_voidClear();
     416:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
                if (led_status == 1)
     41a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	f9 f4       	brne	.+62     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     422:	81 e2       	ldi	r24, 0x21	; 33
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     42a:	80 ec       	ldi	r24, 0xC0	; 192
     42c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     430:	81 ef       	ldi	r24, 0xF1	; 241
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     438:	04 c0       	rjmp	.+8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     43a:	82 e6       	ldi	r24, 0x62	; 98
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     442:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     446:	8f 3f       	cpi	r24, 0xFF	; 255
     448:	c1 f3       	breq	.-16     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     44a:	81 33       	cpi	r24, 0x31	; 49
     44c:	29 f4       	brne	.+10     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     44e:	41 e0       	ldi	r20, 0x01	; 1
     450:	64 e0       	ldi	r22, 0x04	; 4
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0e 94 ac 06 	call	0xd58	; 0xd58 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     45e:	08 95       	ret
                }
                else if (led_status == 0)
     460:	81 11       	cpse	r24, r1
     462:	7d c1       	rjmp	.+762    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     464:	8f e2       	ldi	r24, 0x2F	; 47
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     46c:	80 ec       	ldi	r24, 0xC0	; 192
     46e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     472:	81 e1       	ldi	r24, 0x11	; 17
     474:	92 e0       	ldi	r25, 0x02	; 2
     476:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     47c:	82 e6       	ldi	r24, 0x62	; 98
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     484:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     488:	8f 3f       	cpi	r24, 0xFF	; 255
     48a:	c1 f3       	breq	.-16     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     48c:	81 33       	cpi	r24, 0x31	; 49
     48e:	29 f4       	brne	.+10     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     490:	41 e0       	ldi	r20, 0x01	; 1
     492:	64 e0       	ldi	r22, 0x04	; 4
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     4a0:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     4a2:	4d ee       	ldi	r20, 0xED	; 237
     4a4:	52 e0       	ldi	r21, 0x02	; 2
     4a6:	62 e0       	ldi	r22, 0x02	; 2
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	0e 94 3a 08 	call	0x1074	; 0x1074 <DIO_voidGetPinValue>
                LCD_voidClear();
     4ae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
                if (led_status == 1)
     4b2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     4b6:	81 30       	cpi	r24, 0x01	; 1
     4b8:	f9 f4       	brne	.+62     	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     4ba:	8e e3       	ldi	r24, 0x3E	; 62
     4bc:	92 e0       	ldi	r25, 0x02	; 2
     4be:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4c2:	80 ec       	ldi	r24, 0xC0	; 192
     4c4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     4c8:	81 ef       	ldi	r24, 0xF1	; 241
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     4d2:	82 e6       	ldi	r24, 0x62	; 98
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     4da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     4de:	8f 3f       	cpi	r24, 0xFF	; 255
     4e0:	c1 f3       	breq	.-16     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     4e2:	81 33       	cpi	r24, 0x31	; 49
     4e4:	29 f4       	brne	.+10     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     4e6:	41 e0       	ldi	r20, 0x01	; 1
     4e8:	62 e0       	ldi	r22, 0x02	; 2
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	0e 94 ac 06 	call	0xd58	; 0xd58 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     4f6:	08 95       	ret
                }
                else if (led_status == 0)
     4f8:	81 11       	cpse	r24, r1
     4fa:	31 c1       	rjmp	.+610    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     4fc:	8c e4       	ldi	r24, 0x4C	; 76
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     504:	80 ec       	ldi	r24, 0xC0	; 192
     506:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     50a:	81 e1       	ldi	r24, 0x11	; 17
     50c:	92 e0       	ldi	r25, 0x02	; 2
     50e:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     512:	04 c0       	rjmp	.+8      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     514:	82 e6       	ldi	r24, 0x62	; 98
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     51c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     520:	8f 3f       	cpi	r24, 0xFF	; 255
     522:	c1 f3       	breq	.-16     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     524:	81 33       	cpi	r24, 0x31	; 49
     526:	29 f4       	brne	.+10     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     528:	41 e0       	ldi	r20, 0x01	; 1
     52a:	62 e0       	ldi	r22, 0x02	; 2
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     538:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     53a:	4d ee       	ldi	r20, 0xED	; 237
     53c:	52 e0       	ldi	r21, 0x02	; 2
     53e:	63 e0       	ldi	r22, 0x03	; 3
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 3a 08 	call	0x1074	; 0x1074 <DIO_voidGetPinValue>
                LCD_voidClear();
     546:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
                if (led_status == 1)
     54a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	f9 f4       	brne	.+62     	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     552:	8b e5       	ldi	r24, 0x5B	; 91
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     55a:	80 ec       	ldi	r24, 0xC0	; 192
     55c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     560:	81 ef       	ldi	r24, 0xF1	; 241
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     568:	04 c0       	rjmp	.+8      	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     56a:	82 e6       	ldi	r24, 0x62	; 98
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     572:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     576:	8f 3f       	cpi	r24, 0xFF	; 255
     578:	c1 f3       	breq	.-16     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     57a:	81 33       	cpi	r24, 0x31	; 49
     57c:	29 f4       	brne	.+10     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	63 e0       	ldi	r22, 0x03	; 3
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 ac 06 	call	0xd58	; 0xd58 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     58e:	08 95       	ret
                }
                else if (led_status == 0)
     590:	81 11       	cpse	r24, r1
     592:	e5 c0       	rjmp	.+458    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     594:	89 e6       	ldi	r24, 0x69	; 105
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     59c:	80 ec       	ldi	r24, 0xC0	; 192
     59e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     5a2:	81 e1       	ldi	r24, 0x11	; 17
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5ac:	82 e6       	ldi	r24, 0x62	; 98
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     5b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     5b8:	8f 3f       	cpi	r24, 0xFF	; 255
     5ba:	c1 f3       	breq	.-16     	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5bc:	81 33       	cpi	r24, 0x31	; 49
     5be:	29 f4       	brne	.+10     	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	63 e0       	ldi	r22, 0x03	; 3
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     5d0:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     5d2:	4d ee       	ldi	r20, 0xED	; 237
     5d4:	52 e0       	ldi	r21, 0x02	; 2
     5d6:	62 e0       	ldi	r22, 0x02	; 2
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	0e 94 3a 08 	call	0x1074	; 0x1074 <DIO_voidGetPinValue>
                LCD_voidClear();
     5de:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
                if (led_status == 1)
     5e2:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	f9 f4       	brne	.+62     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     5ea:	88 e7       	ldi	r24, 0x78	; 120
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     5f8:	81 ef       	ldi	r24, 0xF1	; 241
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     600:	04 c0       	rjmp	.+8      	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     602:	82 e6       	ldi	r24, 0x62	; 98
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     60a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     60e:	8f 3f       	cpi	r24, 0xFF	; 255
     610:	c1 f3       	breq	.-16     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     612:	81 33       	cpi	r24, 0x31	; 49
     614:	29 f4       	brne	.+10     	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	62 e0       	ldi	r22, 0x02	; 2
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 ac 06 	call	0xd58	; 0xd58 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     626:	08 95       	ret
                }
                else if (led_status == 0)
     628:	81 11       	cpse	r24, r1
     62a:	99 c0       	rjmp	.+306    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     62c:	86 e8       	ldi	r24, 0x86	; 134
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     634:	80 ec       	ldi	r24, 0xC0	; 192
     636:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     63a:	81 e1       	ldi	r24, 0x11	; 17
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     642:	04 c0       	rjmp	.+8      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     644:	82 e6       	ldi	r24, 0x62	; 98
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     64c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     650:	8f 3f       	cpi	r24, 0xFF	; 255
     652:	c1 f3       	breq	.-16     	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     654:	81 33       	cpi	r24, 0x31	; 49
     656:	29 f4       	brne	.+10     	; 0x662 <__EEPROM_REGION_LENGTH__+0x262>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	62 e0       	ldi	r22, 0x02	; 2
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     668:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     66a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
				
                if (led_status == 1)
     66e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	61 f4       	brne	.+24     	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     676:	85 e9       	ldi	r24, 0x95	; 149
     678:	92 e0       	ldi	r25, 0x02	; 2
     67a:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     67e:	80 ec       	ldi	r24, 0xC0	; 192
     680:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     684:	81 ef       	ldi	r24, 0xF1	; 241
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
     68c:	08 95       	ret
					
                }
                else if (led_status == 0)
     68e:	81 11       	cpse	r24, r1
     690:	66 c0       	rjmp	.+204    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     692:	83 ea       	ldi	r24, 0xA3	; 163
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     69a:	80 ec       	ldi	r24, 0xC0	; 192
     69c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     6a0:	81 e1       	ldi	r24, 0x11	; 17
     6a2:	92 e0       	ldi	r25, 0x02	; 2
     6a4:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <__EEPROM_REGION_LENGTH__+0x2b2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     6aa:	82 e6       	ldi	r24, 0x62	; 98
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     6b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     6b6:	8f 3f       	cpi	r24, 0xFF	; 255
     6b8:	c1 f3       	breq	.-16     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     6ba:	81 33       	cpi	r24, 0x31	; 49
     6bc:	19 f4       	brne	.+6      	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
                    {
					PWM_voidGenerateChannel_0(255);
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	0e 94 be 08 	call	0x117c	; 0x117c <PWM_voidGenerateChannel_0>
                    }
                    local_lightStatus = KPD_Not_Pressed;					
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     6ca:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
     6cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
				// ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
				LCD_voidSendCommand(Write_FirstLine);
     6d0:	80 e8       	ldi	r24, 0x80	; 128
     6d2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
     6d6:	82 eb       	ldi	r24, 0xB2	; 178
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     6de:	6b e0       	ldi	r22, 0x0B	; 11
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	0e 94 80 06 	call	0xd00	; 0xd00 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
     6e6:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <__data_end>
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
     6f4:	83 e6       	ldi	r24, 0x63	; 99
     6f6:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
     6fa:	80 ec       	ldi	r24, 0xC0	; 192
     6fc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
     700:	80 ec       	ldi	r24, 0xC0	; 192
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
     708:	06 c0       	rjmp	.+12     	; 0x716 <__EEPROM_REGION_LENGTH__+0x316>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
     70a:	81 e6       	ldi	r24, 0x61	; 97
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 15 04 	call	0x82a	; 0x82a <KPD_voidGetValue>
					Display_temp();
     712:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
     716:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     71a:	8f 3f       	cpi	r24, 0xFF	; 255
     71c:	b1 f3       	breq	.-20     	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
     71e:	80 33       	cpi	r24, 0x30	; 48
     720:	f1 f4       	brne	.+60     	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
				{
					LCD_voidClear();
     722:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
     726:	08 95       	ret
				}
			break;

			case ('4'):
			LCD_voidClear();
     728:	0e 94 4f 06 	call	0xc9e	; 0xc9e <LCD_voidClear>
			LCD_voidDisplayString("Door is opening");
     72c:	8d ec       	ldi	r24, 0xCD	; 205
     72e:	92 e0       	ldi	r25, 0x02	; 2
     730:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_voidDisplayString>
			SERVO_voidStartByAngle(90);
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	84 eb       	ldi	r24, 0xB4	; 180
     73a:	92 e4       	ldi	r25, 0x42	; 66
     73c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <SERVO_voidStartByAngle>
     740:	2a ea       	ldi	r18, 0xAA	; 170
     742:	36 ee       	ldi	r19, 0xE6	; 230
     744:	86 e9       	ldi	r24, 0x96	; 150
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	21 50       	subi	r18, 0x01	; 1
     74a:	30 40       	sbci	r19, 0x00	; 0
     74c:	80 40       	sbci	r24, 0x00	; 0
     74e:	90 40       	sbci	r25, 0x00	; 0
     750:	d9 f7       	brne	.-10     	; 0x748 <__EEPROM_REGION_LENGTH__+0x348>
     752:	00 00       	nop
			_delay_ms(10000);
			SERVO_voidStartByAngle(0);
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	cb 01       	movw	r24, r22
     75a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <SERVO_voidStartByAngle>
     75e:	08 95       	ret

00000760 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     760:	0e 94 34 0a 	call	0x1468	; 0x1468 <UART_voidInit>
     764:	08 95       	ret

00000766 <EEPROM_voidInit>:
	TWI_voidSendStopCondition();
	_delay_ms(5);
	
	
	
}
     766:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <TWI_voidInitMaster>
     76a:	08 95       	ret

0000076c <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
     774:	61 15       	cp	r22, r1
     776:	71 05       	cpc	r23, r1
     778:	f9 f0       	breq	.+62     	; 0x7b8 <EEPROM_voidWritePage+0x4c>
     77a:	8b 01       	movw	r16, r22
     77c:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     77e:	c9 2f       	mov	r28, r25
     780:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
     782:	0e 94 fe 09 	call	0x13fc	; 0x13fc <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     786:	8c 2f       	mov	r24, r28
     788:	0e 94 13 0a 	call	0x1426	; 0x1426 <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     78c:	8d 2f       	mov	r24, r29
     78e:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     792:	c0 e0       	ldi	r28, 0x00	; 0
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
     796:	f8 01       	movw	r30, r16
     798:	ec 0f       	add	r30, r28
     79a:	f1 1d       	adc	r31, r1
     79c:	80 81       	ld	r24, Z
     79e:	0e 94 28 0a 	call	0x1450	; 0x1450 <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     7a2:	cf 5f       	subi	r28, 0xFF	; 255
     7a4:	c8 30       	cpi	r28, 0x08	; 8
     7a6:	b8 f3       	brcs	.-18     	; 0x796 <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
     7a8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <TWI_voidSendStopCondition>
     7ac:	8f e1       	ldi	r24, 0x1F	; 31
     7ae:	9e e4       	ldi	r25, 0x4E	; 78
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <EEPROM_voidWritePage+0x44>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <EEPROM_voidWritePage+0x4a>
     7b6:	00 00       	nop
		{
			//error state
		}
		
		
	}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	1f 91       	pop	r17
     7be:	0f 91       	pop	r16
     7c0:	08 95       	ret

000007c2 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	65 e0       	ldi	r22, 0x05	; 5
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	66 e0       	ldi	r22, 0x06	; 6
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	63 e0       	ldi	r22, 0x03	; 3
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	64 e0       	ldi	r22, 0x04	; 4
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	65 e0       	ldi	r22, 0x05	; 5
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	66 e0       	ldi	r22, 0x06	; 6
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     808:	63 e0       	ldi	r22, 0x03	; 3
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     810:	64 e0       	ldi	r22, 0x04	; 4
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     818:	65 e0       	ldi	r22, 0x05	; 5
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     820:	66 e0       	ldi	r22, 0x06	; 6
     822:	82 e0       	ldi	r24, 0x02	; 2
     824:	0e 94 75 08 	call	0x10ea	; 0x10ea <DIO_voidActivePinInPullUpResistance>
     828:	08 95       	ret

0000082a <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     82a:	6f 92       	push	r6
     82c:	7f 92       	push	r7
     82e:	8f 92       	push	r8
     830:	9f 92       	push	r9
     832:	af 92       	push	r10
     834:	bf 92       	push	r11
     836:	cf 92       	push	r12
     838:	df 92       	push	r13
     83a:	ef 92       	push	r14
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	6b 97       	sbiw	r28, 0x1b	; 27
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     856:	00 97       	sbiw	r24, 0x00	; 0
     858:	09 f4       	brne	.+2      	; 0x85c <KPD_voidGetValue+0x32>
     85a:	7e c0       	rjmp	.+252    	; 0x958 <__stack+0xf9>
     85c:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	88 8f       	std	Y+24, r24	; 0x18
     862:	89 8f       	std	Y+25, r24	; 0x19
     864:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     866:	34 e0       	ldi	r19, 0x04	; 4
     868:	3d 8b       	std	Y+21, r19	; 0x15
     86a:	25 e0       	ldi	r18, 0x05	; 5
     86c:	2e 8b       	std	Y+22, r18	; 0x16
     86e:	96 e0       	ldi	r25, 0x06	; 6
     870:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	89 8b       	std	Y+17, r24	; 0x11
     876:	8a 8b       	std	Y+18, r24	; 0x12
     878:	8b 8b       	std	Y+19, r24	; 0x13
     87a:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     87c:	83 e0       	ldi	r24, 0x03	; 3
     87e:	8d 87       	std	Y+13, r24	; 0x0d
     880:	3e 87       	std	Y+14, r19	; 0x0e
     882:	2f 87       	std	Y+15, r18	; 0x0f
     884:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     886:	8c e0       	ldi	r24, 0x0C	; 12
     888:	e0 e8       	ldi	r30, 0x80	; 128
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	de 01       	movw	r26, r28
     88e:	11 96       	adiw	r26, 0x01	; 1
     890:	01 90       	ld	r0, Z+
     892:	0d 92       	st	X+, r0
     894:	8a 95       	dec	r24
     896:	e1 f7       	brne	.-8      	; 0x890 <__stack+0x31>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	f5 01       	movw	r30, r10
     89c:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     89e:	81 2c       	mov	r8, r1
     8a0:	57 c0       	rjmp	.+174    	; 0x950 <__stack+0xf1>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     8a2:	c8 2c       	mov	r12, r8
     8a4:	d1 2c       	mov	r13, r1
     8a6:	e5 e1       	ldi	r30, 0x15	; 21
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	ec 0f       	add	r30, r28
     8ac:	fd 1f       	adc	r31, r29
     8ae:	ec 0d       	add	r30, r12
     8b0:	fd 1d       	adc	r31, r13
     8b2:	60 80       	ld	r6, Z
     8b4:	e8 e1       	ldi	r30, 0x18	; 24
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	ec 0f       	add	r30, r28
     8ba:	fd 1f       	adc	r31, r29
     8bc:	ec 0d       	add	r30, r12
     8be:	fd 1d       	adc	r31, r13
     8c0:	70 80       	ld	r7, Z
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	66 2d       	mov	r22, r6
     8c6:	87 2d       	mov	r24, r7
     8c8:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	38 c0       	rjmp	.+112    	; 0x940 <__stack+0xe1>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     8d0:	e1 2e       	mov	r14, r17
     8d2:	f1 2c       	mov	r15, r1
     8d4:	ed e0       	ldi	r30, 0x0D	; 13
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	ec 0f       	add	r30, r28
     8da:	fd 1f       	adc	r31, r29
     8dc:	ee 0d       	add	r30, r14
     8de:	ff 1d       	adc	r31, r15
     8e0:	00 81       	ld	r16, Z
     8e2:	e1 e1       	ldi	r30, 0x11	; 17
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	ec 0f       	add	r30, r28
     8e8:	fd 1f       	adc	r31, r29
     8ea:	ee 0d       	add	r30, r14
     8ec:	ff 1d       	adc	r31, r15
     8ee:	90 80       	ld	r9, Z
     8f0:	ae 01       	movw	r20, r28
     8f2:	45 5e       	subi	r20, 0xE5	; 229
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	60 2f       	mov	r22, r16
     8f8:	89 2d       	mov	r24, r9
     8fa:	0e 94 3a 08 	call	0x1074	; 0x1074 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     8fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     900:	81 11       	cpse	r24, r1
     902:	1d c0       	rjmp	.+58     	; 0x93e <__stack+0xdf>
     904:	07 c0       	rjmp	.+14     	; 0x914 <__stack+0xb5>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     906:	ae 01       	movw	r20, r28
     908:	45 5e       	subi	r20, 0xE5	; 229
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	60 2f       	mov	r22, r16
     90e:	89 2d       	mov	r24, r9
     910:	0e 94 3a 08 	call	0x1074	; 0x1074 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     914:	8b 8d       	ldd	r24, Y+27	; 0x1b
     916:	88 23       	and	r24, r24
     918:	b1 f3       	breq	.-20     	; 0x906 <__stack+0xa7>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     91a:	c7 01       	movw	r24, r14
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	e8 0e       	add	r14, r24
     922:	f9 1e       	adc	r15, r25
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	8c 0f       	add	r24, r28
     92a:	9d 1f       	adc	r25, r29
     92c:	e8 0e       	add	r14, r24
     92e:	f9 1e       	adc	r15, r25
     930:	f7 01       	movw	r30, r14
     932:	ec 0d       	add	r30, r12
     934:	fd 1d       	adc	r31, r13
     936:	80 81       	ld	r24, Z
     938:	f5 01       	movw	r30, r10
     93a:	80 83       	st	Z, r24
     93c:	0d c0       	rjmp	.+26     	; 0x958 <__stack+0xf9>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     93e:	1f 5f       	subi	r17, 0xFF	; 255
     940:	14 30       	cpi	r17, 0x04	; 4
     942:	30 f2       	brcs	.-116    	; 0x8d0 <__stack+0x71>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	66 2d       	mov	r22, r6
     948:	87 2d       	mov	r24, r7
     94a:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     94e:	83 94       	inc	r8
     950:	f2 e0       	ldi	r31, 0x02	; 2
     952:	f8 15       	cp	r31, r8
     954:	08 f0       	brcs	.+2      	; 0x958 <__stack+0xf9>
     956:	a5 cf       	rjmp	.-182    	; 0x8a2 <__stack+0x43>
	}
	else
	{
		
	}
}
     958:	6b 96       	adiw	r28, 0x1b	; 27
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	6f 90       	pop	r6
     980:	08 95       	ret

00000982 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     982:	cf 93       	push	r28
     984:	c8 2f       	mov	r28, r24
     986:	80 ff       	sbrs	r24, 0
     988:	06 c0       	rjmp	.+12     	; 0x996 <PRV_voidWriteHalfPort+0x14>
     98a:	41 e0       	ldi	r20, 0x01	; 1
     98c:	64 e0       	ldi	r22, 0x04	; 4
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     994:	05 c0       	rjmp	.+10     	; 0x9a0 <PRV_voidWriteHalfPort+0x1e>
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	64 e0       	ldi	r22, 0x04	; 4
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     9a0:	c1 ff       	sbrs	r28, 1
     9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <PRV_voidWriteHalfPort+0x2e>
     9a4:	41 e0       	ldi	r20, 0x01	; 1
     9a6:	65 e0       	ldi	r22, 0x05	; 5
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <PRV_voidWriteHalfPort+0x38>
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	65 e0       	ldi	r22, 0x05	; 5
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     9ba:	c2 ff       	sbrs	r28, 2
     9bc:	06 c0       	rjmp	.+12     	; 0x9ca <PRV_voidWriteHalfPort+0x48>
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	66 e0       	ldi	r22, 0x06	; 6
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <PRV_voidWriteHalfPort+0x52>
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	66 e0       	ldi	r22, 0x06	; 6
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     9d4:	c3 ff       	sbrs	r28, 3
     9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <PRV_voidWriteHalfPort+0x62>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	67 e0       	ldi	r22, 0x07	; 7
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     9e2:	05 c0       	rjmp	.+10     	; 0x9ee <PRV_voidWriteHalfPort+0x6c>
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <LCD_voidSendCommand>:
     9f2:	cf 93       	push	r28
     9f4:	c8 2f       	mov	r28, r24
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	62 e0       	ldi	r22, 0x02	; 2
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     a0a:	8c 2f       	mov	r24, r28
     a0c:	82 95       	swap	r24
     a0e:	8f 70       	andi	r24, 0x0F	; 15
     a10:	0e 94 c1 04 	call	0x982	; 0x982 <PRV_voidWriteHalfPort>
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	63 e0       	ldi	r22, 0x03	; 3
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     a1e:	8f e9       	ldi	r24, 0x9F	; 159
     a20:	9f e0       	ldi	r25, 0x0F	; 15
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <LCD_voidSendCommand+0x30>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <LCD_voidSendCommand+0x36>
     a28:	00 00       	nop
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	63 e0       	ldi	r22, 0x03	; 3
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     a34:	8c 2f       	mov	r24, r28
     a36:	0e 94 c1 04 	call	0x982	; 0x982 <PRV_voidWriteHalfPort>
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	63 e0       	ldi	r22, 0x03	; 3
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     a44:	8f e9       	ldi	r24, 0x9F	; 159
     a46:	9f e0       	ldi	r25, 0x0F	; 15
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <LCD_voidSendCommand+0x56>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <LCD_voidSendCommand+0x5c>
     a4e:	00 00       	nop
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	63 e0       	ldi	r22, 0x03	; 3
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <LCD_voidInit>:
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	61 e0       	ldi	r22, 0x01	; 1
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     a68:	41 e0       	ldi	r20, 0x01	; 1
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     a72:	41 e0       	ldi	r20, 0x01	; 1
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	64 e0       	ldi	r22, 0x04	; 4
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	65 e0       	ldi	r22, 0x05	; 5
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     a90:	41 e0       	ldi	r20, 0x01	; 1
     a92:	66 e0       	ldi	r22, 0x06	; 6
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	67 e0       	ldi	r22, 0x07	; 7
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     aa4:	2f e7       	ldi	r18, 0x7F	; 127
     aa6:	85 eb       	ldi	r24, 0xB5	; 181
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	21 50       	subi	r18, 0x01	; 1
     aac:	80 40       	sbci	r24, 0x00	; 0
     aae:	90 40       	sbci	r25, 0x00	; 0
     ab0:	e1 f7       	brne	.-8      	; 0xaaa <LCD_voidInit+0x4c>
     ab2:	00 c0       	rjmp	.+0      	; 0xab4 <LCD_voidInit+0x56>
     ab4:	00 00       	nop
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     ac0:	40 e0       	ldi	r20, 0x00	; 0
     ac2:	62 e0       	ldi	r22, 0x02	; 2
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 c1 04 	call	0x982	; 0x982 <PRV_voidWriteHalfPort>
     ad0:	41 e0       	ldi	r20, 0x01	; 1
     ad2:	63 e0       	ldi	r22, 0x03	; 3
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     ada:	8f e9       	ldi	r24, 0x9F	; 159
     adc:	9f e0       	ldi	r25, 0x0F	; 15
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <LCD_voidInit+0x80>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <LCD_voidInit+0x86>
     ae4:	00 00       	nop
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	63 e0       	ldi	r22, 0x03	; 3
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     af0:	88 e2       	ldi	r24, 0x28	; 40
     af2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
     af6:	90 ef       	ldi	r25, 0xF0	; 240
     af8:	9a 95       	dec	r25
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <LCD_voidInit+0x9a>
     afc:	8c e0       	ldi	r24, 0x0C	; 12
     afe:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
     b02:	20 ef       	ldi	r18, 0xF0	; 240
     b04:	2a 95       	dec	r18
     b06:	f1 f7       	brne	.-4      	; 0xb04 <LCD_voidInit+0xa6>
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
     b0e:	8f e3       	ldi	r24, 0x3F	; 63
     b10:	9f e1       	ldi	r25, 0x1F	; 31
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <LCD_voidInit+0xb4>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <LCD_voidInit+0xba>
     b18:	00 00       	nop
     b1a:	86 e0       	ldi	r24, 0x06	; 6
     b1c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
     b20:	08 95       	ret

00000b22 <LCD_voidDisplayChar>:
     b22:	cf 93       	push	r28
     b24:	c8 2f       	mov	r28, r24
     b26:	41 e0       	ldi	r20, 0x01	; 1
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	62 e0       	ldi	r22, 0x02	; 2
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     b3a:	8c 2f       	mov	r24, r28
     b3c:	82 95       	swap	r24
     b3e:	8f 70       	andi	r24, 0x0F	; 15
     b40:	0e 94 c1 04 	call	0x982	; 0x982 <PRV_voidWriteHalfPort>
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	63 e0       	ldi	r22, 0x03	; 3
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     b4e:	8f e9       	ldi	r24, 0x9F	; 159
     b50:	9f e0       	ldi	r25, 0x0F	; 15
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	f1 f7       	brne	.-4      	; 0xb52 <LCD_voidDisplayChar+0x30>
     b56:	00 c0       	rjmp	.+0      	; 0xb58 <LCD_voidDisplayChar+0x36>
     b58:	00 00       	nop
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	63 e0       	ldi	r22, 0x03	; 3
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     b64:	8c 2f       	mov	r24, r28
     b66:	0e 94 c1 04 	call	0x982	; 0x982 <PRV_voidWriteHalfPort>
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	63 e0       	ldi	r22, 0x03	; 3
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     b74:	8f e9       	ldi	r24, 0x9F	; 159
     b76:	9f e0       	ldi	r25, 0x0F	; 15
     b78:	01 97       	sbiw	r24, 0x01	; 1
     b7a:	f1 f7       	brne	.-4      	; 0xb78 <LCD_voidDisplayChar+0x56>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <LCD_voidDisplayChar+0x5c>
     b7e:	00 00       	nop
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	63 e0       	ldi	r22, 0x03	; 3
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <LCD_voidDisplayString>:
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	29 f4       	brne	.+10     	; 0xba2 <LCD_voidDisplayString+0x14>
     b98:	0c c0       	rjmp	.+24     	; 0xbb2 <LCD_voidDisplayString+0x24>
     b9a:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_voidDisplayChar>
     b9e:	cf 5f       	subi	r28, 0xFF	; 255
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <LCD_voidDisplayString+0x18>
     ba2:	8c 01       	movw	r16, r24
     ba4:	c0 e0       	ldi	r28, 0x00	; 0
     ba6:	f8 01       	movw	r30, r16
     ba8:	ec 0f       	add	r30, r28
     baa:	f1 1d       	adc	r31, r1
     bac:	80 81       	ld	r24, Z
     bae:	81 11       	cpse	r24, r1
     bb0:	f4 cf       	rjmp	.-24     	; 0xb9a <LCD_voidDisplayString+0xc>
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <LCD_voidDisplayStringDelay>:
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	71 f4       	brne	.+28     	; 0xbe0 <LCD_voidDisplayStringDelay+0x26>
     bc4:	15 c0       	rjmp	.+42     	; 0xbf0 <LCD_voidDisplayStringDelay+0x36>
     bc6:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_voidDisplayChar>
     bca:	cf 5f       	subi	r28, 0xFF	; 255
     bcc:	2f ef       	ldi	r18, 0xFF	; 255
     bce:	80 e7       	ldi	r24, 0x70	; 112
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	90 40       	sbci	r25, 0x00	; 0
     bd8:	e1 f7       	brne	.-8      	; 0xbd2 <LCD_voidDisplayStringDelay+0x18>
     bda:	00 c0       	rjmp	.+0      	; 0xbdc <LCD_voidDisplayStringDelay+0x22>
     bdc:	00 00       	nop
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <LCD_voidDisplayStringDelay+0x2a>
     be0:	8c 01       	movw	r16, r24
     be2:	c0 e0       	ldi	r28, 0x00	; 0
     be4:	f8 01       	movw	r30, r16
     be6:	ec 0f       	add	r30, r28
     be8:	f1 1d       	adc	r31, r1
     bea:	80 81       	ld	r24, Z
     bec:	81 11       	cpse	r24, r1
     bee:	eb cf       	rjmp	.-42     	; 0xbc6 <LCD_voidDisplayStringDelay+0xc>
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <LCD_voidDisplayNumber>:
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <LCD_voidDisplayNumber+0xa>
     c02:	00 d0       	rcall	.+0      	; 0xc04 <LCD_voidDisplayNumber+0xc>
     c04:	1f 92       	push	r1
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	26 2f       	mov	r18, r22
     c0c:	10 e0       	ldi	r17, 0x00	; 0
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <LCD_voidDisplayNumber+0x28>
     c10:	1f 5f       	subi	r17, 0xFF	; 255
     c12:	ed ec       	ldi	r30, 0xCD	; 205
     c14:	6e 9f       	mul	r22, r30
     c16:	61 2d       	mov	r22, r1
     c18:	11 24       	eor	r1, r1
     c1a:	66 95       	lsr	r22
     c1c:	66 95       	lsr	r22
     c1e:	66 95       	lsr	r22
     c20:	61 11       	cpse	r22, r1
     c22:	f6 cf       	rjmp	.-20     	; 0xc10 <LCD_voidDisplayNumber+0x18>
     c24:	00 e0       	ldi	r16, 0x00	; 0
     c26:	1a c0       	rjmp	.+52     	; 0xc5c <LCD_voidDisplayNumber+0x64>
     c28:	62 2f       	mov	r22, r18
     c2a:	2a e0       	ldi	r18, 0x0A	; 10
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodsi4>
     c36:	73 2f       	mov	r23, r19
     c38:	84 2f       	mov	r24, r20
     c3a:	95 2f       	mov	r25, r21
     c3c:	a0 2f       	mov	r26, r16
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	e1 2f       	mov	r30, r17
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	ea 1b       	sub	r30, r26
     c48:	fb 0b       	sbc	r31, r27
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	4c 0f       	add	r20, r28
     c50:	5d 1f       	adc	r21, r29
     c52:	e4 0f       	add	r30, r20
     c54:	f5 1f       	adc	r31, r21
     c56:	60 5d       	subi	r22, 0xD0	; 208
     c58:	60 83       	st	Z, r22
     c5a:	0f 5f       	subi	r16, 0xFF	; 255
     c5c:	01 17       	cp	r16, r17
     c5e:	20 f3       	brcs	.-56     	; 0xc28 <LCD_voidDisplayNumber+0x30>
     c60:	e1 e0       	ldi	r30, 0x01	; 1
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	ec 0f       	add	r30, r28
     c66:	fd 1f       	adc	r31, r29
     c68:	e1 0f       	add	r30, r17
     c6a:	f1 1d       	adc	r31, r1
     c6c:	10 82       	st	Z, r1
     c6e:	10 e0       	ldi	r17, 0x00	; 0
     c70:	03 c0       	rjmp	.+6      	; 0xc78 <LCD_voidDisplayNumber+0x80>
     c72:	0e 94 91 05 	call	0xb22	; 0xb22 <LCD_voidDisplayChar>
     c76:	1f 5f       	subi	r17, 0xFF	; 255
     c78:	e1 e0       	ldi	r30, 0x01	; 1
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	ec 0f       	add	r30, r28
     c7e:	fd 1f       	adc	r31, r29
     c80:	e1 0f       	add	r30, r17
     c82:	f1 1d       	adc	r31, r1
     c84:	80 81       	ld	r24, Z
     c86:	81 11       	cpse	r24, r1
     c88:	f4 cf       	rjmp	.-24     	; 0xc72 <LCD_voidDisplayNumber+0x7a>
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <LCD_voidClear>:
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	62 e0       	ldi	r22, 0x02	; 2
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0e 94 c1 04 	call	0x982	; 0x982 <PRV_voidWriteHalfPort>
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	63 e0       	ldi	r22, 0x03	; 3
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     cc2:	8f e9       	ldi	r24, 0x9F	; 159
     cc4:	9f e0       	ldi	r25, 0x0F	; 15
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <LCD_voidClear+0x28>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <LCD_voidClear+0x2e>
     ccc:	00 00       	nop
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	63 e0       	ldi	r22, 0x03	; 3
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	0e 94 c1 04 	call	0x982	; 0x982 <PRV_voidWriteHalfPort>
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     ce8:	8f e9       	ldi	r24, 0x9F	; 159
     cea:	9f e0       	ldi	r25, 0x0F	; 15
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <LCD_voidClear+0x4e>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <LCD_voidClear+0x54>
     cf2:	00 00       	nop
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	63 e0       	ldi	r22, 0x03	; 3
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     cfe:	08 95       	ret

00000d00 <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
	if(copy_u8Position<40)
     d04:	68 32       	cpi	r22, 0x28	; 40
     d06:	a0 f4       	brcc	.+40     	; 0xd30 <LCD_voidGoTOSpecificPosition+0x30>
     d08:	c6 2f       	mov	r28, r22
     d0a:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     d12:	d1 30       	cpi	r29, 0x01	; 1
     d14:	19 f0       	breq	.+6      	; 0xd1c <LCD_voidGoTOSpecificPosition+0x1c>
     d16:	d2 30       	cpi	r29, 0x02	; 2
     d18:	31 f0       	breq	.+12     	; 0xd26 <LCD_voidGoTOSpecificPosition+0x26>
     d1a:	0a c0       	rjmp	.+20     	; 0xd30 <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     d1c:	8c 2f       	mov	r24, r28
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
		
			
			break;
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     d26:	80 e4       	ldi	r24, 0x40	; 64
     d28:	8c 0f       	add	r24, r28
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     d36:	41 e0       	ldi	r20, 0x01	; 1
     d38:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
     d3c:	08 95       	ret

00000d3e <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     d3e:	41 30       	cpi	r20, 0x01	; 1
     d40:	19 f0       	breq	.+6      	; 0xd48 <LED_voidOn+0xa>
     d42:	42 30       	cpi	r20, 0x02	; 2
     d44:	29 f0       	breq	.+10     	; 0xd50 <LED_voidOn+0x12>
     d46:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
		break;
     d4e:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     d56:	08 95       	ret

00000d58 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     d58:	41 30       	cpi	r20, 0x01	; 1
     d5a:	19 f0       	breq	.+6      	; 0xd62 <LED_voidOff+0xa>
     d5c:	42 30       	cpi	r20, 0x02	; 2
     d5e:	29 f0       	breq	.+10     	; 0xd6a <LED_voidOff+0x12>
     d60:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
		break;
     d68:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	0e 94 ba 07 	call	0xf74	; 0xf74 <DIO_voidSetPinValue>
     d70:	08 95       	ret

00000d72 <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
     d78:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <PWM_voidInitChannel_1A>
     d7c:	08 95       	ret

00000d7e <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e2       	ldi	r20, 0x20	; 32
     d84:	50 e4       	ldi	r21, 0x40	; 64
     d86:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 ec       	ldi	r19, 0xC0	; 192
     d8e:	48 e2       	ldi	r20, 0x28	; 40
     d90:	54 e4       	ldi	r21, 0x44	; 68
     d92:	0e 94 46 0a 	call	0x148c	; 0x148c <__addsf3>
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	44 eb       	ldi	r20, 0xB4	; 180
     d9c:	52 e4       	ldi	r21, 0x42	; 66
     d9e:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
     da2:	ab 01       	movw	r20, r22
     da4:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1B(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
     da6:	82 e3       	ldi	r24, 0x32	; 50
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <PWM_voidGenerateChannel_1B>
     dae:	08 95       	ret

00000db0 <main>:

=======
 28e:	8f e1       	ldi	r24, 0x1F	; 31
 290:	9e e4       	ldi	r25, 0x4E	; 78
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <EEPROM_voidWriteByte+0x2c>
 296:	00 c0       	rjmp	.+0      	; 0x298 <EEPROM_voidWriteByte+0x32>
 298:	00 00       	nop
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <EEPROM_voidWritePage>:
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	61 15       	cp	r22, r1
 2ac:	71 05       	cpc	r23, r1
 2ae:	f9 f0       	breq	.+62     	; 0x2ee <EEPROM_voidWritePage+0x4c>
 2b0:	8b 01       	movw	r16, r22
 2b2:	d8 2f       	mov	r29, r24
 2b4:	c9 2f       	mov	r28, r25
 2b6:	c0 65       	ori	r28, 0x50	; 80
 2b8:	0e 94 58 05 	call	0xab0	; 0xab0 <TWI_voidSendStartCondition>
 2bc:	8c 2f       	mov	r24, r28
 2be:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TWI_voidSendSlaveAddWithWrite>
 2c2:	8d 2f       	mov	r24, r29
 2c4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TWI_voidTransmitMasterDataByte>
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <EEPROM_voidWritePage+0x38>
 2cc:	f8 01       	movw	r30, r16
 2ce:	ec 0f       	add	r30, r28
 2d0:	f1 1d       	adc	r31, r1
 2d2:	80 81       	ld	r24, Z
 2d4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TWI_voidTransmitMasterDataByte>
 2d8:	cf 5f       	subi	r28, 0xFF	; 255
 2da:	c8 30       	cpi	r28, 0x08	; 8
 2dc:	b8 f3       	brcs	.-18     	; 0x2cc <EEPROM_voidWritePage+0x2a>
 2de:	0e 94 74 05 	call	0xae8	; 0xae8 <TWI_voidSendStopCondition>
 2e2:	8f e1       	ldi	r24, 0x1F	; 31
 2e4:	9e e4       	ldi	r25, 0x4E	; 78
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <EEPROM_voidWritePage+0x44>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <EEPROM_voidWritePage+0x4a>
 2ec:	00 00       	nop
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <EEPROM_voidReadByte>:
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	61 15       	cp	r22, r1
 302:	71 05       	cpc	r23, r1
 304:	e1 f0       	breq	.+56     	; 0x33e <EEPROM_voidReadByte+0x46>
 306:	8b 01       	movw	r16, r22
 308:	d8 2f       	mov	r29, r24
 30a:	c9 2f       	mov	r28, r25
 30c:	c0 65       	ori	r28, 0x50	; 80
 30e:	0e 94 58 05 	call	0xab0	; 0xab0 <TWI_voidSendStartCondition>
 312:	8c 2f       	mov	r24, r28
 314:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <TWI_voidSendSlaveAddWithWrite>
 318:	8d 2f       	mov	r24, r29
 31a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <TWI_voidTransmitMasterDataByte>
 31e:	0e 94 66 05 	call	0xacc	; 0xacc <TWI_voidSendRepeatedStartCondition>
 322:	8c 2f       	mov	r24, r28
 324:	0e 94 90 05 	call	0xb20	; 0xb20 <TWI_voidSendSlaveAddWithRead>
 328:	c8 01       	movw	r24, r16
 32a:	0e 94 b1 05 	call	0xb62	; 0xb62 <TWI_voidRecieveMasterDataByteWithNAch>
 32e:	0e 94 74 05 	call	0xae8	; 0xae8 <TWI_voidSendStopCondition>
 332:	8f e1       	ldi	r24, 0x1F	; 31
 334:	9e e4       	ldi	r25, 0x4E	; 78
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <EEPROM_voidReadByte+0x3e>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <EEPROM_voidReadByte+0x44>
 33c:	00 00       	nop
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <KPD_voidInit>:
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	64 e0       	ldi	r22, 0x04	; 4
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	65 e0       	ldi	r22, 0x05	; 5
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	66 e0       	ldi	r22, 0x06	; 6
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	64 e0       	ldi	r22, 0x04	; 4
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	65 e0       	ldi	r22, 0x05	; 5
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	66 e0       	ldi	r22, 0x06	; 6
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 81 04 	call	0x902	; 0x902 <DIO_voidActivePinInPullUpResistance>
 396:	64 e0       	ldi	r22, 0x04	; 4
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 81 04 	call	0x902	; 0x902 <DIO_voidActivePinInPullUpResistance>
 39e:	65 e0       	ldi	r22, 0x05	; 5
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 81 04 	call	0x902	; 0x902 <DIO_voidActivePinInPullUpResistance>
 3a6:	66 e0       	ldi	r22, 0x06	; 6
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 81 04 	call	0x902	; 0x902 <DIO_voidActivePinInPullUpResistance>
 3ae:	08 95       	ret

000003b0 <PRV_voidWriteHalfPort>:
 3b0:	cf 93       	push	r28
 3b2:	c8 2f       	mov	r28, r24
 3b4:	80 ff       	sbrs	r24, 0
 3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <PRV_voidWriteHalfPort+0x14>
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	64 e0       	ldi	r22, 0x04	; 4
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <PRV_voidWriteHalfPort+0x1e>
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	64 e0       	ldi	r22, 0x04	; 4
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 3ce:	c1 ff       	sbrs	r28, 1
 3d0:	06 c0       	rjmp	.+12     	; 0x3de <PRV_voidWriteHalfPort+0x2e>
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	65 e0       	ldi	r22, 0x05	; 5
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 3dc:	05 c0       	rjmp	.+10     	; 0x3e8 <PRV_voidWriteHalfPort+0x38>
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	65 e0       	ldi	r22, 0x05	; 5
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 3e8:	c2 ff       	sbrs	r28, 2
 3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <PRV_voidWriteHalfPort+0x48>
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	66 e0       	ldi	r22, 0x06	; 6
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	66 e0       	ldi	r22, 0x06	; 6
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 402:	c3 ff       	sbrs	r28, 3
 404:	06 c0       	rjmp	.+12     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	67 e0       	ldi	r22, 0x07	; 7
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 410:	05 c0       	rjmp	.+10     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 412:	40 e0       	ldi	r20, 0x00	; 0
 414:	67 e0       	ldi	r22, 0x07	; 7
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <LCD_voidSendCommand>:
 420:	cf 93       	push	r28
 422:	c8 2f       	mov	r28, r24
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 438:	8c 2f       	mov	r24, r28
 43a:	82 95       	swap	r24
 43c:	8f 70       	andi	r24, 0x0F	; 15
 43e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PRV_voidWriteHalfPort>
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	63 e0       	ldi	r22, 0x03	; 3
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 44c:	8f e9       	ldi	r24, 0x9F	; 159
 44e:	9f e0       	ldi	r25, 0x0F	; 15
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <LCD_voidSendCommand+0x30>
 454:	00 c0       	rjmp	.+0      	; 0x456 <LCD_voidSendCommand+0x36>
 456:	00 00       	nop
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	63 e0       	ldi	r22, 0x03	; 3
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PRV_voidWriteHalfPort>
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 472:	8f e9       	ldi	r24, 0x9F	; 159
 474:	9f e0       	ldi	r25, 0x0F	; 15
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <LCD_voidSendCommand+0x56>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <LCD_voidSendCommand+0x5c>
 47c:	00 00       	nop
 47e:	40 e0       	ldi	r20, 0x00	; 0
 480:	63 e0       	ldi	r22, 0x03	; 3
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <LCD_voidInit>:
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	62 e0       	ldi	r22, 0x02	; 2
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	63 e0       	ldi	r22, 0x03	; 3
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	64 e0       	ldi	r22, 0x04	; 4
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 4b4:	41 e0       	ldi	r20, 0x01	; 1
 4b6:	65 e0       	ldi	r22, 0x05	; 5
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 4be:	41 e0       	ldi	r20, 0x01	; 1
 4c0:	66 e0       	ldi	r22, 0x06	; 6
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 4c8:	41 e0       	ldi	r20, 0x01	; 1
 4ca:	67 e0       	ldi	r22, 0x07	; 7
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 4d2:	2f e7       	ldi	r18, 0x7F	; 127
 4d4:	85 eb       	ldi	r24, 0xB5	; 181
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	21 50       	subi	r18, 0x01	; 1
 4da:	80 40       	sbci	r24, 0x00	; 0
 4dc:	90 40       	sbci	r25, 0x00	; 0
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <LCD_voidInit+0x4c>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <LCD_voidInit+0x56>
 4e2:	00 00       	nop
 4e4:	40 e0       	ldi	r20, 0x00	; 0
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	62 e0       	ldi	r22, 0x02	; 2
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PRV_voidWriteHalfPort>
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 508:	8f e9       	ldi	r24, 0x9F	; 159
 50a:	9f e0       	ldi	r25, 0x0F	; 15
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <LCD_voidInit+0x80>
 510:	00 c0       	rjmp	.+0      	; 0x512 <LCD_voidInit+0x86>
 512:	00 00       	nop
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	63 e0       	ldi	r22, 0x03	; 3
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 51e:	88 e2       	ldi	r24, 0x28	; 40
 520:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCommand>
 524:	90 ef       	ldi	r25, 0xF0	; 240
 526:	9a 95       	dec	r25
 528:	f1 f7       	brne	.-4      	; 0x526 <LCD_voidInit+0x9a>
 52a:	8f e0       	ldi	r24, 0x0F	; 15
 52c:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCommand>
 530:	20 ef       	ldi	r18, 0xF0	; 240
 532:	2a 95       	dec	r18
 534:	f1 f7       	brne	.-4      	; 0x532 <LCD_voidInit+0xa6>
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCommand>
 53c:	8f e3       	ldi	r24, 0x3F	; 63
 53e:	9f e1       	ldi	r25, 0x1F	; 31
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_voidInit+0xb4>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_voidInit+0xba>
 546:	00 00       	nop
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCommand>
 54e:	08 95       	ret

00000550 <LCD_voidDisplayChar>:
 550:	cf 93       	push	r28
 552:	c8 2f       	mov	r28, r24
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	62 e0       	ldi	r22, 0x02	; 2
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 568:	8c 2f       	mov	r24, r28
 56a:	82 95       	swap	r24
 56c:	8f 70       	andi	r24, 0x0F	; 15
 56e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PRV_voidWriteHalfPort>
 572:	41 e0       	ldi	r20, 0x01	; 1
 574:	63 e0       	ldi	r22, 0x03	; 3
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 57c:	8f e9       	ldi	r24, 0x9F	; 159
 57e:	9f e0       	ldi	r25, 0x0F	; 15
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <LCD_voidDisplayChar+0x30>
 584:	00 c0       	rjmp	.+0      	; 0x586 <LCD_voidDisplayChar+0x36>
 586:	00 00       	nop
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	63 e0       	ldi	r22, 0x03	; 3
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 592:	8c 2f       	mov	r24, r28
 594:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PRV_voidWriteHalfPort>
 598:	41 e0       	ldi	r20, 0x01	; 1
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 5a2:	8f e9       	ldi	r24, 0x9F	; 159
 5a4:	9f e0       	ldi	r25, 0x0F	; 15
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <LCD_voidDisplayChar+0x56>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <LCD_voidDisplayChar+0x5c>
 5ac:	00 00       	nop
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <LCD_voidDisplayString>:
 5bc:	0f 93       	push	r16
 5be:	1f 93       	push	r17
 5c0:	cf 93       	push	r28
 5c2:	00 97       	sbiw	r24, 0x00	; 0
 5c4:	29 f4       	brne	.+10     	; 0x5d0 <LCD_voidDisplayString+0x14>
 5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <LCD_voidDisplayString+0x24>
 5c8:	0e 94 a8 02 	call	0x550	; 0x550 <LCD_voidDisplayChar>
 5cc:	cf 5f       	subi	r28, 0xFF	; 255
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <LCD_voidDisplayString+0x18>
 5d0:	8c 01       	movw	r16, r24
 5d2:	c0 e0       	ldi	r28, 0x00	; 0
 5d4:	f8 01       	movw	r30, r16
 5d6:	ec 0f       	add	r30, r28
 5d8:	f1 1d       	adc	r31, r1
 5da:	80 81       	ld	r24, Z
 5dc:	81 11       	cpse	r24, r1
 5de:	f4 cf       	rjmp	.-24     	; 0x5c8 <LCD_voidDisplayString+0xc>
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	08 95       	ret

000005e8 <LCD_voidClear>:
 5e8:	40 e0       	ldi	r20, 0x00	; 0
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	62 e0       	ldi	r22, 0x02	; 2
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PRV_voidWriteHalfPort>
 602:	41 e0       	ldi	r20, 0x01	; 1
 604:	63 e0       	ldi	r22, 0x03	; 3
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 60c:	8f e9       	ldi	r24, 0x9F	; 159
 60e:	9f e0       	ldi	r25, 0x0F	; 15
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <LCD_voidClear+0x28>
 614:	00 c0       	rjmp	.+0      	; 0x616 <LCD_voidClear+0x2e>
 616:	00 00       	nop
 618:	40 e0       	ldi	r20, 0x00	; 0
 61a:	63 e0       	ldi	r22, 0x03	; 3
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PRV_voidWriteHalfPort>
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	63 e0       	ldi	r22, 0x03	; 3
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 632:	8f e9       	ldi	r24, 0x9F	; 159
 634:	9f e0       	ldi	r25, 0x0F	; 15
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <LCD_voidClear+0x4e>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <LCD_voidClear+0x54>
 63c:	00 00       	nop
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	63 e0       	ldi	r22, 0x03	; 3
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 01 04 	call	0x802	; 0x802 <DIO_voidSetPinValue>
 648:	08 95       	ret

0000064a <LCD_voidGoTOSpecificPosition>:
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	68 32       	cpi	r22, 0x28	; 40
 650:	a0 f4       	brcc	.+40     	; 0x67a <LCD_voidGoTOSpecificPosition+0x30>
 652:	c6 2f       	mov	r28, r22
 654:	d8 2f       	mov	r29, r24
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCommand>
 65c:	d1 30       	cpi	r29, 0x01	; 1
 65e:	19 f0       	breq	.+6      	; 0x666 <LCD_voidGoTOSpecificPosition+0x1c>
 660:	d2 30       	cpi	r29, 0x02	; 2
 662:	31 f0       	breq	.+12     	; 0x670 <LCD_voidGoTOSpecificPosition+0x26>
 664:	0a c0       	rjmp	.+20     	; 0x67a <LCD_voidGoTOSpecificPosition+0x30>
 666:	8c 2f       	mov	r24, r28
 668:	80 68       	ori	r24, 0x80	; 128
 66a:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCommand>
 66e:	05 c0       	rjmp	.+10     	; 0x67a <LCD_voidGoTOSpecificPosition+0x30>
 670:	80 e4       	ldi	r24, 0x40	; 64
 672:	8c 0f       	add	r24, r28
 674:	80 68       	ori	r24, 0x80	; 128
 676:	0e 94 10 02 	call	0x420	; 0x420 <LCD_voidSendCommand>
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	08 95       	ret

00000680 <LED_voidInit>:
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	0e 94 81 03 	call	0x702	; 0x702 <DIO_voidSetPinDirection>
 686:	08 95       	ret

00000688 <main>:
>>>>>>> Stashed changes
extern u8 global_accessType;

int main()
{
<<<<<<< Updated upstream
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_voidSetPinDirection>
	APP_init();
     dba:	0e 94 9a 00 	call	0x134	; 0x134 <APP_init>



	while(1)
	{
		if (global_accessType ==accessPermited)
     dbe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	19 f4       	brne	.+6      	; 0xdcc <main+0x1c>
		{
		KPD_Interface_user();
     dc6:	0e 94 39 01 	call	0x272	; 0x272 <KPD_Interface_user>
     dca:	f9 cf       	rjmp	.-14     	; 0xdbe <main+0xe>
		}
		else if (global_accessType ==accessDenied)
     dcc:	81 11       	cpse	r24, r1
     dce:	f7 cf       	rjmp	.-18     	; 0xdbe <main+0xe>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
     dd0:	8d ed       	ldi	r24, 0xDD	; 221
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_voidDisplayString>
		}
		
		
		
	}
}
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	08 95       	ret

00000dde <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	59 f0       	breq	.+22     	; 0xdf8 <ADC_voidInit+0x1a>
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	81 f0       	breq	.+32     	; 0xe06 <ADC_voidInit+0x28>
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	a1 f4       	brne	.+40     	; 0xe12 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
     dea:	87 b1       	in	r24, 0x07	; 7
     dec:	80 64       	ori	r24, 0x40	; 64
     dee:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     df0:	87 b1       	in	r24, 0x07	; 7
     df2:	8f 77       	andi	r24, 0x7F	; 127
     df4:	87 b9       	out	0x07, r24	; 7
		break;
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
     df8:	87 b1       	in	r24, 0x07	; 7
     dfa:	8f 7b       	andi	r24, 0xBF	; 191
     dfc:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     dfe:	87 b1       	in	r24, 0x07	; 7
     e00:	8f 77       	andi	r24, 0x7F	; 127
     e02:	87 b9       	out	0x07, r24	; 7
		break;
     e04:	06 c0       	rjmp	.+12     	; 0xe12 <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
     e06:	87 b1       	in	r24, 0x07	; 7
     e08:	80 64       	ori	r24, 0x40	; 64
     e0a:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
     e0c:	87 b1       	in	r24, 0x07	; 7
     e0e:	80 68       	ori	r24, 0x80	; 128
     e10:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
     e12:	87 b1       	in	r24, 0x07	; 7
     e14:	8f 7d       	andi	r24, 0xDF	; 223
     e16:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
     e18:	86 b1       	in	r24, 0x06	; 6
     e1a:	8f 7d       	andi	r24, 0xDF	; 223
     e1c:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
     e1e:	86 b1       	in	r24, 0x06	; 6
     e20:	87 7f       	andi	r24, 0xF7	; 247
     e22:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
     e24:	86 b1       	in	r24, 0x06	; 6
     e26:	84 60       	ori	r24, 0x04	; 4
     e28:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
     e2a:	86 b1       	in	r24, 0x06	; 6
     e2c:	82 60       	ori	r24, 0x02	; 2
     e2e:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
     e30:	86 b1       	in	r24, 0x06	; 6
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
     e36:	86 b1       	in	r24, 0x06	; 6
     e38:	80 68       	ori	r24, 0x80	; 128
     e3a:	86 b9       	out	0x06, r24	; 6
     e3c:	08 95       	ret

00000e3e <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
     e3e:	61 15       	cp	r22, r1
     e40:	71 05       	cpc	r23, r1
     e42:	b9 f0       	breq	.+46     	; 0xe72 <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
     e44:	97 b1       	in	r25, 0x07	; 7
     e46:	90 7e       	andi	r25, 0xE0	; 224
     e48:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
     e4a:	97 b1       	in	r25, 0x07	; 7
     e4c:	89 2b       	or	r24, r25
     e4e:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
     e50:	86 b1       	in	r24, 0x06	; 6
     e52:	80 64       	ori	r24, 0x40	; 64
     e54:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
     e56:	34 9b       	sbis	0x06, 4	; 6
     e58:	fe cf       	rjmp	.-4      	; 0xe56 <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
     e5a:	84 b1       	in	r24, 0x04	; 4
     e5c:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	fb 01       	movw	r30, r22
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
     e6c:	86 b1       	in	r24, 0x06	; 6
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	86 b9       	out	0x06, r24	; 6
     e72:	08 95       	ret

00000e74 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
     e74:	84 30       	cpi	r24, 0x04	; 4
     e76:	08 f0       	brcs	.+2      	; 0xe7a <DIO_voidSetPinDirection+0x6>
     e78:	7c c0       	rjmp	.+248    	; 0xf72 <DIO_voidSetPinDirection+0xfe>
     e7a:	68 30       	cpi	r22, 0x08	; 8
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <DIO_voidSetPinDirection+0xc>
     e7e:	79 c0       	rjmp	.+242    	; 0xf72 <DIO_voidSetPinDirection+0xfe>
     e80:	42 30       	cpi	r20, 0x02	; 2
     e82:	08 f0       	brcs	.+2      	; 0xe86 <DIO_voidSetPinDirection+0x12>
     e84:	76 c0       	rjmp	.+236    	; 0xf72 <DIO_voidSetPinDirection+0xfe>
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	19 f1       	breq	.+70     	; 0xed0 <DIO_voidSetPinDirection+0x5c>
     e8a:	30 f0       	brcs	.+12     	; 0xe98 <DIO_voidSetPinDirection+0x24>
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	e1 f1       	breq	.+120    	; 0xf08 <DIO_voidSetPinDirection+0x94>
     e90:	83 30       	cpi	r24, 0x03	; 3
     e92:	09 f4       	brne	.+2      	; 0xe96 <DIO_voidSetPinDirection+0x22>
     e94:	54 c0       	rjmp	.+168    	; 0xf3e <DIO_voidSetPinDirection+0xca>
     e96:	08 95       	ret
     e98:	44 23       	and	r20, r20
     e9a:	71 f0       	breq	.+28     	; 0xeb8 <DIO_voidSetPinDirection+0x44>
     e9c:	41 30       	cpi	r20, 0x01	; 1
     e9e:	09 f0       	breq	.+2      	; 0xea2 <DIO_voidSetPinDirection+0x2e>
     ea0:	68 c0       	rjmp	.+208    	; 0xf72 <DIO_voidSetPinDirection+0xfe>
     ea2:	2a b3       	in	r18, 0x1a	; 26
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_voidSetPinDirection+0x3a>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	6a 95       	dec	r22
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_voidSetPinDirection+0x36>
     eb2:	82 2b       	or	r24, r18
     eb4:	8a bb       	out	0x1a, r24	; 26
     eb6:	08 95       	ret
     eb8:	2a b3       	in	r18, 0x1a	; 26
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_voidSetPinDirection+0x50>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	6a 95       	dec	r22
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_voidSetPinDirection+0x4c>
     ec8:	80 95       	com	r24
     eca:	82 23       	and	r24, r18
     ecc:	8a bb       	out	0x1a, r24	; 26
     ece:	08 95       	ret
     ed0:	44 23       	and	r20, r20
     ed2:	71 f0       	breq	.+28     	; 0xef0 <DIO_voidSetPinDirection+0x7c>
     ed4:	41 30       	cpi	r20, 0x01	; 1
     ed6:	09 f0       	breq	.+2      	; 0xeda <DIO_voidSetPinDirection+0x66>
     ed8:	4c c0       	rjmp	.+152    	; 0xf72 <DIO_voidSetPinDirection+0xfe>
     eda:	27 b3       	in	r18, 0x17	; 23
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_voidSetPinDirection+0x72>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	6a 95       	dec	r22
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_voidSetPinDirection+0x6e>
     eea:	82 2b       	or	r24, r18
     eec:	87 bb       	out	0x17, r24	; 23
     eee:	08 95       	ret
     ef0:	27 b3       	in	r18, 0x17	; 23
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_voidSetPinDirection+0x88>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	6a 95       	dec	r22
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_voidSetPinDirection+0x84>
     f00:	80 95       	com	r24
     f02:	82 23       	and	r24, r18
     f04:	87 bb       	out	0x17, r24	; 23
     f06:	08 95       	ret
     f08:	44 23       	and	r20, r20
     f0a:	69 f0       	breq	.+26     	; 0xf26 <DIO_voidSetPinDirection+0xb2>
     f0c:	41 30       	cpi	r20, 0x01	; 1
     f0e:	89 f5       	brne	.+98     	; 0xf72 <DIO_voidSetPinDirection+0xfe>
     f10:	24 b3       	in	r18, 0x14	; 20
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_voidSetPinDirection+0xa8>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	6a 95       	dec	r22
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_voidSetPinDirection+0xa4>
     f20:	82 2b       	or	r24, r18
     f22:	84 bb       	out	0x14, r24	; 20
     f24:	08 95       	ret
     f26:	24 b3       	in	r18, 0x14	; 20
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_voidSetPinDirection+0xbe>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	6a 95       	dec	r22
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_voidSetPinDirection+0xba>
     f36:	80 95       	com	r24
     f38:	82 23       	and	r24, r18
     f3a:	84 bb       	out	0x14, r24	; 20
     f3c:	08 95       	ret
     f3e:	44 23       	and	r20, r20
     f40:	69 f0       	breq	.+26     	; 0xf5c <DIO_voidSetPinDirection+0xe8>
     f42:	41 30       	cpi	r20, 0x01	; 1
     f44:	b1 f4       	brne	.+44     	; 0xf72 <DIO_voidSetPinDirection+0xfe>
     f46:	21 b3       	in	r18, 0x11	; 17
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_voidSetPinDirection+0xde>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	6a 95       	dec	r22
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_voidSetPinDirection+0xda>
     f56:	82 2b       	or	r24, r18
     f58:	81 bb       	out	0x11, r24	; 17
     f5a:	08 95       	ret
     f5c:	21 b3       	in	r18, 0x11	; 17
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_voidSetPinDirection+0xf4>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	6a 95       	dec	r22
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_voidSetPinDirection+0xf0>
     f6c:	80 95       	com	r24
     f6e:	82 23       	and	r24, r18
     f70:	81 bb       	out	0x11, r24	; 17
     f72:	08 95       	ret

00000f74 <DIO_voidSetPinValue>:
     f74:	84 30       	cpi	r24, 0x04	; 4
     f76:	08 f0       	brcs	.+2      	; 0xf7a <DIO_voidSetPinValue+0x6>
     f78:	7c c0       	rjmp	.+248    	; 0x1072 <DIO_voidSetPinValue+0xfe>
     f7a:	68 30       	cpi	r22, 0x08	; 8
     f7c:	08 f0       	brcs	.+2      	; 0xf80 <DIO_voidSetPinValue+0xc>
     f7e:	79 c0       	rjmp	.+242    	; 0x1072 <DIO_voidSetPinValue+0xfe>
     f80:	42 30       	cpi	r20, 0x02	; 2
     f82:	08 f0       	brcs	.+2      	; 0xf86 <DIO_voidSetPinValue+0x12>
     f84:	76 c0       	rjmp	.+236    	; 0x1072 <DIO_voidSetPinValue+0xfe>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	19 f1       	breq	.+70     	; 0xfd0 <DIO_voidSetPinValue+0x5c>
     f8a:	30 f0       	brcs	.+12     	; 0xf98 <DIO_voidSetPinValue+0x24>
     f8c:	82 30       	cpi	r24, 0x02	; 2
     f8e:	e1 f1       	breq	.+120    	; 0x1008 <DIO_voidSetPinValue+0x94>
     f90:	83 30       	cpi	r24, 0x03	; 3
     f92:	09 f4       	brne	.+2      	; 0xf96 <DIO_voidSetPinValue+0x22>
     f94:	54 c0       	rjmp	.+168    	; 0x103e <DIO_voidSetPinValue+0xca>
     f96:	08 95       	ret
     f98:	44 23       	and	r20, r20
     f9a:	71 f0       	breq	.+28     	; 0xfb8 <DIO_voidSetPinValue+0x44>
     f9c:	41 30       	cpi	r20, 0x01	; 1
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <DIO_voidSetPinValue+0x2e>
     fa0:	68 c0       	rjmp	.+208    	; 0x1072 <DIO_voidSetPinValue+0xfe>
     fa2:	2b b3       	in	r18, 0x1b	; 27
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_voidSetPinValue+0x3a>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	6a 95       	dec	r22
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_voidSetPinValue+0x36>
     fb2:	82 2b       	or	r24, r18
     fb4:	8b bb       	out	0x1b, r24	; 27
     fb6:	08 95       	ret
     fb8:	2b b3       	in	r18, 0x1b	; 27
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_voidSetPinValue+0x50>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	6a 95       	dec	r22
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_voidSetPinValue+0x4c>
     fc8:	80 95       	com	r24
     fca:	82 23       	and	r24, r18
     fcc:	8b bb       	out	0x1b, r24	; 27
     fce:	08 95       	ret
     fd0:	44 23       	and	r20, r20
     fd2:	71 f0       	breq	.+28     	; 0xff0 <DIO_voidSetPinValue+0x7c>
     fd4:	41 30       	cpi	r20, 0x01	; 1
     fd6:	09 f0       	breq	.+2      	; 0xfda <DIO_voidSetPinValue+0x66>
     fd8:	4c c0       	rjmp	.+152    	; 0x1072 <DIO_voidSetPinValue+0xfe>
     fda:	28 b3       	in	r18, 0x18	; 24
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_voidSetPinValue+0x72>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	6a 95       	dec	r22
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_voidSetPinValue+0x6e>
     fea:	82 2b       	or	r24, r18
     fec:	88 bb       	out	0x18, r24	; 24
     fee:	08 95       	ret
     ff0:	28 b3       	in	r18, 0x18	; 24
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_voidSetPinValue+0x88>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	6a 95       	dec	r22
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_voidSetPinValue+0x84>
    1000:	80 95       	com	r24
    1002:	82 23       	and	r24, r18
    1004:	88 bb       	out	0x18, r24	; 24
    1006:	08 95       	ret
    1008:	44 23       	and	r20, r20
    100a:	69 f0       	breq	.+26     	; 0x1026 <DIO_voidSetPinValue+0xb2>
    100c:	41 30       	cpi	r20, 0x01	; 1
    100e:	89 f5       	brne	.+98     	; 0x1072 <DIO_voidSetPinValue+0xfe>
    1010:	25 b3       	in	r18, 0x15	; 21
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_voidSetPinValue+0xa8>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	6a 95       	dec	r22
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_voidSetPinValue+0xa4>
    1020:	82 2b       	or	r24, r18
    1022:	85 bb       	out	0x15, r24	; 21
    1024:	08 95       	ret
    1026:	25 b3       	in	r18, 0x15	; 21
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_voidSetPinValue+0xbe>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	6a 95       	dec	r22
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_voidSetPinValue+0xba>
    1036:	80 95       	com	r24
    1038:	82 23       	and	r24, r18
    103a:	85 bb       	out	0x15, r24	; 21
    103c:	08 95       	ret
    103e:	44 23       	and	r20, r20
    1040:	69 f0       	breq	.+26     	; 0x105c <DIO_voidSetPinValue+0xe8>
    1042:	41 30       	cpi	r20, 0x01	; 1
    1044:	b1 f4       	brne	.+44     	; 0x1072 <DIO_voidSetPinValue+0xfe>
    1046:	22 b3       	in	r18, 0x12	; 18
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_voidSetPinValue+0xde>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	6a 95       	dec	r22
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_voidSetPinValue+0xda>
    1056:	82 2b       	or	r24, r18
    1058:	82 bb       	out	0x12, r24	; 18
    105a:	08 95       	ret
    105c:	22 b3       	in	r18, 0x12	; 18
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_voidSetPinValue+0xf4>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	6a 95       	dec	r22
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_voidSetPinValue+0xf0>
    106c:	80 95       	com	r24
    106e:	82 23       	and	r24, r18
    1070:	82 bb       	out	0x12, r24	; 18
    1072:	08 95       	ret

00001074 <DIO_voidGetPinValue>:
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	c0 f5       	brcc	.+112    	; 0x10e8 <DIO_voidGetPinValue+0x74>
    1078:	68 30       	cpi	r22, 0x08	; 8
    107a:	b0 f5       	brcc	.+108    	; 0x10e8 <DIO_voidGetPinValue+0x74>
    107c:	41 15       	cp	r20, r1
    107e:	51 05       	cpc	r21, r1
    1080:	99 f1       	breq	.+102    	; 0x10e8 <DIO_voidGetPinValue+0x74>
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	89 f0       	breq	.+34     	; 0x10a8 <DIO_voidGetPinValue+0x34>
    1086:	28 f0       	brcs	.+10     	; 0x1092 <DIO_voidGetPinValue+0x1e>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	c9 f0       	breq	.+50     	; 0x10be <DIO_voidGetPinValue+0x4a>
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	11 f1       	breq	.+68     	; 0x10d4 <DIO_voidGetPinValue+0x60>
    1090:	08 95       	ret
    1092:	89 b3       	in	r24, 0x19	; 25
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_voidGetPinValue+0x28>
    1098:	95 95       	asr	r25
    109a:	87 95       	ror	r24
    109c:	6a 95       	dec	r22
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_voidGetPinValue+0x24>
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	fa 01       	movw	r30, r20
    10a4:	80 83       	st	Z, r24
    10a6:	08 95       	ret
    10a8:	86 b3       	in	r24, 0x16	; 22
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_voidGetPinValue+0x3e>
    10ae:	95 95       	asr	r25
    10b0:	87 95       	ror	r24
    10b2:	6a 95       	dec	r22
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_voidGetPinValue+0x3a>
    10b6:	81 70       	andi	r24, 0x01	; 1
    10b8:	fa 01       	movw	r30, r20
    10ba:	80 83       	st	Z, r24
    10bc:	08 95       	ret
    10be:	83 b3       	in	r24, 0x13	; 19
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_voidGetPinValue+0x54>
    10c4:	95 95       	asr	r25
    10c6:	87 95       	ror	r24
    10c8:	6a 95       	dec	r22
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_voidGetPinValue+0x50>
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	fa 01       	movw	r30, r20
    10d0:	80 83       	st	Z, r24
    10d2:	08 95       	ret
    10d4:	80 b3       	in	r24, 0x10	; 16
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_voidGetPinValue+0x6a>
    10da:	95 95       	asr	r25
    10dc:	87 95       	ror	r24
    10de:	6a 95       	dec	r22
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_voidGetPinValue+0x66>
    10e2:	81 70       	andi	r24, 0x01	; 1
    10e4:	fa 01       	movw	r30, r20
    10e6:	80 83       	st	Z, r24
    10e8:	08 95       	ret

000010ea <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	a8 f5       	brcc	.+106    	; 0x1158 <DIO_voidActivePinInPullUpResistance+0x6e>
    10ee:	68 30       	cpi	r22, 0x08	; 8
    10f0:	98 f5       	brcc	.+102    	; 0x1158 <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	89 f0       	breq	.+34     	; 0x1118 <DIO_voidActivePinInPullUpResistance+0x2e>
    10f6:	28 f0       	brcs	.+10     	; 0x1102 <DIO_voidActivePinInPullUpResistance+0x18>
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	c9 f0       	breq	.+50     	; 0x112e <DIO_voidActivePinInPullUpResistance+0x44>
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	11 f1       	breq	.+68     	; 0x1144 <DIO_voidActivePinInPullUpResistance+0x5a>
    1100:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    1102:	2b b3       	in	r18, 0x1b	; 27
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_voidActivePinInPullUpResistance+0x24>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	6a 95       	dec	r22
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_voidActivePinInPullUpResistance+0x20>
    1112:	82 2b       	or	r24, r18
    1114:	8b bb       	out	0x1b, r24	; 27
			break;
    1116:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    1118:	28 b3       	in	r18, 0x18	; 24
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_voidActivePinInPullUpResistance+0x3a>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	6a 95       	dec	r22
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_voidActivePinInPullUpResistance+0x36>
    1128:	82 2b       	or	r24, r18
    112a:	88 bb       	out	0x18, r24	; 24
			break;
    112c:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    112e:	25 b3       	in	r18, 0x15	; 21
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_voidActivePinInPullUpResistance+0x50>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	6a 95       	dec	r22
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_voidActivePinInPullUpResistance+0x4c>
    113e:	82 2b       	or	r24, r18
    1140:	85 bb       	out	0x15, r24	; 21
			break;
    1142:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    1144:	22 b3       	in	r18, 0x12	; 18
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_voidActivePinInPullUpResistance+0x66>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	6a 95       	dec	r22
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_voidActivePinInPullUpResistance+0x62>
    1154:	82 2b       	or	r24, r18
    1156:	82 bb       	out	0x12, r24	; 18
    1158:	08 95       	ret

0000115a <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    115a:	8f b7       	in	r24, 0x3f	; 63
    115c:	80 68       	ori	r24, 0x80	; 128
    115e:	8f bf       	out	0x3f, r24	; 63
    1160:	08 95       	ret

00001162 <PWM_voidInitChannel_0>:
	else
	{
		//error 
	}
	
}
    1162:	83 b7       	in	r24, 0x33	; 51
    1164:	80 64       	ori	r24, 0x40	; 64
    1166:	83 bf       	out	0x33, r24	; 51
    1168:	83 b7       	in	r24, 0x33	; 51
    116a:	88 60       	ori	r24, 0x08	; 8
    116c:	83 bf       	out	0x33, r24	; 51
    116e:	83 b7       	in	r24, 0x33	; 51
    1170:	80 62       	ori	r24, 0x20	; 32
    1172:	83 bf       	out	0x33, r24	; 51
    1174:	83 b7       	in	r24, 0x33	; 51
    1176:	8f 7e       	andi	r24, 0xEF	; 239
    1178:	83 bf       	out	0x33, r24	; 51
    117a:	08 95       	ret

0000117c <PWM_voidGenerateChannel_0>:
    117c:	85 36       	cpi	r24, 0x65	; 101
    117e:	88 f4       	brcc	.+34     	; 0x11a2 <PWM_voidGenerateChannel_0+0x26>
    1180:	98 2f       	mov	r25, r24
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	64 e6       	ldi	r22, 0x64	; 100
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__divmodhi4>
    118c:	61 50       	subi	r22, 0x01	; 1
    118e:	6c bf       	out	0x3c, r22	; 60
    1190:	83 b7       	in	r24, 0x33	; 51
    1192:	81 60       	ori	r24, 0x01	; 1
    1194:	83 bf       	out	0x33, r24	; 51
    1196:	83 b7       	in	r24, 0x33	; 51
    1198:	82 60       	ori	r24, 0x02	; 2
    119a:	83 bf       	out	0x33, r24	; 51
    119c:	83 b7       	in	r24, 0x33	; 51
    119e:	8b 7f       	andi	r24, 0xFB	; 251
    11a0:	83 bf       	out	0x33, r24	; 51
    11a2:	08 95       	ret

000011a4 <PWM_voidInitChannel_1A>:
    11a4:	8e b5       	in	r24, 0x2e	; 46
    11a6:	80 61       	ori	r24, 0x10	; 16
    11a8:	8e bd       	out	0x2e, r24	; 46
    11aa:	8e b5       	in	r24, 0x2e	; 46
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	8e bd       	out	0x2e, r24	; 46
    11b0:	8f b5       	in	r24, 0x2f	; 47
    11b2:	82 60       	ori	r24, 0x02	; 2
    11b4:	8f bd       	out	0x2f, r24	; 47
    11b6:	8f b5       	in	r24, 0x2f	; 47
    11b8:	8e 7f       	andi	r24, 0xFE	; 254
    11ba:	8f bd       	out	0x2f, r24	; 47
    11bc:	8f b5       	in	r24, 0x2f	; 47
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	8f bd       	out	0x2f, r24	; 47
    11c2:	8f b5       	in	r24, 0x2f	; 47
    11c4:	8f 7b       	andi	r24, 0xBF	; 191
    11c6:	8f bd       	out	0x2f, r24	; 47
    11c8:	08 95       	ret

000011ca <PWM_voidInitChannel_1B>:
    11ca:	8e b5       	in	r24, 0x2e	; 46
    11cc:	80 61       	ori	r24, 0x10	; 16
    11ce:	8e bd       	out	0x2e, r24	; 46
    11d0:	8e b5       	in	r24, 0x2e	; 46
    11d2:	88 60       	ori	r24, 0x08	; 8
    11d4:	8e bd       	out	0x2e, r24	; 46
    11d6:	8f b5       	in	r24, 0x2f	; 47
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	8f bd       	out	0x2f, r24	; 47
    11dc:	8f b5       	in	r24, 0x2f	; 47
    11de:	8e 7f       	andi	r24, 0xFE	; 254
    11e0:	8f bd       	out	0x2f, r24	; 47
    11e2:	8f b5       	in	r24, 0x2f	; 47
    11e4:	80 62       	ori	r24, 0x20	; 32
    11e6:	8f bd       	out	0x2f, r24	; 47
    11e8:	8f b5       	in	r24, 0x2f	; 47
    11ea:	8f 7e       	andi	r24, 0xEF	; 239
    11ec:	8f bd       	out	0x2f, r24	; 47
    11ee:	08 95       	ret

000011f0 <PWM_voidGenerateChannel_1B>:



void PWM_voidGenerateChannel_1B(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	6a 01       	movw	r12, r20
    1200:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	48 ec       	ldi	r20, 0xC8	; 200
    1208:	52 e4       	ldi	r21, 0x42	; 66
    120a:	c7 01       	movw	r24, r14
    120c:	b6 01       	movw	r22, r12
    120e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__cmpsf2>
    1212:	18 16       	cp	r1, r24
    1214:	94 f1       	brlt	.+100    	; 0x127a <PWM_voidGenerateChannel_1B+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    1216:	9e 01       	movw	r18, r28
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	60 e9       	ldi	r22, 0x90	; 144
    121e:	70 ed       	ldi	r23, 0xD0	; 208
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__udivmodsi4>
    1228:	21 50       	subi	r18, 0x01	; 1
    122a:	31 09       	sbc	r19, r1
    122c:	37 bd       	out	0x27, r19	; 39
    122e:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1B_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    1230:	66 b5       	in	r22, 0x26	; 38
    1232:	77 b5       	in	r23, 0x27	; 39
    1234:	6f 5f       	subi	r22, 0xFF	; 255
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__floatunsisf>
    1240:	a7 01       	movw	r20, r14
    1242:	96 01       	movw	r18, r12
    1244:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__mulsf3>
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	48 ec       	ldi	r20, 0xC8	; 200
    124e:	52 e4       	ldi	r21, 0x42	; 66
    1250:	0e 94 b7 0a 	call	0x156e	; 0x156e <__divsf3>
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 45 0a 	call	0x148a	; 0x148a <__subsf3>
    1260:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fixunssfsi>
    1264:	79 bd       	out	0x29, r23	; 41
    1266:	68 bd       	out	0x28, r22	; 40
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    1268:	8e b5       	in	r24, 0x2e	; 46
    126a:	81 60       	ori	r24, 0x01	; 1
    126c:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    126e:	8e b5       	in	r24, 0x2e	; 46
    1270:	82 60       	ori	r24, 0x02	; 2
    1272:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    1274:	8e b5       	in	r24, 0x2e	; 46
    1276:	8b 7f       	andi	r24, 0xFB	; 251
    1278:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	08 95       	ret

00001288 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    1288:	83 b7       	in	r24, 0x33	; 51
    128a:	8f 7b       	andi	r24, 0xBF	; 191
    128c:	83 bf       	out	0x33, r24	; 51
    128e:	83 b7       	in	r24, 0x33	; 51
    1290:	88 60       	ori	r24, 0x08	; 8
    1292:	83 bf       	out	0x33, r24	; 51
    1294:	83 b7       	in	r24, 0x33	; 51
    1296:	8f 7e       	andi	r24, 0xEF	; 239
    1298:	83 bf       	out	0x33, r24	; 51
    129a:	83 b7       	in	r24, 0x33	; 51
    129c:	8f 7d       	andi	r24, 0xDF	; 223
    129e:	83 bf       	out	0x33, r24	; 51
    12a0:	89 b7       	in	r24, 0x39	; 57
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	89 bf       	out	0x39, r24	; 57
    12a6:	89 ef       	ldi	r24, 0xF9	; 249
    12a8:	8c bf       	out	0x3c, r24	; 60
    12aa:	08 95       	ret

000012ac <TMR0_voidStart>:
    12ac:	83 b7       	in	r24, 0x33	; 51
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	83 bf       	out	0x33, r24	; 51
    12b2:	83 b7       	in	r24, 0x33	; 51
    12b4:	82 60       	ori	r24, 0x02	; 2
    12b6:	83 bf       	out	0x33, r24	; 51
    12b8:	83 b7       	in	r24, 0x33	; 51
    12ba:	8b 7f       	andi	r24, 0xFB	; 251
    12bc:	83 bf       	out	0x33, r24	; 51
    12be:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <local_u16Counter+0x1>
    12c2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <local_u16Counter>
    12c6:	08 95       	ret

000012c8 <TMR0_voidStop>:
    12c8:	83 b7       	in	r24, 0x33	; 51
    12ca:	8e 7f       	andi	r24, 0xFE	; 254
    12cc:	83 bf       	out	0x33, r24	; 51
    12ce:	83 b7       	in	r24, 0x33	; 51
    12d0:	8d 7f       	andi	r24, 0xFD	; 253
    12d2:	83 bf       	out	0x33, r24	; 51
    12d4:	83 b7       	in	r24, 0x33	; 51
    12d6:	8b 7f       	andi	r24, 0xFB	; 251
    12d8:	83 bf       	out	0x33, r24	; 51
    12da:	08 95       	ret

000012dc <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	21 f0       	breq	.+8      	; 0x12e8 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    12e0:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <PRV_pFunCallBackCTC+0x1>
    12e4:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <PRV_pFunCallBackCTC>
    12e8:	08 95       	ret

000012ea <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    12ea:	88 b7       	in	r24, 0x38	; 56
    12ec:	82 60       	ori	r24, 0x02	; 2
    12ee:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    12f0:	88 b7       	in	r24, 0x38	; 56
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	88 bf       	out	0x38, r24	; 56
    12f6:	08 95       	ret

000012f8 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    12f8:	1f 92       	push	r1
    12fa:	0f 92       	push	r0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	0f 92       	push	r0
    1300:	11 24       	eor	r1, r1
    1302:	2f 93       	push	r18
    1304:	3f 93       	push	r19
    1306:	4f 93       	push	r20
    1308:	5f 93       	push	r21
    130a:	6f 93       	push	r22
    130c:	7f 93       	push	r23
    130e:	8f 93       	push	r24
    1310:	9f 93       	push	r25
    1312:	af 93       	push	r26
    1314:	bf 93       	push	r27
    1316:	ef 93       	push	r30
    1318:	ff 93       	push	r31
	
	
	local_u16Counter++;
    131a:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <local_u16Counter>
    131e:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <local_u16Counter+0x1>
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <local_u16Counter+0x1>
    1328:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    132c:	88 3e       	cpi	r24, 0xE8	; 232
    132e:	93 40       	sbci	r25, 0x03	; 3
    1330:	69 f4       	brne	.+26     	; 0x134c <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    1332:	81 e7       	ldi	r24, 0x71	; 113
    1334:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    1336:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <local_u16Counter+0x1>
    133a:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    133e:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <PRV_pFunCallBackOVF>
    1342:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <PRV_pFunCallBackOVF+0x1>
    1346:	30 97       	sbiw	r30, 0x00	; 0
    1348:	09 f0       	breq	.+2      	; 0x134c <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    134a:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
	

	
	local_u16Counter++;
    1390:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <local_u16Counter>
    1394:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <local_u16Counter+0x1>
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <local_u16Counter+0x1>
    139e:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    13a2:	88 38       	cpi	r24, 0x88	; 136
    13a4:	93 41       	sbci	r25, 0x13	; 19
    13a6:	69 f4       	brne	.+26     	; 0x13c2 <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    13a8:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <local_u16Counter+0x1>
    13ac:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    13b0:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <PRV_pFunCallBackCTC>
    13b4:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <PRV_pFunCallBackCTC+0x1>
    13b8:	30 97       	sbiw	r30, 0x00	; 0
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    13bc:	09 95       	icall
			TMR0clear_flag();
    13be:	0e 94 75 09 	call	0x12ea	; 0x12ea <TMR0clear_flag>
		{
				//error state
		}
	}
	
    13c2:	ff 91       	pop	r31
    13c4:	ef 91       	pop	r30
    13c6:	bf 91       	pop	r27
    13c8:	af 91       	pop	r26
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	7f 91       	pop	r23
    13d0:	6f 91       	pop	r22
    13d2:	5f 91       	pop	r21
    13d4:	4f 91       	pop	r20
    13d6:	3f 91       	pop	r19
    13d8:	2f 91       	pop	r18
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <TWI_voidInitMaster>:
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
		
		while(0==GET_BIT(TWCR_REG,TWINT));
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    13e4:	8c e0       	ldi	r24, 0x0C	; 12
    13e6:	80 b9       	out	0x00, r24	; 0
    13e8:	81 b1       	in	r24, 0x01	; 1
    13ea:	8d 7f       	andi	r24, 0xFD	; 253
    13ec:	81 b9       	out	0x01, r24	; 1
    13ee:	81 b1       	in	r24, 0x01	; 1
    13f0:	8e 7f       	andi	r24, 0xFE	; 254
    13f2:	81 b9       	out	0x01, r24	; 1
    13f4:	86 b7       	in	r24, 0x36	; 54
    13f6:	84 60       	ori	r24, 0x04	; 4
    13f8:	86 bf       	out	0x36, r24	; 54
    13fa:	08 95       	ret

000013fc <TWI_voidSendStartCondition>:
    13fc:	86 b7       	in	r24, 0x36	; 54
    13fe:	80 62       	ori	r24, 0x20	; 32
    1400:	86 bf       	out	0x36, r24	; 54
    1402:	86 b7       	in	r24, 0x36	; 54
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	86 bf       	out	0x36, r24	; 54
    1408:	06 b6       	in	r0, 0x36	; 54
    140a:	07 fe       	sbrs	r0, 7
    140c:	fd cf       	rjmp	.-6      	; 0x1408 <TWI_voidSendStartCondition+0xc>
    140e:	81 b1       	in	r24, 0x01	; 1
    1410:	88 7f       	andi	r24, 0xF8	; 248
    1412:	88 30       	cpi	r24, 0x08	; 8
    1414:	e1 f7       	brne	.-8      	; 0x140e <TWI_voidSendStartCondition+0x12>
    1416:	08 95       	ret

00001418 <TWI_voidSendStopCondition>:
    1418:	86 b7       	in	r24, 0x36	; 54
    141a:	80 61       	ori	r24, 0x10	; 16
    141c:	86 bf       	out	0x36, r24	; 54
    141e:	86 b7       	in	r24, 0x36	; 54
    1420:	80 68       	ori	r24, 0x80	; 128
    1422:	86 bf       	out	0x36, r24	; 54
    1424:	08 95       	ret

00001426 <TWI_voidSendSlaveAddWithWrite>:
    1426:	88 23       	and	r24, r24
    1428:	94 f0       	brlt	.+36     	; 0x144e <TWI_voidSendSlaveAddWithWrite+0x28>
    142a:	88 0f       	add	r24, r24
    142c:	83 b9       	out	0x03, r24	; 3
    142e:	83 b1       	in	r24, 0x03	; 3
    1430:	8e 7f       	andi	r24, 0xFE	; 254
    1432:	83 b9       	out	0x03, r24	; 3
    1434:	86 b7       	in	r24, 0x36	; 54
    1436:	8f 7d       	andi	r24, 0xDF	; 223
    1438:	86 bf       	out	0x36, r24	; 54
    143a:	86 b7       	in	r24, 0x36	; 54
    143c:	80 68       	ori	r24, 0x80	; 128
    143e:	86 bf       	out	0x36, r24	; 54
    1440:	06 b6       	in	r0, 0x36	; 54
    1442:	07 fe       	sbrs	r0, 7
    1444:	fd cf       	rjmp	.-6      	; 0x1440 <TWI_voidSendSlaveAddWithWrite+0x1a>
    1446:	81 b1       	in	r24, 0x01	; 1
    1448:	88 7f       	andi	r24, 0xF8	; 248
    144a:	88 31       	cpi	r24, 0x18	; 24
    144c:	e1 f7       	brne	.-8      	; 0x1446 <TWI_voidSendSlaveAddWithWrite+0x20>
    144e:	08 95       	ret

00001450 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    1450:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    1452:	86 b7       	in	r24, 0x36	; 54
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    1458:	06 b6       	in	r0, 0x36	; 54
    145a:	07 fe       	sbrs	r0, 7
    145c:	fd cf       	rjmp	.-6      	; 0x1458 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    145e:	81 b1       	in	r24, 0x01	; 1
    1460:	88 7f       	andi	r24, 0xF8	; 248
    1462:	88 32       	cpi	r24, 0x28	; 40
    1464:	e1 f7       	brne	.-8      	; 0x145e <TWI_voidTransmitMasterDataByte+0xe>
}
    1466:	08 95       	ret

00001468 <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    1468:	8b b1       	in	r24, 0x0b	; 11
    146a:	8d 7f       	andi	r24, 0xFD	; 253
    146c:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    146e:	87 e6       	ldi	r24, 0x67	; 103
    1470:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    1472:	8a b1       	in	r24, 0x0a	; 10
    1474:	8b 7f       	andi	r24, 0xFB	; 251
    1476:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    1478:	86 e8       	ldi	r24, 0x86	; 134
    147a:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    147c:	8a b1       	in	r24, 0x0a	; 10
    147e:	80 61       	ori	r24, 0x10	; 16
    1480:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    1482:	8a b1       	in	r24, 0x0a	; 10
    1484:	88 60       	ori	r24, 0x08	; 8
    1486:	8a b9       	out	0x0a, r24	; 10
    1488:	08 95       	ret

0000148a <__subsf3>:
    148a:	50 58       	subi	r21, 0x80	; 128

0000148c <__addsf3>:
    148c:	bb 27       	eor	r27, r27
    148e:	aa 27       	eor	r26, r26
    1490:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__addsf3x>
    1494:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    1498:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    149c:	38 f0       	brcs	.+14     	; 0x14ac <__addsf3+0x20>
    149e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    14a2:	20 f0       	brcs	.+8      	; 0x14ac <__addsf3+0x20>
    14a4:	39 f4       	brne	.+14     	; 0x14b4 <__addsf3+0x28>
    14a6:	9f 3f       	cpi	r25, 0xFF	; 255
    14a8:	19 f4       	brne	.+6      	; 0x14b0 <__addsf3+0x24>
    14aa:	26 f4       	brtc	.+8      	; 0x14b4 <__addsf3+0x28>
    14ac:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>
    14b0:	0e f4       	brtc	.+2      	; 0x14b4 <__addsf3+0x28>
    14b2:	e0 95       	com	r30
    14b4:	e7 fb       	bst	r30, 7
    14b6:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>

000014ba <__addsf3x>:
    14ba:	e9 2f       	mov	r30, r25
    14bc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    14c0:	58 f3       	brcs	.-42     	; 0x1498 <__addsf3+0xc>
    14c2:	ba 17       	cp	r27, r26
    14c4:	62 07       	cpc	r22, r18
    14c6:	73 07       	cpc	r23, r19
    14c8:	84 07       	cpc	r24, r20
    14ca:	95 07       	cpc	r25, r21
    14cc:	20 f0       	brcs	.+8      	; 0x14d6 <__addsf3x+0x1c>
    14ce:	79 f4       	brne	.+30     	; 0x14ee <__addsf3x+0x34>
    14d0:	a6 f5       	brtc	.+104    	; 0x153a <__addsf3x+0x80>
    14d2:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_zero>
    14d6:	0e f4       	brtc	.+2      	; 0x14da <__addsf3x+0x20>
    14d8:	e0 95       	com	r30
    14da:	0b 2e       	mov	r0, r27
    14dc:	ba 2f       	mov	r27, r26
    14de:	a0 2d       	mov	r26, r0
    14e0:	0b 01       	movw	r0, r22
    14e2:	b9 01       	movw	r22, r18
    14e4:	90 01       	movw	r18, r0
    14e6:	0c 01       	movw	r0, r24
    14e8:	ca 01       	movw	r24, r20
    14ea:	a0 01       	movw	r20, r0
    14ec:	11 24       	eor	r1, r1
    14ee:	ff 27       	eor	r31, r31
    14f0:	59 1b       	sub	r21, r25
    14f2:	99 f0       	breq	.+38     	; 0x151a <__addsf3x+0x60>
    14f4:	59 3f       	cpi	r21, 0xF9	; 249
    14f6:	50 f4       	brcc	.+20     	; 0x150c <__addsf3x+0x52>
    14f8:	50 3e       	cpi	r21, 0xE0	; 224
    14fa:	68 f1       	brcs	.+90     	; 0x1556 <__addsf3x+0x9c>
    14fc:	1a 16       	cp	r1, r26
    14fe:	f0 40       	sbci	r31, 0x00	; 0
    1500:	a2 2f       	mov	r26, r18
    1502:	23 2f       	mov	r18, r19
    1504:	34 2f       	mov	r19, r20
    1506:	44 27       	eor	r20, r20
    1508:	58 5f       	subi	r21, 0xF8	; 248
    150a:	f3 cf       	rjmp	.-26     	; 0x14f2 <__addsf3x+0x38>
    150c:	46 95       	lsr	r20
    150e:	37 95       	ror	r19
    1510:	27 95       	ror	r18
    1512:	a7 95       	ror	r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	53 95       	inc	r21
    1518:	c9 f7       	brne	.-14     	; 0x150c <__addsf3x+0x52>
    151a:	7e f4       	brtc	.+30     	; 0x153a <__addsf3x+0x80>
    151c:	1f 16       	cp	r1, r31
    151e:	ba 0b       	sbc	r27, r26
    1520:	62 0b       	sbc	r22, r18
    1522:	73 0b       	sbc	r23, r19
    1524:	84 0b       	sbc	r24, r20
    1526:	ba f0       	brmi	.+46     	; 0x1556 <__addsf3x+0x9c>
    1528:	91 50       	subi	r25, 0x01	; 1
    152a:	a1 f0       	breq	.+40     	; 0x1554 <__addsf3x+0x9a>
    152c:	ff 0f       	add	r31, r31
    152e:	bb 1f       	adc	r27, r27
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	c2 f7       	brpl	.-16     	; 0x1528 <__addsf3x+0x6e>
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <__addsf3x+0x9c>
    153a:	ba 0f       	add	r27, r26
    153c:	62 1f       	adc	r22, r18
    153e:	73 1f       	adc	r23, r19
    1540:	84 1f       	adc	r24, r20
    1542:	48 f4       	brcc	.+18     	; 0x1556 <__addsf3x+0x9c>
    1544:	87 95       	ror	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	b7 95       	ror	r27
    154c:	f7 95       	ror	r31
    154e:	9e 3f       	cpi	r25, 0xFE	; 254
    1550:	08 f0       	brcs	.+2      	; 0x1554 <__addsf3x+0x9a>
    1552:	b0 cf       	rjmp	.-160    	; 0x14b4 <__addsf3+0x28>
    1554:	93 95       	inc	r25
    1556:	88 0f       	add	r24, r24
    1558:	08 f0       	brcs	.+2      	; 0x155c <__addsf3x+0xa2>
    155a:	99 27       	eor	r25, r25
    155c:	ee 0f       	add	r30, r30
    155e:	97 95       	ror	r25
    1560:	87 95       	ror	r24
    1562:	08 95       	ret

00001564 <__cmpsf2>:
    1564:	0e 94 95 0b 	call	0x172a	; 0x172a <__fp_cmp>
    1568:	08 f4       	brcc	.+2      	; 0x156c <__cmpsf2+0x8>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	08 95       	ret

0000156e <__divsf3>:
    156e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__divsf3x>
    1572:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    1576:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    157a:	58 f0       	brcs	.+22     	; 0x1592 <__divsf3+0x24>
    157c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    1580:	40 f0       	brcs	.+16     	; 0x1592 <__divsf3+0x24>
    1582:	29 f4       	brne	.+10     	; 0x158e <__divsf3+0x20>
    1584:	5f 3f       	cpi	r21, 0xFF	; 255
    1586:	29 f0       	breq	.+10     	; 0x1592 <__divsf3+0x24>
    1588:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    158c:	51 11       	cpse	r21, r1
    158e:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    1592:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>

00001596 <__divsf3x>:
    1596:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    159a:	68 f3       	brcs	.-38     	; 0x1576 <__divsf3+0x8>

0000159c <__divsf3_pse>:
    159c:	99 23       	and	r25, r25
    159e:	b1 f3       	breq	.-20     	; 0x158c <__divsf3+0x1e>
    15a0:	55 23       	and	r21, r21
    15a2:	91 f3       	breq	.-28     	; 0x1588 <__divsf3+0x1a>
    15a4:	95 1b       	sub	r25, r21
    15a6:	55 0b       	sbc	r21, r21
    15a8:	bb 27       	eor	r27, r27
    15aa:	aa 27       	eor	r26, r26
    15ac:	62 17       	cp	r22, r18
    15ae:	73 07       	cpc	r23, r19
    15b0:	84 07       	cpc	r24, r20
    15b2:	38 f0       	brcs	.+14     	; 0x15c2 <__divsf3_pse+0x26>
    15b4:	9f 5f       	subi	r25, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	22 0f       	add	r18, r18
    15ba:	33 1f       	adc	r19, r19
    15bc:	44 1f       	adc	r20, r20
    15be:	aa 1f       	adc	r26, r26
    15c0:	a9 f3       	breq	.-22     	; 0x15ac <__divsf3_pse+0x10>
    15c2:	35 d0       	rcall	.+106    	; 0x162e <__divsf3_pse+0x92>
    15c4:	0e 2e       	mov	r0, r30
    15c6:	3a f0       	brmi	.+14     	; 0x15d6 <__divsf3_pse+0x3a>
    15c8:	e0 e8       	ldi	r30, 0x80	; 128
    15ca:	32 d0       	rcall	.+100    	; 0x1630 <__divsf3_pse+0x94>
    15cc:	91 50       	subi	r25, 0x01	; 1
    15ce:	50 40       	sbci	r21, 0x00	; 0
    15d0:	e6 95       	lsr	r30
    15d2:	00 1c       	adc	r0, r0
    15d4:	ca f7       	brpl	.-14     	; 0x15c8 <__divsf3_pse+0x2c>
    15d6:	2b d0       	rcall	.+86     	; 0x162e <__divsf3_pse+0x92>
    15d8:	fe 2f       	mov	r31, r30
    15da:	29 d0       	rcall	.+82     	; 0x162e <__divsf3_pse+0x92>
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	bb 1f       	adc	r27, r27
    15e4:	26 17       	cp	r18, r22
    15e6:	37 07       	cpc	r19, r23
    15e8:	48 07       	cpc	r20, r24
    15ea:	ab 07       	cpc	r26, r27
    15ec:	b0 e8       	ldi	r27, 0x80	; 128
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <__divsf3_pse+0x56>
    15f0:	bb 0b       	sbc	r27, r27
    15f2:	80 2d       	mov	r24, r0
    15f4:	bf 01       	movw	r22, r30
    15f6:	ff 27       	eor	r31, r31
    15f8:	93 58       	subi	r25, 0x83	; 131
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	3a f0       	brmi	.+14     	; 0x160c <__divsf3_pse+0x70>
    15fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1600:	51 05       	cpc	r21, r1
    1602:	78 f0       	brcs	.+30     	; 0x1622 <__divsf3_pse+0x86>
    1604:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    1608:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    160c:	5f 3f       	cpi	r21, 0xFF	; 255
    160e:	e4 f3       	brlt	.-8      	; 0x1608 <__divsf3_pse+0x6c>
    1610:	98 3e       	cpi	r25, 0xE8	; 232
    1612:	d4 f3       	brlt	.-12     	; 0x1608 <__divsf3_pse+0x6c>
    1614:	86 95       	lsr	r24
    1616:	77 95       	ror	r23
    1618:	67 95       	ror	r22
    161a:	b7 95       	ror	r27
    161c:	f7 95       	ror	r31
    161e:	9f 5f       	subi	r25, 0xFF	; 255
    1620:	c9 f7       	brne	.-14     	; 0x1614 <__divsf3_pse+0x78>
    1622:	88 0f       	add	r24, r24
    1624:	91 1d       	adc	r25, r1
    1626:	96 95       	lsr	r25
    1628:	87 95       	ror	r24
    162a:	97 f9       	bld	r25, 7
    162c:	08 95       	ret
    162e:	e1 e0       	ldi	r30, 0x01	; 1
    1630:	66 0f       	add	r22, r22
    1632:	77 1f       	adc	r23, r23
    1634:	88 1f       	adc	r24, r24
    1636:	bb 1f       	adc	r27, r27
    1638:	62 17       	cp	r22, r18
    163a:	73 07       	cpc	r23, r19
    163c:	84 07       	cpc	r24, r20
    163e:	ba 07       	cpc	r27, r26
    1640:	20 f0       	brcs	.+8      	; 0x164a <__divsf3_pse+0xae>
    1642:	62 1b       	sub	r22, r18
    1644:	73 0b       	sbc	r23, r19
    1646:	84 0b       	sbc	r24, r20
    1648:	ba 0b       	sbc	r27, r26
    164a:	ee 1f       	adc	r30, r30
    164c:	88 f7       	brcc	.-30     	; 0x1630 <__divsf3_pse+0x94>
    164e:	e0 95       	com	r30
    1650:	08 95       	ret

00001652 <__fixunssfsi>:
    1652:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__fp_splitA>
    1656:	88 f0       	brcs	.+34     	; 0x167a <__fixunssfsi+0x28>
    1658:	9f 57       	subi	r25, 0x7F	; 127
    165a:	98 f0       	brcs	.+38     	; 0x1682 <__fixunssfsi+0x30>
    165c:	b9 2f       	mov	r27, r25
    165e:	99 27       	eor	r25, r25
    1660:	b7 51       	subi	r27, 0x17	; 23
    1662:	b0 f0       	brcs	.+44     	; 0x1690 <__fixunssfsi+0x3e>
    1664:	e1 f0       	breq	.+56     	; 0x169e <__fixunssfsi+0x4c>
    1666:	66 0f       	add	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	88 1f       	adc	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	1a f0       	brmi	.+6      	; 0x1676 <__fixunssfsi+0x24>
    1670:	ba 95       	dec	r27
    1672:	c9 f7       	brne	.-14     	; 0x1666 <__fixunssfsi+0x14>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <__fixunssfsi+0x4c>
    1676:	b1 30       	cpi	r27, 0x01	; 1
    1678:	91 f0       	breq	.+36     	; 0x169e <__fixunssfsi+0x4c>
    167a:	0e 94 03 0c 	call	0x1806	; 0x1806 <__fp_zero>
    167e:	b1 e0       	ldi	r27, 0x01	; 1
    1680:	08 95       	ret
    1682:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__fp_zero>
    1686:	67 2f       	mov	r22, r23
    1688:	78 2f       	mov	r23, r24
    168a:	88 27       	eor	r24, r24
    168c:	b8 5f       	subi	r27, 0xF8	; 248
    168e:	39 f0       	breq	.+14     	; 0x169e <__fixunssfsi+0x4c>
    1690:	b9 3f       	cpi	r27, 0xF9	; 249
    1692:	cc f3       	brlt	.-14     	; 0x1686 <__fixunssfsi+0x34>
    1694:	86 95       	lsr	r24
    1696:	77 95       	ror	r23
    1698:	67 95       	ror	r22
    169a:	b3 95       	inc	r27
    169c:	d9 f7       	brne	.-10     	; 0x1694 <__fixunssfsi+0x42>
    169e:	3e f4       	brtc	.+14     	; 0x16ae <__fixunssfsi+0x5c>
    16a0:	90 95       	com	r25
    16a2:	80 95       	com	r24
    16a4:	70 95       	com	r23
    16a6:	61 95       	neg	r22
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	08 95       	ret

000016b0 <__floatunsisf>:
    16b0:	e8 94       	clt
    16b2:	09 c0       	rjmp	.+18     	; 0x16c6 <__floatsisf+0x12>

000016b4 <__floatsisf>:
    16b4:	97 fb       	bst	r25, 7
    16b6:	3e f4       	brtc	.+14     	; 0x16c6 <__floatsisf+0x12>
    16b8:	90 95       	com	r25
    16ba:	80 95       	com	r24
    16bc:	70 95       	com	r23
    16be:	61 95       	neg	r22
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	8f 4f       	sbci	r24, 0xFF	; 255
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	99 23       	and	r25, r25
    16c8:	a9 f0       	breq	.+42     	; 0x16f4 <__floatsisf+0x40>
    16ca:	f9 2f       	mov	r31, r25
    16cc:	96 e9       	ldi	r25, 0x96	; 150
    16ce:	bb 27       	eor	r27, r27
    16d0:	93 95       	inc	r25
    16d2:	f6 95       	lsr	r31
    16d4:	87 95       	ror	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b7 95       	ror	r27
    16dc:	f1 11       	cpse	r31, r1
    16de:	f8 cf       	rjmp	.-16     	; 0x16d0 <__floatsisf+0x1c>
    16e0:	fa f4       	brpl	.+62     	; 0x1720 <__floatsisf+0x6c>
    16e2:	bb 0f       	add	r27, r27
    16e4:	11 f4       	brne	.+4      	; 0x16ea <__floatsisf+0x36>
    16e6:	60 ff       	sbrs	r22, 0
    16e8:	1b c0       	rjmp	.+54     	; 0x1720 <__floatsisf+0x6c>
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	8f 4f       	sbci	r24, 0xFF	; 255
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	16 c0       	rjmp	.+44     	; 0x1720 <__floatsisf+0x6c>
    16f4:	88 23       	and	r24, r24
    16f6:	11 f0       	breq	.+4      	; 0x16fc <__floatsisf+0x48>
    16f8:	96 e9       	ldi	r25, 0x96	; 150
    16fa:	11 c0       	rjmp	.+34     	; 0x171e <__floatsisf+0x6a>
    16fc:	77 23       	and	r23, r23
    16fe:	21 f0       	breq	.+8      	; 0x1708 <__floatsisf+0x54>
    1700:	9e e8       	ldi	r25, 0x8E	; 142
    1702:	87 2f       	mov	r24, r23
    1704:	76 2f       	mov	r23, r22
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <__floatsisf+0x5e>
    1708:	66 23       	and	r22, r22
    170a:	71 f0       	breq	.+28     	; 0x1728 <__floatsisf+0x74>
    170c:	96 e8       	ldi	r25, 0x86	; 134
    170e:	86 2f       	mov	r24, r22
    1710:	70 e0       	ldi	r23, 0x00	; 0
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	2a f0       	brmi	.+10     	; 0x1720 <__floatsisf+0x6c>
    1716:	9a 95       	dec	r25
    1718:	66 0f       	add	r22, r22
    171a:	77 1f       	adc	r23, r23
    171c:	88 1f       	adc	r24, r24
    171e:	da f7       	brpl	.-10     	; 0x1716 <__floatsisf+0x62>
    1720:	88 0f       	add	r24, r24
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	97 f9       	bld	r25, 7
    1728:	08 95       	ret

0000172a <__fp_cmp>:
    172a:	99 0f       	add	r25, r25
    172c:	00 08       	sbc	r0, r0
    172e:	55 0f       	add	r21, r21
    1730:	aa 0b       	sbc	r26, r26
    1732:	e0 e8       	ldi	r30, 0x80	; 128
    1734:	fe ef       	ldi	r31, 0xFE	; 254
    1736:	16 16       	cp	r1, r22
    1738:	17 06       	cpc	r1, r23
    173a:	e8 07       	cpc	r30, r24
    173c:	f9 07       	cpc	r31, r25
    173e:	c0 f0       	brcs	.+48     	; 0x1770 <__fp_cmp+0x46>
    1740:	12 16       	cp	r1, r18
    1742:	13 06       	cpc	r1, r19
    1744:	e4 07       	cpc	r30, r20
    1746:	f5 07       	cpc	r31, r21
    1748:	98 f0       	brcs	.+38     	; 0x1770 <__fp_cmp+0x46>
    174a:	62 1b       	sub	r22, r18
    174c:	73 0b       	sbc	r23, r19
    174e:	84 0b       	sbc	r24, r20
    1750:	95 0b       	sbc	r25, r21
    1752:	39 f4       	brne	.+14     	; 0x1762 <__fp_cmp+0x38>
    1754:	0a 26       	eor	r0, r26
    1756:	61 f0       	breq	.+24     	; 0x1770 <__fp_cmp+0x46>
    1758:	23 2b       	or	r18, r19
    175a:	24 2b       	or	r18, r20
    175c:	25 2b       	or	r18, r21
    175e:	21 f4       	brne	.+8      	; 0x1768 <__fp_cmp+0x3e>
    1760:	08 95       	ret
    1762:	0a 26       	eor	r0, r26
    1764:	09 f4       	brne	.+2      	; 0x1768 <__fp_cmp+0x3e>
    1766:	a1 40       	sbci	r26, 0x01	; 1
    1768:	a6 95       	lsr	r26
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	81 1d       	adc	r24, r1
    176e:	81 1d       	adc	r24, r1
    1770:	08 95       	ret

00001772 <__fp_inf>:
    1772:	97 f9       	bld	r25, 7
    1774:	9f 67       	ori	r25, 0x7F	; 127
    1776:	80 e8       	ldi	r24, 0x80	; 128
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	08 95       	ret

0000177e <__fp_nan>:
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	80 ec       	ldi	r24, 0xC0	; 192
    1782:	08 95       	ret

00001784 <__fp_pscA>:
    1784:	00 24       	eor	r0, r0
    1786:	0a 94       	dec	r0
    1788:	16 16       	cp	r1, r22
    178a:	17 06       	cpc	r1, r23
    178c:	18 06       	cpc	r1, r24
    178e:	09 06       	cpc	r0, r25
    1790:	08 95       	ret

00001792 <__fp_pscB>:
    1792:	00 24       	eor	r0, r0
    1794:	0a 94       	dec	r0
    1796:	12 16       	cp	r1, r18
    1798:	13 06       	cpc	r1, r19
    179a:	14 06       	cpc	r1, r20
    179c:	05 06       	cpc	r0, r21
    179e:	08 95       	ret

000017a0 <__fp_round>:
    17a0:	09 2e       	mov	r0, r25
    17a2:	03 94       	inc	r0
    17a4:	00 0c       	add	r0, r0
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__fp_round+0xc>
    17a8:	88 23       	and	r24, r24
    17aa:	52 f0       	brmi	.+20     	; 0x17c0 <__fp_round+0x20>
    17ac:	bb 0f       	add	r27, r27
    17ae:	40 f4       	brcc	.+16     	; 0x17c0 <__fp_round+0x20>
    17b0:	bf 2b       	or	r27, r31
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <__fp_round+0x18>
    17b4:	60 ff       	sbrs	r22, 0
    17b6:	04 c0       	rjmp	.+8      	; 0x17c0 <__fp_round+0x20>
    17b8:	6f 5f       	subi	r22, 0xFF	; 255
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	08 95       	ret

000017c2 <__fp_split3>:
    17c2:	57 fd       	sbrc	r21, 7
    17c4:	90 58       	subi	r25, 0x80	; 128
    17c6:	44 0f       	add	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <__fp_splitA+0x10>
    17cc:	5f 3f       	cpi	r21, 0xFF	; 255
    17ce:	71 f0       	breq	.+28     	; 0x17ec <__fp_splitA+0x1a>
    17d0:	47 95       	ror	r20

000017d2 <__fp_splitA>:
    17d2:	88 0f       	add	r24, r24
    17d4:	97 fb       	bst	r25, 7
    17d6:	99 1f       	adc	r25, r25
    17d8:	61 f0       	breq	.+24     	; 0x17f2 <__fp_splitA+0x20>
    17da:	9f 3f       	cpi	r25, 0xFF	; 255
    17dc:	79 f0       	breq	.+30     	; 0x17fc <__fp_splitA+0x2a>
    17de:	87 95       	ror	r24
    17e0:	08 95       	ret
    17e2:	12 16       	cp	r1, r18
    17e4:	13 06       	cpc	r1, r19
    17e6:	14 06       	cpc	r1, r20
    17e8:	55 1f       	adc	r21, r21
    17ea:	f2 cf       	rjmp	.-28     	; 0x17d0 <__fp_split3+0xe>
    17ec:	46 95       	lsr	r20
    17ee:	f1 df       	rcall	.-30     	; 0x17d2 <__fp_splitA>
    17f0:	08 c0       	rjmp	.+16     	; 0x1802 <__fp_splitA+0x30>
    17f2:	16 16       	cp	r1, r22
    17f4:	17 06       	cpc	r1, r23
    17f6:	18 06       	cpc	r1, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	f1 cf       	rjmp	.-30     	; 0x17de <__fp_splitA+0xc>
    17fc:	86 95       	lsr	r24
    17fe:	71 05       	cpc	r23, r1
    1800:	61 05       	cpc	r22, r1
    1802:	08 94       	sec
    1804:	08 95       	ret

00001806 <__fp_zero>:
    1806:	e8 94       	clt

00001808 <__fp_szero>:
    1808:	bb 27       	eor	r27, r27
    180a:	66 27       	eor	r22, r22
    180c:	77 27       	eor	r23, r23
    180e:	cb 01       	movw	r24, r22
    1810:	97 f9       	bld	r25, 7
    1812:	08 95       	ret

00001814 <__mulsf3>:
    1814:	0e 94 1d 0c 	call	0x183a	; 0x183a <__mulsf3x>
    1818:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_round>
    181c:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_pscA>
    1820:	38 f0       	brcs	.+14     	; 0x1830 <__mulsf3+0x1c>
    1822:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__fp_pscB>
    1826:	20 f0       	brcs	.+8      	; 0x1830 <__mulsf3+0x1c>
    1828:	95 23       	and	r25, r21
    182a:	11 f0       	breq	.+4      	; 0x1830 <__mulsf3+0x1c>
    182c:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    1830:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__fp_nan>
    1834:	11 24       	eor	r1, r1
    1836:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>

0000183a <__mulsf3x>:
    183a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__fp_split3>
    183e:	70 f3       	brcs	.-36     	; 0x181c <__mulsf3+0x8>

00001840 <__mulsf3_pse>:
    1840:	95 9f       	mul	r25, r21
    1842:	c1 f3       	breq	.-16     	; 0x1834 <__mulsf3+0x20>
    1844:	95 0f       	add	r25, r21
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	55 1f       	adc	r21, r21
    184a:	62 9f       	mul	r22, r18
    184c:	f0 01       	movw	r30, r0
    184e:	72 9f       	mul	r23, r18
    1850:	bb 27       	eor	r27, r27
    1852:	f0 0d       	add	r31, r0
    1854:	b1 1d       	adc	r27, r1
    1856:	63 9f       	mul	r22, r19
    1858:	aa 27       	eor	r26, r26
    185a:	f0 0d       	add	r31, r0
    185c:	b1 1d       	adc	r27, r1
    185e:	aa 1f       	adc	r26, r26
    1860:	64 9f       	mul	r22, r20
    1862:	66 27       	eor	r22, r22
    1864:	b0 0d       	add	r27, r0
    1866:	a1 1d       	adc	r26, r1
    1868:	66 1f       	adc	r22, r22
    186a:	82 9f       	mul	r24, r18
    186c:	22 27       	eor	r18, r18
    186e:	b0 0d       	add	r27, r0
    1870:	a1 1d       	adc	r26, r1
    1872:	62 1f       	adc	r22, r18
    1874:	73 9f       	mul	r23, r19
    1876:	b0 0d       	add	r27, r0
    1878:	a1 1d       	adc	r26, r1
    187a:	62 1f       	adc	r22, r18
    187c:	83 9f       	mul	r24, r19
    187e:	a0 0d       	add	r26, r0
    1880:	61 1d       	adc	r22, r1
    1882:	22 1f       	adc	r18, r18
    1884:	74 9f       	mul	r23, r20
    1886:	33 27       	eor	r19, r19
    1888:	a0 0d       	add	r26, r0
    188a:	61 1d       	adc	r22, r1
    188c:	23 1f       	adc	r18, r19
    188e:	84 9f       	mul	r24, r20
    1890:	60 0d       	add	r22, r0
    1892:	21 1d       	adc	r18, r1
    1894:	82 2f       	mov	r24, r18
    1896:	76 2f       	mov	r23, r22
    1898:	6a 2f       	mov	r22, r26
    189a:	11 24       	eor	r1, r1
    189c:	9f 57       	subi	r25, 0x7F	; 127
    189e:	50 40       	sbci	r21, 0x00	; 0
    18a0:	9a f0       	brmi	.+38     	; 0x18c8 <__mulsf3_pse+0x88>
    18a2:	f1 f0       	breq	.+60     	; 0x18e0 <__mulsf3_pse+0xa0>
    18a4:	88 23       	and	r24, r24
    18a6:	4a f0       	brmi	.+18     	; 0x18ba <__mulsf3_pse+0x7a>
    18a8:	ee 0f       	add	r30, r30
    18aa:	ff 1f       	adc	r31, r31
    18ac:	bb 1f       	adc	r27, r27
    18ae:	66 1f       	adc	r22, r22
    18b0:	77 1f       	adc	r23, r23
    18b2:	88 1f       	adc	r24, r24
    18b4:	91 50       	subi	r25, 0x01	; 1
    18b6:	50 40       	sbci	r21, 0x00	; 0
    18b8:	a9 f7       	brne	.-22     	; 0x18a4 <__mulsf3_pse+0x64>
    18ba:	9e 3f       	cpi	r25, 0xFE	; 254
    18bc:	51 05       	cpc	r21, r1
    18be:	80 f0       	brcs	.+32     	; 0x18e0 <__mulsf3_pse+0xa0>
    18c0:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_inf>
    18c4:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__fp_szero>
    18c8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ca:	e4 f3       	brlt	.-8      	; 0x18c4 <__mulsf3_pse+0x84>
    18cc:	98 3e       	cpi	r25, 0xE8	; 232
    18ce:	d4 f3       	brlt	.-12     	; 0x18c4 <__mulsf3_pse+0x84>
    18d0:	86 95       	lsr	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	b7 95       	ror	r27
    18d8:	f7 95       	ror	r31
    18da:	e7 95       	ror	r30
    18dc:	9f 5f       	subi	r25, 0xFF	; 255
    18de:	c1 f7       	brne	.-16     	; 0x18d0 <__mulsf3_pse+0x90>
    18e0:	fe 2b       	or	r31, r30
    18e2:	88 0f       	add	r24, r24
    18e4:	91 1d       	adc	r25, r1
    18e6:	96 95       	lsr	r25
    18e8:	87 95       	ror	r24
    18ea:	97 f9       	bld	r25, 7
    18ec:	08 95       	ret

000018ee <__divmodhi4>:
    18ee:	97 fb       	bst	r25, 7
    18f0:	07 2e       	mov	r0, r23
    18f2:	16 f4       	brtc	.+4      	; 0x18f8 <__divmodhi4+0xa>
    18f4:	00 94       	com	r0
    18f6:	07 d0       	rcall	.+14     	; 0x1906 <__divmodhi4_neg1>
    18f8:	77 fd       	sbrc	r23, 7
    18fa:	09 d0       	rcall	.+18     	; 0x190e <__divmodhi4_neg2>
    18fc:	0e 94 ad 0c 	call	0x195a	; 0x195a <__udivmodhi4>
    1900:	07 fc       	sbrc	r0, 7
    1902:	05 d0       	rcall	.+10     	; 0x190e <__divmodhi4_neg2>
    1904:	3e f4       	brtc	.+14     	; 0x1914 <__divmodhi4_exit>

00001906 <__divmodhi4_neg1>:
    1906:	90 95       	com	r25
    1908:	81 95       	neg	r24
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	08 95       	ret

0000190e <__divmodhi4_neg2>:
    190e:	70 95       	com	r23
    1910:	61 95       	neg	r22
    1912:	7f 4f       	sbci	r23, 0xFF	; 255

00001914 <__divmodhi4_exit>:
    1914:	08 95       	ret

00001916 <__udivmodsi4>:
    1916:	a1 e2       	ldi	r26, 0x21	; 33
    1918:	1a 2e       	mov	r1, r26
    191a:	aa 1b       	sub	r26, r26
    191c:	bb 1b       	sub	r27, r27
    191e:	fd 01       	movw	r30, r26
    1920:	0d c0       	rjmp	.+26     	; 0x193c <__udivmodsi4_ep>

00001922 <__udivmodsi4_loop>:
    1922:	aa 1f       	adc	r26, r26
    1924:	bb 1f       	adc	r27, r27
    1926:	ee 1f       	adc	r30, r30
    1928:	ff 1f       	adc	r31, r31
    192a:	a2 17       	cp	r26, r18
    192c:	b3 07       	cpc	r27, r19
    192e:	e4 07       	cpc	r30, r20
    1930:	f5 07       	cpc	r31, r21
    1932:	20 f0       	brcs	.+8      	; 0x193c <__udivmodsi4_ep>
    1934:	a2 1b       	sub	r26, r18
    1936:	b3 0b       	sbc	r27, r19
    1938:	e4 0b       	sbc	r30, r20
    193a:	f5 0b       	sbc	r31, r21

0000193c <__udivmodsi4_ep>:
    193c:	66 1f       	adc	r22, r22
    193e:	77 1f       	adc	r23, r23
    1940:	88 1f       	adc	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	1a 94       	dec	r1
    1946:	69 f7       	brne	.-38     	; 0x1922 <__udivmodsi4_loop>
    1948:	60 95       	com	r22
    194a:	70 95       	com	r23
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	9b 01       	movw	r18, r22
    1952:	ac 01       	movw	r20, r24
    1954:	bd 01       	movw	r22, r26
    1956:	cf 01       	movw	r24, r30
    1958:	08 95       	ret

0000195a <__udivmodhi4>:
    195a:	aa 1b       	sub	r26, r26
    195c:	bb 1b       	sub	r27, r27
    195e:	51 e1       	ldi	r21, 0x11	; 17
    1960:	07 c0       	rjmp	.+14     	; 0x1970 <__udivmodhi4_ep>

00001962 <__udivmodhi4_loop>:
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	a6 17       	cp	r26, r22
    1968:	b7 07       	cpc	r27, r23
    196a:	10 f0       	brcs	.+4      	; 0x1970 <__udivmodhi4_ep>
    196c:	a6 1b       	sub	r26, r22
    196e:	b7 0b       	sbc	r27, r23

00001970 <__udivmodhi4_ep>:
    1970:	88 1f       	adc	r24, r24
    1972:	99 1f       	adc	r25, r25
    1974:	5a 95       	dec	r21
    1976:	a9 f7       	brne	.-22     	; 0x1962 <__udivmodhi4_loop>
    1978:	80 95       	com	r24
    197a:	90 95       	com	r25
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	08 95       	ret

00001982 <_exit>:
    1982:	f8 94       	cli

00001984 <__stop_program>:
    1984:	ff cf       	rjmp	.-2      	; 0x1984 <__stop_program>
=======
	u8 suc;
	APP_init();
 688:	0e 94 74 00 	call	0xe8	; 0xe8 <APP_init>


	HOME_voidFireAnALarm(HOME_LOGIN_FAILED);
 68c:	85 e0       	ldi	r24, 0x05	; 5
 68e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <HOME_voidFireAnALarm>
	BL_voidTxString	("ok");
 692:	83 e1       	ldi	r24, 0x13	; 19
 694:	93 e0       	ldi	r25, 0x03	; 3
 696:	0e 94 2d 01 	call	0x25a	; 0x25a <BL_voidTxString>
	BL_voidTxChar('\n');
 69a:	8a e0       	ldi	r24, 0x0A	; 10
 69c:	0e 94 27 01 	call	0x24e	; 0x24e <BL_voidTxChar>
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <main+0x18>

000006a2 <ADC_voidInit>:
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	59 f0       	breq	.+22     	; 0x6bc <ADC_voidInit+0x1a>
 6a6:	83 30       	cpi	r24, 0x03	; 3
 6a8:	81 f0       	breq	.+32     	; 0x6ca <ADC_voidInit+0x28>
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	a1 f4       	brne	.+40     	; 0x6d6 <ADC_voidInit+0x34>
 6ae:	87 b1       	in	r24, 0x07	; 7
 6b0:	80 64       	ori	r24, 0x40	; 64
 6b2:	87 b9       	out	0x07, r24	; 7
 6b4:	87 b1       	in	r24, 0x07	; 7
 6b6:	8f 77       	andi	r24, 0x7F	; 127
 6b8:	87 b9       	out	0x07, r24	; 7
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <ADC_voidInit+0x34>
 6bc:	87 b1       	in	r24, 0x07	; 7
 6be:	8f 7b       	andi	r24, 0xBF	; 191
 6c0:	87 b9       	out	0x07, r24	; 7
 6c2:	87 b1       	in	r24, 0x07	; 7
 6c4:	8f 77       	andi	r24, 0x7F	; 127
 6c6:	87 b9       	out	0x07, r24	; 7
 6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <ADC_voidInit+0x34>
 6ca:	87 b1       	in	r24, 0x07	; 7
 6cc:	80 64       	ori	r24, 0x40	; 64
 6ce:	87 b9       	out	0x07, r24	; 7
 6d0:	87 b1       	in	r24, 0x07	; 7
 6d2:	80 68       	ori	r24, 0x80	; 128
 6d4:	87 b9       	out	0x07, r24	; 7
 6d6:	87 b1       	in	r24, 0x07	; 7
 6d8:	8f 7d       	andi	r24, 0xDF	; 223
 6da:	87 b9       	out	0x07, r24	; 7
 6dc:	86 b1       	in	r24, 0x06	; 6
 6de:	8f 7d       	andi	r24, 0xDF	; 223
 6e0:	86 b9       	out	0x06, r24	; 6
 6e2:	86 b1       	in	r24, 0x06	; 6
 6e4:	87 7f       	andi	r24, 0xF7	; 247
 6e6:	86 b9       	out	0x06, r24	; 6
 6e8:	86 b1       	in	r24, 0x06	; 6
 6ea:	84 60       	ori	r24, 0x04	; 4
 6ec:	86 b9       	out	0x06, r24	; 6
 6ee:	86 b1       	in	r24, 0x06	; 6
 6f0:	82 60       	ori	r24, 0x02	; 2
 6f2:	86 b9       	out	0x06, r24	; 6
 6f4:	86 b1       	in	r24, 0x06	; 6
 6f6:	81 60       	ori	r24, 0x01	; 1
 6f8:	86 b9       	out	0x06, r24	; 6
 6fa:	86 b1       	in	r24, 0x06	; 6
 6fc:	80 68       	ori	r24, 0x80	; 128
 6fe:	86 b9       	out	0x06, r24	; 6
 700:	08 95       	ret

00000702 <DIO_voidSetPinDirection>:
 702:	84 30       	cpi	r24, 0x04	; 4
 704:	08 f0       	brcs	.+2      	; 0x708 <DIO_voidSetPinDirection+0x6>
 706:	7c c0       	rjmp	.+248    	; 0x800 <__DATA_REGION_LENGTH__>
 708:	68 30       	cpi	r22, 0x08	; 8
 70a:	08 f0       	brcs	.+2      	; 0x70e <DIO_voidSetPinDirection+0xc>
 70c:	79 c0       	rjmp	.+242    	; 0x800 <__DATA_REGION_LENGTH__>
 70e:	42 30       	cpi	r20, 0x02	; 2
 710:	08 f0       	brcs	.+2      	; 0x714 <DIO_voidSetPinDirection+0x12>
 712:	76 c0       	rjmp	.+236    	; 0x800 <__DATA_REGION_LENGTH__>
 714:	81 30       	cpi	r24, 0x01	; 1
 716:	19 f1       	breq	.+70     	; 0x75e <DIO_voidSetPinDirection+0x5c>
 718:	30 f0       	brcs	.+12     	; 0x726 <DIO_voidSetPinDirection+0x24>
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	e1 f1       	breq	.+120    	; 0x796 <DIO_voidSetPinDirection+0x94>
 71e:	83 30       	cpi	r24, 0x03	; 3
 720:	09 f4       	brne	.+2      	; 0x724 <DIO_voidSetPinDirection+0x22>
 722:	54 c0       	rjmp	.+168    	; 0x7cc <DIO_voidSetPinDirection+0xca>
 724:	08 95       	ret
 726:	44 23       	and	r20, r20
 728:	71 f0       	breq	.+28     	; 0x746 <DIO_voidSetPinDirection+0x44>
 72a:	41 30       	cpi	r20, 0x01	; 1
 72c:	09 f0       	breq	.+2      	; 0x730 <DIO_voidSetPinDirection+0x2e>
 72e:	68 c0       	rjmp	.+208    	; 0x800 <__DATA_REGION_LENGTH__>
 730:	2a b3       	in	r18, 0x1a	; 26
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_voidSetPinDirection+0x3a>
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	6a 95       	dec	r22
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_voidSetPinDirection+0x36>
 740:	82 2b       	or	r24, r18
 742:	8a bb       	out	0x1a, r24	; 26
 744:	08 95       	ret
 746:	2a b3       	in	r18, 0x1a	; 26
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	02 c0       	rjmp	.+4      	; 0x752 <DIO_voidSetPinDirection+0x50>
 74e:	88 0f       	add	r24, r24
 750:	99 1f       	adc	r25, r25
 752:	6a 95       	dec	r22
 754:	e2 f7       	brpl	.-8      	; 0x74e <DIO_voidSetPinDirection+0x4c>
 756:	80 95       	com	r24
 758:	82 23       	and	r24, r18
 75a:	8a bb       	out	0x1a, r24	; 26
 75c:	08 95       	ret
 75e:	44 23       	and	r20, r20
 760:	71 f0       	breq	.+28     	; 0x77e <DIO_voidSetPinDirection+0x7c>
 762:	41 30       	cpi	r20, 0x01	; 1
 764:	09 f0       	breq	.+2      	; 0x768 <DIO_voidSetPinDirection+0x66>
 766:	4c c0       	rjmp	.+152    	; 0x800 <__DATA_REGION_LENGTH__>
 768:	27 b3       	in	r18, 0x17	; 23
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_voidSetPinDirection+0x72>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_voidSetPinDirection+0x6e>
 778:	82 2b       	or	r24, r18
 77a:	87 bb       	out	0x17, r24	; 23
 77c:	08 95       	ret
 77e:	27 b3       	in	r18, 0x17	; 23
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_voidSetPinDirection+0x88>
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	6a 95       	dec	r22
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_voidSetPinDirection+0x84>
 78e:	80 95       	com	r24
 790:	82 23       	and	r24, r18
 792:	87 bb       	out	0x17, r24	; 23
 794:	08 95       	ret
 796:	44 23       	and	r20, r20
 798:	69 f0       	breq	.+26     	; 0x7b4 <DIO_voidSetPinDirection+0xb2>
 79a:	41 30       	cpi	r20, 0x01	; 1
 79c:	89 f5       	brne	.+98     	; 0x800 <__DATA_REGION_LENGTH__>
 79e:	24 b3       	in	r18, 0x14	; 20
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_voidSetPinDirection+0xa8>
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	6a 95       	dec	r22
 7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_voidSetPinDirection+0xa4>
 7ae:	82 2b       	or	r24, r18
 7b0:	84 bb       	out	0x14, r24	; 20
 7b2:	08 95       	ret
 7b4:	24 b3       	in	r18, 0x14	; 20
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_voidSetPinDirection+0xbe>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_voidSetPinDirection+0xba>
 7c4:	80 95       	com	r24
 7c6:	82 23       	and	r24, r18
 7c8:	84 bb       	out	0x14, r24	; 20
 7ca:	08 95       	ret
 7cc:	44 23       	and	r20, r20
 7ce:	69 f0       	breq	.+26     	; 0x7ea <DIO_voidSetPinDirection+0xe8>
 7d0:	41 30       	cpi	r20, 0x01	; 1
 7d2:	b1 f4       	brne	.+44     	; 0x800 <__DATA_REGION_LENGTH__>
 7d4:	21 b3       	in	r18, 0x11	; 17
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <DIO_voidSetPinDirection+0xde>
 7dc:	88 0f       	add	r24, r24
 7de:	99 1f       	adc	r25, r25
 7e0:	6a 95       	dec	r22
 7e2:	e2 f7       	brpl	.-8      	; 0x7dc <DIO_voidSetPinDirection+0xda>
 7e4:	82 2b       	or	r24, r18
 7e6:	81 bb       	out	0x11, r24	; 17
 7e8:	08 95       	ret
 7ea:	21 b3       	in	r18, 0x11	; 17
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_voidSetPinDirection+0xf4>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	6a 95       	dec	r22
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_voidSetPinDirection+0xf0>
 7fa:	80 95       	com	r24
 7fc:	82 23       	and	r24, r18
 7fe:	81 bb       	out	0x11, r24	; 17
 800:	08 95       	ret

00000802 <DIO_voidSetPinValue>:
 802:	84 30       	cpi	r24, 0x04	; 4
 804:	08 f0       	brcs	.+2      	; 0x808 <DIO_voidSetPinValue+0x6>
 806:	7c c0       	rjmp	.+248    	; 0x900 <__stack+0xa1>
 808:	68 30       	cpi	r22, 0x08	; 8
 80a:	08 f0       	brcs	.+2      	; 0x80e <DIO_voidSetPinValue+0xc>
 80c:	79 c0       	rjmp	.+242    	; 0x900 <__stack+0xa1>
 80e:	42 30       	cpi	r20, 0x02	; 2
 810:	08 f0       	brcs	.+2      	; 0x814 <DIO_voidSetPinValue+0x12>
 812:	76 c0       	rjmp	.+236    	; 0x900 <__stack+0xa1>
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	19 f1       	breq	.+70     	; 0x85e <DIO_voidSetPinValue+0x5c>
 818:	30 f0       	brcs	.+12     	; 0x826 <DIO_voidSetPinValue+0x24>
 81a:	82 30       	cpi	r24, 0x02	; 2
 81c:	e1 f1       	breq	.+120    	; 0x896 <__stack+0x37>
 81e:	83 30       	cpi	r24, 0x03	; 3
 820:	09 f4       	brne	.+2      	; 0x824 <DIO_voidSetPinValue+0x22>
 822:	54 c0       	rjmp	.+168    	; 0x8cc <__stack+0x6d>
 824:	08 95       	ret
 826:	44 23       	and	r20, r20
 828:	71 f0       	breq	.+28     	; 0x846 <DIO_voidSetPinValue+0x44>
 82a:	41 30       	cpi	r20, 0x01	; 1
 82c:	09 f0       	breq	.+2      	; 0x830 <DIO_voidSetPinValue+0x2e>
 82e:	68 c0       	rjmp	.+208    	; 0x900 <__stack+0xa1>
 830:	2b b3       	in	r18, 0x1b	; 27
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <DIO_voidSetPinValue+0x3a>
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	6a 95       	dec	r22
 83e:	e2 f7       	brpl	.-8      	; 0x838 <DIO_voidSetPinValue+0x36>
 840:	82 2b       	or	r24, r18
 842:	8b bb       	out	0x1b, r24	; 27
 844:	08 95       	ret
 846:	2b b3       	in	r18, 0x1b	; 27
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <DIO_voidSetPinValue+0x50>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	6a 95       	dec	r22
 854:	e2 f7       	brpl	.-8      	; 0x84e <DIO_voidSetPinValue+0x4c>
 856:	80 95       	com	r24
 858:	82 23       	and	r24, r18
 85a:	8b bb       	out	0x1b, r24	; 27
 85c:	08 95       	ret
 85e:	44 23       	and	r20, r20
 860:	71 f0       	breq	.+28     	; 0x87e <__stack+0x1f>
 862:	41 30       	cpi	r20, 0x01	; 1
 864:	09 f0       	breq	.+2      	; 0x868 <__stack+0x9>
 866:	4c c0       	rjmp	.+152    	; 0x900 <__stack+0xa1>
 868:	28 b3       	in	r18, 0x18	; 24
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	6a 95       	dec	r22
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	82 2b       	or	r24, r18
 87a:	88 bb       	out	0x18, r24	; 24
 87c:	08 95       	ret
 87e:	28 b3       	in	r18, 0x18	; 24
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	6a 95       	dec	r22
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	80 95       	com	r24
 890:	82 23       	and	r24, r18
 892:	88 bb       	out	0x18, r24	; 24
 894:	08 95       	ret
 896:	44 23       	and	r20, r20
 898:	69 f0       	breq	.+26     	; 0x8b4 <__stack+0x55>
 89a:	41 30       	cpi	r20, 0x01	; 1
 89c:	89 f5       	brne	.+98     	; 0x900 <__stack+0xa1>
 89e:	25 b3       	in	r18, 0x15	; 21
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	6a 95       	dec	r22
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	82 2b       	or	r24, r18
 8b0:	85 bb       	out	0x15, r24	; 21
 8b2:	08 95       	ret
 8b4:	25 b3       	in	r18, 0x15	; 21
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__stack+0x61>
 8bc:	88 0f       	add	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	6a 95       	dec	r22
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <__stack+0x5d>
 8c4:	80 95       	com	r24
 8c6:	82 23       	and	r24, r18
 8c8:	85 bb       	out	0x15, r24	; 21
 8ca:	08 95       	ret
 8cc:	44 23       	and	r20, r20
 8ce:	69 f0       	breq	.+26     	; 0x8ea <__stack+0x8b>
 8d0:	41 30       	cpi	r20, 0x01	; 1
 8d2:	b1 f4       	brne	.+44     	; 0x900 <__stack+0xa1>
 8d4:	22 b3       	in	r18, 0x12	; 18
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	6a 95       	dec	r22
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
 8e4:	82 2b       	or	r24, r18
 8e6:	82 bb       	out	0x12, r24	; 18
 8e8:	08 95       	ret
 8ea:	22 b3       	in	r18, 0x12	; 18
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__stack+0x97>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	6a 95       	dec	r22
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__stack+0x93>
 8fa:	80 95       	com	r24
 8fc:	82 23       	and	r24, r18
 8fe:	82 bb       	out	0x12, r24	; 18
 900:	08 95       	ret

00000902 <DIO_voidActivePinInPullUpResistance>:
 902:	84 30       	cpi	r24, 0x04	; 4
 904:	a8 f5       	brcc	.+106    	; 0x970 <DIO_voidActivePinInPullUpResistance+0x6e>
 906:	68 30       	cpi	r22, 0x08	; 8
 908:	98 f5       	brcc	.+102    	; 0x970 <DIO_voidActivePinInPullUpResistance+0x6e>
 90a:	81 30       	cpi	r24, 0x01	; 1
 90c:	89 f0       	breq	.+34     	; 0x930 <DIO_voidActivePinInPullUpResistance+0x2e>
 90e:	28 f0       	brcs	.+10     	; 0x91a <DIO_voidActivePinInPullUpResistance+0x18>
 910:	82 30       	cpi	r24, 0x02	; 2
 912:	c9 f0       	breq	.+50     	; 0x946 <DIO_voidActivePinInPullUpResistance+0x44>
 914:	83 30       	cpi	r24, 0x03	; 3
 916:	11 f1       	breq	.+68     	; 0x95c <DIO_voidActivePinInPullUpResistance+0x5a>
 918:	08 95       	ret
 91a:	2b b3       	in	r18, 0x1b	; 27
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	02 c0       	rjmp	.+4      	; 0x926 <DIO_voidActivePinInPullUpResistance+0x24>
 922:	88 0f       	add	r24, r24
 924:	99 1f       	adc	r25, r25
 926:	6a 95       	dec	r22
 928:	e2 f7       	brpl	.-8      	; 0x922 <DIO_voidActivePinInPullUpResistance+0x20>
 92a:	82 2b       	or	r24, r18
 92c:	8b bb       	out	0x1b, r24	; 27
 92e:	08 95       	ret
 930:	28 b3       	in	r18, 0x18	; 24
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_voidActivePinInPullUpResistance+0x3a>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	6a 95       	dec	r22
 93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_voidActivePinInPullUpResistance+0x36>
 940:	82 2b       	or	r24, r18
 942:	88 bb       	out	0x18, r24	; 24
 944:	08 95       	ret
 946:	25 b3       	in	r18, 0x15	; 21
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_voidActivePinInPullUpResistance+0x50>
 94e:	88 0f       	add	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	6a 95       	dec	r22
 954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_voidActivePinInPullUpResistance+0x4c>
 956:	82 2b       	or	r24, r18
 958:	85 bb       	out	0x15, r24	; 21
 95a:	08 95       	ret
 95c:	22 b3       	in	r18, 0x12	; 18
 95e:	81 e0       	ldi	r24, 0x01	; 1
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_voidActivePinInPullUpResistance+0x66>
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	6a 95       	dec	r22
 96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_voidActivePinInPullUpResistance+0x62>
 96c:	82 2b       	or	r24, r18
 96e:	82 bb       	out	0x12, r24	; 18
 970:	08 95       	ret

00000972 <GI_voidEnable>:
 972:	8f b7       	in	r24, 0x3f	; 63
 974:	80 68       	ori	r24, 0x80	; 128
 976:	8f bf       	out	0x3f, r24	; 63
 978:	08 95       	ret

0000097a <TMR0_voidInit>:
 97a:	83 b7       	in	r24, 0x33	; 51
 97c:	8f 7b       	andi	r24, 0xBF	; 191
 97e:	83 bf       	out	0x33, r24	; 51
 980:	83 b7       	in	r24, 0x33	; 51
 982:	88 60       	ori	r24, 0x08	; 8
 984:	83 bf       	out	0x33, r24	; 51
 986:	83 b7       	in	r24, 0x33	; 51
 988:	8f 7e       	andi	r24, 0xEF	; 239
 98a:	83 bf       	out	0x33, r24	; 51
 98c:	83 b7       	in	r24, 0x33	; 51
 98e:	8f 7d       	andi	r24, 0xDF	; 223
 990:	83 bf       	out	0x33, r24	; 51
 992:	89 b7       	in	r24, 0x39	; 57
 994:	82 60       	ori	r24, 0x02	; 2
 996:	89 bf       	out	0x39, r24	; 57
 998:	89 ef       	ldi	r24, 0xF9	; 249
 99a:	8c bf       	out	0x3c, r24	; 60
 99c:	08 95       	ret

0000099e <TMR0clear_flag>:
 99e:	88 b7       	in	r24, 0x38	; 56
 9a0:	82 60       	ori	r24, 0x02	; 2
 9a2:	88 bf       	out	0x38, r24	; 56
 9a4:	88 b7       	in	r24, 0x38	; 56
 9a6:	81 60       	ori	r24, 0x01	; 1
 9a8:	88 bf       	out	0x38, r24	; 56
 9aa:	08 95       	ret

000009ac <__vector_11>:
 9ac:	1f 92       	push	r1
 9ae:	0f 92       	push	r0
 9b0:	0f b6       	in	r0, 0x3f	; 63
 9b2:	0f 92       	push	r0
 9b4:	11 24       	eor	r1, r1
 9b6:	2f 93       	push	r18
 9b8:	3f 93       	push	r19
 9ba:	4f 93       	push	r20
 9bc:	5f 93       	push	r21
 9be:	6f 93       	push	r22
 9c0:	7f 93       	push	r23
 9c2:	8f 93       	push	r24
 9c4:	9f 93       	push	r25
 9c6:	af 93       	push	r26
 9c8:	bf 93       	push	r27
 9ca:	ef 93       	push	r30
 9cc:	ff 93       	push	r31
 9ce:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <__data_end>
 9d2:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <__data_end+0x1>
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <__data_end+0x1>
 9dc:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <__data_end>
 9e0:	88 3e       	cpi	r24, 0xE8	; 232
 9e2:	93 40       	sbci	r25, 0x03	; 3
 9e4:	69 f4       	brne	.+26     	; 0xa00 <__vector_11+0x54>
 9e6:	81 e7       	ldi	r24, 0x71	; 113
 9e8:	82 bf       	out	0x32, r24	; 50
 9ea:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__data_end+0x1>
 9ee:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__data_end>
 9f2:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <PRV_pFunCallBackOVF>
 9f6:	f0 91 1b 03 	lds	r31, 0x031B	; 0x80031b <PRV_pFunCallBackOVF+0x1>
 9fa:	30 97       	sbiw	r30, 0x00	; 0
 9fc:	09 f0       	breq	.+2      	; 0xa00 <__vector_11+0x54>
 9fe:	09 95       	icall
 a00:	ff 91       	pop	r31
 a02:	ef 91       	pop	r30
 a04:	bf 91       	pop	r27
 a06:	af 91       	pop	r26
 a08:	9f 91       	pop	r25
 a0a:	8f 91       	pop	r24
 a0c:	7f 91       	pop	r23
 a0e:	6f 91       	pop	r22
 a10:	5f 91       	pop	r21
 a12:	4f 91       	pop	r20
 a14:	3f 91       	pop	r19
 a16:	2f 91       	pop	r18
 a18:	0f 90       	pop	r0
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	0f 90       	pop	r0
 a1e:	1f 90       	pop	r1
 a20:	18 95       	reti

00000a22 <__vector_10>:
 a22:	1f 92       	push	r1
 a24:	0f 92       	push	r0
 a26:	0f b6       	in	r0, 0x3f	; 63
 a28:	0f 92       	push	r0
 a2a:	11 24       	eor	r1, r1
 a2c:	2f 93       	push	r18
 a2e:	3f 93       	push	r19
 a30:	4f 93       	push	r20
 a32:	5f 93       	push	r21
 a34:	6f 93       	push	r22
 a36:	7f 93       	push	r23
 a38:	8f 93       	push	r24
 a3a:	9f 93       	push	r25
 a3c:	af 93       	push	r26
 a3e:	bf 93       	push	r27
 a40:	ef 93       	push	r30
 a42:	ff 93       	push	r31
 a44:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <__data_end>
 a48:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <__data_end+0x1>
 a4c:	01 96       	adiw	r24, 0x01	; 1
 a4e:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <__data_end+0x1>
 a52:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <__data_end>
 a56:	88 38       	cpi	r24, 0x88	; 136
 a58:	93 41       	sbci	r25, 0x13	; 19
 a5a:	69 f4       	brne	.+26     	; 0xa76 <__vector_10+0x54>
 a5c:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <__data_end+0x1>
 a60:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__data_end>
 a64:	e0 91 18 03 	lds	r30, 0x0318	; 0x800318 <PRV_pFunCallBackCTC>
 a68:	f0 91 19 03 	lds	r31, 0x0319	; 0x800319 <PRV_pFunCallBackCTC+0x1>
 a6c:	30 97       	sbiw	r30, 0x00	; 0
 a6e:	19 f0       	breq	.+6      	; 0xa76 <__vector_10+0x54>
 a70:	09 95       	icall
 a72:	0e 94 cf 04 	call	0x99e	; 0x99e <TMR0clear_flag>
 a76:	ff 91       	pop	r31
 a78:	ef 91       	pop	r30
 a7a:	bf 91       	pop	r27
 a7c:	af 91       	pop	r26
 a7e:	9f 91       	pop	r25
 a80:	8f 91       	pop	r24
 a82:	7f 91       	pop	r23
 a84:	6f 91       	pop	r22
 a86:	5f 91       	pop	r21
 a88:	4f 91       	pop	r20
 a8a:	3f 91       	pop	r19
 a8c:	2f 91       	pop	r18
 a8e:	0f 90       	pop	r0
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	0f 90       	pop	r0
 a94:	1f 90       	pop	r1
 a96:	18 95       	reti

00000a98 <TWI_voidInitMaster>:
 a98:	8c e0       	ldi	r24, 0x0C	; 12
 a9a:	80 b9       	out	0x00, r24	; 0
 a9c:	81 b1       	in	r24, 0x01	; 1
 a9e:	8d 7f       	andi	r24, 0xFD	; 253
 aa0:	81 b9       	out	0x01, r24	; 1
 aa2:	81 b1       	in	r24, 0x01	; 1
 aa4:	8e 7f       	andi	r24, 0xFE	; 254
 aa6:	81 b9       	out	0x01, r24	; 1
 aa8:	86 b7       	in	r24, 0x36	; 54
 aaa:	84 60       	ori	r24, 0x04	; 4
 aac:	86 bf       	out	0x36, r24	; 54
 aae:	08 95       	ret

00000ab0 <TWI_voidSendStartCondition>:
 ab0:	86 b7       	in	r24, 0x36	; 54
 ab2:	80 62       	ori	r24, 0x20	; 32
 ab4:	86 bf       	out	0x36, r24	; 54
 ab6:	86 b7       	in	r24, 0x36	; 54
 ab8:	80 68       	ori	r24, 0x80	; 128
 aba:	86 bf       	out	0x36, r24	; 54
 abc:	06 b6       	in	r0, 0x36	; 54
 abe:	07 fe       	sbrs	r0, 7
 ac0:	fd cf       	rjmp	.-6      	; 0xabc <TWI_voidSendStartCondition+0xc>
 ac2:	81 b1       	in	r24, 0x01	; 1
 ac4:	88 7f       	andi	r24, 0xF8	; 248
 ac6:	88 30       	cpi	r24, 0x08	; 8
 ac8:	e1 f7       	brne	.-8      	; 0xac2 <TWI_voidSendStartCondition+0x12>
 aca:	08 95       	ret

00000acc <TWI_voidSendRepeatedStartCondition>:
 acc:	86 b7       	in	r24, 0x36	; 54
 ace:	80 62       	ori	r24, 0x20	; 32
 ad0:	86 bf       	out	0x36, r24	; 54
 ad2:	86 b7       	in	r24, 0x36	; 54
 ad4:	80 68       	ori	r24, 0x80	; 128
 ad6:	86 bf       	out	0x36, r24	; 54
 ad8:	06 b6       	in	r0, 0x36	; 54
 ada:	07 fe       	sbrs	r0, 7
 adc:	fd cf       	rjmp	.-6      	; 0xad8 <TWI_voidSendRepeatedStartCondition+0xc>
 ade:	81 b1       	in	r24, 0x01	; 1
 ae0:	88 7f       	andi	r24, 0xF8	; 248
 ae2:	80 31       	cpi	r24, 0x10	; 16
 ae4:	e1 f7       	brne	.-8      	; 0xade <TWI_voidSendRepeatedStartCondition+0x12>
 ae6:	08 95       	ret

00000ae8 <TWI_voidSendStopCondition>:
 ae8:	86 b7       	in	r24, 0x36	; 54
 aea:	80 61       	ori	r24, 0x10	; 16
 aec:	86 bf       	out	0x36, r24	; 54
 aee:	86 b7       	in	r24, 0x36	; 54
 af0:	80 68       	ori	r24, 0x80	; 128
 af2:	86 bf       	out	0x36, r24	; 54
 af4:	08 95       	ret

00000af6 <TWI_voidSendSlaveAddWithWrite>:
 af6:	88 23       	and	r24, r24
 af8:	94 f0       	brlt	.+36     	; 0xb1e <TWI_voidSendSlaveAddWithWrite+0x28>
 afa:	88 0f       	add	r24, r24
 afc:	83 b9       	out	0x03, r24	; 3
 afe:	83 b1       	in	r24, 0x03	; 3
 b00:	8e 7f       	andi	r24, 0xFE	; 254
 b02:	83 b9       	out	0x03, r24	; 3
 b04:	86 b7       	in	r24, 0x36	; 54
 b06:	8f 7d       	andi	r24, 0xDF	; 223
 b08:	86 bf       	out	0x36, r24	; 54
 b0a:	86 b7       	in	r24, 0x36	; 54
 b0c:	80 68       	ori	r24, 0x80	; 128
 b0e:	86 bf       	out	0x36, r24	; 54
 b10:	06 b6       	in	r0, 0x36	; 54
 b12:	07 fe       	sbrs	r0, 7
 b14:	fd cf       	rjmp	.-6      	; 0xb10 <TWI_voidSendSlaveAddWithWrite+0x1a>
 b16:	81 b1       	in	r24, 0x01	; 1
 b18:	88 7f       	andi	r24, 0xF8	; 248
 b1a:	88 31       	cpi	r24, 0x18	; 24
 b1c:	e1 f7       	brne	.-8      	; 0xb16 <TWI_voidSendSlaveAddWithWrite+0x20>
 b1e:	08 95       	ret

00000b20 <TWI_voidSendSlaveAddWithRead>:
 b20:	88 23       	and	r24, r24
 b22:	94 f0       	brlt	.+36     	; 0xb48 <TWI_voidSendSlaveAddWithRead+0x28>
 b24:	88 0f       	add	r24, r24
 b26:	83 b9       	out	0x03, r24	; 3
 b28:	83 b1       	in	r24, 0x03	; 3
 b2a:	81 60       	ori	r24, 0x01	; 1
 b2c:	83 b9       	out	0x03, r24	; 3
 b2e:	86 b7       	in	r24, 0x36	; 54
 b30:	8f 7d       	andi	r24, 0xDF	; 223
 b32:	86 bf       	out	0x36, r24	; 54
 b34:	86 b7       	in	r24, 0x36	; 54
 b36:	80 68       	ori	r24, 0x80	; 128
 b38:	86 bf       	out	0x36, r24	; 54
 b3a:	06 b6       	in	r0, 0x36	; 54
 b3c:	07 fe       	sbrs	r0, 7
 b3e:	fd cf       	rjmp	.-6      	; 0xb3a <TWI_voidSendSlaveAddWithRead+0x1a>
 b40:	81 b1       	in	r24, 0x01	; 1
 b42:	88 7f       	andi	r24, 0xF8	; 248
 b44:	80 34       	cpi	r24, 0x40	; 64
 b46:	e1 f7       	brne	.-8      	; 0xb40 <TWI_voidSendSlaveAddWithRead+0x20>
 b48:	08 95       	ret

00000b4a <TWI_voidTransmitMasterDataByte>:
 b4a:	83 b9       	out	0x03, r24	; 3
 b4c:	86 b7       	in	r24, 0x36	; 54
 b4e:	80 68       	ori	r24, 0x80	; 128
 b50:	86 bf       	out	0x36, r24	; 54
 b52:	06 b6       	in	r0, 0x36	; 54
 b54:	07 fe       	sbrs	r0, 7
 b56:	fd cf       	rjmp	.-6      	; 0xb52 <TWI_voidTransmitMasterDataByte+0x8>
 b58:	81 b1       	in	r24, 0x01	; 1
 b5a:	88 7f       	andi	r24, 0xF8	; 248
 b5c:	88 32       	cpi	r24, 0x28	; 40
 b5e:	e1 f7       	brne	.-8      	; 0xb58 <TWI_voidTransmitMasterDataByte+0xe>
 b60:	08 95       	ret

00000b62 <TWI_voidRecieveMasterDataByteWithNAch>:
 b62:	fc 01       	movw	r30, r24
 b64:	89 2b       	or	r24, r25
 b66:	61 f0       	breq	.+24     	; 0xb80 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
 b68:	96 b7       	in	r25, 0x36	; 54
 b6a:	90 68       	ori	r25, 0x80	; 128
 b6c:	96 bf       	out	0x36, r25	; 54
 b6e:	06 b6       	in	r0, 0x36	; 54
 b70:	07 fe       	sbrs	r0, 7
 b72:	fd cf       	rjmp	.-6      	; 0xb6e <TWI_voidRecieveMasterDataByteWithNAch+0xc>
 b74:	91 b1       	in	r25, 0x01	; 1
 b76:	98 7f       	andi	r25, 0xF8	; 248
 b78:	98 35       	cpi	r25, 0x58	; 88
 b7a:	e1 f7       	brne	.-8      	; 0xb74 <TWI_voidRecieveMasterDataByteWithNAch+0x12>
 b7c:	83 b1       	in	r24, 0x03	; 3
 b7e:	80 83       	st	Z, r24
 b80:	08 95       	ret

00000b82 <UART_voidInit>:
 b82:	8b b1       	in	r24, 0x0b	; 11
 b84:	8d 7f       	andi	r24, 0xFD	; 253
 b86:	8b b9       	out	0x0b, r24	; 11
 b88:	87 e6       	ldi	r24, 0x67	; 103
 b8a:	89 b9       	out	0x09, r24	; 9
 b8c:	8a b1       	in	r24, 0x0a	; 10
 b8e:	8b 7f       	andi	r24, 0xFB	; 251
 b90:	8a b9       	out	0x0a, r24	; 10
 b92:	86 e8       	ldi	r24, 0x86	; 134
 b94:	80 bd       	out	0x20, r24	; 32
 b96:	8a b1       	in	r24, 0x0a	; 10
 b98:	80 61       	ori	r24, 0x10	; 16
 b9a:	8a b9       	out	0x0a, r24	; 10
 b9c:	8a b1       	in	r24, 0x0a	; 10
 b9e:	88 60       	ori	r24, 0x08	; 8
 ba0:	8a b9       	out	0x0a, r24	; 10
 ba2:	08 95       	ret

00000ba4 <UART_voidTxChar>:
 ba4:	8c b9       	out	0x0c, r24	; 12
 ba6:	5d 9b       	sbis	0x0b, 5	; 11
 ba8:	fe cf       	rjmp	.-4      	; 0xba6 <UART_voidTxChar+0x2>
 baa:	08 95       	ret

00000bac <UART_voidRxChar>:
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	29 f0       	breq	.+10     	; 0xbba <UART_voidRxChar+0xe>
 bb0:	5f 9b       	sbis	0x0b, 7	; 11
 bb2:	fe cf       	rjmp	.-4      	; 0xbb0 <UART_voidRxChar+0x4>
 bb4:	2c b1       	in	r18, 0x0c	; 12
 bb6:	fc 01       	movw	r30, r24
 bb8:	20 83       	st	Z, r18
 bba:	08 95       	ret

00000bbc <UART_voidTxString>:
 bbc:	0f 93       	push	r16
 bbe:	1f 93       	push	r17
 bc0:	cf 93       	push	r28
 bc2:	00 97       	sbiw	r24, 0x00	; 0
 bc4:	29 f4       	brne	.+10     	; 0xbd0 <UART_voidTxString+0x14>
 bc6:	0c c0       	rjmp	.+24     	; 0xbe0 <UART_voidTxString+0x24>
 bc8:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_voidTxChar>
 bcc:	cf 5f       	subi	r28, 0xFF	; 255
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <UART_voidTxString+0x18>
 bd0:	8c 01       	movw	r16, r24
 bd2:	c0 e0       	ldi	r28, 0x00	; 0
 bd4:	f8 01       	movw	r30, r16
 bd6:	ec 0f       	add	r30, r28
 bd8:	f1 1d       	adc	r31, r1
 bda:	80 81       	ld	r24, Z
 bdc:	81 11       	cpse	r24, r1
 bde:	f4 cf       	rjmp	.-24     	; 0xbc8 <UART_voidTxString+0xc>
 be0:	cf 91       	pop	r28
 be2:	1f 91       	pop	r17
 be4:	0f 91       	pop	r16
 be6:	08 95       	ret

00000be8 <_exit>:
 be8:	f8 94       	cli

00000bea <__stop_program>:
 bea:	ff cf       	rjmp	.-2      	; 0xbea <__stop_program>
>>>>>>> Stashed changes
