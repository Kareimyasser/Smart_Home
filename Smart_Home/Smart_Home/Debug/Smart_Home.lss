
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000026e  00800060  000012cc  00001360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008002ce  008002ce  000015ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000438e  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109d  00000000  00000000  00005d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023eb  00000000  00000000  00006dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c0  00000000  00000000  000091b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010fd  00000000  00000000  00009974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b7  00000000  00000000  0000aa71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000cd28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_10>
      2c:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 68 06 	call	0xcd0	; 0xcd0 <main>
      8a:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_DisplayTemp>:
	}
	else
	{
		//error massage
	}
}
      92:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
      96:	80 e8       	ldi	r24, 0x80	; 128
      98:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
      9c:	8c e8       	ldi	r24, 0x8C	; 140
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_voidDisplayString>
      a4:	04 c0       	rjmp	.+8      	; 0xae <LCD_DisplayTemp+0x1c>
      a6:	81 e6       	ldi	r24, 0x61	; 97
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
      ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
      b2:	8f 3f       	cpi	r24, 0xFF	; 255
      b4:	c1 f3       	breq	.-16     	; 0xa6 <LCD_DisplayTemp+0x14>
      b6:	80 33       	cpi	r24, 0x30	; 48
      b8:	11 f4       	brne	.+4      	; 0xbe <LCD_DisplayTemp+0x2c>
      ba:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
      be:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TMR0clear_flag>
      c2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
      c6:	08 95       	ret

000000c8 <HOME_voidInit>:
      c8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <EEPROM_voidInit>
      cc:	0e 94 de 04 	call	0x9bc	; 0x9bc <LCD_voidInit>
      d0:	0e 94 90 03 	call	0x720	; 0x720 <KPD_voidInit>
      d4:	0e 94 5f 03 	call	0x6be	; 0x6be <BL_voidInit>
      d8:	41 e0       	ldi	r20, 0x01	; 1
      da:	61 e0       	ldi	r22, 0x01	; 1
      dc:	83 e0       	ldi	r24, 0x03	; 3
      de:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
      ec:	0e 94 3d 08 	call	0x107a	; 0x107a <GI_voidEnable>
      f0:	0e 94 41 08 	call	0x1082	; 0x1082 <TMR0_voidInit>
      f4:	63 e0       	ldi	r22, 0x03	; 3
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	0e 94 4a 06 	call	0xc94	; 0xc94 <LED_voidInit>
      fc:	61 e0       	ldi	r22, 0x01	; 1
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 4a 06 	call	0xc94	; 0xc94 <LED_voidInit>
     104:	62 e0       	ldi	r22, 0x02	; 2
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 4a 06 	call	0xc94	; 0xc94 <LED_voidInit>
     10c:	63 e0       	ldi	r22, 0x03	; 3
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 4a 06 	call	0xc94	; 0xc94 <LED_voidInit>
     114:	62 e0       	ldi	r22, 0x02	; 2
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	0e 94 4a 06 	call	0xc94	; 0xc94 <LED_voidInit>
     11c:	08 95       	ret

0000011e <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     11e:	83 e6       	ldi	r24, 0x63	; 99
     120:	91 e0       	ldi	r25, 0x01	; 1
     122:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     126:	80 ec       	ldi	r24, 0xC0	; 192
     128:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     12c:	84 e7       	ldi	r24, 0x74	; 116
     12e:	91 e0       	ldi	r25, 0x01	; 1
     130:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	2f ef       	ldi	r18, 0xFF	; 255
     136:	83 ed       	ldi	r24, 0xD3	; 211
     138:	90 e3       	ldi	r25, 0x30	; 48
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	80 40       	sbci	r24, 0x00	; 0
     13e:	90 40       	sbci	r25, 0x00	; 0
     140:	e1 f7       	brne	.-8      	; 0x13a <WelcomeScreen+0x1c>
     142:	00 c0       	rjmp	.+0      	; 0x144 <WelcomeScreen+0x26>
     144:	00 00       	nop
     146:	08 95       	ret

00000148 <APP_init>:




void APP_init(void)
{
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	cd b7       	in	r28, 0x3d	; 61
     14e:	de b7       	in	r29, 0x3e	; 62
     150:	a0 97       	sbiw	r28, 0x20	; 32
     152:	0f b6       	in	r0, 0x3f	; 63
     154:	f8 94       	cli
     156:	de bf       	out	0x3e, r29	; 62
     158:	0f be       	out	0x3f, r0	; 63
     15a:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     15c:	0e 94 64 00 	call	0xc8	; 0xc8 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_INTRNAL);
     160:	83 e0       	ldi	r24, 0x03	; 3
     162:	0e 94 7f 06 	call	0xcfe	; 0xcfe <ADC_voidInit>
	
	
    // display the welcome screen
    WelcomeScreen();
     166:	0e 94 8f 00 	call	0x11e	; 0x11e <WelcomeScreen>
	LCD_voidClear();
     16a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
     16e:	88 e0       	ldi	r24, 0x08	; 8
     170:	e5 e6       	ldi	r30, 0x65	; 101
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	de 01       	movw	r26, r28
     176:	11 96       	adiw	r26, 0x01	; 1
     178:	01 90       	ld	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	8a 95       	dec	r24
     17e:	e1 f7       	brne	.-8      	; 0x178 <APP_init+0x30>
	u8 testuserpass[8]={"22222222"};
     180:	88 e0       	ldi	r24, 0x08	; 8
     182:	ee e6       	ldi	r30, 0x6E	; 110
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	de 01       	movw	r26, r28
     188:	19 96       	adiw	r26, 0x09	; 9
     18a:	01 90       	ld	r0, Z+
     18c:	0d 92       	st	X+, r0
     18e:	8a 95       	dec	r24
     190:	e1 f7       	brne	.-8      	; 0x18a <APP_init+0x42>
	u8 testadminname[8]={"12345678"};
     192:	88 e0       	ldi	r24, 0x08	; 8
     194:	e7 e7       	ldi	r30, 0x77	; 119
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	de 01       	movw	r26, r28
     19a:	51 96       	adiw	r26, 0x11	; 17
     19c:	01 90       	ld	r0, Z+
     19e:	0d 92       	st	X+, r0
     1a0:	8a 95       	dec	r24
     1a2:	e1 f7       	brne	.-8      	; 0x19c <APP_init+0x54>
	u8 testadminpass[8]={"12345678"};
     1a4:	88 e0       	ldi	r24, 0x08	; 8
     1a6:	e7 e7       	ldi	r30, 0x77	; 119
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	de 01       	movw	r26, r28
     1ac:	59 96       	adiw	r26, 0x19	; 25
     1ae:	01 90       	ld	r0, Z+
     1b0:	0d 92       	st	X+, r0
     1b2:	8a 95       	dec	r24
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <APP_init+0x66>
	u8 usertype;	
	
	EEPROM_voidWritePage(304,&testusername[0]);
     1b6:	be 01       	movw	r22, r28
     1b8:	6f 5f       	subi	r22, 0xFF	; 255
     1ba:	7f 4f       	sbci	r23, 0xFF	; 255
     1bc:	80 e3       	ldi	r24, 0x30	; 48
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	0e 94 65 03 	call	0x6ca	; 0x6ca <EEPROM_voidWritePage>
	EEPROM_voidWritePage(312,&testuserpass[0]);
     1c4:	be 01       	movw	r22, r28
     1c6:	67 5f       	subi	r22, 0xF7	; 247
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ca:	88 e3       	ldi	r24, 0x38	; 56
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	0e 94 65 03 	call	0x6ca	; 0x6ca <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
     1d2:	be 01       	movw	r22, r28
     1d4:	6f 5e       	subi	r22, 0xEF	; 239
     1d6:	7f 4f       	sbci	r23, 0xFF	; 255
     1d8:	80 ef       	ldi	r24, 0xF0	; 240
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 65 03 	call	0x6ca	; 0x6ca <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
     1e0:	be 01       	movw	r22, r28
     1e2:	67 5e       	subi	r22, 0xE7	; 231
     1e4:	7f 4f       	sbci	r23, 0xFF	; 255
     1e6:	88 ef       	ldi	r24, 0xF8	; 248
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 65 03 	call	0x6ca	; 0x6ca <EEPROM_voidWritePage>





}
     1ee:	a0 96       	adiw	r28, 0x20	; 32
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	cd bf       	out	0x3d, r28	; 61
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     206:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     20a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     20e:	08 95       	ret

00000210 <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     210:	0e 94 00 01 	call	0x200	; 0x200 <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     214:	89 e4       	ldi	r24, 0x49	; 73
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     21c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <TMR0_voidStart>
        LCD_voidClear();
     220:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     224:	82 e8       	ldi	r24, 0x82	; 130
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     22c:	80 ec       	ldi	r24, 0xC0	; 192
     22e:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temperature");
     232:	8f e8       	ldi	r24, 0x8F	; 143
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_voidDisplayString>
        Reset_AllKPDValues();
     23a:	0e 94 00 01 	call	0x200	; 0x200 <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     23e:	0c c0       	rjmp	.+24     	; 0x258 <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     240:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     244:	80 33       	cpi	r24, 0x30	; 48
     246:	21 f4       	brne	.+8      	; 0x250 <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
     24e:	08 c0       	rjmp	.+16     	; 0x260 <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     250:	84 e6       	ldi	r24, 0x64	; 100
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temperature");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     258:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     25c:	8f 3f       	cpi	r24, 0xFF	; 255
     25e:	81 f3       	breq	.-32     	; 0x240 <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     260:	0e 94 61 08 	call	0x10c2	; 0x10c2 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     264:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     268:	82 33       	cpi	r24, 0x32	; 50
     26a:	a1 f0       	breq	.+40     	; 0x294 <KPD_Interface_user+0x84>
     26c:	83 33       	cpi	r24, 0x33	; 51
     26e:	09 f4       	brne	.+2      	; 0x272 <KPD_Interface_user+0x62>
     270:	e5 c1       	rjmp	.+970    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     272:	81 33       	cpi	r24, 0x31	; 49
     274:	09 f0       	breq	.+2      	; 0x278 <KPD_Interface_user+0x68>
     276:	22 c2       	rjmp	.+1092   	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
        {
        case ('1'):

            LCD_voidClear();
     278:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     27c:	8d e9       	ldi	r24, 0x9D	; 157
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     284:	80 ec       	ldi	r24, 0xC0	; 192
     286:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     28a:	8a ea       	ldi	r24, 0xAA	; 170
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>

            break;
     292:	08 95       	ret
			

        case ('2'):

            LCD_voidClear();
     294:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     298:	89 eb       	ldi	r24, 0xB9	; 185
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     2a0:	80 ec       	ldi	r24, 0xC0	; 192
     2a2:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     2a6:	89 ec       	ldi	r24, 0xC9	; 201
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     2ae:	89 e4       	ldi	r24, 0x49	; 73
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     2b6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <KPD_Interface_user+0xc4>
            {
                KPD_voidGetValue(&local_lightNum);
     2bc:	83 e6       	ldi	r24, 0x63	; 99
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     2c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     2c8:	80 33       	cpi	r24, 0x30	; 48
     2ca:	21 f4       	brne	.+8      	; 0x2d4 <KPD_Interface_user+0xc4>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     2cc:	8f ef       	ldi	r24, 0xFF	; 255
     2ce:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <KPD_Interface_user+0xcc>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     2d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     2d8:	8f 3f       	cpi	r24, 0xFF	; 255
     2da:	81 f3       	breq	.-32     	; 0x2bc <KPD_Interface_user+0xac>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     2dc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <TMR0_voidStop>
            switch (local_lightNum)
     2e0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     2e4:	83 33       	cpi	r24, 0x33	; 51
     2e6:	09 f4       	brne	.+2      	; 0x2ea <KPD_Interface_user+0xda>
     2e8:	a6 c0       	rjmp	.+332    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     2ea:	30 f4       	brcc	.+12     	; 0x2f8 <KPD_Interface_user+0xe8>
     2ec:	81 33       	cpi	r24, 0x31	; 49
     2ee:	69 f0       	breq	.+26     	; 0x30a <KPD_Interface_user+0xfa>
     2f0:	82 33       	cpi	r24, 0x32	; 50
     2f2:	09 f4       	brne	.+2      	; 0x2f6 <KPD_Interface_user+0xe6>
     2f4:	54 c0       	rjmp	.+168    	; 0x39e <KPD_Interface_user+0x18e>
     2f6:	a2 c1       	rjmp	.+836    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     2f8:	85 33       	cpi	r24, 0x35	; 53
     2fa:	09 f4       	brne	.+2      	; 0x2fe <KPD_Interface_user+0xee>
     2fc:	34 c1       	rjmp	.+616    	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
     2fe:	08 f4       	brcc	.+2      	; 0x302 <KPD_Interface_user+0xf2>
     300:	e6 c0       	rjmp	.+460    	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
     302:	86 33       	cpi	r24, 0x36	; 54
     304:	09 f4       	brne	.+2      	; 0x308 <KPD_Interface_user+0xf8>
     306:	7b c1       	rjmp	.+758    	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
     308:	99 c1       	rjmp	.+818    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     30a:	4f ec       	ldi	r20, 0xCF	; 207
     30c:	52 e0       	ldi	r21, 0x02	; 2
     30e:	63 e0       	ldi	r22, 0x03	; 3
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidGetPinValue>
                LCD_voidClear();
     316:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
                if (led_status == 1)
     31a:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <led_status>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	f1 f4       	brne	.+60     	; 0x35e <KPD_Interface_user+0x14e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     322:	86 ed       	ldi	r24, 0xD6	; 214
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     32a:	80 ec       	ldi	r24, 0xC0	; 192
     32c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     330:	84 ee       	ldi	r24, 0xE4	; 228
     332:	91 e0       	ldi	r25, 0x01	; 1
     334:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     338:	04 c0       	rjmp	.+8      	; 0x342 <KPD_Interface_user+0x132>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     33a:	82 e6       	ldi	r24, 0x62	; 98
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     342:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     346:	8f 3f       	cpi	r24, 0xFF	; 255
     348:	c1 f3       	breq	.-16     	; 0x33a <KPD_Interface_user+0x12a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     34a:	81 33       	cpi	r24, 0x31	; 49
     34c:	29 f4       	brne	.+10     	; 0x358 <KPD_Interface_user+0x148>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     34e:	41 e0       	ldi	r20, 0x01	; 1
     350:	63 e0       	ldi	r22, 0x03	; 3
     352:	83 e0       	ldi	r24, 0x03	; 3
     354:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     358:	0e 94 00 01 	call	0x200	; 0x200 <Reset_AllKPDValues>
     35c:	6f c1       	rjmp	.+734    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                else if (led_status == 0)
     35e:	81 11       	cpse	r24, r1
     360:	6d c1       	rjmp	.+730    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     362:	85 ef       	ldi	r24, 0xF5	; 245
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     36a:	80 ec       	ldi	r24, 0xC0	; 192
     36c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     378:	04 c0       	rjmp	.+8      	; 0x382 <KPD_Interface_user+0x172>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     37a:	82 e6       	ldi	r24, 0x62	; 98
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     382:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     386:	8f 3f       	cpi	r24, 0xFF	; 255
     388:	c1 f3       	breq	.-16     	; 0x37a <KPD_Interface_user+0x16a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     38a:	81 33       	cpi	r24, 0x31	; 49
     38c:	29 f4       	brne	.+10     	; 0x398 <KPD_Interface_user+0x188>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	63 e0       	ldi	r22, 0x03	; 3
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     398:	0e 94 00 01 	call	0x200	; 0x200 <Reset_AllKPDValues>
     39c:	4f c1       	rjmp	.+670    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN1, &led_status);
     39e:	4f ec       	ldi	r20, 0xCF	; 207
     3a0:	52 e0       	ldi	r21, 0x02	; 2
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidGetPinValue>
                LCD_voidClear();
     3aa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
                if (led_status == 1)
     3ae:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <led_status>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	f9 f4       	brne	.+62     	; 0x3f4 <KPD_Interface_user+0x1e4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     3b6:	84 e1       	ldi	r24, 0x14	; 20
     3b8:	92 e0       	ldi	r25, 0x02	; 2
     3ba:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     3be:	80 ec       	ldi	r24, 0xC0	; 192
     3c0:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     3c4:	84 ee       	ldi	r24, 0xE4	; 228
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <KPD_Interface_user+0x1c6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     3ce:	82 e6       	ldi	r24, 0x62	; 98
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     3d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     3da:	8f 3f       	cpi	r24, 0xFF	; 255
     3dc:	c1 f3       	breq	.-16     	; 0x3ce <KPD_Interface_user+0x1be>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     3de:	81 33       	cpi	r24, 0x31	; 49
     3e0:	29 f4       	brne	.+10     	; 0x3ec <KPD_Interface_user+0x1dc>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     3ec:	8f ef       	ldi	r24, 0xFF	; 255
     3ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     3f2:	24 c1       	rjmp	.+584    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                else if (led_status == 0)
     3f4:	81 11       	cpse	r24, r1
     3f6:	22 c1       	rjmp	.+580    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     3f8:	82 e2       	ldi	r24, 0x22	; 34
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     400:	80 ec       	ldi	r24, 0xC0	; 192
     402:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     40e:	04 c0       	rjmp	.+8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     410:	82 e6       	ldi	r24, 0x62	; 98
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     418:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     41c:	8f 3f       	cpi	r24, 0xFF	; 255
     41e:	c1 f3       	breq	.-16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     420:	81 33       	cpi	r24, 0x31	; 49
     422:	29 f4       	brne	.+10     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     434:	03 c1       	rjmp	.+518    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     436:	4f ec       	ldi	r20, 0xCF	; 207
     438:	52 e0       	ldi	r21, 0x02	; 2
     43a:	62 e0       	ldi	r22, 0x02	; 2
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidGetPinValue>
                LCD_voidClear();
     442:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
                if (led_status == 1)
     446:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <led_status>
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	f9 f4       	brne	.+62     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     44e:	81 e3       	ldi	r24, 0x31	; 49
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     456:	80 ec       	ldi	r24, 0xC0	; 192
     458:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     45c:	84 ee       	ldi	r24, 0xE4	; 228
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     464:	04 c0       	rjmp	.+8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     466:	82 e6       	ldi	r24, 0x62	; 98
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     46e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     472:	8f 3f       	cpi	r24, 0xFF	; 255
     474:	c1 f3       	breq	.-16     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     476:	81 33       	cpi	r24, 0x31	; 49
     478:	29 f4       	brne	.+10     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	62 e0       	ldi	r22, 0x02	; 2
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     48a:	d8 c0       	rjmp	.+432    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                else if (led_status == 0)
     48c:	81 11       	cpse	r24, r1
     48e:	d6 c0       	rjmp	.+428    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     490:	8f e3       	ldi	r24, 0x3F	; 63
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     498:	80 ec       	ldi	r24, 0xC0	; 192
     49a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     4a8:	82 e6       	ldi	r24, 0x62	; 98
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     4b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     4b4:	8f 3f       	cpi	r24, 0xFF	; 255
     4b6:	c1 f3       	breq	.-16     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     4b8:	81 33       	cpi	r24, 0x31	; 49
     4ba:	29 f4       	brne	.+10     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	62 e0       	ldi	r22, 0x02	; 2
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     4cc:	b7 c0       	rjmp	.+366    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     4ce:	4f ec       	ldi	r20, 0xCF	; 207
     4d0:	52 e0       	ldi	r21, 0x02	; 2
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidGetPinValue>
                LCD_voidClear();
     4da:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
                if (led_status == 1)
     4de:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <led_status>
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	f9 f4       	brne	.+62     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     4e6:	8e e4       	ldi	r24, 0x4E	; 78
     4e8:	92 e0       	ldi	r25, 0x02	; 2
     4ea:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4ee:	80 ec       	ldi	r24, 0xC0	; 192
     4f0:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     4f4:	84 ee       	ldi	r24, 0xE4	; 228
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     4fe:	82 e6       	ldi	r24, 0x62	; 98
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     506:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     50a:	8f 3f       	cpi	r24, 0xFF	; 255
     50c:	c1 f3       	breq	.-16     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     50e:	81 33       	cpi	r24, 0x31	; 49
     510:	29 f4       	brne	.+10     	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	63 e0       	ldi	r22, 0x03	; 3
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     51c:	8f ef       	ldi	r24, 0xFF	; 255
     51e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     522:	8c c0       	rjmp	.+280    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                else if (led_status == 0)
     524:	81 11       	cpse	r24, r1
     526:	8a c0       	rjmp	.+276    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     528:	8c e5       	ldi	r24, 0x5C	; 92
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     530:	80 ec       	ldi	r24, 0xC0	; 192
     532:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     536:	84 e0       	ldi	r24, 0x04	; 4
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     53e:	04 c0       	rjmp	.+8      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     540:	82 e6       	ldi	r24, 0x62	; 98
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     548:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     54c:	8f 3f       	cpi	r24, 0xFF	; 255
     54e:	c1 f3       	breq	.-16     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     550:	81 33       	cpi	r24, 0x31	; 49
     552:	29 f4       	brne	.+10     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	63 e0       	ldi	r22, 0x03	; 3
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     564:	6b c0       	rjmp	.+214    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     566:	4f ec       	ldi	r20, 0xCF	; 207
     568:	52 e0       	ldi	r21, 0x02	; 2
     56a:	62 e0       	ldi	r22, 0x02	; 2
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidGetPinValue>
                LCD_voidClear();
     572:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
                if (led_status == 1)
     576:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <led_status>
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	f9 f4       	brne	.+62     	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     57e:	8b e6       	ldi	r24, 0x6B	; 107
     580:	92 e0       	ldi	r25, 0x02	; 2
     582:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     586:	80 ec       	ldi	r24, 0xC0	; 192
     588:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     58c:	84 ee       	ldi	r24, 0xE4	; 228
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     594:	04 c0       	rjmp	.+8      	; 0x59e <__EEPROM_REGION_LENGTH__+0x19e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     596:	82 e6       	ldi	r24, 0x62	; 98
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     59e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     5a2:	8f 3f       	cpi	r24, 0xFF	; 255
     5a4:	c1 f3       	breq	.-16     	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5a6:	81 33       	cpi	r24, 0x31	; 49
     5a8:	29 f4       	brne	.+10     	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     5aa:	41 e0       	ldi	r20, 0x01	; 1
     5ac:	62 e0       	ldi	r22, 0x02	; 2
     5ae:	83 e0       	ldi	r24, 0x03	; 3
     5b0:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     5ba:	40 c0       	rjmp	.+128    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                else if (led_status == 0)
     5bc:	81 11       	cpse	r24, r1
     5be:	3e c0       	rjmp	.+124    	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     5c0:	89 e7       	ldi	r24, 0x79	; 121
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5c8:	80 ec       	ldi	r24, 0xC0	; 192
     5ca:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5d8:	82 e6       	ldi	r24, 0x62	; 98
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     5e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     5e4:	8f 3f       	cpi	r24, 0xFF	; 255
     5e6:	c1 f3       	breq	.-16     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5e8:	81 33       	cpi	r24, 0x31	; 49
     5ea:	29 f4       	brne	.+10     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	62 e0       	ldi	r22, 0x02	; 2
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     5fc:	1f c0       	rjmp	.+62     	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                break;
                // if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     5fe:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
                if (led_status == 1)
     602:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <led_status>
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	61 f4       	brne	.+24     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     60a:	88 e8       	ldi	r24, 0x88	; 136
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     612:	80 ec       	ldi	r24, 0xC0	; 192
     614:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     618:	84 ee       	ldi	r24, 0xE4	; 228
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
     620:	0d c0       	rjmp	.+26     	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                }
                else if (led_status == 0)
     622:	81 11       	cpse	r24, r1
     624:	0b c0       	rjmp	.+22     	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     626:	86 e9       	ldi	r24, 0x96	; 150
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     62e:	80 ec       	ldi	r24, 0xC0	; 192
     630:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
                }
                break;

            }
			case ('3'):
				LCD_voidClear();
     63c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     640:	6e ec       	ldi	r22, 0xCE	; 206
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 af 06 	call	0xd5e	; 0xd5e <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
     64a:	80 e8       	ldi	r24, 0x80	; 128
     64c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  ");
     650:	85 ea       	ldi	r24, 0xA5	; 165
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     658:	6b e0       	ldi	r22, 0x0B	; 11
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
     660:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <__data_end>
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
     66e:	83 e6       	ldi	r24, 0x63	; 99
     670:	0e 94 40 05 	call	0xa80	; 0xa80 <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
     674:	80 ec       	ldi	r24, 0xC0	; 192
     676:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
     67a:	82 eb       	ldi	r24, 0xB2	; 178
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
     682:	14 c0       	rjmp	.+40     	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
     684:	81 e6       	ldi	r24, 0x61	; 97
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 c4 03 	call	0x788	; 0x788 <KPD_voidGetValue>
					ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     68c:	6e ec       	ldi	r22, 0xCE	; 206
     68e:	72 e0       	ldi	r23, 0x02	; 2
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 af 06 	call	0xd5e	; 0xd5e <ADC_voidGetDigitalValue>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     696:	6b e0       	ldi	r22, 0x0B	; 11
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(local_temp);
     69e:	60 91 ce 02 	lds	r22, 0x02CE	; 0x8002ce <__data_end>
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 ab 05 	call	0xb56	; 0xb56 <LCD_voidDisplayNumber>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
     6ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     6b0:	8f 3f       	cpi	r24, 0xFF	; 255
     6b2:	41 f3       	breq	.-48     	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
					KPD_voidGetValue(&local_KPDIdleValue);
					ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
					LCD_voidDisplayNumber(local_temp);
				}	
				if (local_KPDIdleValue=='0')
     6b4:	80 33       	cpi	r24, 0x30	; 48
     6b6:	11 f4       	brne	.+4      	; 0x6bc <__EEPROM_REGION_LENGTH__+0x2bc>
				{
					LCD_voidClear();
     6b8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <LCD_voidClear>
     6bc:	08 95       	ret

000006be <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     6be:	0e 94 31 09 	call	0x1262	; 0x1262 <UART_voidInit>
     6c2:	08 95       	ret

000006c4 <EEPROM_voidInit>:
	TWI_voidSendStopCondition();
	_delay_ms(5);
	
	
	
}
     6c4:	0e 94 ef 08 	call	0x11de	; 0x11de <TWI_voidInitMaster>
     6c8:	08 95       	ret

000006ca <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
     6d2:	61 15       	cp	r22, r1
     6d4:	71 05       	cpc	r23, r1
     6d6:	f9 f0       	breq	.+62     	; 0x716 <EEPROM_voidWritePage+0x4c>
     6d8:	8b 01       	movw	r16, r22
     6da:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     6dc:	c9 2f       	mov	r28, r25
     6de:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
     6e0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     6e4:	8c 2f       	mov	r24, r28
     6e6:	0e 94 10 09 	call	0x1220	; 0x1220 <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     6ea:	8d 2f       	mov	r24, r29
     6ec:	0e 94 25 09 	call	0x124a	; 0x124a <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     6f0:	c0 e0       	ldi	r28, 0x00	; 0
     6f2:	07 c0       	rjmp	.+14     	; 0x702 <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
     6f4:	f8 01       	movw	r30, r16
     6f6:	ec 0f       	add	r30, r28
     6f8:	f1 1d       	adc	r31, r1
     6fa:	80 81       	ld	r24, Z
     6fc:	0e 94 25 09 	call	0x124a	; 0x124a <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     700:	cf 5f       	subi	r28, 0xFF	; 255
     702:	c8 30       	cpi	r28, 0x08	; 8
     704:	b8 f3       	brcs	.-18     	; 0x6f4 <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
     706:	0e 94 09 09 	call	0x1212	; 0x1212 <TWI_voidSendStopCondition>
     70a:	8f e1       	ldi	r24, 0x1F	; 31
     70c:	9e e4       	ldi	r25, 0x4E	; 78
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <EEPROM_voidWritePage+0x44>
     712:	00 c0       	rjmp	.+0      	; 0x714 <EEPROM_voidWritePage+0x4a>
     714:	00 00       	nop
		{
			//error state
		}
		
		
	}
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     720:	41 e0       	ldi	r20, 0x01	; 1
     722:	64 e0       	ldi	r22, 0x04	; 4
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	65 e0       	ldi	r22, 0x05	; 5
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	66 e0       	ldi	r22, 0x06	; 6
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	63 e0       	ldi	r22, 0x03	; 3
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	64 e0       	ldi	r22, 0x04	; 4
     74c:	82 e0       	ldi	r24, 0x02	; 2
     74e:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     752:	40 e0       	ldi	r20, 0x00	; 0
     754:	65 e0       	ldi	r22, 0x05	; 5
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	66 e0       	ldi	r22, 0x06	; 6
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     766:	63 e0       	ldi	r22, 0x03	; 3
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	0e 94 05 08 	call	0x100a	; 0x100a <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     76e:	64 e0       	ldi	r22, 0x04	; 4
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	0e 94 05 08 	call	0x100a	; 0x100a <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     776:	65 e0       	ldi	r22, 0x05	; 5
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 05 08 	call	0x100a	; 0x100a <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     77e:	66 e0       	ldi	r22, 0x06	; 6
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	0e 94 05 08 	call	0x100a	; 0x100a <DIO_voidActivePinInPullUpResistance>
     786:	08 95       	ret

00000788 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     788:	6f 92       	push	r6
     78a:	7f 92       	push	r7
     78c:	8f 92       	push	r8
     78e:	9f 92       	push	r9
     790:	af 92       	push	r10
     792:	bf 92       	push	r11
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	ef 92       	push	r14
     79a:	ff 92       	push	r15
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	6b 97       	sbiw	r28, 0x1b	; 27
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	09 f4       	brne	.+2      	; 0x7ba <KPD_voidGetValue+0x32>
     7b8:	7e c0       	rjmp	.+252    	; 0x8b6 <__stack+0x57>
     7ba:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	88 8f       	std	Y+24, r24	; 0x18
     7c0:	89 8f       	std	Y+25, r24	; 0x19
     7c2:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     7c4:	34 e0       	ldi	r19, 0x04	; 4
     7c6:	3d 8b       	std	Y+21, r19	; 0x15
     7c8:	25 e0       	ldi	r18, 0x05	; 5
     7ca:	2e 8b       	std	Y+22, r18	; 0x16
     7cc:	96 e0       	ldi	r25, 0x06	; 6
     7ce:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	89 8b       	std	Y+17, r24	; 0x11
     7d4:	8a 8b       	std	Y+18, r24	; 0x12
     7d6:	8b 8b       	std	Y+19, r24	; 0x13
     7d8:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	8d 87       	std	Y+13, r24	; 0x0d
     7de:	3e 87       	std	Y+14, r19	; 0x0e
     7e0:	2f 87       	std	Y+15, r18	; 0x0f
     7e2:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     7e4:	8c e0       	ldi	r24, 0x0C	; 12
     7e6:	e0 e8       	ldi	r30, 0x80	; 128
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	de 01       	movw	r26, r28
     7ec:	11 96       	adiw	r26, 0x01	; 1
     7ee:	01 90       	ld	r0, Z+
     7f0:	0d 92       	st	X+, r0
     7f2:	8a 95       	dec	r24
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     7f6:	8f ef       	ldi	r24, 0xFF	; 255
     7f8:	f5 01       	movw	r30, r10
     7fa:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     7fc:	81 2c       	mov	r8, r1
     7fe:	57 c0       	rjmp	.+174    	; 0x8ae <__stack+0x4f>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     800:	c8 2c       	mov	r12, r8
     802:	d1 2c       	mov	r13, r1
     804:	e5 e1       	ldi	r30, 0x15	; 21
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	ec 0f       	add	r30, r28
     80a:	fd 1f       	adc	r31, r29
     80c:	ec 0d       	add	r30, r12
     80e:	fd 1d       	adc	r31, r13
     810:	60 80       	ld	r6, Z
     812:	e8 e1       	ldi	r30, 0x18	; 24
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	ec 0f       	add	r30, r28
     818:	fd 1f       	adc	r31, r29
     81a:	ec 0d       	add	r30, r12
     81c:	fd 1d       	adc	r31, r13
     81e:	70 80       	ld	r7, Z
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	66 2d       	mov	r22, r6
     824:	87 2d       	mov	r24, r7
     826:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	38 c0       	rjmp	.+112    	; 0x89e <__stack+0x3f>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     82e:	e1 2e       	mov	r14, r17
     830:	f1 2c       	mov	r15, r1
     832:	ed e0       	ldi	r30, 0x0D	; 13
     834:	f0 e0       	ldi	r31, 0x00	; 0
     836:	ec 0f       	add	r30, r28
     838:	fd 1f       	adc	r31, r29
     83a:	ee 0d       	add	r30, r14
     83c:	ff 1d       	adc	r31, r15
     83e:	00 81       	ld	r16, Z
     840:	e1 e1       	ldi	r30, 0x11	; 17
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ec 0f       	add	r30, r28
     846:	fd 1f       	adc	r31, r29
     848:	ee 0d       	add	r30, r14
     84a:	ff 1d       	adc	r31, r15
     84c:	90 80       	ld	r9, Z
     84e:	ae 01       	movw	r20, r28
     850:	45 5e       	subi	r20, 0xE5	; 229
     852:	5f 4f       	sbci	r21, 0xFF	; 255
     854:	60 2f       	mov	r22, r16
     856:	89 2d       	mov	r24, r9
     858:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     85c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     85e:	81 11       	cpse	r24, r1
     860:	1d c0       	rjmp	.+58     	; 0x89c <__stack+0x3d>
     862:	07 c0       	rjmp	.+14     	; 0x872 <__stack+0x13>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     864:	ae 01       	movw	r20, r28
     866:	45 5e       	subi	r20, 0xE5	; 229
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	60 2f       	mov	r22, r16
     86c:	89 2d       	mov	r24, r9
     86e:	0e 94 ca 07 	call	0xf94	; 0xf94 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     872:	8b 8d       	ldd	r24, Y+27	; 0x1b
     874:	88 23       	and	r24, r24
     876:	b1 f3       	breq	.-20     	; 0x864 <__stack+0x5>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     878:	c7 01       	movw	r24, r14
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	e8 0e       	add	r14, r24
     880:	f9 1e       	adc	r15, r25
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	8c 0f       	add	r24, r28
     888:	9d 1f       	adc	r25, r29
     88a:	e8 0e       	add	r14, r24
     88c:	f9 1e       	adc	r15, r25
     88e:	f7 01       	movw	r30, r14
     890:	ec 0d       	add	r30, r12
     892:	fd 1d       	adc	r31, r13
     894:	80 81       	ld	r24, Z
     896:	f5 01       	movw	r30, r10
     898:	80 83       	st	Z, r24
     89a:	0d c0       	rjmp	.+26     	; 0x8b6 <__stack+0x57>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     89c:	1f 5f       	subi	r17, 0xFF	; 255
     89e:	14 30       	cpi	r17, 0x04	; 4
     8a0:	30 f2       	brcs	.-116    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     8a2:	41 e0       	ldi	r20, 0x01	; 1
     8a4:	66 2d       	mov	r22, r6
     8a6:	87 2d       	mov	r24, r7
     8a8:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     8ac:	83 94       	inc	r8
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	f8 15       	cp	r31, r8
     8b2:	08 f0       	brcs	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	a5 cf       	rjmp	.-182    	; 0x800 <__DATA_REGION_LENGTH__>
	}
	else
	{
		
	}
}
     8b6:	6b 96       	adiw	r28, 0x1b	; 27
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	ff 90       	pop	r15
     8cc:	ef 90       	pop	r14
     8ce:	df 90       	pop	r13
     8d0:	cf 90       	pop	r12
     8d2:	bf 90       	pop	r11
     8d4:	af 90       	pop	r10
     8d6:	9f 90       	pop	r9
     8d8:	8f 90       	pop	r8
     8da:	7f 90       	pop	r7
     8dc:	6f 90       	pop	r6
     8de:	08 95       	ret

000008e0 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     8e0:	cf 93       	push	r28
     8e2:	c8 2f       	mov	r28, r24
     8e4:	80 ff       	sbrs	r24, 0
     8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <PRV_voidWriteHalfPort+0x14>
     8e8:	41 e0       	ldi	r20, 0x01	; 1
     8ea:	64 e0       	ldi	r22, 0x04	; 4
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <PRV_voidWriteHalfPort+0x1e>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	64 e0       	ldi	r22, 0x04	; 4
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     8fe:	c1 ff       	sbrs	r28, 1
     900:	06 c0       	rjmp	.+12     	; 0x90e <PRV_voidWriteHalfPort+0x2e>
     902:	41 e0       	ldi	r20, 0x01	; 1
     904:	65 e0       	ldi	r22, 0x05	; 5
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     90c:	05 c0       	rjmp	.+10     	; 0x918 <PRV_voidWriteHalfPort+0x38>
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	65 e0       	ldi	r22, 0x05	; 5
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     918:	c2 ff       	sbrs	r28, 2
     91a:	06 c0       	rjmp	.+12     	; 0x928 <PRV_voidWriteHalfPort+0x48>
     91c:	41 e0       	ldi	r20, 0x01	; 1
     91e:	66 e0       	ldi	r22, 0x06	; 6
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     926:	05 c0       	rjmp	.+10     	; 0x932 <PRV_voidWriteHalfPort+0x52>
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	66 e0       	ldi	r22, 0x06	; 6
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     932:	c3 ff       	sbrs	r28, 3
     934:	06 c0       	rjmp	.+12     	; 0x942 <PRV_voidWriteHalfPort+0x62>
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	67 e0       	ldi	r22, 0x07	; 7
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     940:	05 c0       	rjmp	.+10     	; 0x94c <PRV_voidWriteHalfPort+0x6c>
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	67 e0       	ldi	r22, 0x07	; 7
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <LCD_voidSendCommand>:
     950:	cf 93       	push	r28
     952:	c8 2f       	mov	r28, r24
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	62 e0       	ldi	r22, 0x02	; 2
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     968:	8c 2f       	mov	r24, r28
     96a:	82 95       	swap	r24
     96c:	8f 70       	andi	r24, 0x0F	; 15
     96e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PRV_voidWriteHalfPort>
     972:	41 e0       	ldi	r20, 0x01	; 1
     974:	63 e0       	ldi	r22, 0x03	; 3
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     97c:	8f e9       	ldi	r24, 0x9F	; 159
     97e:	9f e0       	ldi	r25, 0x0F	; 15
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	f1 f7       	brne	.-4      	; 0x980 <LCD_voidSendCommand+0x30>
     984:	00 c0       	rjmp	.+0      	; 0x986 <LCD_voidSendCommand+0x36>
     986:	00 00       	nop
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	63 e0       	ldi	r22, 0x03	; 3
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     992:	8c 2f       	mov	r24, r28
     994:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PRV_voidWriteHalfPort>
     998:	41 e0       	ldi	r20, 0x01	; 1
     99a:	63 e0       	ldi	r22, 0x03	; 3
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     9a2:	8f e9       	ldi	r24, 0x9F	; 159
     9a4:	9f e0       	ldi	r25, 0x0F	; 15
     9a6:	01 97       	sbiw	r24, 0x01	; 1
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <LCD_voidSendCommand+0x56>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <LCD_voidSendCommand+0x5c>
     9ac:	00 00       	nop
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	63 e0       	ldi	r22, 0x03	; 3
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <LCD_voidInit>:
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     9c6:	41 e0       	ldi	r20, 0x01	; 1
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	63 e0       	ldi	r22, 0x03	; 3
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     9da:	41 e0       	ldi	r20, 0x01	; 1
     9dc:	64 e0       	ldi	r22, 0x04	; 4
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	65 e0       	ldi	r22, 0x05	; 5
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     9ee:	41 e0       	ldi	r20, 0x01	; 1
     9f0:	66 e0       	ldi	r22, 0x06	; 6
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	67 e0       	ldi	r22, 0x07	; 7
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     a02:	2f e7       	ldi	r18, 0x7F	; 127
     a04:	85 eb       	ldi	r24, 0xB5	; 181
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	21 50       	subi	r18, 0x01	; 1
     a0a:	80 40       	sbci	r24, 0x00	; 0
     a0c:	90 40       	sbci	r25, 0x00	; 0
     a0e:	e1 f7       	brne	.-8      	; 0xa08 <LCD_voidInit+0x4c>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <LCD_voidInit+0x56>
     a12:	00 00       	nop
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	62 e0       	ldi	r22, 0x02	; 2
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PRV_voidWriteHalfPort>
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	63 e0       	ldi	r22, 0x03	; 3
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     a38:	8f e9       	ldi	r24, 0x9F	; 159
     a3a:	9f e0       	ldi	r25, 0x0F	; 15
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <LCD_voidInit+0x80>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <LCD_voidInit+0x86>
     a42:	00 00       	nop
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	63 e0       	ldi	r22, 0x03	; 3
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     a4e:	88 e2       	ldi	r24, 0x28	; 40
     a50:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
     a54:	90 ef       	ldi	r25, 0xF0	; 240
     a56:	9a 95       	dec	r25
     a58:	f1 f7       	brne	.-4      	; 0xa56 <LCD_voidInit+0x9a>
     a5a:	8c e0       	ldi	r24, 0x0C	; 12
     a5c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
     a60:	20 ef       	ldi	r18, 0xF0	; 240
     a62:	2a 95       	dec	r18
     a64:	f1 f7       	brne	.-4      	; 0xa62 <LCD_voidInit+0xa6>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
     a6c:	8f e3       	ldi	r24, 0x3F	; 63
     a6e:	9f e1       	ldi	r25, 0x1F	; 31
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <LCD_voidInit+0xb4>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <LCD_voidInit+0xba>
     a76:	00 00       	nop
     a78:	86 e0       	ldi	r24, 0x06	; 6
     a7a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
     a7e:	08 95       	ret

00000a80 <LCD_voidDisplayChar>:
     a80:	cf 93       	push	r28
     a82:	c8 2f       	mov	r28, r24
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	62 e0       	ldi	r22, 0x02	; 2
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     a98:	8c 2f       	mov	r24, r28
     a9a:	82 95       	swap	r24
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PRV_voidWriteHalfPort>
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     aac:	8f e9       	ldi	r24, 0x9F	; 159
     aae:	9f e0       	ldi	r25, 0x0F	; 15
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <LCD_voidDisplayChar+0x30>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <LCD_voidDisplayChar+0x36>
     ab6:	00 00       	nop
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	63 e0       	ldi	r22, 0x03	; 3
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     ac2:	8c 2f       	mov	r24, r28
     ac4:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PRV_voidWriteHalfPort>
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	63 e0       	ldi	r22, 0x03	; 3
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     ad2:	8f e9       	ldi	r24, 0x9F	; 159
     ad4:	9f e0       	ldi	r25, 0x0F	; 15
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <LCD_voidDisplayChar+0x56>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <LCD_voidDisplayChar+0x5c>
     adc:	00 00       	nop
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	63 e0       	ldi	r22, 0x03	; 3
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <LCD_voidDisplayString>:
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	29 f4       	brne	.+10     	; 0xb00 <LCD_voidDisplayString+0x14>
     af6:	0c c0       	rjmp	.+24     	; 0xb10 <LCD_voidDisplayString+0x24>
     af8:	0e 94 40 05 	call	0xa80	; 0xa80 <LCD_voidDisplayChar>
     afc:	cf 5f       	subi	r28, 0xFF	; 255
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <LCD_voidDisplayString+0x18>
     b00:	8c 01       	movw	r16, r24
     b02:	c0 e0       	ldi	r28, 0x00	; 0
     b04:	f8 01       	movw	r30, r16
     b06:	ec 0f       	add	r30, r28
     b08:	f1 1d       	adc	r31, r1
     b0a:	80 81       	ld	r24, Z
     b0c:	81 11       	cpse	r24, r1
     b0e:	f4 cf       	rjmp	.-24     	; 0xaf8 <LCD_voidDisplayString+0xc>
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <LCD_voidDisplayStringDelay>:
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	71 f4       	brne	.+28     	; 0xb3e <LCD_voidDisplayStringDelay+0x26>
     b22:	15 c0       	rjmp	.+42     	; 0xb4e <LCD_voidDisplayStringDelay+0x36>
     b24:	0e 94 40 05 	call	0xa80	; 0xa80 <LCD_voidDisplayChar>
     b28:	cf 5f       	subi	r28, 0xFF	; 255
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	80 e7       	ldi	r24, 0x70	; 112
     b2e:	92 e0       	ldi	r25, 0x02	; 2
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	80 40       	sbci	r24, 0x00	; 0
     b34:	90 40       	sbci	r25, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <LCD_voidDisplayStringDelay+0x18>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <LCD_voidDisplayStringDelay+0x22>
     b3a:	00 00       	nop
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <LCD_voidDisplayStringDelay+0x2a>
     b3e:	8c 01       	movw	r16, r24
     b40:	c0 e0       	ldi	r28, 0x00	; 0
     b42:	f8 01       	movw	r30, r16
     b44:	ec 0f       	add	r30, r28
     b46:	f1 1d       	adc	r31, r1
     b48:	80 81       	ld	r24, Z
     b4a:	81 11       	cpse	r24, r1
     b4c:	eb cf       	rjmp	.-42     	; 0xb24 <LCD_voidDisplayStringDelay+0xc>
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <LCD_voidDisplayNumber>:
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	00 d0       	rcall	.+0      	; 0xb60 <LCD_voidDisplayNumber+0xa>
     b60:	00 d0       	rcall	.+0      	; 0xb62 <LCD_voidDisplayNumber+0xc>
     b62:	1f 92       	push	r1
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	26 2f       	mov	r18, r22
     b6a:	10 e0       	ldi	r17, 0x00	; 0
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <LCD_voidDisplayNumber+0x28>
     b6e:	1f 5f       	subi	r17, 0xFF	; 255
     b70:	ed ec       	ldi	r30, 0xCD	; 205
     b72:	6e 9f       	mul	r22, r30
     b74:	61 2d       	mov	r22, r1
     b76:	11 24       	eor	r1, r1
     b78:	66 95       	lsr	r22
     b7a:	66 95       	lsr	r22
     b7c:	66 95       	lsr	r22
     b7e:	61 11       	cpse	r22, r1
     b80:	f6 cf       	rjmp	.-20     	; 0xb6e <LCD_voidDisplayNumber+0x18>
     b82:	00 e0       	ldi	r16, 0x00	; 0
     b84:	1a c0       	rjmp	.+52     	; 0xbba <LCD_voidDisplayNumber+0x64>
     b86:	62 2f       	mov	r22, r18
     b88:	2a e0       	ldi	r18, 0x0A	; 10
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     b94:	73 2f       	mov	r23, r19
     b96:	84 2f       	mov	r24, r20
     b98:	95 2f       	mov	r25, r21
     b9a:	a0 2f       	mov	r26, r16
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	11 96       	adiw	r26, 0x01	; 1
     ba0:	e1 2f       	mov	r30, r17
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	ea 1b       	sub	r30, r26
     ba6:	fb 0b       	sbc	r31, r27
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	4c 0f       	add	r20, r28
     bae:	5d 1f       	adc	r21, r29
     bb0:	e4 0f       	add	r30, r20
     bb2:	f5 1f       	adc	r31, r21
     bb4:	60 5d       	subi	r22, 0xD0	; 208
     bb6:	60 83       	st	Z, r22
     bb8:	0f 5f       	subi	r16, 0xFF	; 255
     bba:	01 17       	cp	r16, r17
     bbc:	20 f3       	brcs	.-56     	; 0xb86 <LCD_voidDisplayNumber+0x30>
     bbe:	e1 e0       	ldi	r30, 0x01	; 1
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ec 0f       	add	r30, r28
     bc4:	fd 1f       	adc	r31, r29
     bc6:	e1 0f       	add	r30, r17
     bc8:	f1 1d       	adc	r31, r1
     bca:	10 82       	st	Z, r1
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <LCD_voidDisplayNumber+0x80>
     bd0:	0e 94 40 05 	call	0xa80	; 0xa80 <LCD_voidDisplayChar>
     bd4:	1f 5f       	subi	r17, 0xFF	; 255
     bd6:	e1 e0       	ldi	r30, 0x01	; 1
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ec 0f       	add	r30, r28
     bdc:	fd 1f       	adc	r31, r29
     bde:	e1 0f       	add	r30, r17
     be0:	f1 1d       	adc	r31, r1
     be2:	80 81       	ld	r24, Z
     be4:	81 11       	cpse	r24, r1
     be6:	f4 cf       	rjmp	.-24     	; 0xbd0 <LCD_voidDisplayNumber+0x7a>
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <LCD_voidClear>:
     bfc:	40 e0       	ldi	r20, 0x00	; 0
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	62 e0       	ldi	r22, 0x02	; 2
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PRV_voidWriteHalfPort>
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	63 e0       	ldi	r22, 0x03	; 3
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     c20:	8f e9       	ldi	r24, 0x9F	; 159
     c22:	9f e0       	ldi	r25, 0x0F	; 15
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <LCD_voidClear+0x28>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <LCD_voidClear+0x2e>
     c2a:	00 00       	nop
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	63 e0       	ldi	r22, 0x03	; 3
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	0e 94 70 04 	call	0x8e0	; 0x8e0 <PRV_voidWriteHalfPort>
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	63 e0       	ldi	r22, 0x03	; 3
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     c46:	8f e9       	ldi	r24, 0x9F	; 159
     c48:	9f e0       	ldi	r25, 0x0F	; 15
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <LCD_voidClear+0x4e>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <LCD_voidClear+0x54>
     c50:	00 00       	nop
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	63 e0       	ldi	r22, 0x03	; 3
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     c5c:	08 95       	ret

00000c5e <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
	if(copy_u8Position<40)
     c62:	68 32       	cpi	r22, 0x28	; 40
     c64:	a0 f4       	brcc	.+40     	; 0xc8e <LCD_voidGoTOSpecificPosition+0x30>
     c66:	c6 2f       	mov	r28, r22
     c68:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     c70:	d1 30       	cpi	r29, 0x01	; 1
     c72:	19 f0       	breq	.+6      	; 0xc7a <LCD_voidGoTOSpecificPosition+0x1c>
     c74:	d2 30       	cpi	r29, 0x02	; 2
     c76:	31 f0       	breq	.+12     	; 0xc84 <LCD_voidGoTOSpecificPosition+0x26>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     c7a:	8c 2f       	mov	r24, r28
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
		
			
			break;
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     c84:	80 e4       	ldi	r24, 0x40	; 64
     c86:	8c 0f       	add	r24, r28
     c88:	80 68       	ori	r24, 0x80	; 128
     c8a:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     c94:	41 e0       	ldi	r20, 0x01	; 1
     c96:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
     c9a:	08 95       	ret

00000c9c <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     c9c:	41 30       	cpi	r20, 0x01	; 1
     c9e:	19 f0       	breq	.+6      	; 0xca6 <LED_voidOn+0xa>
     ca0:	42 30       	cpi	r20, 0x02	; 2
     ca2:	29 f0       	breq	.+10     	; 0xcae <LED_voidOn+0x12>
     ca4:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
		break;
     cac:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     cb4:	08 95       	ret

00000cb6 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     cb6:	41 30       	cpi	r20, 0x01	; 1
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <LED_voidOff+0xa>
     cba:	42 30       	cpi	r20, 0x02	; 2
     cbc:	29 f0       	breq	.+10     	; 0xcc8 <LED_voidOff+0x12>
     cbe:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
		break;
     cc6:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	0e 94 4a 07 	call	0xe94	; 0xe94 <DIO_voidSetPinValue>
     cce:	08 95       	ret

00000cd0 <main>:

extern u8 global_accessType;

int main()
{
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	0e 94 ca 06 	call	0xd94	; 0xd94 <DIO_voidSetPinDirection>
	APP_init();
     cda:	0e 94 a4 00 	call	0x148	; 0x148 <APP_init>



	while(1)
	{
		if (global_accessType ==accessPermited)
     cde:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	19 f4       	brne	.+6      	; 0xcec <main+0x1c>
		{
		KPD_Interface_user();
     ce6:	0e 94 08 01 	call	0x210	; 0x210 <KPD_Interface_user>
     cea:	f9 cf       	rjmp	.-14     	; 0xcde <main+0xe>
		}
		else if (global_accessType ==accessDenied)
     cec:	81 11       	cpse	r24, r1
     cee:	f7 cf       	rjmp	.-18     	; 0xcde <main+0xe>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
     cf0:	8f eb       	ldi	r24, 0xBF	; 191
     cf2:	92 e0       	ldi	r25, 0x02	; 2
     cf4:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_voidDisplayString>
		}
		
		
		
	}
}
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	08 95       	ret

00000cfe <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
     cfe:	82 30       	cpi	r24, 0x02	; 2
     d00:	59 f0       	breq	.+22     	; 0xd18 <ADC_voidInit+0x1a>
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	81 f0       	breq	.+32     	; 0xd26 <ADC_voidInit+0x28>
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	a1 f4       	brne	.+40     	; 0xd32 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
     d0a:	87 b1       	in	r24, 0x07	; 7
     d0c:	80 64       	ori	r24, 0x40	; 64
     d0e:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     d10:	87 b1       	in	r24, 0x07	; 7
     d12:	8f 77       	andi	r24, 0x7F	; 127
     d14:	87 b9       	out	0x07, r24	; 7
		break;
     d16:	0d c0       	rjmp	.+26     	; 0xd32 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
     d18:	87 b1       	in	r24, 0x07	; 7
     d1a:	8f 7b       	andi	r24, 0xBF	; 191
     d1c:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     d1e:	87 b1       	in	r24, 0x07	; 7
     d20:	8f 77       	andi	r24, 0x7F	; 127
     d22:	87 b9       	out	0x07, r24	; 7
		break;
     d24:	06 c0       	rjmp	.+12     	; 0xd32 <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
     d26:	87 b1       	in	r24, 0x07	; 7
     d28:	80 64       	ori	r24, 0x40	; 64
     d2a:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
     d2c:	87 b1       	in	r24, 0x07	; 7
     d2e:	80 68       	ori	r24, 0x80	; 128
     d30:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
     d32:	87 b1       	in	r24, 0x07	; 7
     d34:	8f 7d       	andi	r24, 0xDF	; 223
     d36:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
     d38:	86 b1       	in	r24, 0x06	; 6
     d3a:	8f 7d       	andi	r24, 0xDF	; 223
     d3c:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
     d3e:	86 b1       	in	r24, 0x06	; 6
     d40:	87 7f       	andi	r24, 0xF7	; 247
     d42:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
     d44:	86 b1       	in	r24, 0x06	; 6
     d46:	84 60       	ori	r24, 0x04	; 4
     d48:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
     d4a:	86 b1       	in	r24, 0x06	; 6
     d4c:	82 60       	ori	r24, 0x02	; 2
     d4e:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
     d50:	86 b1       	in	r24, 0x06	; 6
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
     d56:	86 b1       	in	r24, 0x06	; 6
     d58:	80 68       	ori	r24, 0x80	; 128
     d5a:	86 b9       	out	0x06, r24	; 6
     d5c:	08 95       	ret

00000d5e <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
     d5e:	61 15       	cp	r22, r1
     d60:	71 05       	cpc	r23, r1
     d62:	b9 f0       	breq	.+46     	; 0xd92 <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
     d64:	97 b1       	in	r25, 0x07	; 7
     d66:	90 7e       	andi	r25, 0xE0	; 224
     d68:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
     d6a:	97 b1       	in	r25, 0x07	; 7
     d6c:	89 2b       	or	r24, r25
     d6e:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
     d70:	86 b1       	in	r24, 0x06	; 6
     d72:	80 64       	ori	r24, 0x40	; 64
     d74:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
     d76:	34 9b       	sbis	0x06, 4	; 6
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
     d7a:	84 b1       	in	r24, 0x04	; 4
     d7c:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
     d7e:	96 95       	lsr	r25
     d80:	87 95       	ror	r24
     d82:	96 95       	lsr	r25
     d84:	87 95       	ror	r24
     d86:	fb 01       	movw	r30, r22
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
     d8c:	86 b1       	in	r24, 0x06	; 6
     d8e:	80 61       	ori	r24, 0x10	; 16
     d90:	86 b9       	out	0x06, r24	; 6
     d92:	08 95       	ret

00000d94 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
     d94:	84 30       	cpi	r24, 0x04	; 4
     d96:	08 f0       	brcs	.+2      	; 0xd9a <DIO_voidSetPinDirection+0x6>
     d98:	7c c0       	rjmp	.+248    	; 0xe92 <DIO_voidSetPinDirection+0xfe>
     d9a:	68 30       	cpi	r22, 0x08	; 8
     d9c:	08 f0       	brcs	.+2      	; 0xda0 <DIO_voidSetPinDirection+0xc>
     d9e:	79 c0       	rjmp	.+242    	; 0xe92 <DIO_voidSetPinDirection+0xfe>
     da0:	42 30       	cpi	r20, 0x02	; 2
     da2:	08 f0       	brcs	.+2      	; 0xda6 <DIO_voidSetPinDirection+0x12>
     da4:	76 c0       	rjmp	.+236    	; 0xe92 <DIO_voidSetPinDirection+0xfe>
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	19 f1       	breq	.+70     	; 0xdf0 <DIO_voidSetPinDirection+0x5c>
     daa:	30 f0       	brcs	.+12     	; 0xdb8 <DIO_voidSetPinDirection+0x24>
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	e1 f1       	breq	.+120    	; 0xe28 <DIO_voidSetPinDirection+0x94>
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	09 f4       	brne	.+2      	; 0xdb6 <DIO_voidSetPinDirection+0x22>
     db4:	54 c0       	rjmp	.+168    	; 0xe5e <DIO_voidSetPinDirection+0xca>
     db6:	08 95       	ret
     db8:	44 23       	and	r20, r20
     dba:	71 f0       	breq	.+28     	; 0xdd8 <DIO_voidSetPinDirection+0x44>
     dbc:	41 30       	cpi	r20, 0x01	; 1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <DIO_voidSetPinDirection+0x2e>
     dc0:	68 c0       	rjmp	.+208    	; 0xe92 <DIO_voidSetPinDirection+0xfe>
     dc2:	2a b3       	in	r18, 0x1a	; 26
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_voidSetPinDirection+0x3a>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	6a 95       	dec	r22
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_voidSetPinDirection+0x36>
     dd2:	82 2b       	or	r24, r18
     dd4:	8a bb       	out	0x1a, r24	; 26
     dd6:	08 95       	ret
     dd8:	2a b3       	in	r18, 0x1a	; 26
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_voidSetPinDirection+0x50>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	6a 95       	dec	r22
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_voidSetPinDirection+0x4c>
     de8:	80 95       	com	r24
     dea:	82 23       	and	r24, r18
     dec:	8a bb       	out	0x1a, r24	; 26
     dee:	08 95       	ret
     df0:	44 23       	and	r20, r20
     df2:	71 f0       	breq	.+28     	; 0xe10 <DIO_voidSetPinDirection+0x7c>
     df4:	41 30       	cpi	r20, 0x01	; 1
     df6:	09 f0       	breq	.+2      	; 0xdfa <DIO_voidSetPinDirection+0x66>
     df8:	4c c0       	rjmp	.+152    	; 0xe92 <DIO_voidSetPinDirection+0xfe>
     dfa:	27 b3       	in	r18, 0x17	; 23
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_voidSetPinDirection+0x72>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	6a 95       	dec	r22
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_voidSetPinDirection+0x6e>
     e0a:	82 2b       	or	r24, r18
     e0c:	87 bb       	out	0x17, r24	; 23
     e0e:	08 95       	ret
     e10:	27 b3       	in	r18, 0x17	; 23
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_voidSetPinDirection+0x88>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	6a 95       	dec	r22
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_voidSetPinDirection+0x84>
     e20:	80 95       	com	r24
     e22:	82 23       	and	r24, r18
     e24:	87 bb       	out	0x17, r24	; 23
     e26:	08 95       	ret
     e28:	44 23       	and	r20, r20
     e2a:	69 f0       	breq	.+26     	; 0xe46 <DIO_voidSetPinDirection+0xb2>
     e2c:	41 30       	cpi	r20, 0x01	; 1
     e2e:	89 f5       	brne	.+98     	; 0xe92 <DIO_voidSetPinDirection+0xfe>
     e30:	24 b3       	in	r18, 0x14	; 20
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_voidSetPinDirection+0xa8>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	6a 95       	dec	r22
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_voidSetPinDirection+0xa4>
     e40:	82 2b       	or	r24, r18
     e42:	84 bb       	out	0x14, r24	; 20
     e44:	08 95       	ret
     e46:	24 b3       	in	r18, 0x14	; 20
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_voidSetPinDirection+0xbe>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	6a 95       	dec	r22
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_voidSetPinDirection+0xba>
     e56:	80 95       	com	r24
     e58:	82 23       	and	r24, r18
     e5a:	84 bb       	out	0x14, r24	; 20
     e5c:	08 95       	ret
     e5e:	44 23       	and	r20, r20
     e60:	69 f0       	breq	.+26     	; 0xe7c <DIO_voidSetPinDirection+0xe8>
     e62:	41 30       	cpi	r20, 0x01	; 1
     e64:	b1 f4       	brne	.+44     	; 0xe92 <DIO_voidSetPinDirection+0xfe>
     e66:	21 b3       	in	r18, 0x11	; 17
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_voidSetPinDirection+0xde>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	6a 95       	dec	r22
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_voidSetPinDirection+0xda>
     e76:	82 2b       	or	r24, r18
     e78:	81 bb       	out	0x11, r24	; 17
     e7a:	08 95       	ret
     e7c:	21 b3       	in	r18, 0x11	; 17
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_voidSetPinDirection+0xf4>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	6a 95       	dec	r22
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_voidSetPinDirection+0xf0>
     e8c:	80 95       	com	r24
     e8e:	82 23       	and	r24, r18
     e90:	81 bb       	out	0x11, r24	; 17
     e92:	08 95       	ret

00000e94 <DIO_voidSetPinValue>:
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	08 f0       	brcs	.+2      	; 0xe9a <DIO_voidSetPinValue+0x6>
     e98:	7c c0       	rjmp	.+248    	; 0xf92 <DIO_voidSetPinValue+0xfe>
     e9a:	68 30       	cpi	r22, 0x08	; 8
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <DIO_voidSetPinValue+0xc>
     e9e:	79 c0       	rjmp	.+242    	; 0xf92 <DIO_voidSetPinValue+0xfe>
     ea0:	42 30       	cpi	r20, 0x02	; 2
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <DIO_voidSetPinValue+0x12>
     ea4:	76 c0       	rjmp	.+236    	; 0xf92 <DIO_voidSetPinValue+0xfe>
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	19 f1       	breq	.+70     	; 0xef0 <DIO_voidSetPinValue+0x5c>
     eaa:	30 f0       	brcs	.+12     	; 0xeb8 <DIO_voidSetPinValue+0x24>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	e1 f1       	breq	.+120    	; 0xf28 <DIO_voidSetPinValue+0x94>
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <DIO_voidSetPinValue+0x22>
     eb4:	54 c0       	rjmp	.+168    	; 0xf5e <DIO_voidSetPinValue+0xca>
     eb6:	08 95       	ret
     eb8:	44 23       	and	r20, r20
     eba:	71 f0       	breq	.+28     	; 0xed8 <DIO_voidSetPinValue+0x44>
     ebc:	41 30       	cpi	r20, 0x01	; 1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <DIO_voidSetPinValue+0x2e>
     ec0:	68 c0       	rjmp	.+208    	; 0xf92 <DIO_voidSetPinValue+0xfe>
     ec2:	2b b3       	in	r18, 0x1b	; 27
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_voidSetPinValue+0x3a>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	6a 95       	dec	r22
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_voidSetPinValue+0x36>
     ed2:	82 2b       	or	r24, r18
     ed4:	8b bb       	out	0x1b, r24	; 27
     ed6:	08 95       	ret
     ed8:	2b b3       	in	r18, 0x1b	; 27
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_voidSetPinValue+0x50>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	6a 95       	dec	r22
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_voidSetPinValue+0x4c>
     ee8:	80 95       	com	r24
     eea:	82 23       	and	r24, r18
     eec:	8b bb       	out	0x1b, r24	; 27
     eee:	08 95       	ret
     ef0:	44 23       	and	r20, r20
     ef2:	71 f0       	breq	.+28     	; 0xf10 <DIO_voidSetPinValue+0x7c>
     ef4:	41 30       	cpi	r20, 0x01	; 1
     ef6:	09 f0       	breq	.+2      	; 0xefa <DIO_voidSetPinValue+0x66>
     ef8:	4c c0       	rjmp	.+152    	; 0xf92 <DIO_voidSetPinValue+0xfe>
     efa:	28 b3       	in	r18, 0x18	; 24
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_voidSetPinValue+0x72>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	6a 95       	dec	r22
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_voidSetPinValue+0x6e>
     f0a:	82 2b       	or	r24, r18
     f0c:	88 bb       	out	0x18, r24	; 24
     f0e:	08 95       	ret
     f10:	28 b3       	in	r18, 0x18	; 24
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_voidSetPinValue+0x88>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	6a 95       	dec	r22
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_voidSetPinValue+0x84>
     f20:	80 95       	com	r24
     f22:	82 23       	and	r24, r18
     f24:	88 bb       	out	0x18, r24	; 24
     f26:	08 95       	ret
     f28:	44 23       	and	r20, r20
     f2a:	69 f0       	breq	.+26     	; 0xf46 <DIO_voidSetPinValue+0xb2>
     f2c:	41 30       	cpi	r20, 0x01	; 1
     f2e:	89 f5       	brne	.+98     	; 0xf92 <DIO_voidSetPinValue+0xfe>
     f30:	25 b3       	in	r18, 0x15	; 21
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <DIO_voidSetPinValue+0xa8>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	6a 95       	dec	r22
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <DIO_voidSetPinValue+0xa4>
     f40:	82 2b       	or	r24, r18
     f42:	85 bb       	out	0x15, r24	; 21
     f44:	08 95       	ret
     f46:	25 b3       	in	r18, 0x15	; 21
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_voidSetPinValue+0xbe>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	6a 95       	dec	r22
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_voidSetPinValue+0xba>
     f56:	80 95       	com	r24
     f58:	82 23       	and	r24, r18
     f5a:	85 bb       	out	0x15, r24	; 21
     f5c:	08 95       	ret
     f5e:	44 23       	and	r20, r20
     f60:	69 f0       	breq	.+26     	; 0xf7c <DIO_voidSetPinValue+0xe8>
     f62:	41 30       	cpi	r20, 0x01	; 1
     f64:	b1 f4       	brne	.+44     	; 0xf92 <DIO_voidSetPinValue+0xfe>
     f66:	22 b3       	in	r18, 0x12	; 18
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_voidSetPinValue+0xde>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	6a 95       	dec	r22
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_voidSetPinValue+0xda>
     f76:	82 2b       	or	r24, r18
     f78:	82 bb       	out	0x12, r24	; 18
     f7a:	08 95       	ret
     f7c:	22 b3       	in	r18, 0x12	; 18
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_voidSetPinValue+0xf4>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	6a 95       	dec	r22
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_voidSetPinValue+0xf0>
     f8c:	80 95       	com	r24
     f8e:	82 23       	and	r24, r18
     f90:	82 bb       	out	0x12, r24	; 18
     f92:	08 95       	ret

00000f94 <DIO_voidGetPinValue>:
     f94:	84 30       	cpi	r24, 0x04	; 4
     f96:	c0 f5       	brcc	.+112    	; 0x1008 <DIO_voidGetPinValue+0x74>
     f98:	68 30       	cpi	r22, 0x08	; 8
     f9a:	b0 f5       	brcc	.+108    	; 0x1008 <DIO_voidGetPinValue+0x74>
     f9c:	41 15       	cp	r20, r1
     f9e:	51 05       	cpc	r21, r1
     fa0:	99 f1       	breq	.+102    	; 0x1008 <DIO_voidGetPinValue+0x74>
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	89 f0       	breq	.+34     	; 0xfc8 <DIO_voidGetPinValue+0x34>
     fa6:	28 f0       	brcs	.+10     	; 0xfb2 <DIO_voidGetPinValue+0x1e>
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	c9 f0       	breq	.+50     	; 0xfde <DIO_voidGetPinValue+0x4a>
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	11 f1       	breq	.+68     	; 0xff4 <DIO_voidGetPinValue+0x60>
     fb0:	08 95       	ret
     fb2:	89 b3       	in	r24, 0x19	; 25
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_voidGetPinValue+0x28>
     fb8:	95 95       	asr	r25
     fba:	87 95       	ror	r24
     fbc:	6a 95       	dec	r22
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_voidGetPinValue+0x24>
     fc0:	81 70       	andi	r24, 0x01	; 1
     fc2:	fa 01       	movw	r30, r20
     fc4:	80 83       	st	Z, r24
     fc6:	08 95       	ret
     fc8:	86 b3       	in	r24, 0x16	; 22
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_voidGetPinValue+0x3e>
     fce:	95 95       	asr	r25
     fd0:	87 95       	ror	r24
     fd2:	6a 95       	dec	r22
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_voidGetPinValue+0x3a>
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	fa 01       	movw	r30, r20
     fda:	80 83       	st	Z, r24
     fdc:	08 95       	ret
     fde:	83 b3       	in	r24, 0x13	; 19
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_voidGetPinValue+0x54>
     fe4:	95 95       	asr	r25
     fe6:	87 95       	ror	r24
     fe8:	6a 95       	dec	r22
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_voidGetPinValue+0x50>
     fec:	81 70       	andi	r24, 0x01	; 1
     fee:	fa 01       	movw	r30, r20
     ff0:	80 83       	st	Z, r24
     ff2:	08 95       	ret
     ff4:	80 b3       	in	r24, 0x10	; 16
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_voidGetPinValue+0x6a>
     ffa:	95 95       	asr	r25
     ffc:	87 95       	ror	r24
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_voidGetPinValue+0x66>
    1002:	81 70       	andi	r24, 0x01	; 1
    1004:	fa 01       	movw	r30, r20
    1006:	80 83       	st	Z, r24
    1008:	08 95       	ret

0000100a <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    100a:	84 30       	cpi	r24, 0x04	; 4
    100c:	a8 f5       	brcc	.+106    	; 0x1078 <DIO_voidActivePinInPullUpResistance+0x6e>
    100e:	68 30       	cpi	r22, 0x08	; 8
    1010:	98 f5       	brcc	.+102    	; 0x1078 <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	89 f0       	breq	.+34     	; 0x1038 <DIO_voidActivePinInPullUpResistance+0x2e>
    1016:	28 f0       	brcs	.+10     	; 0x1022 <DIO_voidActivePinInPullUpResistance+0x18>
    1018:	82 30       	cpi	r24, 0x02	; 2
    101a:	c9 f0       	breq	.+50     	; 0x104e <DIO_voidActivePinInPullUpResistance+0x44>
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	11 f1       	breq	.+68     	; 0x1064 <DIO_voidActivePinInPullUpResistance+0x5a>
    1020:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    1022:	2b b3       	in	r18, 0x1b	; 27
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_voidActivePinInPullUpResistance+0x24>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	6a 95       	dec	r22
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_voidActivePinInPullUpResistance+0x20>
    1032:	82 2b       	or	r24, r18
    1034:	8b bb       	out	0x1b, r24	; 27
			break;
    1036:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    1038:	28 b3       	in	r18, 0x18	; 24
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_voidActivePinInPullUpResistance+0x3a>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	6a 95       	dec	r22
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_voidActivePinInPullUpResistance+0x36>
    1048:	82 2b       	or	r24, r18
    104a:	88 bb       	out	0x18, r24	; 24
			break;
    104c:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    104e:	25 b3       	in	r18, 0x15	; 21
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_voidActivePinInPullUpResistance+0x50>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_voidActivePinInPullUpResistance+0x4c>
    105e:	82 2b       	or	r24, r18
    1060:	85 bb       	out	0x15, r24	; 21
			break;
    1062:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    1064:	22 b3       	in	r18, 0x12	; 18
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_voidActivePinInPullUpResistance+0x66>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	6a 95       	dec	r22
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_voidActivePinInPullUpResistance+0x62>
    1074:	82 2b       	or	r24, r18
    1076:	82 bb       	out	0x12, r24	; 18
    1078:	08 95       	ret

0000107a <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    107a:	8f b7       	in	r24, 0x3f	; 63
    107c:	80 68       	ori	r24, 0x80	; 128
    107e:	8f bf       	out	0x3f, r24	; 63
    1080:	08 95       	ret

00001082 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    1082:	83 b7       	in	r24, 0x33	; 51
    1084:	8f 7b       	andi	r24, 0xBF	; 191
    1086:	83 bf       	out	0x33, r24	; 51
    1088:	83 b7       	in	r24, 0x33	; 51
    108a:	88 60       	ori	r24, 0x08	; 8
    108c:	83 bf       	out	0x33, r24	; 51
    108e:	83 b7       	in	r24, 0x33	; 51
    1090:	8f 7e       	andi	r24, 0xEF	; 239
    1092:	83 bf       	out	0x33, r24	; 51
    1094:	83 b7       	in	r24, 0x33	; 51
    1096:	8f 7d       	andi	r24, 0xDF	; 223
    1098:	83 bf       	out	0x33, r24	; 51
    109a:	89 b7       	in	r24, 0x39	; 57
    109c:	82 60       	ori	r24, 0x02	; 2
    109e:	89 bf       	out	0x39, r24	; 57
    10a0:	89 ef       	ldi	r24, 0xF9	; 249
    10a2:	8c bf       	out	0x3c, r24	; 60
    10a4:	08 95       	ret

000010a6 <TMR0_voidStart>:
    10a6:	83 b7       	in	r24, 0x33	; 51
    10a8:	81 60       	ori	r24, 0x01	; 1
    10aa:	83 bf       	out	0x33, r24	; 51
    10ac:	83 b7       	in	r24, 0x33	; 51
    10ae:	82 60       	ori	r24, 0x02	; 2
    10b0:	83 bf       	out	0x33, r24	; 51
    10b2:	83 b7       	in	r24, 0x33	; 51
    10b4:	8b 7f       	andi	r24, 0xFB	; 251
    10b6:	83 bf       	out	0x33, r24	; 51
    10b8:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <local_u16Counter+0x1>
    10bc:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <local_u16Counter>
    10c0:	08 95       	ret

000010c2 <TMR0_voidStop>:
    10c2:	83 b7       	in	r24, 0x33	; 51
    10c4:	8e 7f       	andi	r24, 0xFE	; 254
    10c6:	83 bf       	out	0x33, r24	; 51
    10c8:	83 b7       	in	r24, 0x33	; 51
    10ca:	8d 7f       	andi	r24, 0xFD	; 253
    10cc:	83 bf       	out	0x33, r24	; 51
    10ce:	83 b7       	in	r24, 0x33	; 51
    10d0:	8b 7f       	andi	r24, 0xFB	; 251
    10d2:	83 bf       	out	0x33, r24	; 51
    10d4:	08 95       	ret

000010d6 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	21 f0       	breq	.+8      	; 0x10e2 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    10da:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <PRV_pFunCallBackCTC+0x1>
    10de:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <PRV_pFunCallBackCTC>
    10e2:	08 95       	ret

000010e4 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    10e4:	88 b7       	in	r24, 0x38	; 56
    10e6:	82 60       	ori	r24, 0x02	; 2
    10e8:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    10ea:	88 b7       	in	r24, 0x38	; 56
    10ec:	81 60       	ori	r24, 0x01	; 1
    10ee:	88 bf       	out	0x38, r24	; 56
    10f0:	08 95       	ret

000010f2 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
	
	
	local_u16Counter++;
    1114:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <local_u16Counter>
    1118:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <local_u16Counter+0x1>
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <local_u16Counter+0x1>
    1122:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    1126:	88 3e       	cpi	r24, 0xE8	; 232
    1128:	93 40       	sbci	r25, 0x03	; 3
    112a:	69 f4       	brne	.+26     	; 0x1146 <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    112c:	81 e7       	ldi	r24, 0x71	; 113
    112e:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    1130:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <local_u16Counter+0x1>
    1134:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    1138:	e0 91 d4 02 	lds	r30, 0x02D4	; 0x8002d4 <PRV_pFunCallBackOVF>
    113c:	f0 91 d5 02 	lds	r31, 0x02D5	; 0x8002d5 <PRV_pFunCallBackOVF+0x1>
    1140:	30 97       	sbiw	r30, 0x00	; 0
    1142:	09 f0       	breq	.+2      	; 0x1146 <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    1144:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    1146:	ff 91       	pop	r31
    1148:	ef 91       	pop	r30
    114a:	bf 91       	pop	r27
    114c:	af 91       	pop	r26
    114e:	9f 91       	pop	r25
    1150:	8f 91       	pop	r24
    1152:	7f 91       	pop	r23
    1154:	6f 91       	pop	r22
    1156:	5f 91       	pop	r21
    1158:	4f 91       	pop	r20
    115a:	3f 91       	pop	r19
    115c:	2f 91       	pop	r18
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	0f 92       	push	r0
    1170:	11 24       	eor	r1, r1
    1172:	2f 93       	push	r18
    1174:	3f 93       	push	r19
    1176:	4f 93       	push	r20
    1178:	5f 93       	push	r21
    117a:	6f 93       	push	r22
    117c:	7f 93       	push	r23
    117e:	8f 93       	push	r24
    1180:	9f 93       	push	r25
    1182:	af 93       	push	r26
    1184:	bf 93       	push	r27
    1186:	ef 93       	push	r30
    1188:	ff 93       	push	r31
	

	
	local_u16Counter++;
    118a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <local_u16Counter>
    118e:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <local_u16Counter+0x1>
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <local_u16Counter+0x1>
    1198:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    119c:	88 38       	cpi	r24, 0x88	; 136
    119e:	93 41       	sbci	r25, 0x13	; 19
    11a0:	69 f4       	brne	.+26     	; 0x11bc <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    11a2:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <local_u16Counter+0x1>
    11a6:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    11aa:	e0 91 d2 02 	lds	r30, 0x02D2	; 0x8002d2 <PRV_pFunCallBackCTC>
    11ae:	f0 91 d3 02 	lds	r31, 0x02D3	; 0x8002d3 <PRV_pFunCallBackCTC+0x1>
    11b2:	30 97       	sbiw	r30, 0x00	; 0
    11b4:	19 f0       	breq	.+6      	; 0x11bc <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    11b6:	09 95       	icall
			TMR0clear_flag();
    11b8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    11bc:	ff 91       	pop	r31
    11be:	ef 91       	pop	r30
    11c0:	bf 91       	pop	r27
    11c2:	af 91       	pop	r26
    11c4:	9f 91       	pop	r25
    11c6:	8f 91       	pop	r24
    11c8:	7f 91       	pop	r23
    11ca:	6f 91       	pop	r22
    11cc:	5f 91       	pop	r21
    11ce:	4f 91       	pop	r20
    11d0:	3f 91       	pop	r19
    11d2:	2f 91       	pop	r18
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <TWI_voidInitMaster>:
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
		
		while(0==GET_BIT(TWCR_REG,TWINT));
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    11de:	8c e0       	ldi	r24, 0x0C	; 12
    11e0:	80 b9       	out	0x00, r24	; 0
    11e2:	81 b1       	in	r24, 0x01	; 1
    11e4:	8d 7f       	andi	r24, 0xFD	; 253
    11e6:	81 b9       	out	0x01, r24	; 1
    11e8:	81 b1       	in	r24, 0x01	; 1
    11ea:	8e 7f       	andi	r24, 0xFE	; 254
    11ec:	81 b9       	out	0x01, r24	; 1
    11ee:	86 b7       	in	r24, 0x36	; 54
    11f0:	84 60       	ori	r24, 0x04	; 4
    11f2:	86 bf       	out	0x36, r24	; 54
    11f4:	08 95       	ret

000011f6 <TWI_voidSendStartCondition>:
    11f6:	86 b7       	in	r24, 0x36	; 54
    11f8:	80 62       	ori	r24, 0x20	; 32
    11fa:	86 bf       	out	0x36, r24	; 54
    11fc:	86 b7       	in	r24, 0x36	; 54
    11fe:	80 68       	ori	r24, 0x80	; 128
    1200:	86 bf       	out	0x36, r24	; 54
    1202:	06 b6       	in	r0, 0x36	; 54
    1204:	07 fe       	sbrs	r0, 7
    1206:	fd cf       	rjmp	.-6      	; 0x1202 <TWI_voidSendStartCondition+0xc>
    1208:	81 b1       	in	r24, 0x01	; 1
    120a:	88 7f       	andi	r24, 0xF8	; 248
    120c:	88 30       	cpi	r24, 0x08	; 8
    120e:	e1 f7       	brne	.-8      	; 0x1208 <TWI_voidSendStartCondition+0x12>
    1210:	08 95       	ret

00001212 <TWI_voidSendStopCondition>:
    1212:	86 b7       	in	r24, 0x36	; 54
    1214:	80 61       	ori	r24, 0x10	; 16
    1216:	86 bf       	out	0x36, r24	; 54
    1218:	86 b7       	in	r24, 0x36	; 54
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	86 bf       	out	0x36, r24	; 54
    121e:	08 95       	ret

00001220 <TWI_voidSendSlaveAddWithWrite>:
    1220:	88 23       	and	r24, r24
    1222:	94 f0       	brlt	.+36     	; 0x1248 <TWI_voidSendSlaveAddWithWrite+0x28>
    1224:	88 0f       	add	r24, r24
    1226:	83 b9       	out	0x03, r24	; 3
    1228:	83 b1       	in	r24, 0x03	; 3
    122a:	8e 7f       	andi	r24, 0xFE	; 254
    122c:	83 b9       	out	0x03, r24	; 3
    122e:	86 b7       	in	r24, 0x36	; 54
    1230:	8f 7d       	andi	r24, 0xDF	; 223
    1232:	86 bf       	out	0x36, r24	; 54
    1234:	86 b7       	in	r24, 0x36	; 54
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	86 bf       	out	0x36, r24	; 54
    123a:	06 b6       	in	r0, 0x36	; 54
    123c:	07 fe       	sbrs	r0, 7
    123e:	fd cf       	rjmp	.-6      	; 0x123a <TWI_voidSendSlaveAddWithWrite+0x1a>
    1240:	81 b1       	in	r24, 0x01	; 1
    1242:	88 7f       	andi	r24, 0xF8	; 248
    1244:	88 31       	cpi	r24, 0x18	; 24
    1246:	e1 f7       	brne	.-8      	; 0x1240 <TWI_voidSendSlaveAddWithWrite+0x20>
    1248:	08 95       	ret

0000124a <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    124a:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    124c:	86 b7       	in	r24, 0x36	; 54
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    1252:	06 b6       	in	r0, 0x36	; 54
    1254:	07 fe       	sbrs	r0, 7
    1256:	fd cf       	rjmp	.-6      	; 0x1252 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    1258:	81 b1       	in	r24, 0x01	; 1
    125a:	88 7f       	andi	r24, 0xF8	; 248
    125c:	88 32       	cpi	r24, 0x28	; 40
    125e:	e1 f7       	brne	.-8      	; 0x1258 <TWI_voidTransmitMasterDataByte+0xe>
}
    1260:	08 95       	ret

00001262 <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    1262:	8b b1       	in	r24, 0x0b	; 11
    1264:	8d 7f       	andi	r24, 0xFD	; 253
    1266:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    1268:	87 e6       	ldi	r24, 0x67	; 103
    126a:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    126c:	8a b1       	in	r24, 0x0a	; 10
    126e:	8b 7f       	andi	r24, 0xFB	; 251
    1270:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    1272:	86 e8       	ldi	r24, 0x86	; 134
    1274:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    1276:	8a b1       	in	r24, 0x0a	; 10
    1278:	80 61       	ori	r24, 0x10	; 16
    127a:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    127c:	8a b1       	in	r24, 0x0a	; 10
    127e:	88 60       	ori	r24, 0x08	; 8
    1280:	8a b9       	out	0x0a, r24	; 10
    1282:	08 95       	ret

00001284 <__udivmodsi4>:
    1284:	a1 e2       	ldi	r26, 0x21	; 33
    1286:	1a 2e       	mov	r1, r26
    1288:	aa 1b       	sub	r26, r26
    128a:	bb 1b       	sub	r27, r27
    128c:	fd 01       	movw	r30, r26
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <__udivmodsi4_ep>

00001290 <__udivmodsi4_loop>:
    1290:	aa 1f       	adc	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	ee 1f       	adc	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	a2 17       	cp	r26, r18
    129a:	b3 07       	cpc	r27, r19
    129c:	e4 07       	cpc	r30, r20
    129e:	f5 07       	cpc	r31, r21
    12a0:	20 f0       	brcs	.+8      	; 0x12aa <__udivmodsi4_ep>
    12a2:	a2 1b       	sub	r26, r18
    12a4:	b3 0b       	sbc	r27, r19
    12a6:	e4 0b       	sbc	r30, r20
    12a8:	f5 0b       	sbc	r31, r21

000012aa <__udivmodsi4_ep>:
    12aa:	66 1f       	adc	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	1a 94       	dec	r1
    12b4:	69 f7       	brne	.-38     	; 0x1290 <__udivmodsi4_loop>
    12b6:	60 95       	com	r22
    12b8:	70 95       	com	r23
    12ba:	80 95       	com	r24
    12bc:	90 95       	com	r25
    12be:	9b 01       	movw	r18, r22
    12c0:	ac 01       	movw	r20, r24
    12c2:	bd 01       	movw	r22, r26
    12c4:	cf 01       	movw	r24, r30
    12c6:	08 95       	ret

000012c8 <_exit>:
    12c8:	f8 94       	cli

000012ca <__stop_program>:
    12ca:	ff cf       	rjmp	.-2      	; 0x12ca <__stop_program>
