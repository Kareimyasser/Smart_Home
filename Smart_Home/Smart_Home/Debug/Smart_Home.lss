
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000260  00800060  000012f8  0000138c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008002c0  008002c0  000015ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043f7  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010b5  00000000  00000000  00005daf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023fd  00000000  00000000  00006e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d0  00000000  00000000  00009264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001107  00000000  00000000  00009a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000241f  00000000  00000000  0000ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000cf5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ca 08 	jmp	0x1194	; 0x1194 <__vector_10>
      2c:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 06 	call	0xcfc	; 0xcfc <main>
      8a:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_DisplayTemp>:
	}
	else
	{
		//error massage
	}
}
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	19 82       	std	Y+1, r1	; 0x01
      9e:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
      a2:	80 e8       	ldi	r24, 0x80	; 128
      a4:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
      a8:	8c e8       	ldi	r24, 0x8C	; 140
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayString>
      b0:	be 01       	movw	r22, r28
      b2:	6f 5f       	subi	r22, 0xFF	; 255
      b4:	7f 4f       	sbci	r23, 0xFF	; 255
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ADC_voidGetDigitalValue>
      bc:	6b e0       	ldi	r22, 0x0B	; 11
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_voidGoTOSpecificPosition>
      c4:	2f ef       	ldi	r18, 0xFF	; 255
      c6:	81 ee       	ldi	r24, 0xE1	; 225
      c8:	94 e0       	ldi	r25, 0x04	; 4
      ca:	21 50       	subi	r18, 0x01	; 1
      cc:	80 40       	sbci	r24, 0x00	; 0
      ce:	90 40       	sbci	r25, 0x00	; 0
      d0:	e1 f7       	brne	.-8      	; 0xca <LCD_DisplayTemp+0x38>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_DisplayTemp+0x42>
      d4:	00 00       	nop
      d6:	69 81       	ldd	r22, Y+1	; 0x01
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_voidDisplayNumber>
      e2:	2f ef       	ldi	r18, 0xFF	; 255
      e4:	83 ec       	ldi	r24, 0xC3	; 195
      e6:	99 e0       	ldi	r25, 0x09	; 9
      e8:	21 50       	subi	r18, 0x01	; 1
      ea:	80 40       	sbci	r24, 0x00	; 0
      ec:	90 40       	sbci	r25, 0x00	; 0
      ee:	e1 f7       	brne	.-8      	; 0xe8 <LCD_DisplayTemp+0x56>
      f0:	00 c0       	rjmp	.+0      	; 0xf2 <LCD_DisplayTemp+0x60>
      f2:	00 00       	nop
      f4:	80 ec       	ldi	r24, 0xC0	; 192
      f6:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
      fa:	8b e9       	ldi	r24, 0x9B	; 155
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
     102:	26 c0       	rjmp	.+76     	; 0x150 <LCD_DisplayTemp+0xbe>
     104:	81 e6       	ldi	r24, 0x61	; 97
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
     10c:	be 01       	movw	r22, r28
     10e:	6f 5f       	subi	r22, 0xFF	; 255
     110:	7f 4f       	sbci	r23, 0xFF	; 255
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ADC_voidGetDigitalValue>
     118:	6b e0       	ldi	r22, 0x0B	; 11
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	0e 94 45 06 	call	0xc8a	; 0xc8a <LCD_voidGoTOSpecificPosition>
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	81 ee       	ldi	r24, 0xE1	; 225
     124:	94 e0       	ldi	r25, 0x04	; 4
     126:	21 50       	subi	r18, 0x01	; 1
     128:	80 40       	sbci	r24, 0x00	; 0
     12a:	90 40       	sbci	r25, 0x00	; 0
     12c:	e1 f7       	brne	.-8      	; 0x126 <LCD_DisplayTemp+0x94>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_DisplayTemp+0x9e>
     130:	00 00       	nop
     132:	69 81       	ldd	r22, Y+1	; 0x01
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 c1 05 	call	0xb82	; 0xb82 <LCD_voidDisplayNumber>
     13e:	2f ef       	ldi	r18, 0xFF	; 255
     140:	81 ee       	ldi	r24, 0xE1	; 225
     142:	94 e0       	ldi	r25, 0x04	; 4
     144:	21 50       	subi	r18, 0x01	; 1
     146:	80 40       	sbci	r24, 0x00	; 0
     148:	90 40       	sbci	r25, 0x00	; 0
     14a:	e1 f7       	brne	.-8      	; 0x144 <LCD_DisplayTemp+0xb2>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_DisplayTemp+0xbc>
     14e:	00 00       	nop
     150:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     154:	8f 3f       	cpi	r24, 0xFF	; 255
     156:	b1 f2       	breq	.-84     	; 0x104 <LCD_DisplayTemp+0x72>
     158:	80 33       	cpi	r24, 0x30	; 48
     15a:	11 f4       	brne	.+4      	; 0x160 <LCD_DisplayTemp+0xce>
     15c:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
     160:	0e 94 88 08 	call	0x1110	; 0x1110 <TMR0clear_flag>
     164:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
     168:	0f 90       	pop	r0
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <HOME_voidInit>:
     170:	0e 94 78 03 	call	0x6f0	; 0x6f0 <EEPROM_voidInit>
     174:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_voidInit>
     178:	0e 94 a6 03 	call	0x74c	; 0x74c <KPD_voidInit>
     17c:	0e 94 75 03 	call	0x6ea	; 0x6ea <BL_voidInit>
     180:	41 e0       	ldi	r20, 0x01	; 1
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	83 e0       	ldi	r24, 0x03	; 3
     186:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     18a:	40 e0       	ldi	r20, 0x00	; 0
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	83 e0       	ldi	r24, 0x03	; 3
     190:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     194:	0e 94 53 08 	call	0x10a6	; 0x10a6 <GI_voidEnable>
     198:	0e 94 57 08 	call	0x10ae	; 0x10ae <TMR0_voidInit>
     19c:	63 e0       	ldi	r22, 0x03	; 3
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LED_voidInit>
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LED_voidInit>
     1ac:	62 e0       	ldi	r22, 0x02	; 2
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LED_voidInit>
     1b4:	63 e0       	ldi	r22, 0x03	; 3
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LED_voidInit>
     1bc:	62 e0       	ldi	r22, 0x02	; 2
     1be:	83 e0       	ldi	r24, 0x03	; 3
     1c0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <LED_voidInit>
     1c4:	08 95       	ret

000001c6 <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     1c6:	80 e7       	ldi	r24, 0x70	; 112
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     1ce:	80 ec       	ldi	r24, 0xC0	; 192
     1d0:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     1d4:	81 e8       	ldi	r24, 0x81	; 129
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	2f ef       	ldi	r18, 0xFF	; 255
     1de:	83 ed       	ldi	r24, 0xD3	; 211
     1e0:	90 e3       	ldi	r25, 0x30	; 48
     1e2:	21 50       	subi	r18, 0x01	; 1
     1e4:	80 40       	sbci	r24, 0x00	; 0
     1e6:	90 40       	sbci	r25, 0x00	; 0
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <WelcomeScreen+0x1c>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <WelcomeScreen+0x26>
     1ec:	00 00       	nop
     1ee:	08 95       	ret

000001f0 <APP_init>:




void APP_init(void)
{
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
     1f8:	a0 97       	sbiw	r28, 0x20	; 32
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     204:	0e 94 b8 00 	call	0x170	; 0x170 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_INTRNAL);
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	0e 94 95 06 	call	0xd2a	; 0xd2a <ADC_voidInit>
	
	
    // display the welcome screen
    WelcomeScreen();
     20e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <WelcomeScreen>
	LCD_voidClear();
     212:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
     216:	88 e0       	ldi	r24, 0x08	; 8
     218:	e5 e6       	ldi	r30, 0x65	; 101
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	de 01       	movw	r26, r28
     21e:	11 96       	adiw	r26, 0x01	; 1
     220:	01 90       	ld	r0, Z+
     222:	0d 92       	st	X+, r0
     224:	8a 95       	dec	r24
     226:	e1 f7       	brne	.-8      	; 0x220 <APP_init+0x30>
	u8 testuserpass[8]={"22222222"};
     228:	88 e0       	ldi	r24, 0x08	; 8
     22a:	ee e6       	ldi	r30, 0x6E	; 110
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	de 01       	movw	r26, r28
     230:	19 96       	adiw	r26, 0x09	; 9
     232:	01 90       	ld	r0, Z+
     234:	0d 92       	st	X+, r0
     236:	8a 95       	dec	r24
     238:	e1 f7       	brne	.-8      	; 0x232 <APP_init+0x42>
	u8 testadminname[8]={"12345678"};
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	e7 e7       	ldi	r30, 0x77	; 119
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	de 01       	movw	r26, r28
     242:	51 96       	adiw	r26, 0x11	; 17
     244:	01 90       	ld	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	8a 95       	dec	r24
     24a:	e1 f7       	brne	.-8      	; 0x244 <APP_init+0x54>
	u8 testadminpass[8]={"12345678"};
     24c:	88 e0       	ldi	r24, 0x08	; 8
     24e:	e7 e7       	ldi	r30, 0x77	; 119
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	de 01       	movw	r26, r28
     254:	59 96       	adiw	r26, 0x19	; 25
     256:	01 90       	ld	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	8a 95       	dec	r24
     25c:	e1 f7       	brne	.-8      	; 0x256 <APP_init+0x66>
	u8 usertype;	
	
	EEPROM_voidWritePage(304,&testusername[0]);
     25e:	be 01       	movw	r22, r28
     260:	6f 5f       	subi	r22, 0xFF	; 255
     262:	7f 4f       	sbci	r23, 0xFF	; 255
     264:	80 e3       	ldi	r24, 0x30	; 48
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(312,&testuserpass[0]);
     26c:	be 01       	movw	r22, r28
     26e:	67 5f       	subi	r22, 0xF7	; 247
     270:	7f 4f       	sbci	r23, 0xFF	; 255
     272:	88 e3       	ldi	r24, 0x38	; 56
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
     27a:	be 01       	movw	r22, r28
     27c:	6f 5e       	subi	r22, 0xEF	; 239
     27e:	7f 4f       	sbci	r23, 0xFF	; 255
     280:	80 ef       	ldi	r24, 0xF0	; 240
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
     288:	be 01       	movw	r22, r28
     28a:	67 5e       	subi	r22, 0xE7	; 231
     28c:	7f 4f       	sbci	r23, 0xFF	; 255
     28e:	88 ef       	ldi	r24, 0xF8	; 248
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_voidWritePage>





}
     296:	a0 96       	adiw	r28, 0x20	; 32
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	08 95       	ret

000002a8 <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     2ae:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     2b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     2b6:	08 95       	ret

000002b8 <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     2b8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     2bc:	89 e4       	ldi	r24, 0x49	; 73
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 81 08 	call	0x1102	; 0x1102 <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     2c4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <TMR0_voidStart>
        LCD_voidClear();
     2c8:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     2cc:	8f e8       	ldi	r24, 0x8F	; 143
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     2d4:	80 ec       	ldi	r24, 0xC0	; 192
     2d6:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temperature");
     2da:	8c e9       	ldi	r24, 0x9C	; 156
     2dc:	91 e0       	ldi	r25, 0x01	; 1
     2de:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayString>
        Reset_AllKPDValues();
     2e2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     2e6:	0c c0       	rjmp	.+24     	; 0x300 <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     2e8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     2ec:	80 33       	cpi	r24, 0x30	; 48
     2ee:	21 f4       	brne	.+8      	; 0x2f8 <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
     2f6:	08 c0       	rjmp	.+16     	; 0x308 <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     2f8:	84 e6       	ldi	r24, 0x64	; 100
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temperature");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     300:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     304:	8f 3f       	cpi	r24, 0xFF	; 255
     306:	81 f3       	breq	.-32     	; 0x2e8 <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     308:	0e 94 77 08 	call	0x10ee	; 0x10ee <TMR0_voidStop>
        switch (Local_copyKPDValue)
     30c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     310:	81 33       	cpi	r24, 0x31	; 49
     312:	19 f0       	breq	.+6      	; 0x31a <KPD_Interface_user+0x62>
     314:	82 33       	cpi	r24, 0x32	; 50
     316:	79 f0       	breq	.+30     	; 0x336 <KPD_Interface_user+0x7e>
     318:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     31a:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     31e:	8a ea       	ldi	r24, 0xAA	; 170
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     326:	80 ec       	ldi	r24, 0xC0	; 192
     328:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     32c:	87 eb       	ldi	r24, 0xB7	; 183
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>

            break;
     334:	08 95       	ret

        case ('2'):

            LCD_voidClear();
     336:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     33a:	86 ec       	ldi	r24, 0xC6	; 198
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     342:	80 ec       	ldi	r24, 0xC0	; 192
     344:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     348:	86 ed       	ldi	r24, 0xD6	; 214
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     350:	89 e4       	ldi	r24, 0x49	; 73
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 81 08 	call	0x1102	; 0x1102 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     358:	0e 94 69 08 	call	0x10d2	; 0x10d2 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     35c:	0c c0       	rjmp	.+24     	; 0x376 <KPD_Interface_user+0xbe>
            {
                KPD_voidGetValue(&local_lightNum);
     35e:	83 e6       	ldi	r24, 0x63	; 99
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     366:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     36a:	80 33       	cpi	r24, 0x30	; 48
     36c:	21 f4       	brne	.+8      	; 0x376 <KPD_Interface_user+0xbe>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     36e:	8f ef       	ldi	r24, 0xFF	; 255
     370:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
     374:	04 c0       	rjmp	.+8      	; 0x37e <KPD_Interface_user+0xc6>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     376:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     37a:	8f 3f       	cpi	r24, 0xFF	; 255
     37c:	81 f3       	breq	.-32     	; 0x35e <KPD_Interface_user+0xa6>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     37e:	0e 94 77 08 	call	0x10ee	; 0x10ee <TMR0_voidStop>
            switch (local_lightNum)
     382:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     386:	83 33       	cpi	r24, 0x33	; 51
     388:	09 f4       	brne	.+2      	; 0x38c <KPD_Interface_user+0xd4>
     38a:	a6 c0       	rjmp	.+332    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
     38c:	30 f4       	brcc	.+12     	; 0x39a <KPD_Interface_user+0xe2>
     38e:	81 33       	cpi	r24, 0x31	; 49
     390:	69 f0       	breq	.+26     	; 0x3ac <KPD_Interface_user+0xf4>
     392:	82 33       	cpi	r24, 0x32	; 50
     394:	09 f4       	brne	.+2      	; 0x398 <KPD_Interface_user+0xe0>
     396:	54 c0       	rjmp	.+168    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     398:	a2 c1       	rjmp	.+836    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
     39a:	85 33       	cpi	r24, 0x35	; 53
     39c:	09 f4       	brne	.+2      	; 0x3a0 <KPD_Interface_user+0xe8>
     39e:	34 c1       	rjmp	.+616    	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     3a0:	08 f4       	brcc	.+2      	; 0x3a4 <KPD_Interface_user+0xec>
     3a2:	e6 c0       	rjmp	.+460    	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
     3a4:	86 33       	cpi	r24, 0x36	; 54
     3a6:	09 f4       	brne	.+2      	; 0x3aa <KPD_Interface_user+0xf2>
     3a8:	7b c1       	rjmp	.+758    	; 0x6a0 <__EEPROM_REGION_LENGTH__+0x2a0>
     3aa:	99 c1       	rjmp	.+818    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     3ac:	40 ec       	ldi	r20, 0xC0	; 192
     3ae:	52 e0       	ldi	r21, 0x02	; 2
     3b0:	63 e0       	ldi	r22, 0x03	; 3
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_voidGetPinValue>
                LCD_voidClear();
     3b8:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
                if (led_status == 1)
     3bc:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	f1 f4       	brne	.+60     	; 0x400 <__EEPROM_REGION_LENGTH__>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     3c4:	83 ee       	ldi	r24, 0xE3	; 227
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     3cc:	80 ec       	ldi	r24, 0xC0	; 192
     3ce:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     3d2:	81 ef       	ldi	r24, 0xF1	; 241
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <KPD_Interface_user+0x12c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     3dc:	82 e6       	ldi	r24, 0x62	; 98
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     3e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     3e8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ea:	c1 f3       	breq	.-16     	; 0x3dc <KPD_Interface_user+0x124>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     3ec:	81 33       	cpi	r24, 0x31	; 49
     3ee:	29 f4       	brne	.+10     	; 0x3fa <KPD_Interface_user+0x142>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     3f0:	41 e0       	ldi	r20, 0x01	; 1
     3f2:	63 e0       	ldi	r22, 0x03	; 3
     3f4:	83 e0       	ldi	r24, 0x03	; 3
     3f6:	0e 94 71 06 	call	0xce2	; 0xce2 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     3fa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Reset_AllKPDValues>
     3fe:	6f c1       	rjmp	.+734    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                else if (led_status == 0)
     400:	81 11       	cpse	r24, r1
     402:	6d c1       	rjmp	.+730    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     40c:	80 ec       	ldi	r24, 0xC0	; 192
     40e:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     412:	81 e1       	ldi	r24, 0x11	; 17
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     41c:	82 e6       	ldi	r24, 0x62	; 98
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     424:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     428:	8f 3f       	cpi	r24, 0xFF	; 255
     42a:	c1 f3       	breq	.-16     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     42c:	81 33       	cpi	r24, 0x31	; 49
     42e:	29 f4       	brne	.+10     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	63 e0       	ldi	r22, 0x03	; 3
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     43a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Reset_AllKPDValues>
     43e:	4f c1       	rjmp	.+670    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN1, &led_status);
     440:	40 ec       	ldi	r20, 0xC0	; 192
     442:	52 e0       	ldi	r21, 0x02	; 2
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_voidGetPinValue>
                LCD_voidClear();
     44c:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
                if (led_status == 1)
     450:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	f9 f4       	brne	.+62     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     458:	81 e2       	ldi	r24, 0x21	; 33
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     460:	80 ec       	ldi	r24, 0xC0	; 192
     462:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     466:	81 ef       	ldi	r24, 0xF1	; 241
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     46e:	04 c0       	rjmp	.+8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     470:	82 e6       	ldi	r24, 0x62	; 98
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     478:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     47c:	8f 3f       	cpi	r24, 0xFF	; 255
     47e:	c1 f3       	breq	.-16     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     480:	81 33       	cpi	r24, 0x31	; 49
     482:	29 f4       	brne	.+10     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 71 06 	call	0xce2	; 0xce2 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     494:	24 c1       	rjmp	.+584    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                else if (led_status == 0)
     496:	81 11       	cpse	r24, r1
     498:	22 c1       	rjmp	.+580    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     49a:	8f e2       	ldi	r24, 0x2F	; 47
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4a2:	80 ec       	ldi	r24, 0xC0	; 192
     4a4:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     4a8:	81 e1       	ldi	r24, 0x11	; 17
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     4b0:	04 c0       	rjmp	.+8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     4b2:	82 e6       	ldi	r24, 0x62	; 98
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     4ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     4be:	8f 3f       	cpi	r24, 0xFF	; 255
     4c0:	c1 f3       	breq	.-16     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     4c2:	81 33       	cpi	r24, 0x31	; 49
     4c4:	29 f4       	brne	.+10     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     4d6:	03 c1       	rjmp	.+518    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     4d8:	40 ec       	ldi	r20, 0xC0	; 192
     4da:	52 e0       	ldi	r21, 0x02	; 2
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_voidGetPinValue>
                LCD_voidClear();
     4e4:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
                if (led_status == 1)
     4e8:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	f9 f4       	brne	.+62     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     4f0:	8e e3       	ldi	r24, 0x3E	; 62
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4f8:	80 ec       	ldi	r24, 0xC0	; 192
     4fa:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     4fe:	81 ef       	ldi	r24, 0xF1	; 241
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     506:	04 c0       	rjmp	.+8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     508:	82 e6       	ldi	r24, 0x62	; 98
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     510:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	c1 f3       	breq	.-16     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     518:	81 33       	cpi	r24, 0x31	; 49
     51a:	29 f4       	brne	.+10     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	62 e0       	ldi	r22, 0x02	; 2
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 71 06 	call	0xce2	; 0xce2 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     52c:	d8 c0       	rjmp	.+432    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                else if (led_status == 0)
     52e:	81 11       	cpse	r24, r1
     530:	d6 c0       	rjmp	.+428    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     532:	8c e4       	ldi	r24, 0x4C	; 76
     534:	92 e0       	ldi	r25, 0x02	; 2
     536:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     53a:	80 ec       	ldi	r24, 0xC0	; 192
     53c:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     540:	81 e1       	ldi	r24, 0x11	; 17
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     548:	04 c0       	rjmp	.+8      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     54a:	82 e6       	ldi	r24, 0x62	; 98
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     552:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     556:	8f 3f       	cpi	r24, 0xFF	; 255
     558:	c1 f3       	breq	.-16     	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     55a:	81 33       	cpi	r24, 0x31	; 49
     55c:	29 f4       	brne	.+10     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     55e:	41 e0       	ldi	r20, 0x01	; 1
     560:	62 e0       	ldi	r22, 0x02	; 2
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     56e:	b7 c0       	rjmp	.+366    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     570:	40 ec       	ldi	r20, 0xC0	; 192
     572:	52 e0       	ldi	r21, 0x02	; 2
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_voidGetPinValue>
                LCD_voidClear();
     57c:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
                if (led_status == 1)
     580:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	f9 f4       	brne	.+62     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     588:	8b e5       	ldi	r24, 0x5B	; 91
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     590:	80 ec       	ldi	r24, 0xC0	; 192
     592:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     596:	81 ef       	ldi	r24, 0xF1	; 241
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5a0:	82 e6       	ldi	r24, 0x62	; 98
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     5a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     5ac:	8f 3f       	cpi	r24, 0xFF	; 255
     5ae:	c1 f3       	breq	.-16     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5b0:	81 33       	cpi	r24, 0x31	; 49
     5b2:	29 f4       	brne	.+10     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 71 06 	call	0xce2	; 0xce2 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     5c4:	8c c0       	rjmp	.+280    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                else if (led_status == 0)
     5c6:	81 11       	cpse	r24, r1
     5c8:	8a c0       	rjmp	.+276    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     5ca:	89 e6       	ldi	r24, 0x69	; 105
     5cc:	92 e0       	ldi	r25, 0x02	; 2
     5ce:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5d2:	80 ec       	ldi	r24, 0xC0	; 192
     5d4:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     5d8:	81 e1       	ldi	r24, 0x11	; 17
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <__EEPROM_REGION_LENGTH__+0x1ea>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5e2:	82 e6       	ldi	r24, 0x62	; 98
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     5ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     5ee:	8f 3f       	cpi	r24, 0xFF	; 255
     5f0:	c1 f3       	breq	.-16     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5f2:	81 33       	cpi	r24, 0x31	; 49
     5f4:	29 f4       	brne	.+10     	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	63 e0       	ldi	r22, 0x03	; 3
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     606:	6b c0       	rjmp	.+214    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     608:	40 ec       	ldi	r20, 0xC0	; 192
     60a:	52 e0       	ldi	r21, 0x02	; 2
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_voidGetPinValue>
                LCD_voidClear();
     614:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
                if (led_status == 1)
     618:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	f9 f4       	brne	.+62     	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     620:	88 e7       	ldi	r24, 0x78	; 120
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     62e:	81 ef       	ldi	r24, 0xF1	; 241
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     636:	04 c0       	rjmp	.+8      	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     638:	82 e6       	ldi	r24, 0x62	; 98
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     640:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     644:	8f 3f       	cpi	r24, 0xFF	; 255
     646:	c1 f3       	breq	.-16     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     648:	81 33       	cpi	r24, 0x31	; 49
     64a:	29 f4       	brne	.+10     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	0e 94 71 06 	call	0xce2	; 0xce2 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     65c:	40 c0       	rjmp	.+128    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                else if (led_status == 0)
     65e:	81 11       	cpse	r24, r1
     660:	3e c0       	rjmp	.+124    	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     662:	86 e8       	ldi	r24, 0x86	; 134
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     66a:	80 ec       	ldi	r24, 0xC0	; 192
     66c:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     670:	81 e1       	ldi	r24, 0x11	; 17
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     678:	04 c0       	rjmp	.+8      	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     67a:	82 e6       	ldi	r24, 0x62	; 98
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     682:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     686:	8f 3f       	cpi	r24, 0xFF	; 255
     688:	c1 f3       	breq	.-16     	; 0x67a <__EEPROM_REGION_LENGTH__+0x27a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     68a:	81 33       	cpi	r24, 0x31	; 49
     68c:	29 f4       	brne	.+10     	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	83 e0       	ldi	r24, 0x03	; 3
     694:	0e 94 64 06 	call	0xcc8	; 0xcc8 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     69e:	1f c0       	rjmp	.+62     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                break;
                // if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     6a0:	0e 94 14 06 	call	0xc28	; 0xc28 <LCD_voidClear>
                if (led_status == 1)
     6a4:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     6a8:	81 30       	cpi	r24, 0x01	; 1
     6aa:	61 f4       	brne	.+24     	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     6ac:	85 e9       	ldi	r24, 0x95	; 149
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     6b4:	80 ec       	ldi	r24, 0xC0	; 192
     6b6:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     6ba:	81 ef       	ldi	r24, 0xF1	; 241
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
     6c2:	0d c0       	rjmp	.+26     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                }
                else if (led_status == 0)
     6c4:	81 11       	cpse	r24, r1
     6c6:	0b c0       	rjmp	.+22     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     6c8:	83 ea       	ldi	r24, 0xA3	; 163
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     6d0:	80 ec       	ldi	r24, 0xC0	; 192
     6d2:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     6d6:	81 e1       	ldi	r24, 0x11	; 17
     6d8:	92 e0       	ldi	r25, 0x02	; 2
     6da:	0e 94 a2 05 	call	0xb44	; 0xb44 <LCD_voidDisplayStringDelay>
                }
                break;

            }

            local_lightNum = KPD_Not_Pressed;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
            Local_copyKPDValue = KPD_Not_Pressed;
     6e4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
     6e8:	08 95       	ret

000006ea <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     6ea:	0e 94 47 09 	call	0x128e	; 0x128e <UART_voidInit>
     6ee:	08 95       	ret

000006f0 <EEPROM_voidInit>:
	TWI_voidSendStopCondition();
	_delay_ms(5);
	
	
	
}
     6f0:	0e 94 05 09 	call	0x120a	; 0x120a <TWI_voidInitMaster>
     6f4:	08 95       	ret

000006f6 <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
     6fe:	61 15       	cp	r22, r1
     700:	71 05       	cpc	r23, r1
     702:	f9 f0       	breq	.+62     	; 0x742 <EEPROM_voidWritePage+0x4c>
     704:	8b 01       	movw	r16, r22
     706:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     708:	c9 2f       	mov	r28, r25
     70a:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
     70c:	0e 94 11 09 	call	0x1222	; 0x1222 <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     710:	8c 2f       	mov	r24, r28
     712:	0e 94 26 09 	call	0x124c	; 0x124c <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     716:	8d 2f       	mov	r24, r29
     718:	0e 94 3b 09 	call	0x1276	; 0x1276 <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     71c:	c0 e0       	ldi	r28, 0x00	; 0
     71e:	07 c0       	rjmp	.+14     	; 0x72e <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
     720:	f8 01       	movw	r30, r16
     722:	ec 0f       	add	r30, r28
     724:	f1 1d       	adc	r31, r1
     726:	80 81       	ld	r24, Z
     728:	0e 94 3b 09 	call	0x1276	; 0x1276 <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     72c:	cf 5f       	subi	r28, 0xFF	; 255
     72e:	c8 30       	cpi	r28, 0x08	; 8
     730:	b8 f3       	brcs	.-18     	; 0x720 <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
     732:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_voidSendStopCondition>
     736:	8f e1       	ldi	r24, 0x1F	; 31
     738:	9e e4       	ldi	r25, 0x4E	; 78
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <EEPROM_voidWritePage+0x44>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <EEPROM_voidWritePage+0x4a>
     740:	00 00       	nop
		{
			//error state
		}
		
		
	}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	0f 91       	pop	r16
     74a:	08 95       	ret

0000074c <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	64 e0       	ldi	r22, 0x04	; 4
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	65 e0       	ldi	r22, 0x05	; 5
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	66 e0       	ldi	r22, 0x06	; 6
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	63 e0       	ldi	r22, 0x03	; 3
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	64 e0       	ldi	r22, 0x04	; 4
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	65 e0       	ldi	r22, 0x05	; 5
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	66 e0       	ldi	r22, 0x06	; 6
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     792:	63 e0       	ldi	r22, 0x03	; 3
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     79a:	64 e0       	ldi	r22, 0x04	; 4
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     7a2:	65 e0       	ldi	r22, 0x05	; 5
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     7aa:	66 e0       	ldi	r22, 0x06	; 6
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	0e 94 1b 08 	call	0x1036	; 0x1036 <DIO_voidActivePinInPullUpResistance>
     7b2:	08 95       	ret

000007b4 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     7b4:	6f 92       	push	r6
     7b6:	7f 92       	push	r7
     7b8:	8f 92       	push	r8
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	6b 97       	sbiw	r28, 0x1b	; 27
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <KPD_voidGetValue+0x32>
     7e4:	7e c0       	rjmp	.+252    	; 0x8e2 <__stack+0x83>
     7e6:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	88 8f       	std	Y+24, r24	; 0x18
     7ec:	89 8f       	std	Y+25, r24	; 0x19
     7ee:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     7f0:	34 e0       	ldi	r19, 0x04	; 4
     7f2:	3d 8b       	std	Y+21, r19	; 0x15
     7f4:	25 e0       	ldi	r18, 0x05	; 5
     7f6:	2e 8b       	std	Y+22, r18	; 0x16
     7f8:	96 e0       	ldi	r25, 0x06	; 6
     7fa:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	89 8b       	std	Y+17, r24	; 0x11
     800:	8a 8b       	std	Y+18, r24	; 0x12
     802:	8b 8b       	std	Y+19, r24	; 0x13
     804:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	8d 87       	std	Y+13, r24	; 0x0d
     80a:	3e 87       	std	Y+14, r19	; 0x0e
     80c:	2f 87       	std	Y+15, r18	; 0x0f
     80e:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     810:	8c e0       	ldi	r24, 0x0C	; 12
     812:	e0 e8       	ldi	r30, 0x80	; 128
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	de 01       	movw	r26, r28
     818:	11 96       	adiw	r26, 0x01	; 1
     81a:	01 90       	ld	r0, Z+
     81c:	0d 92       	st	X+, r0
     81e:	8a 95       	dec	r24
     820:	e1 f7       	brne	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     822:	8f ef       	ldi	r24, 0xFF	; 255
     824:	f5 01       	movw	r30, r10
     826:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     828:	81 2c       	mov	r8, r1
     82a:	57 c0       	rjmp	.+174    	; 0x8da <__stack+0x7b>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     82c:	c8 2c       	mov	r12, r8
     82e:	d1 2c       	mov	r13, r1
     830:	e5 e1       	ldi	r30, 0x15	; 21
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ec 0f       	add	r30, r28
     836:	fd 1f       	adc	r31, r29
     838:	ec 0d       	add	r30, r12
     83a:	fd 1d       	adc	r31, r13
     83c:	60 80       	ld	r6, Z
     83e:	e8 e1       	ldi	r30, 0x18	; 24
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	ec 0f       	add	r30, r28
     844:	fd 1f       	adc	r31, r29
     846:	ec 0d       	add	r30, r12
     848:	fd 1d       	adc	r31, r13
     84a:	70 80       	ld	r7, Z
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	66 2d       	mov	r22, r6
     850:	87 2d       	mov	r24, r7
     852:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     856:	10 e0       	ldi	r17, 0x00	; 0
     858:	38 c0       	rjmp	.+112    	; 0x8ca <__stack+0x6b>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     85a:	e1 2e       	mov	r14, r17
     85c:	f1 2c       	mov	r15, r1
     85e:	ed e0       	ldi	r30, 0x0D	; 13
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	ec 0f       	add	r30, r28
     864:	fd 1f       	adc	r31, r29
     866:	ee 0d       	add	r30, r14
     868:	ff 1d       	adc	r31, r15
     86a:	00 81       	ld	r16, Z
     86c:	e1 e1       	ldi	r30, 0x11	; 17
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	ec 0f       	add	r30, r28
     872:	fd 1f       	adc	r31, r29
     874:	ee 0d       	add	r30, r14
     876:	ff 1d       	adc	r31, r15
     878:	90 80       	ld	r9, Z
     87a:	ae 01       	movw	r20, r28
     87c:	45 5e       	subi	r20, 0xE5	; 229
     87e:	5f 4f       	sbci	r21, 0xFF	; 255
     880:	60 2f       	mov	r22, r16
     882:	89 2d       	mov	r24, r9
     884:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     888:	8b 8d       	ldd	r24, Y+27	; 0x1b
     88a:	81 11       	cpse	r24, r1
     88c:	1d c0       	rjmp	.+58     	; 0x8c8 <__stack+0x69>
     88e:	07 c0       	rjmp	.+14     	; 0x89e <__stack+0x3f>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     890:	ae 01       	movw	r20, r28
     892:	45 5e       	subi	r20, 0xE5	; 229
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	60 2f       	mov	r22, r16
     898:	89 2d       	mov	r24, r9
     89a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     89e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8a0:	88 23       	and	r24, r24
     8a2:	b1 f3       	breq	.-20     	; 0x890 <__stack+0x31>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     8a4:	c7 01       	movw	r24, r14
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	e8 0e       	add	r14, r24
     8ac:	f9 1e       	adc	r15, r25
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	8c 0f       	add	r24, r28
     8b4:	9d 1f       	adc	r25, r29
     8b6:	e8 0e       	add	r14, r24
     8b8:	f9 1e       	adc	r15, r25
     8ba:	f7 01       	movw	r30, r14
     8bc:	ec 0d       	add	r30, r12
     8be:	fd 1d       	adc	r31, r13
     8c0:	80 81       	ld	r24, Z
     8c2:	f5 01       	movw	r30, r10
     8c4:	80 83       	st	Z, r24
     8c6:	0d c0       	rjmp	.+26     	; 0x8e2 <__stack+0x83>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     8c8:	1f 5f       	subi	r17, 0xFF	; 255
     8ca:	14 30       	cpi	r17, 0x04	; 4
     8cc:	30 f2       	brcs	.-116    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	66 2d       	mov	r22, r6
     8d2:	87 2d       	mov	r24, r7
     8d4:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     8d8:	83 94       	inc	r8
     8da:	f2 e0       	ldi	r31, 0x02	; 2
     8dc:	f8 15       	cp	r31, r8
     8de:	08 f0       	brcs	.+2      	; 0x8e2 <__stack+0x83>
     8e0:	a5 cf       	rjmp	.-182    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
	}
	else
	{
		
	}
}
     8e2:	6b 96       	adiw	r28, 0x1b	; 27
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	df 90       	pop	r13
     8fc:	cf 90       	pop	r12
     8fe:	bf 90       	pop	r11
     900:	af 90       	pop	r10
     902:	9f 90       	pop	r9
     904:	8f 90       	pop	r8
     906:	7f 90       	pop	r7
     908:	6f 90       	pop	r6
     90a:	08 95       	ret

0000090c <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     90c:	cf 93       	push	r28
     90e:	c8 2f       	mov	r28, r24
     910:	80 ff       	sbrs	r24, 0
     912:	06 c0       	rjmp	.+12     	; 0x920 <PRV_voidWriteHalfPort+0x14>
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	64 e0       	ldi	r22, 0x04	; 4
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     91e:	05 c0       	rjmp	.+10     	; 0x92a <PRV_voidWriteHalfPort+0x1e>
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	64 e0       	ldi	r22, 0x04	; 4
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     92a:	c1 ff       	sbrs	r28, 1
     92c:	06 c0       	rjmp	.+12     	; 0x93a <PRV_voidWriteHalfPort+0x2e>
     92e:	41 e0       	ldi	r20, 0x01	; 1
     930:	65 e0       	ldi	r22, 0x05	; 5
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     938:	05 c0       	rjmp	.+10     	; 0x944 <PRV_voidWriteHalfPort+0x38>
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	65 e0       	ldi	r22, 0x05	; 5
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     944:	c2 ff       	sbrs	r28, 2
     946:	06 c0       	rjmp	.+12     	; 0x954 <PRV_voidWriteHalfPort+0x48>
     948:	41 e0       	ldi	r20, 0x01	; 1
     94a:	66 e0       	ldi	r22, 0x06	; 6
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     952:	05 c0       	rjmp	.+10     	; 0x95e <PRV_voidWriteHalfPort+0x52>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	66 e0       	ldi	r22, 0x06	; 6
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     95e:	c3 ff       	sbrs	r28, 3
     960:	06 c0       	rjmp	.+12     	; 0x96e <PRV_voidWriteHalfPort+0x62>
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	67 e0       	ldi	r22, 0x07	; 7
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     96c:	05 c0       	rjmp	.+10     	; 0x978 <PRV_voidWriteHalfPort+0x6c>
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	67 e0       	ldi	r22, 0x07	; 7
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <LCD_voidSendCommand>:
     97c:	cf 93       	push	r28
     97e:	c8 2f       	mov	r28, r24
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	62 e0       	ldi	r22, 0x02	; 2
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     994:	8c 2f       	mov	r24, r28
     996:	82 95       	swap	r24
     998:	8f 70       	andi	r24, 0x0F	; 15
     99a:	0e 94 86 04 	call	0x90c	; 0x90c <PRV_voidWriteHalfPort>
     99e:	41 e0       	ldi	r20, 0x01	; 1
     9a0:	63 e0       	ldi	r22, 0x03	; 3
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     9a8:	8f e9       	ldi	r24, 0x9F	; 159
     9aa:	9f e0       	ldi	r25, 0x0F	; 15
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <LCD_voidSendCommand+0x30>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <LCD_voidSendCommand+0x36>
     9b2:	00 00       	nop
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	63 e0       	ldi	r22, 0x03	; 3
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     9be:	8c 2f       	mov	r24, r28
     9c0:	0e 94 86 04 	call	0x90c	; 0x90c <PRV_voidWriteHalfPort>
     9c4:	41 e0       	ldi	r20, 0x01	; 1
     9c6:	63 e0       	ldi	r22, 0x03	; 3
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     9ce:	8f e9       	ldi	r24, 0x9F	; 159
     9d0:	9f e0       	ldi	r25, 0x0F	; 15
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <LCD_voidSendCommand+0x56>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <LCD_voidSendCommand+0x5c>
     9d8:	00 00       	nop
     9da:	40 e0       	ldi	r20, 0x00	; 0
     9dc:	63 e0       	ldi	r22, 0x03	; 3
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <LCD_voidInit>:
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	62 e0       	ldi	r22, 0x02	; 2
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     a06:	41 e0       	ldi	r20, 0x01	; 1
     a08:	64 e0       	ldi	r22, 0x04	; 4
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	65 e0       	ldi	r22, 0x05	; 5
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	66 e0       	ldi	r22, 0x06	; 6
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	67 e0       	ldi	r22, 0x07	; 7
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     a2e:	2f e7       	ldi	r18, 0x7F	; 127
     a30:	85 eb       	ldi	r24, 0xB5	; 181
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	80 40       	sbci	r24, 0x00	; 0
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <LCD_voidInit+0x4c>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <LCD_voidInit+0x56>
     a3e:	00 00       	nop
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	62 e0       	ldi	r22, 0x02	; 2
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	0e 94 86 04 	call	0x90c	; 0x90c <PRV_voidWriteHalfPort>
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	63 e0       	ldi	r22, 0x03	; 3
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     a64:	8f e9       	ldi	r24, 0x9F	; 159
     a66:	9f e0       	ldi	r25, 0x0F	; 15
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <LCD_voidInit+0x80>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <LCD_voidInit+0x86>
     a6e:	00 00       	nop
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	63 e0       	ldi	r22, 0x03	; 3
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     a7a:	88 e2       	ldi	r24, 0x28	; 40
     a7c:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
     a80:	90 ef       	ldi	r25, 0xF0	; 240
     a82:	9a 95       	dec	r25
     a84:	f1 f7       	brne	.-4      	; 0xa82 <LCD_voidInit+0x9a>
     a86:	8c e0       	ldi	r24, 0x0C	; 12
     a88:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
     a8c:	20 ef       	ldi	r18, 0xF0	; 240
     a8e:	2a 95       	dec	r18
     a90:	f1 f7       	brne	.-4      	; 0xa8e <LCD_voidInit+0xa6>
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	9f e1       	ldi	r25, 0x1F	; 31
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <LCD_voidInit+0xb4>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <LCD_voidInit+0xba>
     aa2:	00 00       	nop
     aa4:	86 e0       	ldi	r24, 0x06	; 6
     aa6:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
     aaa:	08 95       	ret

00000aac <LCD_voidDisplayChar>:
     aac:	cf 93       	push	r28
     aae:	c8 2f       	mov	r28, r24
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	62 e0       	ldi	r22, 0x02	; 2
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     ac4:	8c 2f       	mov	r24, r28
     ac6:	82 95       	swap	r24
     ac8:	8f 70       	andi	r24, 0x0F	; 15
     aca:	0e 94 86 04 	call	0x90c	; 0x90c <PRV_voidWriteHalfPort>
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	63 e0       	ldi	r22, 0x03	; 3
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     ad8:	8f e9       	ldi	r24, 0x9F	; 159
     ada:	9f e0       	ldi	r25, 0x0F	; 15
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <LCD_voidDisplayChar+0x30>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <LCD_voidDisplayChar+0x36>
     ae2:	00 00       	nop
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	63 e0       	ldi	r22, 0x03	; 3
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     aee:	8c 2f       	mov	r24, r28
     af0:	0e 94 86 04 	call	0x90c	; 0x90c <PRV_voidWriteHalfPort>
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	63 e0       	ldi	r22, 0x03	; 3
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     afe:	8f e9       	ldi	r24, 0x9F	; 159
     b00:	9f e0       	ldi	r25, 0x0F	; 15
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	f1 f7       	brne	.-4      	; 0xb02 <LCD_voidDisplayChar+0x56>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <LCD_voidDisplayChar+0x5c>
     b08:	00 00       	nop
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	63 e0       	ldi	r22, 0x03	; 3
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <LCD_voidDisplayString>:
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	29 f4       	brne	.+10     	; 0xb2c <LCD_voidDisplayString+0x14>
     b22:	0c c0       	rjmp	.+24     	; 0xb3c <LCD_voidDisplayString+0x24>
     b24:	0e 94 56 05 	call	0xaac	; 0xaac <LCD_voidDisplayChar>
     b28:	cf 5f       	subi	r28, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <LCD_voidDisplayString+0x18>
     b2c:	8c 01       	movw	r16, r24
     b2e:	c0 e0       	ldi	r28, 0x00	; 0
     b30:	f8 01       	movw	r30, r16
     b32:	ec 0f       	add	r30, r28
     b34:	f1 1d       	adc	r31, r1
     b36:	80 81       	ld	r24, Z
     b38:	81 11       	cpse	r24, r1
     b3a:	f4 cf       	rjmp	.-24     	; 0xb24 <LCD_voidDisplayString+0xc>
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	08 95       	ret

00000b44 <LCD_voidDisplayStringDelay>:
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	00 97       	sbiw	r24, 0x00	; 0
     b4c:	71 f4       	brne	.+28     	; 0xb6a <LCD_voidDisplayStringDelay+0x26>
     b4e:	15 c0       	rjmp	.+42     	; 0xb7a <LCD_voidDisplayStringDelay+0x36>
     b50:	0e 94 56 05 	call	0xaac	; 0xaac <LCD_voidDisplayChar>
     b54:	cf 5f       	subi	r28, 0xFF	; 255
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	80 e7       	ldi	r24, 0x70	; 112
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	21 50       	subi	r18, 0x01	; 1
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <LCD_voidDisplayStringDelay+0x18>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <LCD_voidDisplayStringDelay+0x22>
     b66:	00 00       	nop
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <LCD_voidDisplayStringDelay+0x2a>
     b6a:	8c 01       	movw	r16, r24
     b6c:	c0 e0       	ldi	r28, 0x00	; 0
     b6e:	f8 01       	movw	r30, r16
     b70:	ec 0f       	add	r30, r28
     b72:	f1 1d       	adc	r31, r1
     b74:	80 81       	ld	r24, Z
     b76:	81 11       	cpse	r24, r1
     b78:	eb cf       	rjmp	.-42     	; 0xb50 <LCD_voidDisplayStringDelay+0xc>
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	08 95       	ret

00000b82 <LCD_voidDisplayNumber>:
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <LCD_voidDisplayNumber+0xa>
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <LCD_voidDisplayNumber+0xc>
     b8e:	1f 92       	push	r1
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	26 2f       	mov	r18, r22
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	08 c0       	rjmp	.+16     	; 0xbaa <LCD_voidDisplayNumber+0x28>
     b9a:	1f 5f       	subi	r17, 0xFF	; 255
     b9c:	ed ec       	ldi	r30, 0xCD	; 205
     b9e:	6e 9f       	mul	r22, r30
     ba0:	61 2d       	mov	r22, r1
     ba2:	11 24       	eor	r1, r1
     ba4:	66 95       	lsr	r22
     ba6:	66 95       	lsr	r22
     ba8:	66 95       	lsr	r22
     baa:	61 11       	cpse	r22, r1
     bac:	f6 cf       	rjmp	.-20     	; 0xb9a <LCD_voidDisplayNumber+0x18>
     bae:	00 e0       	ldi	r16, 0x00	; 0
     bb0:	1a c0       	rjmp	.+52     	; 0xbe6 <LCD_voidDisplayNumber+0x64>
     bb2:	62 2f       	mov	r22, r18
     bb4:	2a e0       	ldi	r18, 0x0A	; 10
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__udivmodsi4>
     bc0:	73 2f       	mov	r23, r19
     bc2:	84 2f       	mov	r24, r20
     bc4:	95 2f       	mov	r25, r21
     bc6:	a0 2f       	mov	r26, r16
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	e1 2f       	mov	r30, r17
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	ea 1b       	sub	r30, r26
     bd2:	fb 0b       	sbc	r31, r27
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	4c 0f       	add	r20, r28
     bda:	5d 1f       	adc	r21, r29
     bdc:	e4 0f       	add	r30, r20
     bde:	f5 1f       	adc	r31, r21
     be0:	60 5d       	subi	r22, 0xD0	; 208
     be2:	60 83       	st	Z, r22
     be4:	0f 5f       	subi	r16, 0xFF	; 255
     be6:	01 17       	cp	r16, r17
     be8:	20 f3       	brcs	.-56     	; 0xbb2 <LCD_voidDisplayNumber+0x30>
     bea:	e1 e0       	ldi	r30, 0x01	; 1
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ec 0f       	add	r30, r28
     bf0:	fd 1f       	adc	r31, r29
     bf2:	e1 0f       	add	r30, r17
     bf4:	f1 1d       	adc	r31, r1
     bf6:	10 82       	st	Z, r1
     bf8:	10 e0       	ldi	r17, 0x00	; 0
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <LCD_voidDisplayNumber+0x80>
     bfc:	0e 94 56 05 	call	0xaac	; 0xaac <LCD_voidDisplayChar>
     c00:	1f 5f       	subi	r17, 0xFF	; 255
     c02:	e1 e0       	ldi	r30, 0x01	; 1
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	ec 0f       	add	r30, r28
     c08:	fd 1f       	adc	r31, r29
     c0a:	e1 0f       	add	r30, r17
     c0c:	f1 1d       	adc	r31, r1
     c0e:	80 81       	ld	r24, Z
     c10:	81 11       	cpse	r24, r1
     c12:	f4 cf       	rjmp	.-24     	; 0xbfc <LCD_voidDisplayNumber+0x7a>
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <LCD_voidClear>:
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	62 e0       	ldi	r22, 0x02	; 2
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 86 04 	call	0x90c	; 0x90c <PRV_voidWriteHalfPort>
     c42:	41 e0       	ldi	r20, 0x01	; 1
     c44:	63 e0       	ldi	r22, 0x03	; 3
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     c4c:	8f e9       	ldi	r24, 0x9F	; 159
     c4e:	9f e0       	ldi	r25, 0x0F	; 15
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <LCD_voidClear+0x28>
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <LCD_voidClear+0x2e>
     c56:	00 00       	nop
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	63 e0       	ldi	r22, 0x03	; 3
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 86 04 	call	0x90c	; 0x90c <PRV_voidWriteHalfPort>
     c68:	41 e0       	ldi	r20, 0x01	; 1
     c6a:	63 e0       	ldi	r22, 0x03	; 3
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     c72:	8f e9       	ldi	r24, 0x9F	; 159
     c74:	9f e0       	ldi	r25, 0x0F	; 15
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	f1 f7       	brne	.-4      	; 0xc76 <LCD_voidClear+0x4e>
     c7a:	00 c0       	rjmp	.+0      	; 0xc7c <LCD_voidClear+0x54>
     c7c:	00 00       	nop
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	63 e0       	ldi	r22, 0x03	; 3
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     c88:	08 95       	ret

00000c8a <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
	if(copy_u8Position<40)
     c8e:	68 32       	cpi	r22, 0x28	; 40
     c90:	a0 f4       	brcc	.+40     	; 0xcba <LCD_voidGoTOSpecificPosition+0x30>
     c92:	c6 2f       	mov	r28, r22
     c94:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     c9c:	d1 30       	cpi	r29, 0x01	; 1
     c9e:	19 f0       	breq	.+6      	; 0xca6 <LCD_voidGoTOSpecificPosition+0x1c>
     ca0:	d2 30       	cpi	r29, 0x02	; 2
     ca2:	31 f0       	breq	.+12     	; 0xcb0 <LCD_voidGoTOSpecificPosition+0x26>
     ca4:	0a c0       	rjmp	.+20     	; 0xcba <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     ca6:	8c 2f       	mov	r24, r28
     ca8:	80 68       	ori	r24, 0x80	; 128
     caa:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
		
			
			break;
     cae:	05 c0       	rjmp	.+10     	; 0xcba <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     cb0:	80 e4       	ldi	r24, 0x40	; 64
     cb2:	8c 0f       	add	r24, r28
     cb4:	80 68       	ori	r24, 0x80	; 128
     cb6:	0e 94 be 04 	call	0x97c	; 0x97c <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     cc0:	41 e0       	ldi	r20, 0x01	; 1
     cc2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
     cc6:	08 95       	ret

00000cc8 <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     cc8:	41 30       	cpi	r20, 0x01	; 1
     cca:	19 f0       	breq	.+6      	; 0xcd2 <LED_voidOn+0xa>
     ccc:	42 30       	cpi	r20, 0x02	; 2
     cce:	29 f0       	breq	.+10     	; 0xcda <LED_voidOn+0x12>
     cd0:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
		break;
     cd8:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     ce0:	08 95       	ret

00000ce2 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     ce2:	41 30       	cpi	r20, 0x01	; 1
     ce4:	19 f0       	breq	.+6      	; 0xcec <LED_voidOff+0xa>
     ce6:	42 30       	cpi	r20, 0x02	; 2
     ce8:	29 f0       	breq	.+10     	; 0xcf4 <LED_voidOff+0x12>
     cea:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
		break;
     cf2:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	0e 94 60 07 	call	0xec0	; 0xec0 <DIO_voidSetPinValue>
     cfa:	08 95       	ret

00000cfc <main>:

extern u8 global_accessType;

int main()
{
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DIO_voidSetPinDirection>
	APP_init();
     d06:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <APP_init>



	while(1)
	{
		if (global_accessType ==accessPermited)
     d0a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	19 f4       	brne	.+6      	; 0xd18 <main+0x1c>
		{
		KPD_Interface_user();
     d12:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <KPD_Interface_user>
     d16:	f9 cf       	rjmp	.-14     	; 0xd0a <main+0xe>
		}
		else if (global_accessType ==accessDenied)
     d18:	81 11       	cpse	r24, r1
     d1a:	f7 cf       	rjmp	.-18     	; 0xd0a <main+0xe>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
     d1c:	82 eb       	ldi	r24, 0xB2	; 178
     d1e:	92 e0       	ldi	r25, 0x02	; 2
     d20:	0e 94 8c 05 	call	0xb18	; 0xb18 <LCD_voidDisplayString>
		}
		
		
		
	}
}
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	08 95       	ret

00000d2a <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
     d2a:	82 30       	cpi	r24, 0x02	; 2
     d2c:	59 f0       	breq	.+22     	; 0xd44 <ADC_voidInit+0x1a>
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	81 f0       	breq	.+32     	; 0xd52 <ADC_voidInit+0x28>
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	a1 f4       	brne	.+40     	; 0xd5e <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
     d36:	87 b1       	in	r24, 0x07	; 7
     d38:	80 64       	ori	r24, 0x40	; 64
     d3a:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     d3c:	87 b1       	in	r24, 0x07	; 7
     d3e:	8f 77       	andi	r24, 0x7F	; 127
     d40:	87 b9       	out	0x07, r24	; 7
		break;
     d42:	0d c0       	rjmp	.+26     	; 0xd5e <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
     d44:	87 b1       	in	r24, 0x07	; 7
     d46:	8f 7b       	andi	r24, 0xBF	; 191
     d48:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     d4a:	87 b1       	in	r24, 0x07	; 7
     d4c:	8f 77       	andi	r24, 0x7F	; 127
     d4e:	87 b9       	out	0x07, r24	; 7
		break;
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
     d52:	87 b1       	in	r24, 0x07	; 7
     d54:	80 64       	ori	r24, 0x40	; 64
     d56:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
     d58:	87 b1       	in	r24, 0x07	; 7
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
     d5e:	87 b1       	in	r24, 0x07	; 7
     d60:	8f 7d       	andi	r24, 0xDF	; 223
     d62:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
     d64:	86 b1       	in	r24, 0x06	; 6
     d66:	8f 7d       	andi	r24, 0xDF	; 223
     d68:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
     d6a:	86 b1       	in	r24, 0x06	; 6
     d6c:	87 7f       	andi	r24, 0xF7	; 247
     d6e:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
     d70:	86 b1       	in	r24, 0x06	; 6
     d72:	84 60       	ori	r24, 0x04	; 4
     d74:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
     d76:	86 b1       	in	r24, 0x06	; 6
     d78:	82 60       	ori	r24, 0x02	; 2
     d7a:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
     d7c:	86 b1       	in	r24, 0x06	; 6
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
     d82:	86 b1       	in	r24, 0x06	; 6
     d84:	80 68       	ori	r24, 0x80	; 128
     d86:	86 b9       	out	0x06, r24	; 6
     d88:	08 95       	ret

00000d8a <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
     d8a:	61 15       	cp	r22, r1
     d8c:	71 05       	cpc	r23, r1
     d8e:	b9 f0       	breq	.+46     	; 0xdbe <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
     d90:	97 b1       	in	r25, 0x07	; 7
     d92:	90 7e       	andi	r25, 0xE0	; 224
     d94:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
     d96:	97 b1       	in	r25, 0x07	; 7
     d98:	89 2b       	or	r24, r25
     d9a:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
     d9c:	86 b1       	in	r24, 0x06	; 6
     d9e:	80 64       	ori	r24, 0x40	; 64
     da0:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
     da2:	34 9b       	sbis	0x06, 4	; 6
     da4:	fe cf       	rjmp	.-4      	; 0xda2 <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
     da6:	84 b1       	in	r24, 0x04	; 4
     da8:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
     daa:	96 95       	lsr	r25
     dac:	87 95       	ror	r24
     dae:	96 95       	lsr	r25
     db0:	87 95       	ror	r24
     db2:	fb 01       	movw	r30, r22
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
     db8:	86 b1       	in	r24, 0x06	; 6
     dba:	80 61       	ori	r24, 0x10	; 16
     dbc:	86 b9       	out	0x06, r24	; 6
     dbe:	08 95       	ret

00000dc0 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
     dc0:	84 30       	cpi	r24, 0x04	; 4
     dc2:	08 f0       	brcs	.+2      	; 0xdc6 <DIO_voidSetPinDirection+0x6>
     dc4:	7c c0       	rjmp	.+248    	; 0xebe <DIO_voidSetPinDirection+0xfe>
     dc6:	68 30       	cpi	r22, 0x08	; 8
     dc8:	08 f0       	brcs	.+2      	; 0xdcc <DIO_voidSetPinDirection+0xc>
     dca:	79 c0       	rjmp	.+242    	; 0xebe <DIO_voidSetPinDirection+0xfe>
     dcc:	42 30       	cpi	r20, 0x02	; 2
     dce:	08 f0       	brcs	.+2      	; 0xdd2 <DIO_voidSetPinDirection+0x12>
     dd0:	76 c0       	rjmp	.+236    	; 0xebe <DIO_voidSetPinDirection+0xfe>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	19 f1       	breq	.+70     	; 0xe1c <DIO_voidSetPinDirection+0x5c>
     dd6:	30 f0       	brcs	.+12     	; 0xde4 <DIO_voidSetPinDirection+0x24>
     dd8:	82 30       	cpi	r24, 0x02	; 2
     dda:	e1 f1       	breq	.+120    	; 0xe54 <DIO_voidSetPinDirection+0x94>
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	09 f4       	brne	.+2      	; 0xde2 <DIO_voidSetPinDirection+0x22>
     de0:	54 c0       	rjmp	.+168    	; 0xe8a <DIO_voidSetPinDirection+0xca>
     de2:	08 95       	ret
     de4:	44 23       	and	r20, r20
     de6:	71 f0       	breq	.+28     	; 0xe04 <DIO_voidSetPinDirection+0x44>
     de8:	41 30       	cpi	r20, 0x01	; 1
     dea:	09 f0       	breq	.+2      	; 0xdee <DIO_voidSetPinDirection+0x2e>
     dec:	68 c0       	rjmp	.+208    	; 0xebe <DIO_voidSetPinDirection+0xfe>
     dee:	2a b3       	in	r18, 0x1a	; 26
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <DIO_voidSetPinDirection+0x3a>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	6a 95       	dec	r22
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <DIO_voidSetPinDirection+0x36>
     dfe:	82 2b       	or	r24, r18
     e00:	8a bb       	out	0x1a, r24	; 26
     e02:	08 95       	ret
     e04:	2a b3       	in	r18, 0x1a	; 26
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_voidSetPinDirection+0x50>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	6a 95       	dec	r22
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_voidSetPinDirection+0x4c>
     e14:	80 95       	com	r24
     e16:	82 23       	and	r24, r18
     e18:	8a bb       	out	0x1a, r24	; 26
     e1a:	08 95       	ret
     e1c:	44 23       	and	r20, r20
     e1e:	71 f0       	breq	.+28     	; 0xe3c <DIO_voidSetPinDirection+0x7c>
     e20:	41 30       	cpi	r20, 0x01	; 1
     e22:	09 f0       	breq	.+2      	; 0xe26 <DIO_voidSetPinDirection+0x66>
     e24:	4c c0       	rjmp	.+152    	; 0xebe <DIO_voidSetPinDirection+0xfe>
     e26:	27 b3       	in	r18, 0x17	; 23
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_voidSetPinDirection+0x72>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	6a 95       	dec	r22
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_voidSetPinDirection+0x6e>
     e36:	82 2b       	or	r24, r18
     e38:	87 bb       	out	0x17, r24	; 23
     e3a:	08 95       	ret
     e3c:	27 b3       	in	r18, 0x17	; 23
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <DIO_voidSetPinDirection+0x88>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	6a 95       	dec	r22
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <DIO_voidSetPinDirection+0x84>
     e4c:	80 95       	com	r24
     e4e:	82 23       	and	r24, r18
     e50:	87 bb       	out	0x17, r24	; 23
     e52:	08 95       	ret
     e54:	44 23       	and	r20, r20
     e56:	69 f0       	breq	.+26     	; 0xe72 <DIO_voidSetPinDirection+0xb2>
     e58:	41 30       	cpi	r20, 0x01	; 1
     e5a:	89 f5       	brne	.+98     	; 0xebe <DIO_voidSetPinDirection+0xfe>
     e5c:	24 b3       	in	r18, 0x14	; 20
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_voidSetPinDirection+0xa8>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	6a 95       	dec	r22
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_voidSetPinDirection+0xa4>
     e6c:	82 2b       	or	r24, r18
     e6e:	84 bb       	out	0x14, r24	; 20
     e70:	08 95       	ret
     e72:	24 b3       	in	r18, 0x14	; 20
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <DIO_voidSetPinDirection+0xbe>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	6a 95       	dec	r22
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <DIO_voidSetPinDirection+0xba>
     e82:	80 95       	com	r24
     e84:	82 23       	and	r24, r18
     e86:	84 bb       	out	0x14, r24	; 20
     e88:	08 95       	ret
     e8a:	44 23       	and	r20, r20
     e8c:	69 f0       	breq	.+26     	; 0xea8 <DIO_voidSetPinDirection+0xe8>
     e8e:	41 30       	cpi	r20, 0x01	; 1
     e90:	b1 f4       	brne	.+44     	; 0xebe <DIO_voidSetPinDirection+0xfe>
     e92:	21 b3       	in	r18, 0x11	; 17
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_voidSetPinDirection+0xde>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	6a 95       	dec	r22
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_voidSetPinDirection+0xda>
     ea2:	82 2b       	or	r24, r18
     ea4:	81 bb       	out	0x11, r24	; 17
     ea6:	08 95       	ret
     ea8:	21 b3       	in	r18, 0x11	; 17
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_voidSetPinDirection+0xf4>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	6a 95       	dec	r22
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_voidSetPinDirection+0xf0>
     eb8:	80 95       	com	r24
     eba:	82 23       	and	r24, r18
     ebc:	81 bb       	out	0x11, r24	; 17
     ebe:	08 95       	ret

00000ec0 <DIO_voidSetPinValue>:
     ec0:	84 30       	cpi	r24, 0x04	; 4
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <DIO_voidSetPinValue+0x6>
     ec4:	7c c0       	rjmp	.+248    	; 0xfbe <DIO_voidSetPinValue+0xfe>
     ec6:	68 30       	cpi	r22, 0x08	; 8
     ec8:	08 f0       	brcs	.+2      	; 0xecc <DIO_voidSetPinValue+0xc>
     eca:	79 c0       	rjmp	.+242    	; 0xfbe <DIO_voidSetPinValue+0xfe>
     ecc:	42 30       	cpi	r20, 0x02	; 2
     ece:	08 f0       	brcs	.+2      	; 0xed2 <DIO_voidSetPinValue+0x12>
     ed0:	76 c0       	rjmp	.+236    	; 0xfbe <DIO_voidSetPinValue+0xfe>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	19 f1       	breq	.+70     	; 0xf1c <DIO_voidSetPinValue+0x5c>
     ed6:	30 f0       	brcs	.+12     	; 0xee4 <DIO_voidSetPinValue+0x24>
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	e1 f1       	breq	.+120    	; 0xf54 <DIO_voidSetPinValue+0x94>
     edc:	83 30       	cpi	r24, 0x03	; 3
     ede:	09 f4       	brne	.+2      	; 0xee2 <DIO_voidSetPinValue+0x22>
     ee0:	54 c0       	rjmp	.+168    	; 0xf8a <DIO_voidSetPinValue+0xca>
     ee2:	08 95       	ret
     ee4:	44 23       	and	r20, r20
     ee6:	71 f0       	breq	.+28     	; 0xf04 <DIO_voidSetPinValue+0x44>
     ee8:	41 30       	cpi	r20, 0x01	; 1
     eea:	09 f0       	breq	.+2      	; 0xeee <DIO_voidSetPinValue+0x2e>
     eec:	68 c0       	rjmp	.+208    	; 0xfbe <DIO_voidSetPinValue+0xfe>
     eee:	2b b3       	in	r18, 0x1b	; 27
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinValue+0x3a>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	6a 95       	dec	r22
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinValue+0x36>
     efe:	82 2b       	or	r24, r18
     f00:	8b bb       	out	0x1b, r24	; 27
     f02:	08 95       	ret
     f04:	2b b3       	in	r18, 0x1b	; 27
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_voidSetPinValue+0x50>
     f0c:	88 0f       	add	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	6a 95       	dec	r22
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_voidSetPinValue+0x4c>
     f14:	80 95       	com	r24
     f16:	82 23       	and	r24, r18
     f18:	8b bb       	out	0x1b, r24	; 27
     f1a:	08 95       	ret
     f1c:	44 23       	and	r20, r20
     f1e:	71 f0       	breq	.+28     	; 0xf3c <DIO_voidSetPinValue+0x7c>
     f20:	41 30       	cpi	r20, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <DIO_voidSetPinValue+0x66>
     f24:	4c c0       	rjmp	.+152    	; 0xfbe <DIO_voidSetPinValue+0xfe>
     f26:	28 b3       	in	r18, 0x18	; 24
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_voidSetPinValue+0x72>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	6a 95       	dec	r22
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_voidSetPinValue+0x6e>
     f36:	82 2b       	or	r24, r18
     f38:	88 bb       	out	0x18, r24	; 24
     f3a:	08 95       	ret
     f3c:	28 b3       	in	r18, 0x18	; 24
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_voidSetPinValue+0x88>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	6a 95       	dec	r22
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_voidSetPinValue+0x84>
     f4c:	80 95       	com	r24
     f4e:	82 23       	and	r24, r18
     f50:	88 bb       	out	0x18, r24	; 24
     f52:	08 95       	ret
     f54:	44 23       	and	r20, r20
     f56:	69 f0       	breq	.+26     	; 0xf72 <DIO_voidSetPinValue+0xb2>
     f58:	41 30       	cpi	r20, 0x01	; 1
     f5a:	89 f5       	brne	.+98     	; 0xfbe <DIO_voidSetPinValue+0xfe>
     f5c:	25 b3       	in	r18, 0x15	; 21
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_voidSetPinValue+0xa8>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	6a 95       	dec	r22
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_voidSetPinValue+0xa4>
     f6c:	82 2b       	or	r24, r18
     f6e:	85 bb       	out	0x15, r24	; 21
     f70:	08 95       	ret
     f72:	25 b3       	in	r18, 0x15	; 21
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_voidSetPinValue+0xbe>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	6a 95       	dec	r22
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_voidSetPinValue+0xba>
     f82:	80 95       	com	r24
     f84:	82 23       	and	r24, r18
     f86:	85 bb       	out	0x15, r24	; 21
     f88:	08 95       	ret
     f8a:	44 23       	and	r20, r20
     f8c:	69 f0       	breq	.+26     	; 0xfa8 <DIO_voidSetPinValue+0xe8>
     f8e:	41 30       	cpi	r20, 0x01	; 1
     f90:	b1 f4       	brne	.+44     	; 0xfbe <DIO_voidSetPinValue+0xfe>
     f92:	22 b3       	in	r18, 0x12	; 18
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_voidSetPinValue+0xde>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	6a 95       	dec	r22
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_voidSetPinValue+0xda>
     fa2:	82 2b       	or	r24, r18
     fa4:	82 bb       	out	0x12, r24	; 18
     fa6:	08 95       	ret
     fa8:	22 b3       	in	r18, 0x12	; 18
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_voidSetPinValue+0xf4>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	6a 95       	dec	r22
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_voidSetPinValue+0xf0>
     fb8:	80 95       	com	r24
     fba:	82 23       	and	r24, r18
     fbc:	82 bb       	out	0x12, r24	; 18
     fbe:	08 95       	ret

00000fc0 <DIO_voidGetPinValue>:
     fc0:	84 30       	cpi	r24, 0x04	; 4
     fc2:	c0 f5       	brcc	.+112    	; 0x1034 <DIO_voidGetPinValue+0x74>
     fc4:	68 30       	cpi	r22, 0x08	; 8
     fc6:	b0 f5       	brcc	.+108    	; 0x1034 <DIO_voidGetPinValue+0x74>
     fc8:	41 15       	cp	r20, r1
     fca:	51 05       	cpc	r21, r1
     fcc:	99 f1       	breq	.+102    	; 0x1034 <DIO_voidGetPinValue+0x74>
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	89 f0       	breq	.+34     	; 0xff4 <DIO_voidGetPinValue+0x34>
     fd2:	28 f0       	brcs	.+10     	; 0xfde <DIO_voidGetPinValue+0x1e>
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	c9 f0       	breq	.+50     	; 0x100a <DIO_voidGetPinValue+0x4a>
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	11 f1       	breq	.+68     	; 0x1020 <DIO_voidGetPinValue+0x60>
     fdc:	08 95       	ret
     fde:	89 b3       	in	r24, 0x19	; 25
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_voidGetPinValue+0x28>
     fe4:	95 95       	asr	r25
     fe6:	87 95       	ror	r24
     fe8:	6a 95       	dec	r22
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_voidGetPinValue+0x24>
     fec:	81 70       	andi	r24, 0x01	; 1
     fee:	fa 01       	movw	r30, r20
     ff0:	80 83       	st	Z, r24
     ff2:	08 95       	ret
     ff4:	86 b3       	in	r24, 0x16	; 22
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_voidGetPinValue+0x3e>
     ffa:	95 95       	asr	r25
     ffc:	87 95       	ror	r24
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_voidGetPinValue+0x3a>
    1002:	81 70       	andi	r24, 0x01	; 1
    1004:	fa 01       	movw	r30, r20
    1006:	80 83       	st	Z, r24
    1008:	08 95       	ret
    100a:	83 b3       	in	r24, 0x13	; 19
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidGetPinValue+0x54>
    1010:	95 95       	asr	r25
    1012:	87 95       	ror	r24
    1014:	6a 95       	dec	r22
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidGetPinValue+0x50>
    1018:	81 70       	andi	r24, 0x01	; 1
    101a:	fa 01       	movw	r30, r20
    101c:	80 83       	st	Z, r24
    101e:	08 95       	ret
    1020:	80 b3       	in	r24, 0x10	; 16
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_voidGetPinValue+0x6a>
    1026:	95 95       	asr	r25
    1028:	87 95       	ror	r24
    102a:	6a 95       	dec	r22
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_voidGetPinValue+0x66>
    102e:	81 70       	andi	r24, 0x01	; 1
    1030:	fa 01       	movw	r30, r20
    1032:	80 83       	st	Z, r24
    1034:	08 95       	ret

00001036 <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	a8 f5       	brcc	.+106    	; 0x10a4 <DIO_voidActivePinInPullUpResistance+0x6e>
    103a:	68 30       	cpi	r22, 0x08	; 8
    103c:	98 f5       	brcc	.+102    	; 0x10a4 <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	89 f0       	breq	.+34     	; 0x1064 <DIO_voidActivePinInPullUpResistance+0x2e>
    1042:	28 f0       	brcs	.+10     	; 0x104e <DIO_voidActivePinInPullUpResistance+0x18>
    1044:	82 30       	cpi	r24, 0x02	; 2
    1046:	c9 f0       	breq	.+50     	; 0x107a <DIO_voidActivePinInPullUpResistance+0x44>
    1048:	83 30       	cpi	r24, 0x03	; 3
    104a:	11 f1       	breq	.+68     	; 0x1090 <DIO_voidActivePinInPullUpResistance+0x5a>
    104c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    104e:	2b b3       	in	r18, 0x1b	; 27
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_voidActivePinInPullUpResistance+0x24>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_voidActivePinInPullUpResistance+0x20>
    105e:	82 2b       	or	r24, r18
    1060:	8b bb       	out	0x1b, r24	; 27
			break;
    1062:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    1064:	28 b3       	in	r18, 0x18	; 24
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_voidActivePinInPullUpResistance+0x3a>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	6a 95       	dec	r22
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_voidActivePinInPullUpResistance+0x36>
    1074:	82 2b       	or	r24, r18
    1076:	88 bb       	out	0x18, r24	; 24
			break;
    1078:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    107a:	25 b3       	in	r18, 0x15	; 21
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_voidActivePinInPullUpResistance+0x50>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	6a 95       	dec	r22
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_voidActivePinInPullUpResistance+0x4c>
    108a:	82 2b       	or	r24, r18
    108c:	85 bb       	out	0x15, r24	; 21
			break;
    108e:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    1090:	22 b3       	in	r18, 0x12	; 18
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_voidActivePinInPullUpResistance+0x66>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	6a 95       	dec	r22
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_voidActivePinInPullUpResistance+0x62>
    10a0:	82 2b       	or	r24, r18
    10a2:	82 bb       	out	0x12, r24	; 18
    10a4:	08 95       	ret

000010a6 <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    10a6:	8f b7       	in	r24, 0x3f	; 63
    10a8:	80 68       	ori	r24, 0x80	; 128
    10aa:	8f bf       	out	0x3f, r24	; 63
    10ac:	08 95       	ret

000010ae <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    10ae:	83 b7       	in	r24, 0x33	; 51
    10b0:	8f 7b       	andi	r24, 0xBF	; 191
    10b2:	83 bf       	out	0x33, r24	; 51
    10b4:	83 b7       	in	r24, 0x33	; 51
    10b6:	88 60       	ori	r24, 0x08	; 8
    10b8:	83 bf       	out	0x33, r24	; 51
    10ba:	83 b7       	in	r24, 0x33	; 51
    10bc:	8f 7e       	andi	r24, 0xEF	; 239
    10be:	83 bf       	out	0x33, r24	; 51
    10c0:	83 b7       	in	r24, 0x33	; 51
    10c2:	8f 7d       	andi	r24, 0xDF	; 223
    10c4:	83 bf       	out	0x33, r24	; 51
    10c6:	89 b7       	in	r24, 0x39	; 57
    10c8:	82 60       	ori	r24, 0x02	; 2
    10ca:	89 bf       	out	0x39, r24	; 57
    10cc:	89 ef       	ldi	r24, 0xF9	; 249
    10ce:	8c bf       	out	0x3c, r24	; 60
    10d0:	08 95       	ret

000010d2 <TMR0_voidStart>:
    10d2:	83 b7       	in	r24, 0x33	; 51
    10d4:	81 60       	ori	r24, 0x01	; 1
    10d6:	83 bf       	out	0x33, r24	; 51
    10d8:	83 b7       	in	r24, 0x33	; 51
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	83 bf       	out	0x33, r24	; 51
    10de:	83 b7       	in	r24, 0x33	; 51
    10e0:	8b 7f       	andi	r24, 0xFB	; 251
    10e2:	83 bf       	out	0x33, r24	; 51
    10e4:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <local_u16Counter+0x1>
    10e8:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <local_u16Counter>
    10ec:	08 95       	ret

000010ee <TMR0_voidStop>:
    10ee:	83 b7       	in	r24, 0x33	; 51
    10f0:	8e 7f       	andi	r24, 0xFE	; 254
    10f2:	83 bf       	out	0x33, r24	; 51
    10f4:	83 b7       	in	r24, 0x33	; 51
    10f6:	8d 7f       	andi	r24, 0xFD	; 253
    10f8:	83 bf       	out	0x33, r24	; 51
    10fa:	83 b7       	in	r24, 0x33	; 51
    10fc:	8b 7f       	andi	r24, 0xFB	; 251
    10fe:	83 bf       	out	0x33, r24	; 51
    1100:	08 95       	ret

00001102 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	21 f0       	breq	.+8      	; 0x110e <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    1106:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <PRV_pFunCallBackCTC+0x1>
    110a:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <PRV_pFunCallBackCTC>
    110e:	08 95       	ret

00001110 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    1110:	88 b7       	in	r24, 0x38	; 56
    1112:	82 60       	ori	r24, 0x02	; 2
    1114:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    1116:	88 b7       	in	r24, 0x38	; 56
    1118:	81 60       	ori	r24, 0x01	; 1
    111a:	88 bf       	out	0x38, r24	; 56
    111c:	08 95       	ret

0000111e <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    111e:	1f 92       	push	r1
    1120:	0f 92       	push	r0
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	0f 92       	push	r0
    1126:	11 24       	eor	r1, r1
    1128:	2f 93       	push	r18
    112a:	3f 93       	push	r19
    112c:	4f 93       	push	r20
    112e:	5f 93       	push	r21
    1130:	6f 93       	push	r22
    1132:	7f 93       	push	r23
    1134:	8f 93       	push	r24
    1136:	9f 93       	push	r25
    1138:	af 93       	push	r26
    113a:	bf 93       	push	r27
    113c:	ef 93       	push	r30
    113e:	ff 93       	push	r31
	
	
	local_u16Counter++;
    1140:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <local_u16Counter>
    1144:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <local_u16Counter+0x1>
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <local_u16Counter+0x1>
    114e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    1152:	88 3e       	cpi	r24, 0xE8	; 232
    1154:	93 40       	sbci	r25, 0x03	; 3
    1156:	69 f4       	brne	.+26     	; 0x1172 <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    1158:	81 e7       	ldi	r24, 0x71	; 113
    115a:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    115c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <local_u16Counter+0x1>
    1160:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    1164:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <PRV_pFunCallBackOVF>
    1168:	f0 91 c6 02 	lds	r31, 0x02C6	; 0x8002c6 <PRV_pFunCallBackOVF+0x1>
    116c:	30 97       	sbiw	r30, 0x00	; 0
    116e:	09 f0       	breq	.+2      	; 0x1172 <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    1170:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	bf 91       	pop	r27
    1178:	af 91       	pop	r26
    117a:	9f 91       	pop	r25
    117c:	8f 91       	pop	r24
    117e:	7f 91       	pop	r23
    1180:	6f 91       	pop	r22
    1182:	5f 91       	pop	r21
    1184:	4f 91       	pop	r20
    1186:	3f 91       	pop	r19
    1188:	2f 91       	pop	r18
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	0f 90       	pop	r0
    1190:	1f 90       	pop	r1
    1192:	18 95       	reti

00001194 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    1194:	1f 92       	push	r1
    1196:	0f 92       	push	r0
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	0f 92       	push	r0
    119c:	11 24       	eor	r1, r1
    119e:	2f 93       	push	r18
    11a0:	3f 93       	push	r19
    11a2:	4f 93       	push	r20
    11a4:	5f 93       	push	r21
    11a6:	6f 93       	push	r22
    11a8:	7f 93       	push	r23
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	af 93       	push	r26
    11b0:	bf 93       	push	r27
    11b2:	ef 93       	push	r30
    11b4:	ff 93       	push	r31
	

	
	local_u16Counter++;
    11b6:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <local_u16Counter>
    11ba:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <local_u16Counter+0x1>
    11be:	01 96       	adiw	r24, 0x01	; 1
    11c0:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <local_u16Counter+0x1>
    11c4:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    11c8:	88 38       	cpi	r24, 0x88	; 136
    11ca:	93 41       	sbci	r25, 0x13	; 19
    11cc:	69 f4       	brne	.+26     	; 0x11e8 <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    11ce:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <local_u16Counter+0x1>
    11d2:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    11d6:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <PRV_pFunCallBackCTC>
    11da:	f0 91 c4 02 	lds	r31, 0x02C4	; 0x8002c4 <PRV_pFunCallBackCTC+0x1>
    11de:	30 97       	sbiw	r30, 0x00	; 0
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    11e2:	09 95       	icall
			TMR0clear_flag();
    11e4:	0e 94 88 08 	call	0x1110	; 0x1110 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <TWI_voidInitMaster>:
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
		
		while(0==GET_BIT(TWCR_REG,TWINT));
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    120a:	8c e0       	ldi	r24, 0x0C	; 12
    120c:	80 b9       	out	0x00, r24	; 0
    120e:	81 b1       	in	r24, 0x01	; 1
    1210:	8d 7f       	andi	r24, 0xFD	; 253
    1212:	81 b9       	out	0x01, r24	; 1
    1214:	81 b1       	in	r24, 0x01	; 1
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	81 b9       	out	0x01, r24	; 1
    121a:	86 b7       	in	r24, 0x36	; 54
    121c:	84 60       	ori	r24, 0x04	; 4
    121e:	86 bf       	out	0x36, r24	; 54
    1220:	08 95       	ret

00001222 <TWI_voidSendStartCondition>:
    1222:	86 b7       	in	r24, 0x36	; 54
    1224:	80 62       	ori	r24, 0x20	; 32
    1226:	86 bf       	out	0x36, r24	; 54
    1228:	86 b7       	in	r24, 0x36	; 54
    122a:	80 68       	ori	r24, 0x80	; 128
    122c:	86 bf       	out	0x36, r24	; 54
    122e:	06 b6       	in	r0, 0x36	; 54
    1230:	07 fe       	sbrs	r0, 7
    1232:	fd cf       	rjmp	.-6      	; 0x122e <TWI_voidSendStartCondition+0xc>
    1234:	81 b1       	in	r24, 0x01	; 1
    1236:	88 7f       	andi	r24, 0xF8	; 248
    1238:	88 30       	cpi	r24, 0x08	; 8
    123a:	e1 f7       	brne	.-8      	; 0x1234 <TWI_voidSendStartCondition+0x12>
    123c:	08 95       	ret

0000123e <TWI_voidSendStopCondition>:
    123e:	86 b7       	in	r24, 0x36	; 54
    1240:	80 61       	ori	r24, 0x10	; 16
    1242:	86 bf       	out	0x36, r24	; 54
    1244:	86 b7       	in	r24, 0x36	; 54
    1246:	80 68       	ori	r24, 0x80	; 128
    1248:	86 bf       	out	0x36, r24	; 54
    124a:	08 95       	ret

0000124c <TWI_voidSendSlaveAddWithWrite>:
    124c:	88 23       	and	r24, r24
    124e:	94 f0       	brlt	.+36     	; 0x1274 <TWI_voidSendSlaveAddWithWrite+0x28>
    1250:	88 0f       	add	r24, r24
    1252:	83 b9       	out	0x03, r24	; 3
    1254:	83 b1       	in	r24, 0x03	; 3
    1256:	8e 7f       	andi	r24, 0xFE	; 254
    1258:	83 b9       	out	0x03, r24	; 3
    125a:	86 b7       	in	r24, 0x36	; 54
    125c:	8f 7d       	andi	r24, 0xDF	; 223
    125e:	86 bf       	out	0x36, r24	; 54
    1260:	86 b7       	in	r24, 0x36	; 54
    1262:	80 68       	ori	r24, 0x80	; 128
    1264:	86 bf       	out	0x36, r24	; 54
    1266:	06 b6       	in	r0, 0x36	; 54
    1268:	07 fe       	sbrs	r0, 7
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <TWI_voidSendSlaveAddWithWrite+0x1a>
    126c:	81 b1       	in	r24, 0x01	; 1
    126e:	88 7f       	andi	r24, 0xF8	; 248
    1270:	88 31       	cpi	r24, 0x18	; 24
    1272:	e1 f7       	brne	.-8      	; 0x126c <TWI_voidSendSlaveAddWithWrite+0x20>
    1274:	08 95       	ret

00001276 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    1276:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    1278:	86 b7       	in	r24, 0x36	; 54
    127a:	80 68       	ori	r24, 0x80	; 128
    127c:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    127e:	06 b6       	in	r0, 0x36	; 54
    1280:	07 fe       	sbrs	r0, 7
    1282:	fd cf       	rjmp	.-6      	; 0x127e <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    1284:	81 b1       	in	r24, 0x01	; 1
    1286:	88 7f       	andi	r24, 0xF8	; 248
    1288:	88 32       	cpi	r24, 0x28	; 40
    128a:	e1 f7       	brne	.-8      	; 0x1284 <TWI_voidTransmitMasterDataByte+0xe>
}
    128c:	08 95       	ret

0000128e <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    128e:	8b b1       	in	r24, 0x0b	; 11
    1290:	8d 7f       	andi	r24, 0xFD	; 253
    1292:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    1294:	87 e6       	ldi	r24, 0x67	; 103
    1296:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    1298:	8a b1       	in	r24, 0x0a	; 10
    129a:	8b 7f       	andi	r24, 0xFB	; 251
    129c:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    129e:	86 e8       	ldi	r24, 0x86	; 134
    12a0:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    12a2:	8a b1       	in	r24, 0x0a	; 10
    12a4:	80 61       	ori	r24, 0x10	; 16
    12a6:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    12a8:	8a b1       	in	r24, 0x0a	; 10
    12aa:	88 60       	ori	r24, 0x08	; 8
    12ac:	8a b9       	out	0x0a, r24	; 10
    12ae:	08 95       	ret

000012b0 <__udivmodsi4>:
    12b0:	a1 e2       	ldi	r26, 0x21	; 33
    12b2:	1a 2e       	mov	r1, r26
    12b4:	aa 1b       	sub	r26, r26
    12b6:	bb 1b       	sub	r27, r27
    12b8:	fd 01       	movw	r30, r26
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <__udivmodsi4_ep>

000012bc <__udivmodsi4_loop>:
    12bc:	aa 1f       	adc	r26, r26
    12be:	bb 1f       	adc	r27, r27
    12c0:	ee 1f       	adc	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	a2 17       	cp	r26, r18
    12c6:	b3 07       	cpc	r27, r19
    12c8:	e4 07       	cpc	r30, r20
    12ca:	f5 07       	cpc	r31, r21
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <__udivmodsi4_ep>
    12ce:	a2 1b       	sub	r26, r18
    12d0:	b3 0b       	sbc	r27, r19
    12d2:	e4 0b       	sbc	r30, r20
    12d4:	f5 0b       	sbc	r31, r21

000012d6 <__udivmodsi4_ep>:
    12d6:	66 1f       	adc	r22, r22
    12d8:	77 1f       	adc	r23, r23
    12da:	88 1f       	adc	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	1a 94       	dec	r1
    12e0:	69 f7       	brne	.-38     	; 0x12bc <__udivmodsi4_loop>
    12e2:	60 95       	com	r22
    12e4:	70 95       	com	r23
    12e6:	80 95       	com	r24
    12e8:	90 95       	com	r25
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	bd 01       	movw	r22, r26
    12f0:	cf 01       	movw	r24, r30
    12f2:	08 95       	ret

000012f4 <_exit>:
    12f4:	f8 94       	cli

000012f6 <__stop_program>:
    12f6:	ff cf       	rjmp	.-2      	; 0x12f6 <__stop_program>
