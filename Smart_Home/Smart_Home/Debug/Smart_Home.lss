
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020c  00800060  00001624  000016b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080026c  0080026c  000018c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d5c  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001014  00000000  00000000  000059b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020a1  00000000  00000000  000069c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000748  00000000  00000000  00008a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f73  00000000  00000000  000091b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e5a  00000000  00000000  0000a127  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000bf81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_10>
      2c:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e2       	ldi	r30, 0x24	; 36
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 03 	call	0x724	; 0x724 <main>
      8a:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
      92:	0e 94 5d 06 	call	0xcba	; 0xcba <UART_voidInit>
      96:	08 95       	ret

00000098 <EEPROM_voidInit>:
	{
		//error
	}
	
	
}
      98:	0e 94 d2 05 	call	0xba4	; 0xba4 <TWI_voidInitMaster>
      9c:	08 95       	ret

0000009e <EEPROM_voidWritePage>:
      9e:	0f 93       	push	r16
      a0:	1f 93       	push	r17
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	61 15       	cp	r22, r1
      a8:	71 05       	cpc	r23, r1
      aa:	f9 f0       	breq	.+62     	; 0xea <EEPROM_voidWritePage+0x4c>
      ac:	8b 01       	movw	r16, r22
      ae:	d8 2f       	mov	r29, r24
      b0:	c9 2f       	mov	r28, r25
      b2:	c0 65       	ori	r28, 0x50	; 80
      b4:	0e 94 de 05 	call	0xbbc	; 0xbbc <TWI_voidSendStartCondition>
      b8:	8c 2f       	mov	r24, r28
      ba:	0e 94 01 06 	call	0xc02	; 0xc02 <TWI_voidSendSlaveAddWithWrite>
      be:	8d 2f       	mov	r24, r29
      c0:	0e 94 2b 06 	call	0xc56	; 0xc56 <TWI_voidTransmitMasterDataByte>
      c4:	c0 e0       	ldi	r28, 0x00	; 0
      c6:	07 c0       	rjmp	.+14     	; 0xd6 <EEPROM_voidWritePage+0x38>
      c8:	f8 01       	movw	r30, r16
      ca:	ec 0f       	add	r30, r28
      cc:	f1 1d       	adc	r31, r1
      ce:	80 81       	ld	r24, Z
      d0:	0e 94 2b 06 	call	0xc56	; 0xc56 <TWI_voidTransmitMasterDataByte>
      d4:	cf 5f       	subi	r28, 0xFF	; 255
      d6:	c8 30       	cpi	r28, 0x08	; 8
      d8:	b8 f3       	brcs	.-18     	; 0xc8 <EEPROM_voidWritePage+0x2a>
      da:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <TWI_voidSendStopCondition>
      de:	8f e1       	ldi	r24, 0x1F	; 31
      e0:	9e e4       	ldi	r25, 0x4E	; 78
      e2:	01 97       	sbiw	r24, 0x01	; 1
      e4:	f1 f7       	brne	.-4      	; 0xe2 <EEPROM_voidWritePage+0x44>
      e6:	00 c0       	rjmp	.+0      	; 0xe8 <EEPROM_voidWritePage+0x4a>
      e8:	00 00       	nop
      ea:	df 91       	pop	r29
      ec:	cf 91       	pop	r28
      ee:	1f 91       	pop	r17
      f0:	0f 91       	pop	r16
      f2:	08 95       	ret

000000f4 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
      f4:	ef 92       	push	r14
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
     100:	41 15       	cp	r20, r1
     102:	51 05       	cpc	r21, r1
     104:	81 f1       	breq	.+96     	; 0x166 <EEPROM_voidSequentialRead+0x72>
     106:	61 15       	cp	r22, r1
     108:	22 e0       	ldi	r18, 0x02	; 2
     10a:	72 07       	cpc	r23, r18
     10c:	60 f5       	brcc	.+88     	; 0x166 <EEPROM_voidSequentialRead+0x72>
     10e:	8a 01       	movw	r16, r20
     110:	7b 01       	movw	r14, r22
     112:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     114:	c9 2f       	mov	r28, r25
     116:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
     118:	0e 94 de 05 	call	0xbbc	; 0xbbc <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     11c:	8c 2f       	mov	r24, r28
     11e:	0e 94 01 06 	call	0xc02	; 0xc02 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     122:	8d 2f       	mov	r24, r29
     124:	0e 94 2b 06 	call	0xc56	; 0xc56 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
     128:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
     12c:	8c 2f       	mov	r24, r28
     12e:	0e 94 16 06 	call	0xc2c	; 0xc2c <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
     132:	c0 e0       	ldi	r28, 0x00	; 0
     134:	d0 e0       	ldi	r29, 0x00	; 0
     136:	06 c0       	rjmp	.+12     	; 0x144 <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
     138:	c8 01       	movw	r24, r16
     13a:	8c 0f       	add	r24, r28
     13c:	9d 1f       	adc	r25, r29
     13e:	0e 94 37 06 	call	0xc6e	; 0xc6e <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
     142:	21 96       	adiw	r28, 0x01	; 1
     144:	c7 01       	movw	r24, r14
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	c8 17       	cp	r28, r24
     14a:	d9 07       	cpc	r29, r25
     14c:	a8 f3       	brcs	.-22     	; 0x138 <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
     14e:	80 0f       	add	r24, r16
     150:	91 1f       	adc	r25, r17
     152:	0e 94 4d 06 	call	0xc9a	; 0xc9a <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
     156:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <TWI_voidSendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e1       	ldi	r24, 0x1F	; 31
     15c:	9e e4       	ldi	r25, 0x4E	; 78
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <EEPROM_voidSequentialRead+0x6a>
     162:	00 c0       	rjmp	.+0      	; 0x164 <EEPROM_voidSequentialRead+0x70>
     164:	00 00       	nop
	{
		//error state
	}


     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	08 95       	ret

00000174 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     174:	41 e0       	ldi	r20, 0x01	; 1
     176:	64 e0       	ldi	r22, 0x04	; 4
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     17e:	41 e0       	ldi	r20, 0x01	; 1
     180:	65 e0       	ldi	r22, 0x05	; 5
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     188:	41 e0       	ldi	r20, 0x01	; 1
     18a:	66 e0       	ldi	r22, 0x06	; 6
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	63 e0       	ldi	r22, 0x03	; 3
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	64 e0       	ldi	r22, 0x04	; 4
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	65 e0       	ldi	r22, 0x05	; 5
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	66 e0       	ldi	r22, 0x06	; 6
     1b4:	82 e0       	ldi	r24, 0x02	; 2
     1b6:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     1ba:	63 e0       	ldi	r22, 0x03	; 3
     1bc:	82 e0       	ldi	r24, 0x02	; 2
     1be:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     1c2:	64 e0       	ldi	r22, 0x04	; 4
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     1ca:	65 e0       	ldi	r22, 0x05	; 5
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     1d2:	66 e0       	ldi	r22, 0x06	; 6
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <DIO_voidActivePinInPullUpResistance>
     1da:	08 95       	ret

000001dc <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     1dc:	6f 92       	push	r6
     1de:	7f 92       	push	r7
     1e0:	8f 92       	push	r8
     1e2:	9f 92       	push	r9
     1e4:	af 92       	push	r10
     1e6:	bf 92       	push	r11
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	6b 97       	sbiw	r28, 0x1b	; 27
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	f8 94       	cli
     202:	de bf       	out	0x3e, r29	; 62
     204:	0f be       	out	0x3f, r0	; 63
     206:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	09 f4       	brne	.+2      	; 0x20e <KPD_voidGetValue+0x32>
     20c:	7e c0       	rjmp	.+252    	; 0x30a <KPD_voidGetValue+0x12e>
     20e:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	88 8f       	std	Y+24, r24	; 0x18
     214:	89 8f       	std	Y+25, r24	; 0x19
     216:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     218:	34 e0       	ldi	r19, 0x04	; 4
     21a:	3d 8b       	std	Y+21, r19	; 0x15
     21c:	25 e0       	ldi	r18, 0x05	; 5
     21e:	2e 8b       	std	Y+22, r18	; 0x16
     220:	96 e0       	ldi	r25, 0x06	; 6
     222:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	89 8b       	std	Y+17, r24	; 0x11
     228:	8a 8b       	std	Y+18, r24	; 0x12
     22a:	8b 8b       	std	Y+19, r24	; 0x13
     22c:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	8d 87       	std	Y+13, r24	; 0x0d
     232:	3e 87       	std	Y+14, r19	; 0x0e
     234:	2f 87       	std	Y+15, r18	; 0x0f
     236:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     238:	8c e0       	ldi	r24, 0x0C	; 12
     23a:	e4 e6       	ldi	r30, 0x64	; 100
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	de 01       	movw	r26, r28
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	01 90       	ld	r0, Z+
     244:	0d 92       	st	X+, r0
     246:	8a 95       	dec	r24
     248:	e1 f7       	brne	.-8      	; 0x242 <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     24a:	8f ef       	ldi	r24, 0xFF	; 255
     24c:	f5 01       	movw	r30, r10
     24e:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     250:	81 2c       	mov	r8, r1
     252:	57 c0       	rjmp	.+174    	; 0x302 <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     254:	c8 2c       	mov	r12, r8
     256:	d1 2c       	mov	r13, r1
     258:	e5 e1       	ldi	r30, 0x15	; 21
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	ec 0f       	add	r30, r28
     25e:	fd 1f       	adc	r31, r29
     260:	ec 0d       	add	r30, r12
     262:	fd 1d       	adc	r31, r13
     264:	60 80       	ld	r6, Z
     266:	e8 e1       	ldi	r30, 0x18	; 24
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	ec 0f       	add	r30, r28
     26c:	fd 1f       	adc	r31, r29
     26e:	ec 0d       	add	r30, r12
     270:	fd 1d       	adc	r31, r13
     272:	70 80       	ld	r7, Z
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	66 2d       	mov	r22, r6
     278:	87 2d       	mov	r24, r7
     27a:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     27e:	10 e0       	ldi	r17, 0x00	; 0
     280:	38 c0       	rjmp	.+112    	; 0x2f2 <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     282:	e1 2e       	mov	r14, r17
     284:	f1 2c       	mov	r15, r1
     286:	ed e0       	ldi	r30, 0x0D	; 13
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	ec 0f       	add	r30, r28
     28c:	fd 1f       	adc	r31, r29
     28e:	ee 0d       	add	r30, r14
     290:	ff 1d       	adc	r31, r15
     292:	00 81       	ld	r16, Z
     294:	e1 e1       	ldi	r30, 0x11	; 17
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	ec 0f       	add	r30, r28
     29a:	fd 1f       	adc	r31, r29
     29c:	ee 0d       	add	r30, r14
     29e:	ff 1d       	adc	r31, r15
     2a0:	90 80       	ld	r9, Z
     2a2:	ae 01       	movw	r20, r28
     2a4:	45 5e       	subi	r20, 0xE5	; 229
     2a6:	5f 4f       	sbci	r21, 0xFF	; 255
     2a8:	60 2f       	mov	r22, r16
     2aa:	89 2d       	mov	r24, r9
     2ac:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     2b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2b2:	81 11       	cpse	r24, r1
     2b4:	1d c0       	rjmp	.+58     	; 0x2f0 <KPD_voidGetValue+0x114>
     2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     2b8:	ae 01       	movw	r20, r28
     2ba:	45 5e       	subi	r20, 0xE5	; 229
     2bc:	5f 4f       	sbci	r21, 0xFF	; 255
     2be:	60 2f       	mov	r22, r16
     2c0:	89 2d       	mov	r24, r9
     2c2:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     2c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2c8:	88 23       	and	r24, r24
     2ca:	b1 f3       	breq	.-20     	; 0x2b8 <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     2cc:	c7 01       	movw	r24, r14
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	e8 0e       	add	r14, r24
     2d4:	f9 1e       	adc	r15, r25
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	8c 0f       	add	r24, r28
     2dc:	9d 1f       	adc	r25, r29
     2de:	e8 0e       	add	r14, r24
     2e0:	f9 1e       	adc	r15, r25
     2e2:	f7 01       	movw	r30, r14
     2e4:	ec 0d       	add	r30, r12
     2e6:	fd 1d       	adc	r31, r13
     2e8:	80 81       	ld	r24, Z
     2ea:	f5 01       	movw	r30, r10
     2ec:	80 83       	st	Z, r24
     2ee:	0d c0       	rjmp	.+26     	; 0x30a <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     2f0:	1f 5f       	subi	r17, 0xFF	; 255
     2f2:	14 30       	cpi	r17, 0x04	; 4
     2f4:	30 f2       	brcs	.-116    	; 0x282 <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     2f6:	41 e0       	ldi	r20, 0x01	; 1
     2f8:	66 2d       	mov	r22, r6
     2fa:	87 2d       	mov	r24, r7
     2fc:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     300:	83 94       	inc	r8
     302:	f2 e0       	ldi	r31, 0x02	; 2
     304:	f8 15       	cp	r31, r8
     306:	08 f0       	brcs	.+2      	; 0x30a <KPD_voidGetValue+0x12e>
     308:	a5 cf       	rjmp	.-182    	; 0x254 <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
     30a:	6b 96       	adiw	r28, 0x1b	; 27
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	de bf       	out	0x3e, r29	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	1f 91       	pop	r17
     31c:	0f 91       	pop	r16
     31e:	ff 90       	pop	r15
     320:	ef 90       	pop	r14
     322:	df 90       	pop	r13
     324:	cf 90       	pop	r12
     326:	bf 90       	pop	r11
     328:	af 90       	pop	r10
     32a:	9f 90       	pop	r9
     32c:	8f 90       	pop	r8
     32e:	7f 90       	pop	r7
     330:	6f 90       	pop	r6
     332:	08 95       	ret

00000334 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     334:	cf 93       	push	r28
     336:	c8 2f       	mov	r28, r24
     338:	80 ff       	sbrs	r24, 0
     33a:	06 c0       	rjmp	.+12     	; 0x348 <PRV_voidWriteHalfPort+0x14>
     33c:	41 e0       	ldi	r20, 0x01	; 1
     33e:	64 e0       	ldi	r22, 0x04	; 4
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     346:	05 c0       	rjmp	.+10     	; 0x352 <PRV_voidWriteHalfPort+0x1e>
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	64 e0       	ldi	r22, 0x04	; 4
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     352:	c1 ff       	sbrs	r28, 1
     354:	06 c0       	rjmp	.+12     	; 0x362 <PRV_voidWriteHalfPort+0x2e>
     356:	41 e0       	ldi	r20, 0x01	; 1
     358:	65 e0       	ldi	r22, 0x05	; 5
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     360:	05 c0       	rjmp	.+10     	; 0x36c <PRV_voidWriteHalfPort+0x38>
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	65 e0       	ldi	r22, 0x05	; 5
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     36c:	c2 ff       	sbrs	r28, 2
     36e:	06 c0       	rjmp	.+12     	; 0x37c <PRV_voidWriteHalfPort+0x48>
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	66 e0       	ldi	r22, 0x06	; 6
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     37a:	05 c0       	rjmp	.+10     	; 0x386 <PRV_voidWriteHalfPort+0x52>
     37c:	40 e0       	ldi	r20, 0x00	; 0
     37e:	66 e0       	ldi	r22, 0x06	; 6
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     386:	c3 ff       	sbrs	r28, 3
     388:	06 c0       	rjmp	.+12     	; 0x396 <PRV_voidWriteHalfPort+0x62>
     38a:	41 e0       	ldi	r20, 0x01	; 1
     38c:	67 e0       	ldi	r22, 0x07	; 7
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <PRV_voidWriteHalfPort+0x6c>
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	67 e0       	ldi	r22, 0x07	; 7
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <LCD_voidSendCommand>:
     3a4:	cf 93       	push	r28
     3a6:	c8 2f       	mov	r28, r24
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     3bc:	8c 2f       	mov	r24, r28
     3be:	82 95       	swap	r24
     3c0:	8f 70       	andi	r24, 0x0F	; 15
     3c2:	0e 94 9a 01 	call	0x334	; 0x334 <PRV_voidWriteHalfPort>
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	63 e0       	ldi	r22, 0x03	; 3
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     3d0:	8f e9       	ldi	r24, 0x9F	; 159
     3d2:	9f e0       	ldi	r25, 0x0F	; 15
     3d4:	01 97       	sbiw	r24, 0x01	; 1
     3d6:	f1 f7       	brne	.-4      	; 0x3d4 <LCD_voidSendCommand+0x30>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <LCD_voidSendCommand+0x36>
     3da:	00 00       	nop
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	63 e0       	ldi	r22, 0x03	; 3
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     3e6:	8c 2f       	mov	r24, r28
     3e8:	0e 94 9a 01 	call	0x334	; 0x334 <PRV_voidWriteHalfPort>
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	63 e0       	ldi	r22, 0x03	; 3
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     3f6:	8f e9       	ldi	r24, 0x9F	; 159
     3f8:	9f e0       	ldi	r25, 0x0F	; 15
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_voidSendCommand+0x56>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	63 e0       	ldi	r22, 0x03	; 3
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <LCD_voidInit>:
     410:	41 e0       	ldi	r20, 0x01	; 1
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	62 e0       	ldi	r22, 0x02	; 2
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	63 e0       	ldi	r22, 0x03	; 3
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     42e:	41 e0       	ldi	r20, 0x01	; 1
     430:	64 e0       	ldi	r22, 0x04	; 4
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     438:	41 e0       	ldi	r20, 0x01	; 1
     43a:	65 e0       	ldi	r22, 0x05	; 5
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	66 e0       	ldi	r22, 0x06	; 6
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     44c:	41 e0       	ldi	r20, 0x01	; 1
     44e:	67 e0       	ldi	r22, 0x07	; 7
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     456:	2f e7       	ldi	r18, 0x7F	; 127
     458:	85 eb       	ldi	r24, 0xB5	; 181
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	21 50       	subi	r18, 0x01	; 1
     45e:	80 40       	sbci	r24, 0x00	; 0
     460:	90 40       	sbci	r25, 0x00	; 0
     462:	e1 f7       	brne	.-8      	; 0x45c <LCD_voidInit+0x4c>
     464:	00 c0       	rjmp	.+0      	; 0x466 <LCD_voidInit+0x56>
     466:	00 00       	nop
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     472:	40 e0       	ldi	r20, 0x00	; 0
     474:	62 e0       	ldi	r22, 0x02	; 2
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     47c:	82 e0       	ldi	r24, 0x02	; 2
     47e:	0e 94 9a 01 	call	0x334	; 0x334 <PRV_voidWriteHalfPort>
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	63 e0       	ldi	r22, 0x03	; 3
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     48c:	8f e9       	ldi	r24, 0x9F	; 159
     48e:	9f e0       	ldi	r25, 0x0F	; 15
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <LCD_voidInit+0x80>
     494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_voidInit+0x86>
     496:	00 00       	nop
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	63 e0       	ldi	r22, 0x03	; 3
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     4a2:	88 e2       	ldi	r24, 0x28	; 40
     4a4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
     4a8:	90 ef       	ldi	r25, 0xF0	; 240
     4aa:	9a 95       	dec	r25
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <LCD_voidInit+0x9a>
     4ae:	8f e0       	ldi	r24, 0x0F	; 15
     4b0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
     4b4:	20 ef       	ldi	r18, 0xF0	; 240
     4b6:	2a 95       	dec	r18
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <LCD_voidInit+0xa6>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
     4c0:	8f e3       	ldi	r24, 0x3F	; 63
     4c2:	9f e1       	ldi	r25, 0x1F	; 31
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_voidInit+0xb4>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_voidInit+0xba>
     4ca:	00 00       	nop
     4cc:	86 e0       	ldi	r24, 0x06	; 6
     4ce:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
     4d2:	08 95       	ret

000004d4 <LCD_voidDisplayChar>:
     4d4:	cf 93       	push	r28
     4d6:	c8 2f       	mov	r28, r24
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	62 e0       	ldi	r22, 0x02	; 2
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     4ec:	8c 2f       	mov	r24, r28
     4ee:	82 95       	swap	r24
     4f0:	8f 70       	andi	r24, 0x0F	; 15
     4f2:	0e 94 9a 01 	call	0x334	; 0x334 <PRV_voidWriteHalfPort>
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	63 e0       	ldi	r22, 0x03	; 3
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     500:	8f e9       	ldi	r24, 0x9F	; 159
     502:	9f e0       	ldi	r25, 0x0F	; 15
     504:	01 97       	sbiw	r24, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <LCD_voidDisplayChar+0x30>
     508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_voidDisplayChar+0x36>
     50a:	00 00       	nop
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	63 e0       	ldi	r22, 0x03	; 3
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     516:	8c 2f       	mov	r24, r28
     518:	0e 94 9a 01 	call	0x334	; 0x334 <PRV_voidWriteHalfPort>
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	63 e0       	ldi	r22, 0x03	; 3
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     526:	8f e9       	ldi	r24, 0x9F	; 159
     528:	9f e0       	ldi	r25, 0x0F	; 15
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_voidDisplayChar+0x56>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <LCD_voidDisplayChar+0x5c>
     530:	00 00       	nop
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	63 e0       	ldi	r22, 0x03	; 3
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <LCD_voidDisplayString>:
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	29 f4       	brne	.+10     	; 0x554 <LCD_voidDisplayString+0x14>
     54a:	0c c0       	rjmp	.+24     	; 0x564 <LCD_voidDisplayString+0x24>
     54c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_voidDisplayChar>
     550:	cf 5f       	subi	r28, 0xFF	; 255
     552:	02 c0       	rjmp	.+4      	; 0x558 <LCD_voidDisplayString+0x18>
     554:	8c 01       	movw	r16, r24
     556:	c0 e0       	ldi	r28, 0x00	; 0
     558:	f8 01       	movw	r30, r16
     55a:	ec 0f       	add	r30, r28
     55c:	f1 1d       	adc	r31, r1
     55e:	80 81       	ld	r24, Z
     560:	81 11       	cpse	r24, r1
     562:	f4 cf       	rjmp	.-24     	; 0x54c <LCD_voidDisplayString+0xc>
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	08 95       	ret

0000056c <LCD_voidDisplayStringDelay>:
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	00 97       	sbiw	r24, 0x00	; 0
     574:	71 f4       	brne	.+28     	; 0x592 <LCD_voidDisplayStringDelay+0x26>
     576:	15 c0       	rjmp	.+42     	; 0x5a2 <LCD_voidDisplayStringDelay+0x36>
     578:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_voidDisplayChar>
     57c:	cf 5f       	subi	r28, 0xFF	; 255
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	80 e7       	ldi	r24, 0x70	; 112
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	21 50       	subi	r18, 0x01	; 1
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <LCD_voidDisplayStringDelay+0x18>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <LCD_voidDisplayStringDelay+0x22>
     58e:	00 00       	nop
     590:	02 c0       	rjmp	.+4      	; 0x596 <LCD_voidDisplayStringDelay+0x2a>
     592:	8c 01       	movw	r16, r24
     594:	c0 e0       	ldi	r28, 0x00	; 0
     596:	f8 01       	movw	r30, r16
     598:	ec 0f       	add	r30, r28
     59a:	f1 1d       	adc	r31, r1
     59c:	80 81       	ld	r24, Z
     59e:	81 11       	cpse	r24, r1
     5a0:	eb cf       	rjmp	.-42     	; 0x578 <LCD_voidDisplayStringDelay+0xc>
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	08 95       	ret

000005aa <LCD_voidDisplayNumber>:
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <LCD_voidDisplayNumber+0xa>
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <LCD_voidDisplayNumber+0xc>
     5b6:	1f 92       	push	r1
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	26 2f       	mov	r18, r22
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	08 c0       	rjmp	.+16     	; 0x5d2 <LCD_voidDisplayNumber+0x28>
     5c2:	1f 5f       	subi	r17, 0xFF	; 255
     5c4:	ed ec       	ldi	r30, 0xCD	; 205
     5c6:	6e 9f       	mul	r22, r30
     5c8:	61 2d       	mov	r22, r1
     5ca:	11 24       	eor	r1, r1
     5cc:	66 95       	lsr	r22
     5ce:	66 95       	lsr	r22
     5d0:	66 95       	lsr	r22
     5d2:	61 11       	cpse	r22, r1
     5d4:	f6 cf       	rjmp	.-20     	; 0x5c2 <LCD_voidDisplayNumber+0x18>
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	1a c0       	rjmp	.+52     	; 0x60e <LCD_voidDisplayNumber+0x64>
     5da:	62 2f       	mov	r22, r18
     5dc:	2a e0       	ldi	r18, 0x0A	; 10
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__udivmodsi4>
     5e8:	73 2f       	mov	r23, r19
     5ea:	84 2f       	mov	r24, r20
     5ec:	95 2f       	mov	r25, r21
     5ee:	a0 2f       	mov	r26, r16
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	11 96       	adiw	r26, 0x01	; 1
     5f4:	e1 2f       	mov	r30, r17
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	ea 1b       	sub	r30, r26
     5fa:	fb 0b       	sbc	r31, r27
     5fc:	41 e0       	ldi	r20, 0x01	; 1
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	4c 0f       	add	r20, r28
     602:	5d 1f       	adc	r21, r29
     604:	e4 0f       	add	r30, r20
     606:	f5 1f       	adc	r31, r21
     608:	60 5d       	subi	r22, 0xD0	; 208
     60a:	60 83       	st	Z, r22
     60c:	0f 5f       	subi	r16, 0xFF	; 255
     60e:	01 17       	cp	r16, r17
     610:	20 f3       	brcs	.-56     	; 0x5da <LCD_voidDisplayNumber+0x30>
     612:	e1 e0       	ldi	r30, 0x01	; 1
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	ec 0f       	add	r30, r28
     618:	fd 1f       	adc	r31, r29
     61a:	e1 0f       	add	r30, r17
     61c:	f1 1d       	adc	r31, r1
     61e:	10 82       	st	Z, r1
     620:	10 e0       	ldi	r17, 0x00	; 0
     622:	03 c0       	rjmp	.+6      	; 0x62a <LCD_voidDisplayNumber+0x80>
     624:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_voidDisplayChar>
     628:	1f 5f       	subi	r17, 0xFF	; 255
     62a:	e1 e0       	ldi	r30, 0x01	; 1
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	ec 0f       	add	r30, r28
     630:	fd 1f       	adc	r31, r29
     632:	e1 0f       	add	r30, r17
     634:	f1 1d       	adc	r31, r1
     636:	80 81       	ld	r24, Z
     638:	81 11       	cpse	r24, r1
     63a:	f4 cf       	rjmp	.-24     	; 0x624 <LCD_voidDisplayNumber+0x7a>
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <LCD_voidClear>:
     650:	40 e0       	ldi	r20, 0x00	; 0
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	62 e0       	ldi	r22, 0x02	; 2
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	0e 94 9a 01 	call	0x334	; 0x334 <PRV_voidWriteHalfPort>
     66a:	41 e0       	ldi	r20, 0x01	; 1
     66c:	63 e0       	ldi	r22, 0x03	; 3
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     674:	8f e9       	ldi	r24, 0x9F	; 159
     676:	9f e0       	ldi	r25, 0x0F	; 15
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	f1 f7       	brne	.-4      	; 0x678 <LCD_voidClear+0x28>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <LCD_voidClear+0x2e>
     67e:	00 00       	nop
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	0e 94 9a 01 	call	0x334	; 0x334 <PRV_voidWriteHalfPort>
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	63 e0       	ldi	r22, 0x03	; 3
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     69a:	8f e9       	ldi	r24, 0x9F	; 159
     69c:	9f e0       	ldi	r25, 0x0F	; 15
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <LCD_voidClear+0x4e>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <LCD_voidClear+0x54>
     6a4:	00 00       	nop
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	63 e0       	ldi	r22, 0x03	; 3
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     6b0:	08 95       	ret

000006b2 <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
	if(copy_u8Position<40)
     6b6:	68 32       	cpi	r22, 0x28	; 40
     6b8:	a0 f4       	brcc	.+40     	; 0x6e2 <LCD_voidGoTOSpecificPosition+0x30>
     6ba:	c6 2f       	mov	r28, r22
     6bc:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     6c4:	d1 30       	cpi	r29, 0x01	; 1
     6c6:	19 f0       	breq	.+6      	; 0x6ce <LCD_voidGoTOSpecificPosition+0x1c>
     6c8:	d2 30       	cpi	r29, 0x02	; 2
     6ca:	31 f0       	breq	.+12     	; 0x6d8 <LCD_voidGoTOSpecificPosition+0x26>
     6cc:	0a c0       	rjmp	.+20     	; 0x6e2 <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     6ce:	8c 2f       	mov	r24, r28
     6d0:	80 68       	ori	r24, 0x80	; 128
     6d2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
		
			
			break;
     6d6:	05 c0       	rjmp	.+10     	; 0x6e2 <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     6d8:	80 e4       	ldi	r24, 0x40	; 64
     6da:	8c 0f       	add	r24, r28
     6dc:	80 68       	ori	r24, 0x80	; 128
     6de:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
     6ee:	08 95       	ret

000006f0 <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     6f0:	41 30       	cpi	r20, 0x01	; 1
     6f2:	19 f0       	breq	.+6      	; 0x6fa <LED_voidOn+0xa>
     6f4:	42 30       	cpi	r20, 0x02	; 2
     6f6:	29 f0       	breq	.+10     	; 0x702 <LED_voidOn+0x12>
     6f8:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
		break;
     700:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     708:	08 95       	ret

0000070a <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     70a:	41 30       	cpi	r20, 0x01	; 1
     70c:	19 f0       	breq	.+6      	; 0x714 <LED_voidOff+0xa>
     70e:	42 30       	cpi	r20, 0x02	; 2
     710:	29 f0       	breq	.+10     	; 0x71c <LED_voidOff+0x12>
     712:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
		break;
     71a:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	0e 94 2d 04 	call	0x85a	; 0x85a <DIO_voidSetPinValue>
     722:	08 95       	ret

00000724 <main>:

extern u8 global_accessType;

int main()
{
	APP_init();
     724:	0e 94 59 08 	call	0x10b2	; 0x10b2 <APP_init>
     728:	2f ef       	ldi	r18, 0xFF	; 255
     72a:	83 ed       	ldi	r24, 0xD3	; 211
     72c:	90 e3       	ldi	r25, 0x30	; 48
     72e:	21 50       	subi	r18, 0x01	; 1
     730:	80 40       	sbci	r24, 0x00	; 0
     732:	90 40       	sbci	r25, 0x00	; 0
     734:	e1 f7       	brne	.-8      	; 0x72e <main+0xa>
     736:	00 c0       	rjmp	.+0      	; 0x738 <main+0x14>
     738:	00 00       	nop
_delay_ms(1000);


	while(1)
	{
		if (global_accessType ==accessPermited)
     73a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <global_accessType>
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	19 f4       	brne	.+6      	; 0x748 <main+0x24>
		{
		KPD_Interface_user();
     742:	0e 94 d5 08 	call	0x11aa	; 0x11aa <KPD_Interface_user>
     746:	f9 cf       	rjmp	.-14     	; 0x73a <main+0x16>
		}
		else if (global_accessType ==accessDenied)
     748:	81 11       	cpse	r24, r1
     74a:	f7 cf       	rjmp	.-18     	; 0x73a <main+0x16>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
     74c:	8b e8       	ldi	r24, 0x8B	; 139
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
		}
		
		
		
	}
}
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret

0000075a <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
     75a:	84 30       	cpi	r24, 0x04	; 4
     75c:	08 f0       	brcs	.+2      	; 0x760 <DIO_voidSetPinDirection+0x6>
     75e:	7c c0       	rjmp	.+248    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     760:	68 30       	cpi	r22, 0x08	; 8
     762:	08 f0       	brcs	.+2      	; 0x766 <DIO_voidSetPinDirection+0xc>
     764:	79 c0       	rjmp	.+242    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     766:	42 30       	cpi	r20, 0x02	; 2
     768:	08 f0       	brcs	.+2      	; 0x76c <DIO_voidSetPinDirection+0x12>
     76a:	76 c0       	rjmp	.+236    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	19 f1       	breq	.+70     	; 0x7b6 <DIO_voidSetPinDirection+0x5c>
     770:	30 f0       	brcs	.+12     	; 0x77e <DIO_voidSetPinDirection+0x24>
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	e1 f1       	breq	.+120    	; 0x7ee <DIO_voidSetPinDirection+0x94>
     776:	83 30       	cpi	r24, 0x03	; 3
     778:	09 f4       	brne	.+2      	; 0x77c <DIO_voidSetPinDirection+0x22>
     77a:	54 c0       	rjmp	.+168    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     77c:	08 95       	ret
     77e:	44 23       	and	r20, r20
     780:	71 f0       	breq	.+28     	; 0x79e <DIO_voidSetPinDirection+0x44>
     782:	41 30       	cpi	r20, 0x01	; 1
     784:	09 f0       	breq	.+2      	; 0x788 <DIO_voidSetPinDirection+0x2e>
     786:	68 c0       	rjmp	.+208    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     788:	2a b3       	in	r18, 0x1a	; 26
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_voidSetPinDirection+0x3a>
     790:	88 0f       	add	r24, r24
     792:	99 1f       	adc	r25, r25
     794:	6a 95       	dec	r22
     796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_voidSetPinDirection+0x36>
     798:	82 2b       	or	r24, r18
     79a:	8a bb       	out	0x1a, r24	; 26
     79c:	08 95       	ret
     79e:	2a b3       	in	r18, 0x1a	; 26
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <DIO_voidSetPinDirection+0x50>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	6a 95       	dec	r22
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <DIO_voidSetPinDirection+0x4c>
     7ae:	80 95       	com	r24
     7b0:	82 23       	and	r24, r18
     7b2:	8a bb       	out	0x1a, r24	; 26
     7b4:	08 95       	ret
     7b6:	44 23       	and	r20, r20
     7b8:	71 f0       	breq	.+28     	; 0x7d6 <DIO_voidSetPinDirection+0x7c>
     7ba:	41 30       	cpi	r20, 0x01	; 1
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <DIO_voidSetPinDirection+0x66>
     7be:	4c c0       	rjmp	.+152    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7c0:	27 b3       	in	r18, 0x17	; 23
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <DIO_voidSetPinDirection+0x72>
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	6a 95       	dec	r22
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <DIO_voidSetPinDirection+0x6e>
     7d0:	82 2b       	or	r24, r18
     7d2:	87 bb       	out	0x17, r24	; 23
     7d4:	08 95       	ret
     7d6:	27 b3       	in	r18, 0x17	; 23
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_voidSetPinDirection+0x88>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	6a 95       	dec	r22
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_voidSetPinDirection+0x84>
     7e6:	80 95       	com	r24
     7e8:	82 23       	and	r24, r18
     7ea:	87 bb       	out	0x17, r24	; 23
     7ec:	08 95       	ret
     7ee:	44 23       	and	r20, r20
     7f0:	69 f0       	breq	.+26     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7f2:	41 30       	cpi	r20, 0x01	; 1
     7f4:	89 f5       	brne	.+98     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     7f6:	24 b3       	in	r18, 0x14	; 20
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	6a 95       	dec	r22
     804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_voidSetPinDirection+0xa4>
     806:	82 2b       	or	r24, r18
     808:	84 bb       	out	0x14, r24	; 20
     80a:	08 95       	ret
     80c:	24 b3       	in	r18, 0x14	; 20
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	6a 95       	dec	r22
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	80 95       	com	r24
     81e:	82 23       	and	r24, r18
     820:	84 bb       	out	0x14, r24	; 20
     822:	08 95       	ret
     824:	44 23       	and	r20, r20
     826:	69 f0       	breq	.+26     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     828:	41 30       	cpi	r20, 0x01	; 1
     82a:	b1 f4       	brne	.+44     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     82c:	21 b3       	in	r18, 0x11	; 17
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	6a 95       	dec	r22
     83a:	e2 f7       	brpl	.-8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     83c:	82 2b       	or	r24, r18
     83e:	81 bb       	out	0x11, r24	; 17
     840:	08 95       	ret
     842:	21 b3       	in	r18, 0x11	; 17
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	6a 95       	dec	r22
     850:	e2 f7       	brpl	.-8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     852:	80 95       	com	r24
     854:	82 23       	and	r24, r18
     856:	81 bb       	out	0x11, r24	; 17
     858:	08 95       	ret

0000085a <DIO_voidSetPinValue>:
     85a:	84 30       	cpi	r24, 0x04	; 4
     85c:	08 f0       	brcs	.+2      	; 0x860 <__stack+0x1>
     85e:	7c c0       	rjmp	.+248    	; 0x958 <__stack+0xf9>
     860:	68 30       	cpi	r22, 0x08	; 8
     862:	08 f0       	brcs	.+2      	; 0x866 <__stack+0x7>
     864:	79 c0       	rjmp	.+242    	; 0x958 <__stack+0xf9>
     866:	42 30       	cpi	r20, 0x02	; 2
     868:	08 f0       	brcs	.+2      	; 0x86c <__stack+0xd>
     86a:	76 c0       	rjmp	.+236    	; 0x958 <__stack+0xf9>
     86c:	81 30       	cpi	r24, 0x01	; 1
     86e:	19 f1       	breq	.+70     	; 0x8b6 <__stack+0x57>
     870:	30 f0       	brcs	.+12     	; 0x87e <__stack+0x1f>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	e1 f1       	breq	.+120    	; 0x8ee <__stack+0x8f>
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	09 f4       	brne	.+2      	; 0x87c <__stack+0x1d>
     87a:	54 c0       	rjmp	.+168    	; 0x924 <__stack+0xc5>
     87c:	08 95       	ret
     87e:	44 23       	and	r20, r20
     880:	71 f0       	breq	.+28     	; 0x89e <__stack+0x3f>
     882:	41 30       	cpi	r20, 0x01	; 1
     884:	09 f0       	breq	.+2      	; 0x888 <__stack+0x29>
     886:	68 c0       	rjmp	.+208    	; 0x958 <__stack+0xf9>
     888:	2b b3       	in	r18, 0x1b	; 27
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
     890:	88 0f       	add	r24, r24
     892:	99 1f       	adc	r25, r25
     894:	6a 95       	dec	r22
     896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
     898:	82 2b       	or	r24, r18
     89a:	8b bb       	out	0x1b, r24	; 27
     89c:	08 95       	ret
     89e:	2b b3       	in	r18, 0x1b	; 27
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	6a 95       	dec	r22
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
     8ae:	80 95       	com	r24
     8b0:	82 23       	and	r24, r18
     8b2:	8b bb       	out	0x1b, r24	; 27
     8b4:	08 95       	ret
     8b6:	44 23       	and	r20, r20
     8b8:	71 f0       	breq	.+28     	; 0x8d6 <__stack+0x77>
     8ba:	41 30       	cpi	r20, 0x01	; 1
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <__stack+0x61>
     8be:	4c c0       	rjmp	.+152    	; 0x958 <__stack+0xf9>
     8c0:	28 b3       	in	r18, 0x18	; 24
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	6a 95       	dec	r22
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	82 2b       	or	r24, r18
     8d2:	88 bb       	out	0x18, r24	; 24
     8d4:	08 95       	ret
     8d6:	28 b3       	in	r18, 0x18	; 24
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <__stack+0x83>
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	6a 95       	dec	r22
     8e4:	e2 f7       	brpl	.-8      	; 0x8de <__stack+0x7f>
     8e6:	80 95       	com	r24
     8e8:	82 23       	and	r24, r18
     8ea:	88 bb       	out	0x18, r24	; 24
     8ec:	08 95       	ret
     8ee:	44 23       	and	r20, r20
     8f0:	69 f0       	breq	.+26     	; 0x90c <__stack+0xad>
     8f2:	41 30       	cpi	r20, 0x01	; 1
     8f4:	89 f5       	brne	.+98     	; 0x958 <__stack+0xf9>
     8f6:	25 b3       	in	r18, 0x15	; 21
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
     8fe:	88 0f       	add	r24, r24
     900:	99 1f       	adc	r25, r25
     902:	6a 95       	dec	r22
     904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
     906:	82 2b       	or	r24, r18
     908:	85 bb       	out	0x15, r24	; 21
     90a:	08 95       	ret
     90c:	25 b3       	in	r18, 0x15	; 21
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0xb9>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	6a 95       	dec	r22
     91a:	e2 f7       	brpl	.-8      	; 0x914 <__stack+0xb5>
     91c:	80 95       	com	r24
     91e:	82 23       	and	r24, r18
     920:	85 bb       	out	0x15, r24	; 21
     922:	08 95       	ret
     924:	44 23       	and	r20, r20
     926:	69 f0       	breq	.+26     	; 0x942 <__stack+0xe3>
     928:	41 30       	cpi	r20, 0x01	; 1
     92a:	b1 f4       	brne	.+44     	; 0x958 <__stack+0xf9>
     92c:	22 b3       	in	r18, 0x12	; 18
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0xd9>
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	6a 95       	dec	r22
     93a:	e2 f7       	brpl	.-8      	; 0x934 <__stack+0xd5>
     93c:	82 2b       	or	r24, r18
     93e:	82 bb       	out	0x12, r24	; 18
     940:	08 95       	ret
     942:	22 b3       	in	r18, 0x12	; 18
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	02 c0       	rjmp	.+4      	; 0x94e <__stack+0xef>
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	6a 95       	dec	r22
     950:	e2 f7       	brpl	.-8      	; 0x94a <__stack+0xeb>
     952:	80 95       	com	r24
     954:	82 23       	and	r24, r18
     956:	82 bb       	out	0x12, r24	; 18
     958:	08 95       	ret

0000095a <DIO_voidGetPinValue>:
     95a:	84 30       	cpi	r24, 0x04	; 4
     95c:	c0 f5       	brcc	.+112    	; 0x9ce <DIO_voidGetPinValue+0x74>
     95e:	68 30       	cpi	r22, 0x08	; 8
     960:	b0 f5       	brcc	.+108    	; 0x9ce <DIO_voidGetPinValue+0x74>
     962:	41 15       	cp	r20, r1
     964:	51 05       	cpc	r21, r1
     966:	99 f1       	breq	.+102    	; 0x9ce <DIO_voidGetPinValue+0x74>
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	89 f0       	breq	.+34     	; 0x98e <DIO_voidGetPinValue+0x34>
     96c:	28 f0       	brcs	.+10     	; 0x978 <DIO_voidGetPinValue+0x1e>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	c9 f0       	breq	.+50     	; 0x9a4 <DIO_voidGetPinValue+0x4a>
     972:	83 30       	cpi	r24, 0x03	; 3
     974:	11 f1       	breq	.+68     	; 0x9ba <DIO_voidGetPinValue+0x60>
     976:	08 95       	ret
     978:	89 b3       	in	r24, 0x19	; 25
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	02 c0       	rjmp	.+4      	; 0x982 <DIO_voidGetPinValue+0x28>
     97e:	95 95       	asr	r25
     980:	87 95       	ror	r24
     982:	6a 95       	dec	r22
     984:	e2 f7       	brpl	.-8      	; 0x97e <DIO_voidGetPinValue+0x24>
     986:	81 70       	andi	r24, 0x01	; 1
     988:	fa 01       	movw	r30, r20
     98a:	80 83       	st	Z, r24
     98c:	08 95       	ret
     98e:	86 b3       	in	r24, 0x16	; 22
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 c0       	rjmp	.+4      	; 0x998 <DIO_voidGetPinValue+0x3e>
     994:	95 95       	asr	r25
     996:	87 95       	ror	r24
     998:	6a 95       	dec	r22
     99a:	e2 f7       	brpl	.-8      	; 0x994 <DIO_voidGetPinValue+0x3a>
     99c:	81 70       	andi	r24, 0x01	; 1
     99e:	fa 01       	movw	r30, r20
     9a0:	80 83       	st	Z, r24
     9a2:	08 95       	ret
     9a4:	83 b3       	in	r24, 0x13	; 19
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <DIO_voidGetPinValue+0x54>
     9aa:	95 95       	asr	r25
     9ac:	87 95       	ror	r24
     9ae:	6a 95       	dec	r22
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <DIO_voidGetPinValue+0x50>
     9b2:	81 70       	andi	r24, 0x01	; 1
     9b4:	fa 01       	movw	r30, r20
     9b6:	80 83       	st	Z, r24
     9b8:	08 95       	ret
     9ba:	80 b3       	in	r24, 0x10	; 16
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <DIO_voidGetPinValue+0x6a>
     9c0:	95 95       	asr	r25
     9c2:	87 95       	ror	r24
     9c4:	6a 95       	dec	r22
     9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <DIO_voidGetPinValue+0x66>
     9c8:	81 70       	andi	r24, 0x01	; 1
     9ca:	fa 01       	movw	r30, r20
     9cc:	80 83       	st	Z, r24
     9ce:	08 95       	ret

000009d0 <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	a8 f5       	brcc	.+106    	; 0xa3e <DIO_voidActivePinInPullUpResistance+0x6e>
     9d4:	68 30       	cpi	r22, 0x08	; 8
     9d6:	98 f5       	brcc	.+102    	; 0xa3e <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	89 f0       	breq	.+34     	; 0x9fe <DIO_voidActivePinInPullUpResistance+0x2e>
     9dc:	28 f0       	brcs	.+10     	; 0x9e8 <DIO_voidActivePinInPullUpResistance+0x18>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	c9 f0       	breq	.+50     	; 0xa14 <DIO_voidActivePinInPullUpResistance+0x44>
     9e2:	83 30       	cpi	r24, 0x03	; 3
     9e4:	11 f1       	breq	.+68     	; 0xa2a <DIO_voidActivePinInPullUpResistance+0x5a>
     9e6:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
     9e8:	2b b3       	in	r18, 0x1b	; 27
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <DIO_voidActivePinInPullUpResistance+0x24>
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	6a 95       	dec	r22
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <DIO_voidActivePinInPullUpResistance+0x20>
     9f8:	82 2b       	or	r24, r18
     9fa:	8b bb       	out	0x1b, r24	; 27
			break;
     9fc:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
     9fe:	28 b3       	in	r18, 0x18	; 24
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <DIO_voidActivePinInPullUpResistance+0x3a>
     a06:	88 0f       	add	r24, r24
     a08:	99 1f       	adc	r25, r25
     a0a:	6a 95       	dec	r22
     a0c:	e2 f7       	brpl	.-8      	; 0xa06 <DIO_voidActivePinInPullUpResistance+0x36>
     a0e:	82 2b       	or	r24, r18
     a10:	88 bb       	out	0x18, r24	; 24
			break;
     a12:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
     a14:	25 b3       	in	r18, 0x15	; 21
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_voidActivePinInPullUpResistance+0x50>
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	6a 95       	dec	r22
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_voidActivePinInPullUpResistance+0x4c>
     a24:	82 2b       	or	r24, r18
     a26:	85 bb       	out	0x15, r24	; 21
			break;
     a28:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
     a2a:	22 b3       	in	r18, 0x12	; 18
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <DIO_voidActivePinInPullUpResistance+0x66>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	6a 95       	dec	r22
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <DIO_voidActivePinInPullUpResistance+0x62>
     a3a:	82 2b       	or	r24, r18
     a3c:	82 bb       	out	0x12, r24	; 18
     a3e:	08 95       	ret

00000a40 <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
     a40:	8f b7       	in	r24, 0x3f	; 63
     a42:	80 68       	ori	r24, 0x80	; 128
     a44:	8f bf       	out	0x3f, r24	; 63
     a46:	08 95       	ret

00000a48 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
     a48:	83 b7       	in	r24, 0x33	; 51
     a4a:	8f 7b       	andi	r24, 0xBF	; 191
     a4c:	83 bf       	out	0x33, r24	; 51
     a4e:	83 b7       	in	r24, 0x33	; 51
     a50:	88 60       	ori	r24, 0x08	; 8
     a52:	83 bf       	out	0x33, r24	; 51
     a54:	83 b7       	in	r24, 0x33	; 51
     a56:	8f 7e       	andi	r24, 0xEF	; 239
     a58:	83 bf       	out	0x33, r24	; 51
     a5a:	83 b7       	in	r24, 0x33	; 51
     a5c:	8f 7d       	andi	r24, 0xDF	; 223
     a5e:	83 bf       	out	0x33, r24	; 51
     a60:	89 b7       	in	r24, 0x39	; 57
     a62:	82 60       	ori	r24, 0x02	; 2
     a64:	89 bf       	out	0x39, r24	; 57
     a66:	89 ef       	ldi	r24, 0xF9	; 249
     a68:	8c bf       	out	0x3c, r24	; 60
     a6a:	08 95       	ret

00000a6c <TMR0_voidStart>:
     a6c:	83 b7       	in	r24, 0x33	; 51
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	83 bf       	out	0x33, r24	; 51
     a72:	83 b7       	in	r24, 0x33	; 51
     a74:	82 60       	ori	r24, 0x02	; 2
     a76:	83 bf       	out	0x33, r24	; 51
     a78:	83 b7       	in	r24, 0x33	; 51
     a7a:	8b 7f       	andi	r24, 0xFB	; 251
     a7c:	83 bf       	out	0x33, r24	; 51
     a7e:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__data_end+0x1>
     a82:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
     a86:	08 95       	ret

00000a88 <TMR0_voidStop>:
     a88:	83 b7       	in	r24, 0x33	; 51
     a8a:	8e 7f       	andi	r24, 0xFE	; 254
     a8c:	83 bf       	out	0x33, r24	; 51
     a8e:	83 b7       	in	r24, 0x33	; 51
     a90:	8d 7f       	andi	r24, 0xFD	; 253
     a92:	83 bf       	out	0x33, r24	; 51
     a94:	83 b7       	in	r24, 0x33	; 51
     a96:	8b 7f       	andi	r24, 0xFB	; 251
     a98:	83 bf       	out	0x33, r24	; 51
     a9a:	08 95       	ret

00000a9c <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
     aa0:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <PRV_pFunCallBackCTC+0x1>
     aa4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <PRV_pFunCallBackCTC>
     aa8:	08 95       	ret

00000aaa <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
     aaa:	88 b7       	in	r24, 0x38	; 56
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
     ab0:	88 b7       	in	r24, 0x38	; 56
     ab2:	81 60       	ori	r24, 0x01	; 1
     ab4:	88 bf       	out	0x38, r24	; 56
     ab6:	08 95       	ret

00000ab8 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	2f 93       	push	r18
     ac4:	3f 93       	push	r19
     ac6:	4f 93       	push	r20
     ac8:	5f 93       	push	r21
     aca:	6f 93       	push	r22
     acc:	7f 93       	push	r23
     ace:	8f 93       	push	r24
     ad0:	9f 93       	push	r25
     ad2:	af 93       	push	r26
     ad4:	bf 93       	push	r27
     ad6:	ef 93       	push	r30
     ad8:	ff 93       	push	r31
	
	
	local_u16Counter++;
     ada:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
     ade:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__data_end+0x1>
     ae2:	01 96       	adiw	r24, 0x01	; 1
     ae4:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
     ae8:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
     aec:	88 3e       	cpi	r24, 0xE8	; 232
     aee:	93 40       	sbci	r25, 0x03	; 3
     af0:	69 f4       	brne	.+26     	; 0xb0c <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
     af2:	81 e7       	ldi	r24, 0x71	; 113
     af4:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
     af6:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__data_end+0x1>
     afa:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
		
		if(PRV_pFunCallBackOVF != NULL)
     afe:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <PRV_pFunCallBackOVF>
     b02:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <PRV_pFunCallBackOVF+0x1>
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	09 f0       	breq	.+2      	; 0xb0c <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
     b0a:	09 95       	icall
		else
		{
				//error state
		}
	}
}
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	bf 91       	pop	r27
     b12:	af 91       	pop	r26
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	7f 91       	pop	r23
     b1a:	6f 91       	pop	r22
     b1c:	5f 91       	pop	r21
     b1e:	4f 91       	pop	r20
     b20:	3f 91       	pop	r19
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
	

	
	local_u16Counter++;
     b50:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
     b54:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__data_end+0x1>
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <__data_end+0x1>
     b5e:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <__data_end>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
     b62:	88 38       	cpi	r24, 0x88	; 136
     b64:	93 41       	sbci	r25, 0x13	; 19
     b66:	69 f4       	brne	.+26     	; 0xb82 <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
     b68:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <__data_end+0x1>
     b6c:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <__data_end>
		
		if(PRV_pFunCallBackCTC != NULL)
     b70:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <PRV_pFunCallBackCTC>
     b74:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <PRV_pFunCallBackCTC+0x1>
     b78:	30 97       	sbiw	r30, 0x00	; 0
     b7a:	19 f0       	breq	.+6      	; 0xb82 <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
     b7c:	09 95       	icall
			TMR0clear_flag();
     b7e:	0e 94 55 05 	call	0xaaa	; 0xaaa <TMR0clear_flag>
		{
				//error state
		}
	}
	
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
     ba4:	8c e0       	ldi	r24, 0x0C	; 12
     ba6:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
     ba8:	81 b1       	in	r24, 0x01	; 1
     baa:	8d 7f       	andi	r24, 0xFD	; 253
     bac:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
     bae:	81 b1       	in	r24, 0x01	; 1
     bb0:	8e 7f       	andi	r24, 0xFE	; 254
     bb2:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
     bb4:	86 b7       	in	r24, 0x36	; 54
     bb6:	84 60       	ori	r24, 0x04	; 4
     bb8:	86 bf       	out	0x36, r24	; 54
     bba:	08 95       	ret

00000bbc <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
     bbc:	86 b7       	in	r24, 0x36	; 54
     bbe:	80 62       	ori	r24, 0x20	; 32
     bc0:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
     bc2:	86 b7       	in	r24, 0x36	; 54
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
     bc8:	06 b6       	in	r0, 0x36	; 54
     bca:	07 fe       	sbrs	r0, 7
     bcc:	fd cf       	rjmp	.-6      	; 0xbc8 <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
     bce:	81 b1       	in	r24, 0x01	; 1
     bd0:	88 7f       	andi	r24, 0xF8	; 248
     bd2:	88 30       	cpi	r24, 0x08	; 8
     bd4:	e1 f7       	brne	.-8      	; 0xbce <TWI_voidSendStartCondition+0x12>
}
     bd6:	08 95       	ret

00000bd8 <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
     bd8:	86 b7       	in	r24, 0x36	; 54
     bda:	80 62       	ori	r24, 0x20	; 32
     bdc:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
     bde:	86 b7       	in	r24, 0x36	; 54
     be0:	80 68       	ori	r24, 0x80	; 128
     be2:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
     be4:	06 b6       	in	r0, 0x36	; 54
     be6:	07 fe       	sbrs	r0, 7
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
     bea:	81 b1       	in	r24, 0x01	; 1
     bec:	88 7f       	andi	r24, 0xF8	; 248
     bee:	80 31       	cpi	r24, 0x10	; 16
     bf0:	e1 f7       	brne	.-8      	; 0xbea <TWI_voidSendRepeatedStartCondition+0x12>
}
     bf2:	08 95       	ret

00000bf4 <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
     bf4:	86 b7       	in	r24, 0x36	; 54
     bf6:	80 61       	ori	r24, 0x10	; 16
     bf8:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
     bfa:	86 b7       	in	r24, 0x36	; 54
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	86 bf       	out	0x36, r24	; 54
     c00:	08 95       	ret

00000c02 <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
     c02:	88 23       	and	r24, r24
     c04:	94 f0       	brlt	.+36     	; 0xc2a <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
     c06:	88 0f       	add	r24, r24
     c08:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
     c0a:	83 b1       	in	r24, 0x03	; 3
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
     c10:	86 b7       	in	r24, 0x36	; 54
     c12:	8f 7d       	andi	r24, 0xDF	; 223
     c14:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
     c16:	86 b7       	in	r24, 0x36	; 54
     c18:	80 68       	ori	r24, 0x80	; 128
     c1a:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
     c1c:	06 b6       	in	r0, 0x36	; 54
     c1e:	07 fe       	sbrs	r0, 7
     c20:	fd cf       	rjmp	.-6      	; 0xc1c <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
     c22:	81 b1       	in	r24, 0x01	; 1
     c24:	88 7f       	andi	r24, 0xF8	; 248
     c26:	88 31       	cpi	r24, 0x18	; 24
     c28:	e1 f7       	brne	.-8      	; 0xc22 <TWI_voidSendSlaveAddWithWrite+0x20>
     c2a:	08 95       	ret

00000c2c <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
     c2c:	88 23       	and	r24, r24
     c2e:	94 f0       	brlt	.+36     	; 0xc54 <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
     c30:	88 0f       	add	r24, r24
     c32:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
     c34:	83 b1       	in	r24, 0x03	; 3
     c36:	81 60       	ori	r24, 0x01	; 1
     c38:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
     c3a:	86 b7       	in	r24, 0x36	; 54
     c3c:	8f 7d       	andi	r24, 0xDF	; 223
     c3e:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
     c40:	86 b7       	in	r24, 0x36	; 54
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
     c46:	06 b6       	in	r0, 0x36	; 54
     c48:	07 fe       	sbrs	r0, 7
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
     c4c:	81 b1       	in	r24, 0x01	; 1
     c4e:	88 7f       	andi	r24, 0xF8	; 248
     c50:	80 34       	cpi	r24, 0x40	; 64
     c52:	e1 f7       	brne	.-8      	; 0xc4c <TWI_voidSendSlaveAddWithRead+0x20>
     c54:	08 95       	ret

00000c56 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
     c56:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
     c58:	86 b7       	in	r24, 0x36	; 54
     c5a:	80 68       	ori	r24, 0x80	; 128
     c5c:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
     c5e:	06 b6       	in	r0, 0x36	; 54
     c60:	07 fe       	sbrs	r0, 7
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
     c64:	81 b1       	in	r24, 0x01	; 1
     c66:	88 7f       	andi	r24, 0xF8	; 248
     c68:	88 32       	cpi	r24, 0x28	; 40
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <TWI_voidTransmitMasterDataByte+0xe>
}
     c6c:	08 95       	ret

00000c6e <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
     c6e:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
     c70:	89 2b       	or	r24, r25
     c72:	91 f0       	breq	.+36     	; 0xc98 <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
     c74:	96 b7       	in	r25, 0x36	; 54
     c76:	90 64       	ori	r25, 0x40	; 64
     c78:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
     c7a:	96 b7       	in	r25, 0x36	; 54
     c7c:	90 68       	ori	r25, 0x80	; 128
     c7e:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
     c80:	06 b6       	in	r0, 0x36	; 54
     c82:	07 fe       	sbrs	r0, 7
     c84:	fd cf       	rjmp	.-6      	; 0xc80 <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
     c86:	91 b1       	in	r25, 0x01	; 1
     c88:	98 7f       	andi	r25, 0xF8	; 248
     c8a:	90 35       	cpi	r25, 0x50	; 80
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
     c8e:	83 b1       	in	r24, 0x03	; 3
     c90:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
     c92:	86 b7       	in	r24, 0x36	; 54
     c94:	8f 7b       	andi	r24, 0xBF	; 191
     c96:	86 bf       	out	0x36, r24	; 54
     c98:	08 95       	ret

00000c9a <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
     c9a:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
     c9c:	89 2b       	or	r24, r25
     c9e:	61 f0       	breq	.+24     	; 0xcb8 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
     ca0:	96 b7       	in	r25, 0x36	; 54
     ca2:	90 68       	ori	r25, 0x80	; 128
     ca4:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
     ca6:	06 b6       	in	r0, 0x36	; 54
     ca8:	07 fe       	sbrs	r0, 7
     caa:	fd cf       	rjmp	.-6      	; 0xca6 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
     cac:	91 b1       	in	r25, 0x01	; 1
     cae:	98 7f       	andi	r25, 0xF8	; 248
     cb0:	98 35       	cpi	r25, 0x58	; 88
     cb2:	e1 f7       	brne	.-8      	; 0xcac <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
     cb4:	83 b1       	in	r24, 0x03	; 3
     cb6:	80 83       	st	Z, r24
     cb8:	08 95       	ret

00000cba <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
     cba:	8b b1       	in	r24, 0x0b	; 11
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
     cc0:	87 e6       	ldi	r24, 0x67	; 103
     cc2:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
     cc4:	8a b1       	in	r24, 0x0a	; 10
     cc6:	8b 7f       	andi	r24, 0xFB	; 251
     cc8:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
     cca:	86 e8       	ldi	r24, 0x86	; 134
     ccc:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
     cce:	8a b1       	in	r24, 0x0a	; 10
     cd0:	80 61       	ori	r24, 0x10	; 16
     cd2:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
     cd4:	8a b1       	in	r24, 0x0a	; 10
     cd6:	88 60       	ori	r24, 0x08	; 8
     cd8:	8a b9       	out	0x0a, r24	; 10
     cda:	08 95       	ret

00000cdc <LCD_DisplayTemp>:
}

void LCD_DisplayTemp()
{

    LCD_voidClear();
     cdc:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
    LCD_voidDisplayStringDelay((u8 *)"Temp: 30c");
     ce0:	85 e7       	ldi	r24, 0x75	; 117
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     ce8:	80 ec       	ldi	r24, 0xC0	; 192
     cea:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"0-go to home");
     cee:	89 e9       	ldi	r24, 0x99	; 153
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
    while (local_KPDIdleValue == KPD_Not_Pressed)
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <LCD_DisplayTemp+0x24>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
     cf8:	80 e6       	ldi	r24, 0x60	; 96
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>

    LCD_voidClear();
    LCD_voidDisplayStringDelay((u8 *)"Temp: 30c");
    LCD_voidSendCommand(Write_SecondLine);
    LCD_voidDisplayStringDelay((u8 *)"0-go to home");
    while (local_KPDIdleValue == KPD_Not_Pressed)
     d00:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d04:	8f 3f       	cpi	r24, 0xFF	; 255
     d06:	c1 f3       	breq	.-16     	; 0xcf8 <LCD_DisplayTemp+0x1c>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
    }
    if (local_KPDIdleValue == '0')
     d08:	80 33       	cpi	r24, 0x30	; 48
     d0a:	11 f4       	brne	.+4      	; 0xd10 <LCD_DisplayTemp+0x34>
    {
        LCD_voidClear();
     d0c:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
    }
    TMR0clear_flag();
     d10:	0e 94 55 05 	call	0xaaa	; 0xaaa <TMR0clear_flag>
    LCD_voidClear();
     d14:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
     d18:	08 95       	ret

00000d1a <HOME_voidInit>:



void HOME_voidInit(void)
{
	EEPROM_voidInit();
     d1a:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidInit>
	
    // initialize the LCD
    LCD_voidInit();
     d1e:	0e 94 08 02 	call	0x410	; 0x410 <LCD_voidInit>
	
	// initialize the KPD
    KPD_voidInit();
     d22:	0e 94 ba 00 	call	0x174	; 0x174 <KPD_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
     d26:	0e 94 49 00 	call	0x92	; 0x92 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	0e 94 ad 03 	call	0x75a	; 0x75a <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
     d3e:	0e 94 20 05 	call	0xa40	; 0xa40 <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
     d42:	0e 94 24 05 	call	0xa48	; 0xa48 <TMR0_voidInit>
    // initialize the LEDs(1-5)
    LED_voidInit(DIO_PORTA, DIO_PIN0);
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN1);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     d56:	62 e0       	ldi	r22, 0x02	; 2
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     d5e:	63 e0       	ldi	r22, 0x03	; 3
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LED_voidInit>
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     d66:	62 e0       	ldi	r22, 0x02	; 2
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <LED_voidInit>
     d6e:	08 95       	ret

00000d70 <HOME_voidLocalGetUserAndPass>:
	//check alarm 
}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	09 f4       	brne	.+2      	; 0xd84 <HOME_voidLocalGetUserAndPass+0x14>
     d82:	5f c0       	rjmp	.+190    	; 0xe42 <HOME_voidLocalGetUserAndPass+0xd2>
     d84:	61 15       	cp	r22, r1
     d86:	71 05       	cpc	r23, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <HOME_voidLocalGetUserAndPass+0x1c>
     d8a:	5b c0       	rjmp	.+182    	; 0xe42 <HOME_voidLocalGetUserAndPass+0xd2>
     d8c:	7b 01       	movw	r14, r22
     d8e:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     d90:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     d9c:	86 ea       	ldi	r24, 0xA6	; 166
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     dac:	88 eb       	ldi	r24, 0xB8	; 184
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
     db4:	2f ef       	ldi	r18, 0xFF	; 255
     db6:	83 ed       	ldi	r24, 0xD3	; 211
     db8:	90 e3       	ldi	r25, 0x30	; 48
     dba:	21 50       	subi	r18, 0x01	; 1
     dbc:	80 40       	sbci	r24, 0x00	; 0
     dbe:	90 40       	sbci	r25, 0x00	; 0
     dc0:	e1 f7       	brne	.-8      	; 0xdba <HOME_voidLocalGetUserAndPass+0x4a>
     dc2:	00 c0       	rjmp	.+0      	; 0xdc4 <HOME_voidLocalGetUserAndPass+0x54>
     dc4:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     dc6:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     dd2:	86 ec       	ldi	r24, 0xC6	; 198
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	11 c0       	rjmp	.+34     	; 0xe00 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     dde:	e6 01       	movw	r28, r12
     de0:	c1 0f       	add	r28, r17
     de2:	d1 1d       	adc	r29, r1
     de4:	ce 01       	movw	r24, r28
     de6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     dea:	98 81       	ld	r25, Y
     dec:	9f 3f       	cpi	r25, 0xFF	; 255
     dee:	b9 f3       	breq	.-18     	; 0xdde <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     df0:	61 2f       	mov	r22, r17
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     df8:	88 81       	ld	r24, Y
     dfa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     dfe:	1f 5f       	subi	r17, 0xFF	; 255
     e00:	18 30       	cpi	r17, 0x08	; 8
     e02:	68 f3       	brcs	.-38     	; 0xdde <HOME_voidLocalGetUserAndPass+0x6e>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
	
		//display request for pass
		LCD_voidClear();
     e04:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     e10:	81 ed       	ldi	r24, 0xD1	; 209
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     e18:	10 e0       	ldi	r17, 0x00	; 0
     e1a:	11 c0       	rjmp	.+34     	; 0xe3e <HOME_voidLocalGetUserAndPass+0xce>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     e1c:	e7 01       	movw	r28, r14
     e1e:	c1 0f       	add	r28, r17
     e20:	d1 1d       	adc	r29, r1
     e22:	ce 01       	movw	r24, r28
     e24:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     e28:	88 81       	ld	r24, Y
     e2a:	8f 3f       	cpi	r24, 0xFF	; 255
     e2c:	b9 f3       	breq	.-18     	; 0xe1c <HOME_voidLocalGetUserAndPass+0xac>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     e2e:	61 2f       	mov	r22, r17
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     e36:	88 81       	ld	r24, Y
     e38:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     e3c:	1f 5f       	subi	r17, 0xFF	; 255
     e3e:	18 30       	cpi	r17, 0x08	; 8
     e40:	68 f3       	brcs	.-38     	; 0xe1c <HOME_voidLocalGetUserAndPass+0xac>
		//error massage
	}
			
	
		
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	08 95       	ret

00000e52 <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType )
{
     e52:	8f 92       	push	r8
     e54:	9f 92       	push	r9
     e56:	af 92       	push	r10
     e58:	bf 92       	push	r11
     e5a:	cf 92       	push	r12
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	a0 97       	sbiw	r28, 0x20	; 32
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
	//page 32 to 61 for remote user name and password the first page for user name the followed by password
	//word 500 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserType!=NULL)
     e7a:	61 15       	cp	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	09 f4       	brne	.+2      	; 0xe82 <HOME_voidCheckUserAndPass+0x30>
     e80:	f0 c0       	rjmp	.+480    	; 0x1062 <HOME_voidCheckUserAndPass+0x210>
	{
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <HOME_voidCheckUserAndPass+0x36>
     e86:	ed c0       	rjmp	.+474    	; 0x1062 <HOME_voidCheckUserAndPass+0x210>
     e88:	dc c0       	rjmp	.+440    	; 0x1042 <HOME_voidCheckUserAndPass+0x1f0>
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     e8a:	93 94       	inc	r9
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     e8c:	be 01       	movw	r22, r28
     e8e:	6f 5e       	subi	r22, 0xEF	; 239
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	ce 01       	movw	r24, r28
     e94:	49 96       	adiw	r24, 0x19	; 25
     e96:	0e 94 b8 06 	call	0xd70	; 0xd70 <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     e9a:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     e9c:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     e9e:	d1 2c       	mov	r13, r1
     ea0:	5f c0       	rjmp	.+190    	; 0xf60 <HOME_voidCheckUserAndPass+0x10e>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     ea2:	0d 2d       	mov	r16, r13
     ea4:	02 95       	swap	r16
     ea6:	00 7f       	andi	r16, 0xF0	; 240
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	ae 01       	movw	r20, r28
     eac:	47 5f       	subi	r20, 0xF7	; 247
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	68 e0       	ldi	r22, 0x08	; 8
     eb2:	70 e0       	ldi	r23, 0x00	; 0
     eb4:	c8 01       	movw	r24, r16
     eb6:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     eba:	ae 01       	movw	r20, r28
     ebc:	4f 5f       	subi	r20, 0xFF	; 255
     ebe:	5f 4f       	sbci	r21, 0xFF	; 255
     ec0:	68 e0       	ldi	r22, 0x08	; 8
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	c8 01       	movw	r24, r16
     ec6:	08 96       	adiw	r24, 0x08	; 8
     ec8:	0e 94 7a 00 	call	0xf4	; 0xf4 <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     ecc:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	14 c0       	rjmp	.+40     	; 0xefa <HOME_voidCheckUserAndPass+0xa8>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     ed2:	82 2f       	mov	r24, r18
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	e9 e1       	ldi	r30, 0x19	; 25
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	ec 0f       	add	r30, r28
     edc:	fd 1f       	adc	r31, r29
     ede:	e8 0f       	add	r30, r24
     ee0:	f9 1f       	adc	r31, r25
     ee2:	30 81       	ld	r19, Z
     ee4:	e9 e0       	ldi	r30, 0x09	; 9
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	ec 0f       	add	r30, r28
     eea:	fd 1f       	adc	r31, r29
     eec:	e8 0f       	add	r30, r24
     eee:	f9 1f       	adc	r31, r25
     ef0:	80 81       	ld	r24, Z
     ef2:	38 13       	cpse	r19, r24
     ef4:	01 c0       	rjmp	.+2      	; 0xef8 <HOME_voidCheckUserAndPass+0xa6>
						{
							Local_u8NameByteCheck++;
     ef6:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     ef8:	2f 5f       	subi	r18, 0xFF	; 255
     efa:	28 30       	cpi	r18, 0x08	; 8
     efc:	50 f3       	brcs	.-44     	; 0xed2 <HOME_voidCheckUserAndPass+0x80>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     efe:	48 30       	cpi	r20, 0x08	; 8
     f00:	69 f5       	brne	.+90     	; 0xf5c <HOME_voidCheckUserAndPass+0x10a>
     f02:	15 c0       	rjmp	.+42     	; 0xf2e <HOME_voidCheckUserAndPass+0xdc>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     f04:	82 2f       	mov	r24, r18
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	e1 e1       	ldi	r30, 0x11	; 17
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	ec 0f       	add	r30, r28
     f0e:	fd 1f       	adc	r31, r29
     f10:	e8 0f       	add	r30, r24
     f12:	f9 1f       	adc	r31, r25
     f14:	30 81       	ld	r19, Z
     f16:	e1 e0       	ldi	r30, 0x01	; 1
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	ec 0f       	add	r30, r28
     f1c:	fd 1f       	adc	r31, r29
     f1e:	e8 0f       	add	r30, r24
     f20:	f9 1f       	adc	r31, r25
     f22:	80 81       	ld	r24, Z
     f24:	38 13       	cpse	r19, r24
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <HOME_voidCheckUserAndPass+0xd8>
							{
								Local_u8PassByteCheck++;
     f28:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <HOME_voidCheckUserAndPass+0xe0>
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	28 30       	cpi	r18, 0x08	; 8
     f34:	38 f3       	brcs	.-50     	; 0xf04 <HOME_voidCheckUserAndPass+0xb2>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     f36:	48 30       	cpi	r20, 0x08	; 8
     f38:	79 f4       	brne	.+30     	; 0xf58 <HOME_voidCheckUserAndPass+0x106>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     f3a:	2f e0       	ldi	r18, 0x0F	; 15
     f3c:	d2 12       	cpse	r13, r18
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <HOME_voidCheckUserAndPass+0xfa>
							{
								*copy_pu8UserType=HOME_ADMIN;	
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	f7 01       	movw	r30, r14
     f44:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     f46:	88 24       	eor	r8, r8
     f48:	83 94       	inc	r8
     f4a:	0e c0       	rjmp	.+28     	; 0xf68 <HOME_voidCheckUserAndPass+0x116>
							{
								*copy_pu8UserType=HOME_ADMIN;	
							}
							else
							{
								*copy_pu8UserType=HOME_USER;
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	f7 01       	movw	r30, r14
     f50:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     f52:	88 24       	eor	r8, r8
     f54:	83 94       	inc	r8
     f56:	08 c0       	rjmp	.+16     	; 0xf68 <HOME_voidCheckUserAndPass+0x116>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     f58:	b3 94       	inc	r11
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <HOME_voidCheckUserAndPass+0x10c>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     f5c:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     f5e:	d3 94       	inc	r13
     f60:	ff e0       	ldi	r31, 0x0F	; 15
     f62:	fd 15       	cp	r31, r13
     f64:	08 f0       	brcs	.+2      	; 0xf68 <HOME_voidCheckUserAndPass+0x116>
     f66:	9d cf       	rjmp	.-198    	; 0xea2 <HOME_voidCheckUserAndPass+0x50>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	82 12       	cpse	r8, r18
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <HOME_voidCheckUserAndPass+0x148>
				{
					LCD_voidClear();
     f6e:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS PERMITED");
     f7a:	8b ed       	ldi	r24, 0xDB	; 219
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	99 e6       	ldi	r25, 0x69	; 105
     f86:	e8 e1       	ldi	r30, 0x18	; 24
     f88:	81 50       	subi	r24, 0x01	; 1
     f8a:	90 40       	sbci	r25, 0x00	; 0
     f8c:	e0 40       	sbci	r30, 0x00	; 0
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <HOME_voidCheckUserAndPass+0x136>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <HOME_voidCheckUserAndPass+0x140>
     f92:	00 00       	nop
					_delay_ms(500);
                    LCD_voidClear();
     f94:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
                    
					break;
     f98:	5c c0       	rjmp	.+184    	; 0x1052 <HOME_voidCheckUserAndPass+0x200>
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==16)
     f9a:	f0 e1       	ldi	r31, 0x10	; 16
     f9c:	cf 12       	cpse	r12, r31
     f9e:	27 c0       	rjmp	.+78     	; 0xfee <HOME_voidCheckUserAndPass+0x19c>
				{
					LCD_voidClear();
     fa0:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS DENIED");
     fac:	8b ee       	ldi	r24, 0xEB	; 235
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	82 e0       	ldi	r24, 0x02	; 2
     fb8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"Wrong User Name");
     fbc:	89 ef       	ldi	r24, 0xF9	; 249
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     fc4:	22 e0       	ldi	r18, 0x02	; 2
     fc6:	a2 16       	cp	r10, r18
     fc8:	d1 f1       	breq	.+116    	; 0x103e <HOME_voidCheckUserAndPass+0x1ec>
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	93 ed       	ldi	r25, 0xD3	; 211
     fce:	e0 e3       	ldi	r30, 0x30	; 48
     fd0:	81 50       	subi	r24, 0x01	; 1
     fd2:	90 40       	sbci	r25, 0x00	; 0
     fd4:	e0 40       	sbci	r30, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <HOME_voidCheckUserAndPass+0x17e>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <HOME_voidCheckUserAndPass+0x188>
     fda:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString((u8 *)"Please Try Again");
     fe4:	89 e0       	ldi	r24, 0x09	; 9
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
     fec:	28 c0       	rjmp	.+80     	; 0x103e <HOME_voidCheckUserAndPass+0x1ec>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     fee:	bb 20       	and	r11, r11
     ff0:	31 f1       	breq	.+76     	; 0x103e <HOME_voidCheckUserAndPass+0x1ec>
				{
					LCD_voidClear();
     ff2:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS DENIED");
     ffe:	8b ee       	ldi	r24, 0xEB	; 235
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"Wrong Password");
    100e:	8a e1       	ldi	r24, 0x1A	; 26
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
    1016:	f2 e0       	ldi	r31, 0x02	; 2
    1018:	af 16       	cp	r10, r31
    101a:	89 f0       	breq	.+34     	; 0x103e <HOME_voidCheckUserAndPass+0x1ec>
    101c:	2f ef       	ldi	r18, 0xFF	; 255
    101e:	83 ed       	ldi	r24, 0xD3	; 211
    1020:	90 e3       	ldi	r25, 0x30	; 48
    1022:	21 50       	subi	r18, 0x01	; 1
    1024:	80 40       	sbci	r24, 0x00	; 0
    1026:	90 40       	sbci	r25, 0x00	; 0
    1028:	e1 f7       	brne	.-8      	; 0x1022 <HOME_voidCheckUserAndPass+0x1d0>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <HOME_voidCheckUserAndPass+0x1da>
    102c:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	82 e0       	ldi	r24, 0x02	; 2
    1032:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString((u8 *)"Please Try Again");
    1036:	89 e0       	ldi	r24, 0x09	; 9
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
    103e:	a3 94       	inc	r10
    1040:	04 c0       	rjmp	.+8      	; 0x104a <HOME_voidCheckUserAndPass+0x1f8>
    1042:	7b 01       	movw	r14, r22
    1044:	81 2c       	mov	r8, r1
    1046:	91 2c       	mov	r9, r1
    1048:	a1 2c       	mov	r10, r1
    104a:	e2 e0       	ldi	r30, 0x02	; 2
    104c:	ea 15       	cp	r30, r10
    104e:	08 f0       	brcs	.+2      	; 0x1052 <HOME_voidCheckUserAndPass+0x200>
    1050:	1c cf       	rjmp	.-456    	; 0xe8a <HOME_voidCheckUserAndPass+0x38>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
    1052:	f3 e0       	ldi	r31, 0x03	; 3
    1054:	9f 12       	cpse	r9, r31
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <HOME_voidCheckUserAndPass+0x210>
    1058:	81 10       	cpse	r8, r1
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <HOME_voidCheckUserAndPass+0x210>
			{
				*copy_pu8UserType=HOME_USER_FAILED;
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	f7 01       	movw	r30, r14
    1060:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
}
    1062:	a0 96       	adiw	r28, 0x20	; 32
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	bf 90       	pop	r11
    1080:	af 90       	pop	r10
    1082:	9f 90       	pop	r9
    1084:	8f 90       	pop	r8
    1086:	08 95       	ret

00001088 <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
    1088:	89 e2       	ldi	r24, 0x29	; 41
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
    1090:	80 ec       	ldi	r24, 0xC0	; 192
    1092:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    1096:	8a e3       	ldi	r24, 0x3A	; 58
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
    109e:	2f ef       	ldi	r18, 0xFF	; 255
    10a0:	83 ed       	ldi	r24, 0xD3	; 211
    10a2:	90 e3       	ldi	r25, 0x30	; 48
    10a4:	21 50       	subi	r18, 0x01	; 1
    10a6:	80 40       	sbci	r24, 0x00	; 0
    10a8:	90 40       	sbci	r25, 0x00	; 0
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <WelcomeScreen+0x1c>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <WelcomeScreen+0x26>
    10ae:	00 00       	nop
    10b0:	08 95       	ret

000010b2 <APP_init>:




void APP_init(void)
{
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	a1 97       	sbiw	r28, 0x21	; 33
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
    10c6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <HOME_voidInit>
	
	
	
    // display the welcome screen
    WelcomeScreen();
    10ca:	0e 94 44 08 	call	0x1088	; 0x1088 <WelcomeScreen>
	LCD_voidClear();
    10ce:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
    10d2:	88 e0       	ldi	r24, 0x08	; 8
    10d4:	e0 e7       	ldi	r30, 0x70	; 112
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	de 01       	movw	r26, r28
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	01 90       	ld	r0, Z+
    10de:	0d 92       	st	X+, r0
    10e0:	8a 95       	dec	r24
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <APP_init+0x2a>
	u8 testuserpass[8]={"22222222"};
    10e4:	88 e0       	ldi	r24, 0x08	; 8
    10e6:	e9 e7       	ldi	r30, 0x79	; 121
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	de 01       	movw	r26, r28
    10ec:	19 96       	adiw	r26, 0x09	; 9
    10ee:	01 90       	ld	r0, Z+
    10f0:	0d 92       	st	X+, r0
    10f2:	8a 95       	dec	r24
    10f4:	e1 f7       	brne	.-8      	; 0x10ee <APP_init+0x3c>
	u8 testadminname[8]={"99999999"};
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	e2 e8       	ldi	r30, 0x82	; 130
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	de 01       	movw	r26, r28
    10fe:	51 96       	adiw	r26, 0x11	; 17
    1100:	01 90       	ld	r0, Z+
    1102:	0d 92       	st	X+, r0
    1104:	8a 95       	dec	r24
    1106:	e1 f7       	brne	.-8      	; 0x1100 <APP_init+0x4e>
	u8 testadminpass[8]={"99999999"};
    1108:	88 e0       	ldi	r24, 0x08	; 8
    110a:	e2 e8       	ldi	r30, 0x82	; 130
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	de 01       	movw	r26, r28
    1110:	59 96       	adiw	r26, 0x19	; 25
    1112:	01 90       	ld	r0, Z+
    1114:	0d 92       	st	X+, r0
    1116:	8a 95       	dec	r24
    1118:	e1 f7       	brne	.-8      	; 0x1112 <APP_init+0x60>
	u8 usertype;	
	
	EEPROM_voidWritePage(16,&testusername[0]);
    111a:	be 01       	movw	r22, r28
    111c:	6f 5f       	subi	r22, 0xFF	; 255
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	80 e1       	ldi	r24, 0x10	; 16
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 4f 00 	call	0x9e	; 0x9e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
    1128:	be 01       	movw	r22, r28
    112a:	67 5f       	subi	r22, 0xF7	; 247
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	88 e1       	ldi	r24, 0x18	; 24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 4f 00 	call	0x9e	; 0x9e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
    1136:	be 01       	movw	r22, r28
    1138:	6f 5e       	subi	r22, 0xEF	; 239
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	80 ef       	ldi	r24, 0xF0	; 240
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 4f 00 	call	0x9e	; 0x9e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
    1144:	be 01       	movw	r22, r28
    1146:	67 5e       	subi	r22, 0xE7	; 231
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	88 ef       	ldi	r24, 0xF8	; 248
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 4f 00 	call	0x9e	; 0x9e <EEPROM_voidWritePage>
	
	HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
    1152:	be 01       	movw	r22, r28
    1154:	6f 5d       	subi	r22, 0xDF	; 223
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	0e 94 29 07 	call	0xe52	; 0xe52 <HOME_voidCheckUserAndPass>
	LCD_voidClear();
    115e:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(usertype);
    116a:	69 a1       	ldd	r22, Y+33	; 0x21
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 94 d5 02 	call	0x5aa	; 0x5aa <LCD_voidDisplayNumber>
    1176:	2f ef       	ldi	r18, 0xFF	; 255
    1178:	83 ed       	ldi	r24, 0xD3	; 211
    117a:	90 e3       	ldi	r25, 0x30	; 48
    117c:	21 50       	subi	r18, 0x01	; 1
    117e:	80 40       	sbci	r24, 0x00	; 0
    1180:	90 40       	sbci	r25, 0x00	; 0
    1182:	e1 f7       	brne	.-8      	; 0x117c <APP_init+0xca>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <APP_init+0xd4>
    1186:	00 00       	nop





}
    1188:	a1 96       	adiw	r28, 0x21	; 33
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
    11a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
    11a4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    11a8:	08 95       	ret

000011aa <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
    11aa:	0e 94 cd 08 	call	0x119a	; 0x119a <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&LCD_DisplayTemp);
    11ae:	8e e6       	ldi	r24, 0x6E	; 110
    11b0:	96 e0       	ldi	r25, 0x06	; 6
    11b2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <TMR0_SetCallBackCTC>

        TMR0_voidStart();
    11b6:	0e 94 36 05 	call	0xa6c	; 0xa6c <TMR0_voidStart>
        LCD_voidClear();
    11ba:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
    11be:	88 e4       	ldi	r24, 0x48	; 72
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
    11c6:	80 ec       	ldi	r24, 0xC0	; 192
    11c8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temperature");
    11cc:	85 e5       	ldi	r24, 0x55	; 85
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 a0 02 	call	0x540	; 0x540 <LCD_voidDisplayString>
        Reset_AllKPDValues();
    11d4:	0e 94 cd 08 	call	0x119a	; 0x119a <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
    11d8:	0c c0       	rjmp	.+24     	; 0x11f2 <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
    11da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    11de:	80 33       	cpi	r24, 0x30	; 48
    11e0:	21 f4       	brne	.+8      	; 0x11ea <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                break;
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
    11ea:	83 e6       	ldi	r24, 0x63	; 99
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temperature");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
    11f2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_copyKPDValue>
    11f6:	8f 3f       	cpi	r24, 0xFF	; 255
    11f8:	81 f3       	breq	.-32     	; 0x11da <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
    11fa:	0e 94 44 05 	call	0xa88	; 0xa88 <TMR0_voidStop>
        switch (Local_copyKPDValue)
    11fe:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_copyKPDValue>
    1202:	81 33       	cpi	r24, 0x31	; 49
    1204:	19 f0       	breq	.+6      	; 0x120c <KPD_Interface_user+0x62>
    1206:	82 33       	cpi	r24, 0x32	; 50
    1208:	79 f0       	breq	.+30     	; 0x1228 <KPD_Interface_user+0x7e>
    120a:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
    120c:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
    1210:	83 e6       	ldi	r24, 0x63	; 99
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1218:	80 ec       	ldi	r24, 0xC0	; 192
    121a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
    121e:	80 e7       	ldi	r24, 0x70	; 112
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>

            break;
    1226:	08 95       	ret

        case ('2'):

            LCD_voidClear();
    1228:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
    122c:	8f e7       	ldi	r24, 0x7F	; 127
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1234:	80 ec       	ldi	r24, 0xC0	; 192
    1236:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
    123a:	8f e8       	ldi	r24, 0x8F	; 143
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
    1242:	8e e6       	ldi	r24, 0x6E	; 110
    1244:	96 e0       	ldi	r25, 0x06	; 6
    1246:	0e 94 4e 05 	call	0xa9c	; 0xa9c <TMR0_SetCallBackCTC>
            TMR0_voidStart();
    124a:	0e 94 36 05 	call	0xa6c	; 0xa6c <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    124e:	0c c0       	rjmp	.+24     	; 0x1268 <KPD_Interface_user+0xbe>
            {
                KPD_voidGetValue(&local_lightNum);
    1250:	82 e6       	ldi	r24, 0x62	; 98
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
    1258:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    125c:	80 33       	cpi	r24, 0x30	; 48
    125e:	21 f4       	brne	.+8      	; 0x1268 <KPD_Interface_user+0xbe>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    break;
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <KPD_Interface_user+0xc6>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1268:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightNum>
    126c:	8f 3f       	cpi	r24, 0xFF	; 255
    126e:	81 f3       	breq	.-32     	; 0x1250 <KPD_Interface_user+0xa6>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
    1270:	0e 94 44 05 	call	0xa88	; 0xa88 <TMR0_voidStop>
            switch (local_lightNum)
    1274:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightNum>
    1278:	83 33       	cpi	r24, 0x33	; 51
    127a:	09 f4       	brne	.+2      	; 0x127e <KPD_Interface_user+0xd4>
    127c:	a6 c0       	rjmp	.+332    	; 0x13ca <KPD_Interface_user+0x220>
    127e:	30 f4       	brcc	.+12     	; 0x128c <KPD_Interface_user+0xe2>
    1280:	81 33       	cpi	r24, 0x31	; 49
    1282:	69 f0       	breq	.+26     	; 0x129e <KPD_Interface_user+0xf4>
    1284:	82 33       	cpi	r24, 0x32	; 50
    1286:	09 f4       	brne	.+2      	; 0x128a <KPD_Interface_user+0xe0>
    1288:	54 c0       	rjmp	.+168    	; 0x1332 <KPD_Interface_user+0x188>
    128a:	a2 c1       	rjmp	.+836    	; 0x15d0 <KPD_Interface_user+0x426>
    128c:	85 33       	cpi	r24, 0x35	; 53
    128e:	09 f4       	brne	.+2      	; 0x1292 <KPD_Interface_user+0xe8>
    1290:	34 c1       	rjmp	.+616    	; 0x14fa <KPD_Interface_user+0x350>
    1292:	08 f4       	brcc	.+2      	; 0x1296 <KPD_Interface_user+0xec>
    1294:	e6 c0       	rjmp	.+460    	; 0x1462 <KPD_Interface_user+0x2b8>
    1296:	86 33       	cpi	r24, 0x36	; 54
    1298:	09 f4       	brne	.+2      	; 0x129c <KPD_Interface_user+0xf2>
    129a:	7b c1       	rjmp	.+758    	; 0x1592 <KPD_Interface_user+0x3e8>
    129c:	99 c1       	rjmp	.+818    	; 0x15d0 <KPD_Interface_user+0x426>
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN0, &led_status);
    129e:	43 e7       	ldi	r20, 0x73	; 115
    12a0:	52 e0       	ldi	r21, 0x02	; 2
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_voidGetPinValue>
                LCD_voidClear();
    12aa:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
                if (led_status == 1)
    12ae:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <led_status>
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	f1 f4       	brne	.+60     	; 0x12f2 <KPD_Interface_user+0x148>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
    12b6:	8c e9       	ldi	r24, 0x9C	; 156
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    12be:	80 ec       	ldi	r24, 0xC0	; 192
    12c0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    12c4:	8a ea       	ldi	r24, 0xAA	; 170
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <KPD_Interface_user+0x12c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    12ce:	81 e6       	ldi	r24, 0x61	; 97
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    12d6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    12da:	8f 3f       	cpi	r24, 0xFF	; 255
    12dc:	c1 f3       	breq	.-16     	; 0x12ce <KPD_Interface_user+0x124>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    12de:	81 33       	cpi	r24, 0x31	; 49
    12e0:	29 f4       	brne	.+10     	; 0x12ec <KPD_Interface_user+0x142>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	0e 94 85 03 	call	0x70a	; 0x70a <LED_voidOff>
                    }
                    Reset_AllKPDValues();
    12ec:	0e 94 cd 08 	call	0x119a	; 0x119a <Reset_AllKPDValues>
    12f0:	6f c1       	rjmp	.+734    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                else if (led_status == 0)
    12f2:	81 11       	cpse	r24, r1
    12f4:	6d c1       	rjmp	.+730    	; 0x15d0 <KPD_Interface_user+0x426>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
    12f6:	8b eb       	ldi	r24, 0xBB	; 187
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    12fe:	80 ec       	ldi	r24, 0xC0	; 192
    1300:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1304:	8a ec       	ldi	r24, 0xCA	; 202
    1306:	91 e0       	ldi	r25, 0x01	; 1
    1308:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <KPD_Interface_user+0x16c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    130e:	81 e6       	ldi	r24, 0x61	; 97
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1316:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    131a:	8f 3f       	cpi	r24, 0xFF	; 255
    131c:	c1 f3       	breq	.-16     	; 0x130e <KPD_Interface_user+0x164>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    131e:	81 33       	cpi	r24, 0x31	; 49
    1320:	29 f4       	brne	.+10     	; 0x132c <KPD_Interface_user+0x182>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
    132c:	0e 94 cd 08 	call	0x119a	; 0x119a <Reset_AllKPDValues>
    1330:	4f c1       	rjmp	.+670    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN1, &led_status);
    1332:	43 e7       	ldi	r20, 0x73	; 115
    1334:	52 e0       	ldi	r21, 0x02	; 2
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_voidGetPinValue>
                LCD_voidClear();
    133e:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
                if (led_status == 1)
    1342:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <led_status>
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	f9 f4       	brne	.+62     	; 0x1388 <KPD_Interface_user+0x1de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
    134a:	8a ed       	ldi	r24, 0xDA	; 218
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1352:	80 ec       	ldi	r24, 0xC0	; 192
    1354:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1358:	8a ea       	ldi	r24, 0xAA	; 170
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1360:	04 c0       	rjmp	.+8      	; 0x136a <KPD_Interface_user+0x1c0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1362:	81 e6       	ldi	r24, 0x61	; 97
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    136a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    136e:	8f 3f       	cpi	r24, 0xFF	; 255
    1370:	c1 f3       	breq	.-16     	; 0x1362 <KPD_Interface_user+0x1b8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1372:	81 33       	cpi	r24, 0x31	; 49
    1374:	29 f4       	brne	.+10     	; 0x1380 <KPD_Interface_user+0x1d6>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
    1376:	41 e0       	ldi	r20, 0x01	; 1
    1378:	61 e0       	ldi	r22, 0x01	; 1
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0e 94 85 03 	call	0x70a	; 0x70a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    1386:	24 c1       	rjmp	.+584    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                else if (led_status == 0)
    1388:	81 11       	cpse	r24, r1
    138a:	22 c1       	rjmp	.+580    	; 0x15d0 <KPD_Interface_user+0x426>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
    138c:	88 ee       	ldi	r24, 0xE8	; 232
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1394:	80 ec       	ldi	r24, 0xC0	; 192
    1396:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    139a:	8a ec       	ldi	r24, 0xCA	; 202
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <KPD_Interface_user+0x202>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    13a4:	81 e6       	ldi	r24, 0x61	; 97
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    13ac:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    13b0:	8f 3f       	cpi	r24, 0xFF	; 255
    13b2:	c1 f3       	breq	.-16     	; 0x13a4 <KPD_Interface_user+0x1fa>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    13b4:	81 33       	cpi	r24, 0x31	; 49
    13b6:	29 f4       	brne	.+10     	; 0x13c2 <KPD_Interface_user+0x218>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    13c8:	03 c1       	rjmp	.+518    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    13ca:	43 e7       	ldi	r20, 0x73	; 115
    13cc:	52 e0       	ldi	r21, 0x02	; 2
    13ce:	62 e0       	ldi	r22, 0x02	; 2
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_voidGetPinValue>
                LCD_voidClear();
    13d6:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
                if (led_status == 1)
    13da:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <led_status>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	f9 f4       	brne	.+62     	; 0x1420 <KPD_Interface_user+0x276>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
    13e2:	87 ef       	ldi	r24, 0xF7	; 247
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    13ea:	80 ec       	ldi	r24, 0xC0	; 192
    13ec:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    13f0:	8a ea       	ldi	r24, 0xAA	; 170
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    13f8:	04 c0       	rjmp	.+8      	; 0x1402 <KPD_Interface_user+0x258>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    13fa:	81 e6       	ldi	r24, 0x61	; 97
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1402:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    1406:	8f 3f       	cpi	r24, 0xFF	; 255
    1408:	c1 f3       	breq	.-16     	; 0x13fa <KPD_Interface_user+0x250>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    140a:	81 33       	cpi	r24, 0x31	; 49
    140c:	29 f4       	brne	.+10     	; 0x1418 <KPD_Interface_user+0x26e>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 85 03 	call	0x70a	; 0x70a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    141e:	d8 c0       	rjmp	.+432    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                else if (led_status == 0)
    1420:	81 11       	cpse	r24, r1
    1422:	d6 c0       	rjmp	.+428    	; 0x15d0 <KPD_Interface_user+0x426>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
    1424:	85 e0       	ldi	r24, 0x05	; 5
    1426:	92 e0       	ldi	r25, 0x02	; 2
    1428:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    142c:	80 ec       	ldi	r24, 0xC0	; 192
    142e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1432:	8a ec       	ldi	r24, 0xCA	; 202
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <KPD_Interface_user+0x29a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    143c:	81 e6       	ldi	r24, 0x61	; 97
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1444:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    1448:	8f 3f       	cpi	r24, 0xFF	; 255
    144a:	c1 f3       	breq	.-16     	; 0x143c <KPD_Interface_user+0x292>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    144c:	81 33       	cpi	r24, 0x31	; 49
    144e:	29 f4       	brne	.+10     	; 0x145a <KPD_Interface_user+0x2b0>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1450:	41 e0       	ldi	r20, 0x01	; 1
    1452:	62 e0       	ldi	r22, 0x02	; 2
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    145a:	8f ef       	ldi	r24, 0xFF	; 255
    145c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    1460:	b7 c0       	rjmp	.+366    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    1462:	43 e7       	ldi	r20, 0x73	; 115
    1464:	52 e0       	ldi	r21, 0x02	; 2
    1466:	63 e0       	ldi	r22, 0x03	; 3
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_voidGetPinValue>
                LCD_voidClear();
    146e:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
                if (led_status == 1)
    1472:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <led_status>
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	f9 f4       	brne	.+62     	; 0x14b8 <KPD_Interface_user+0x30e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
    147a:	84 e1       	ldi	r24, 0x14	; 20
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1482:	80 ec       	ldi	r24, 0xC0	; 192
    1484:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1488:	8a ea       	ldi	r24, 0xAA	; 170
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1490:	04 c0       	rjmp	.+8      	; 0x149a <KPD_Interface_user+0x2f0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1492:	81 e6       	ldi	r24, 0x61	; 97
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    149a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    149e:	8f 3f       	cpi	r24, 0xFF	; 255
    14a0:	c1 f3       	breq	.-16     	; 0x1492 <KPD_Interface_user+0x2e8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    14a2:	81 33       	cpi	r24, 0x31	; 49
    14a4:	29 f4       	brne	.+10     	; 0x14b0 <KPD_Interface_user+0x306>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	63 e0       	ldi	r22, 0x03	; 3
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 85 03 	call	0x70a	; 0x70a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    14b6:	8c c0       	rjmp	.+280    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                else if (led_status == 0)
    14b8:	81 11       	cpse	r24, r1
    14ba:	8a c0       	rjmp	.+276    	; 0x15d0 <KPD_Interface_user+0x426>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
    14bc:	82 e2       	ldi	r24, 0x22	; 34
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    14c4:	80 ec       	ldi	r24, 0xC0	; 192
    14c6:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    14ca:	8a ec       	ldi	r24, 0xCA	; 202
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <KPD_Interface_user+0x332>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    14d4:	81 e6       	ldi	r24, 0x61	; 97
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    14dc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    14e0:	8f 3f       	cpi	r24, 0xFF	; 255
    14e2:	c1 f3       	breq	.-16     	; 0x14d4 <KPD_Interface_user+0x32a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    14e4:	81 33       	cpi	r24, 0x31	; 49
    14e6:	29 f4       	brne	.+10     	; 0x14f2 <KPD_Interface_user+0x348>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	63 e0       	ldi	r22, 0x03	; 3
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    14f8:	6b c0       	rjmp	.+214    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    14fa:	43 e7       	ldi	r20, 0x73	; 115
    14fc:	52 e0       	ldi	r21, 0x02	; 2
    14fe:	62 e0       	ldi	r22, 0x02	; 2
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_voidGetPinValue>
                LCD_voidClear();
    1506:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
                if (led_status == 1)
    150a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <led_status>
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	f9 f4       	brne	.+62     	; 0x1550 <KPD_Interface_user+0x3a6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
    1512:	81 e3       	ldi	r24, 0x31	; 49
    1514:	92 e0       	ldi	r25, 0x02	; 2
    1516:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    151a:	80 ec       	ldi	r24, 0xC0	; 192
    151c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1520:	8a ea       	ldi	r24, 0xAA	; 170
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <KPD_Interface_user+0x388>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    152a:	81 e6       	ldi	r24, 0x61	; 97
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1532:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    1536:	8f 3f       	cpi	r24, 0xFF	; 255
    1538:	c1 f3       	breq	.-16     	; 0x152a <KPD_Interface_user+0x380>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    153a:	81 33       	cpi	r24, 0x31	; 49
    153c:	29 f4       	brne	.+10     	; 0x1548 <KPD_Interface_user+0x39e>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	0e 94 85 03 	call	0x70a	; 0x70a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1548:	8f ef       	ldi	r24, 0xFF	; 255
    154a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    154e:	40 c0       	rjmp	.+128    	; 0x15d0 <KPD_Interface_user+0x426>
                }
                else if (led_status == 0)
    1550:	81 11       	cpse	r24, r1
    1552:	3e c0       	rjmp	.+124    	; 0x15d0 <KPD_Interface_user+0x426>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
    1554:	8f e3       	ldi	r24, 0x3F	; 63
    1556:	92 e0       	ldi	r25, 0x02	; 2
    1558:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    155c:	80 ec       	ldi	r24, 0xC0	; 192
    155e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1562:	8a ec       	ldi	r24, 0xCA	; 202
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    156a:	04 c0       	rjmp	.+8      	; 0x1574 <KPD_Interface_user+0x3ca>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    156c:	81 e6       	ldi	r24, 0x61	; 97
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 ee 00 	call	0x1dc	; 0x1dc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1574:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
    1578:	8f 3f       	cpi	r24, 0xFF	; 255
    157a:	c1 f3       	breq	.-16     	; 0x156c <KPD_Interface_user+0x3c2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    157c:	81 33       	cpi	r24, 0x31	; 49
    157e:	29 f4       	brne	.+10     	; 0x158a <KPD_Interface_user+0x3e0>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	62 e0       	ldi	r22, 0x02	; 2
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	0e 94 78 03 	call	0x6f0	; 0x6f0 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
    1590:	1f c0       	rjmp	.+62     	; 0x15d0 <KPD_Interface_user+0x426>
                break;
                // if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
    1592:	0e 94 28 03 	call	0x650	; 0x650 <LCD_voidClear>
                if (led_status == 1)
    1596:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <led_status>
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	61 f4       	brne	.+24     	; 0x15b6 <KPD_Interface_user+0x40c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
    159e:	8e e4       	ldi	r24, 0x4E	; 78
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    15a6:	80 ec       	ldi	r24, 0xC0	; 192
    15a8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    15ac:	8a ea       	ldi	r24, 0xAA	; 170
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
    15b4:	0d c0       	rjmp	.+26     	; 0x15d0 <KPD_Interface_user+0x426>
                }
                else if (led_status == 0)
    15b6:	81 11       	cpse	r24, r1
    15b8:	0b c0       	rjmp	.+22     	; 0x15d0 <KPD_Interface_user+0x426>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
    15ba:	8c e5       	ldi	r24, 0x5C	; 92
    15bc:	92 e0       	ldi	r25, 0x02	; 2
    15be:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    15c2:	80 ec       	ldi	r24, 0xC0	; 192
    15c4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    15c8:	8a ec       	ldi	r24, 0xCA	; 202
    15ca:	91 e0       	ldi	r25, 0x01	; 1
    15cc:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_voidDisplayStringDelay>
                }
                break;

            }

            local_lightNum = KPD_Not_Pressed;
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightNum>
            Local_copyKPDValue = KPD_Not_Pressed;
    15d6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Local_copyKPDValue>
    15da:	08 95       	ret

000015dc <__udivmodsi4>:
    15dc:	a1 e2       	ldi	r26, 0x21	; 33
    15de:	1a 2e       	mov	r1, r26
    15e0:	aa 1b       	sub	r26, r26
    15e2:	bb 1b       	sub	r27, r27
    15e4:	fd 01       	movw	r30, r26
    15e6:	0d c0       	rjmp	.+26     	; 0x1602 <__udivmodsi4_ep>

000015e8 <__udivmodsi4_loop>:
    15e8:	aa 1f       	adc	r26, r26
    15ea:	bb 1f       	adc	r27, r27
    15ec:	ee 1f       	adc	r30, r30
    15ee:	ff 1f       	adc	r31, r31
    15f0:	a2 17       	cp	r26, r18
    15f2:	b3 07       	cpc	r27, r19
    15f4:	e4 07       	cpc	r30, r20
    15f6:	f5 07       	cpc	r31, r21
    15f8:	20 f0       	brcs	.+8      	; 0x1602 <__udivmodsi4_ep>
    15fa:	a2 1b       	sub	r26, r18
    15fc:	b3 0b       	sbc	r27, r19
    15fe:	e4 0b       	sbc	r30, r20
    1600:	f5 0b       	sbc	r31, r21

00001602 <__udivmodsi4_ep>:
    1602:	66 1f       	adc	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	88 1f       	adc	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	1a 94       	dec	r1
    160c:	69 f7       	brne	.-38     	; 0x15e8 <__udivmodsi4_loop>
    160e:	60 95       	com	r22
    1610:	70 95       	com	r23
    1612:	80 95       	com	r24
    1614:	90 95       	com	r25
    1616:	9b 01       	movw	r18, r22
    1618:	ac 01       	movw	r20, r24
    161a:	bd 01       	movw	r22, r26
    161c:	cf 01       	movw	r24, r30
    161e:	08 95       	ret

00001620 <_exit>:
    1620:	f8 94       	cli

00001622 <__stop_program>:
    1622:	ff cf       	rjmp	.-2      	; 0x1622 <__stop_program>
