
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000034c  00800060  00001ca2  00001d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008003ac  008003ac  00002082  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002082  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005017  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011fa  00000000  00000000  000074e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a11  00000000  00000000  000086e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  0000b0f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013bd  00000000  00000000  0000b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027fb  00000000  00000000  0000cdad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4b 0b 	jmp	0x1696	; 0x1696 <__vector_10>
      2c:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3b       	cpi	r26, 0xB6	; 182
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 08 	call	0x1076	; 0x1076 <main>
      8a:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HOME_voidInit>:
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
	}
}
      92:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_voidInit>
      96:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PWM_voidInitChannel_1A>
      9a:	0e 94 2d 0a 	call	0x145a	; 0x145a <PWM_voidInitChannel_1B>
      9e:	0e 94 16 05 	call	0xa2c	; 0xa2c <EEPROM_voidInit>
      a2:	64 e0       	ldi	r22, 0x04	; 4
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	0e 94 1c 08 	call	0x1038	; 0x1038 <SERVO_voidInit>
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	cb 01       	movw	r24, r22
      b0:	0e 94 22 08 	call	0x1044	; 0x1044 <SERVO_voidStartByAngle>
      b4:	0e 94 44 05 	call	0xa88	; 0xa88 <KPD_voidInit>
      b8:	0e 94 0a 05 	call	0xa14	; 0xa14 <BL_voidInit>
      bc:	41 e0       	ldi	r20, 0x01	; 1
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	83 e0       	ldi	r24, 0x03	; 3
      c2:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	83 e0       	ldi	r24, 0x03	; 3
      cc:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
      d0:	0e 94 16 0a 	call	0x142c	; 0x142c <GI_voidEnable>
      d4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <TMR0_voidInit>
      d8:	63 e0       	ldi	r22, 0x03	; 3
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 fe 07 	call	0xffc	; 0xffc <LED_voidInit>
      e0:	60 e0       	ldi	r22, 0x00	; 0
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 fe 07 	call	0xffc	; 0xffc <LED_voidInit>
      e8:	62 e0       	ldi	r22, 0x02	; 2
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	0e 94 fe 07 	call	0xffc	; 0xffc <LED_voidInit>
      f0:	63 e0       	ldi	r22, 0x03	; 3
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 fe 07 	call	0xffc	; 0xffc <LED_voidInit>
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	0e 94 fe 07 	call	0xffc	; 0xffc <LED_voidInit>
     100:	65 e0       	ldi	r22, 0x05	; 5
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 fe 07 	call	0xffc	; 0xffc <LED_voidInit>
     108:	08 95       	ret

0000010a <KPD_Interface_RemoteAdmin>:


void KPD_Interface_RemoteAdmin(void)
{
	BL_voidTxString("1-AC 2-light");
     10a:	8c ec       	ldi	r24, 0xCC	; 204
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 13 05 	call	0xa26	; 0xa26 <BL_voidTxString>
	BL_voidTxChar('\r');
     112:	8d e0       	ldi	r24, 0x0D	; 13
     114:	0e 94 0d 05 	call	0xa1a	; 0xa1a <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
     118:	89 ed       	ldi	r24, 0xD9	; 217
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 13 05 	call	0xa26	; 0xa26 <BL_voidTxString>
	BL_voidTxChar('\r');
     120:	8d e0       	ldi	r24, 0x0D	; 13
     122:	0e 94 0d 05 	call	0xa1a	; 0xa1a <BL_voidTxChar>
	BL_voidRxChar(&bluetooh_value);
     126:	85 eb       	ldi	r24, 0xB5	; 181
     128:	93 e0       	ldi	r25, 0x03	; 3
     12a:	0e 94 10 05 	call	0xa20	; 0xa20 <BL_voidRxChar>
	switch (bluetooh_value)
     12e:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <bluetooh_value>
     132:	81 33       	cpi	r24, 0x31	; 49
     134:	59 f4       	brne	.+22     	; 0x14c <KPD_Interface_RemoteAdmin+0x42>
	{
	case '1':
		BL_voidTxString("AC Is On/off");
     136:	87 ee       	ldi	r24, 0xE7	; 231
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	0e 94 13 05 	call	0xa26	; 0xa26 <BL_voidTxString>
        BL_voidTxChar('\r');
     13e:	8d e0       	ldi	r24, 0x0D	; 13
     140:	0e 94 0d 05 	call	0xa1a	; 0xa1a <BL_voidTxChar>
        BL_voidTxString("Room Temp: 30c");
     144:	84 ef       	ldi	r24, 0xF4	; 244
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	0e 94 13 05 	call	0xa26	; 0xa26 <BL_voidTxString>
     14c:	08 95       	ret

0000014e <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     14e:	83 e0       	ldi	r24, 0x03	; 3
     150:	92 e0       	ldi	r25, 0x02	; 2
     152:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     156:	80 ec       	ldi	r24, 0xC0	; 192
     158:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     15c:	84 e1       	ldi	r24, 0x14	; 20
     15e:	92 e0       	ldi	r25, 0x02	; 2
     160:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     164:	2f ef       	ldi	r18, 0xFF	; 255
     166:	83 ed       	ldi	r24, 0xD3	; 211
     168:	90 e3       	ldi	r25, 0x30	; 48
     16a:	21 50       	subi	r18, 0x01	; 1
     16c:	80 40       	sbci	r24, 0x00	; 0
     16e:	90 40       	sbci	r25, 0x00	; 0
     170:	e1 f7       	brne	.-8      	; 0x16a <WelcomeScreen+0x1c>
     172:	00 c0       	rjmp	.+0      	; 0x174 <WelcomeScreen+0x26>
     174:	00 00       	nop
     176:	08 95       	ret

00000178 <APP_init>:




void APP_init(void)
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	e0 97       	sbiw	r28, 0x30	; 48
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     18c:	0e 94 49 00 	call	0x92	; 0x92 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_INTRNAL);
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	0e 94 58 08 	call	0x10b0	; 0x10b0 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	
	// display the welcome screen
	WelcomeScreen();
     1a0:	0e 94 a7 00 	call	0x14e	; 0x14e <WelcomeScreen>
	LCD_voidClear();
     1a4:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>

	
	
	u8 testusername[8]="7654321";
     1a8:	88 e0       	ldi	r24, 0x08	; 8
     1aa:	e2 e2       	ldi	r30, 0x22	; 34
     1ac:	f2 e0       	ldi	r31, 0x02	; 2
     1ae:	de 01       	movw	r26, r28
     1b0:	11 96       	adiw	r26, 0x01	; 1
     1b2:	01 90       	ld	r0, Z+
     1b4:	0d 92       	st	X+, r0
     1b6:	8a 95       	dec	r24
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <APP_init+0x3a>
	u8 testuserpass[8]="7654321";
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	e2 e2       	ldi	r30, 0x22	; 34
     1be:	f2 e0       	ldi	r31, 0x02	; 2
     1c0:	de 01       	movw	r26, r28
     1c2:	19 96       	adiw	r26, 0x09	; 9
     1c4:	01 90       	ld	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	8a 95       	dec	r24
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <APP_init+0x4c>
	u8 testadminname[8]="1122334";
     1cc:	88 e0       	ldi	r24, 0x08	; 8
     1ce:	ea e2       	ldi	r30, 0x2A	; 42
     1d0:	f2 e0       	ldi	r31, 0x02	; 2
     1d2:	de 01       	movw	r26, r28
     1d4:	51 96       	adiw	r26, 0x11	; 17
     1d6:	01 90       	ld	r0, Z+
     1d8:	0d 92       	st	X+, r0
     1da:	8a 95       	dec	r24
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <APP_init+0x5e>
	u8 testadminpass[8]="1122334";
     1de:	88 e0       	ldi	r24, 0x08	; 8
     1e0:	ea e2       	ldi	r30, 0x2A	; 42
     1e2:	f2 e0       	ldi	r31, 0x02	; 2
     1e4:	de 01       	movw	r26, r28
     1e6:	59 96       	adiw	r26, 0x19	; 25
     1e8:	01 90       	ld	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	8a 95       	dec	r24
     1ee:	e1 f7       	brne	.-8      	; 0x1e8 <APP_init+0x70>
	u8 testusername1[8]="1002003";
     1f0:	88 e0       	ldi	r24, 0x08	; 8
     1f2:	e2 e3       	ldi	r30, 0x32	; 50
     1f4:	f2 e0       	ldi	r31, 0x02	; 2
     1f6:	de 01       	movw	r26, r28
     1f8:	91 96       	adiw	r26, 0x21	; 33
     1fa:	01 90       	ld	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	8a 95       	dec	r24
     200:	e1 f7       	brne	.-8      	; 0x1fa <APP_init+0x82>
	u8 testuserpass1[8]="1002003";
     202:	88 e0       	ldi	r24, 0x08	; 8
     204:	e2 e3       	ldi	r30, 0x32	; 50
     206:	f2 e0       	ldi	r31, 0x02	; 2
     208:	de 01       	movw	r26, r28
     20a:	99 96       	adiw	r26, 0x29	; 41
     20c:	01 90       	ld	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	8a 95       	dec	r24
     212:	e1 f7       	brne	.-8      	; 0x20c <APP_init+0x94>
	u8 usertype;	
	
	EEPROM_voidWritePage(16,&testusername[0]);
     214:	be 01       	movw	r22, r28
     216:	6f 5f       	subi	r22, 0xFF	; 255
     218:	7f 4f       	sbci	r23, 0xFF	; 255
     21a:	80 e1       	ldi	r24, 0x10	; 16
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 19 05 	call	0xa32	; 0xa32 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
     222:	be 01       	movw	r22, r28
     224:	67 5f       	subi	r22, 0xF7	; 247
     226:	7f 4f       	sbci	r23, 0xFF	; 255
     228:	88 e1       	ldi	r24, 0x18	; 24
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 19 05 	call	0xa32	; 0xa32 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(80,&testadminname[0]);
     230:	be 01       	movw	r22, r28
     232:	6f 5e       	subi	r22, 0xEF	; 239
     234:	7f 4f       	sbci	r23, 0xFF	; 255
     236:	80 e5       	ldi	r24, 0x50	; 80
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 19 05 	call	0xa32	; 0xa32 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(88,&testadminpass[0]);
     23e:	be 01       	movw	r22, r28
     240:	67 5e       	subi	r22, 0xE7	; 231
     242:	7f 4f       	sbci	r23, 0xFF	; 255
     244:	88 e5       	ldi	r24, 0x58	; 88
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 19 05 	call	0xa32	; 0xa32 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(96,&testusername1[0]);
     24c:	be 01       	movw	r22, r28
     24e:	6f 5d       	subi	r22, 0xDF	; 223
     250:	7f 4f       	sbci	r23, 0xFF	; 255
     252:	80 e6       	ldi	r24, 0x60	; 96
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 19 05 	call	0xa32	; 0xa32 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(104,&testuserpass1[0]);
     25a:	be 01       	movw	r22, r28
     25c:	67 5d       	subi	r22, 0xD7	; 215
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
     260:	88 e6       	ldi	r24, 0x68	; 104
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 19 05 	call	0xa32	; 0xa32 <EEPROM_voidWritePage>





}
     268:	e0 96       	adiw	r28, 0x30	; 48
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <Display_temp>:

}

void Display_temp(void)
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     27a:	6c ea       	ldi	r22, 0xAC	; 172
     27c:	73 e0       	ldi	r23, 0x03	; 3
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	0e 94 88 08 	call	0x1110	; 0x1110 <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     284:	6b e0       	ldi	r22, 0x0B	; 11
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
     28c:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <__data_end>
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
     29a:	08 95       	ret

0000029c <Idle_Action>:



void Idle_Action()
{ 
    LCD_voidClear();
     29c:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
     2a0:	80 e8       	ldi	r24, 0x80	; 128
     2a2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
     2a6:	8a e3       	ldi	r24, 0x3A	; 58
     2a8:	92 e0       	ldi	r25, 0x02	; 2
     2aa:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
	Display_temp();
     2ae:	0e 94 3d 01 	call	0x27a	; 0x27a <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
     2b2:	80 ec       	ldi	r24, 0xC0	; 192
     2b4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
     2b8:	89 e4       	ldi	r24, 0x49	; 73
     2ba:	92 e0       	ldi	r25, 0x02	; 2
     2bc:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     2c0:	06 c0       	rjmp	.+12     	; 0x2ce <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
     2c2:	81 e6       	ldi	r24, 0x61	; 97
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
		Display_temp();
     2ca:	0e 94 3d 01 	call	0x27a	; 0x27a <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     2ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     2d2:	8f 3f       	cpi	r24, 0xFF	; 255
     2d4:	b1 f3       	breq	.-20     	; 0x2c2 <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
     2d6:	80 33       	cpi	r24, 0x30	; 48
     2d8:	11 f4       	brne	.+4      	; 0x2de <Idle_Action+0x42>
    {
        LCD_voidClear();
     2da:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
    }
    TMR0clear_flag();
     2de:	0e 94 09 0b 	call	0x1612	; 0x1612 <TMR0clear_flag>
    LCD_voidClear();
     2e2:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
     2e6:	08 95       	ret

000002e8 <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     2e8:	8f ef       	ldi	r24, 0xFF	; 255
     2ea:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     2ee:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     2f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
     2f6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
     2fa:	08 95       	ret

000002fc <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     2fc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&Idle_Action);
     300:	8e e4       	ldi	r24, 0x4E	; 78
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 02 0b 	call	0x1604	; 0x1604 <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     308:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <TMR0_voidStart>
        LCD_voidClear();
     30c:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     310:	8c ec       	ldi	r24, 0xCC	; 204
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     318:	80 ec       	ldi	r24, 0xC0	; 192
     31a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
     31e:	89 ed       	ldi	r24, 0xD9	; 217
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
        Reset_AllKPDValues();
     326:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     32a:	0c c0       	rjmp	.+24     	; 0x344 <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     32c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     330:	80 33       	cpi	r24, 0x30	; 48
     332:	21 f4       	brne	.+8      	; 0x33c <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     334:	8f ef       	ldi	r24, 0xFF	; 255
     336:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
     33a:	08 c0       	rjmp	.+16     	; 0x34c <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     33c:	84 e6       	ldi	r24, 0x64	; 100
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     344:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     348:	8f 3f       	cpi	r24, 0xFF	; 255
     34a:	81 f3       	breq	.-32     	; 0x32c <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     34c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     350:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     354:	82 33       	cpi	r24, 0x32	; 50
     356:	09 f4       	brne	.+2      	; 0x35a <KPD_Interface_user+0x5e>
     358:	4a c0       	rjmp	.+148    	; 0x3ee <KPD_Interface_user+0xf2>
     35a:	18 f4       	brcc	.+6      	; 0x362 <KPD_Interface_user+0x66>
     35c:	81 33       	cpi	r24, 0x31	; 49
     35e:	41 f0       	breq	.+16     	; 0x370 <KPD_Interface_user+0x74>
     360:	08 95       	ret
     362:	83 33       	cpi	r24, 0x33	; 51
     364:	09 f4       	brne	.+2      	; 0x368 <KPD_Interface_user+0x6c>
     366:	07 c3       	rjmp	.+1550   	; 0x976 <__stack+0x117>
     368:	84 33       	cpi	r24, 0x34	; 52
     36a:	09 f4       	brne	.+2      	; 0x36e <KPD_Interface_user+0x72>
     36c:	37 c3       	rjmp	.+1646   	; 0x9dc <__stack+0x17d>
     36e:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     370:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off 0-H");
     374:	86 e5       	ldi	r24, 0x56	; 86
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     37c:	80 ec       	ldi	r24, 0xC0	; 192
     37e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     382:	6c ea       	ldi	r22, 0xAC	; 172
     384:	73 e0       	ldi	r23, 0x03	; 3
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	0e 94 88 08 	call	0x1110	; 0x1110 <ADC_voidGetDigitalValue>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
     38c:	87 e6       	ldi	r24, 0x67	; 103
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
     394:	6c e0       	ldi	r22, 0x0C	; 12
     396:	82 e0       	ldi	r24, 0x02	; 2
     398:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayNumber(local_temp);
     39c:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <__data_end>
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
			while (local_KPDSelectValue == KPD_Not_Pressed)
     3aa:	1c c0       	rjmp	.+56     	; 0x3e4 <KPD_Interface_user+0xe8>
			{
				KPD_voidGetValue(&local_KPDSelectValue);
     3ac:	80 e6       	ldi	r24, 0x60	; 96
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     3b4:	6c ea       	ldi	r22, 0xAC	; 172
     3b6:	73 e0       	ldi	r23, 0x03	; 3
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 88 08 	call	0x1110	; 0x1110 <ADC_voidGetDigitalValue>
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
     3be:	6c e0       	ldi	r22, 0x0C	; 12
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
     3c6:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <__data_end>
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
				if (local_KPDSelectValue == '0')
     3d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3d8:	80 33       	cpi	r24, 0x30	; 48
     3da:	21 f4       	brne	.+8      	; 0x3e4 <KPD_Interface_user+0xe8>
				{
					local_KPDSelectValue = KPD_Not_Pressed;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
     3e2:	08 95       	ret
            LCD_voidSendCommand(Write_SecondLine);
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
			LCD_voidDisplayNumber(local_temp);
			while (local_KPDSelectValue == KPD_Not_Pressed)
     3e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3e8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ea:	01 f3       	breq	.-64     	; 0x3ac <KPD_Interface_user+0xb0>
     3ec:	08 95       	ret
            break;
			

        case ('2'):

            LCD_voidClear();
     3ee:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     3f2:	85 e7       	ldi	r24, 0x75	; 117
     3f4:	92 e0       	ldi	r25, 0x02	; 2
     3f6:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     3fa:	80 ec       	ldi	r24, 0xC0	; 192
     3fc:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     400:	85 e8       	ldi	r24, 0x85	; 133
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
     408:	8e e4       	ldi	r24, 0x4E	; 78
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	0e 94 02 0b 	call	0x1604	; 0x1604 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     410:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     414:	0c c0       	rjmp	.+24     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
            {
                KPD_voidGetValue(&local_lightNum);
     416:	83 e6       	ldi	r24, 0x63	; 99
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     41e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     422:	80 33       	cpi	r24, 0x30	; 48
     424:	21 f4       	brne	.+8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
     42c:	04 c0       	rjmp	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     42e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     432:	8f 3f       	cpi	r24, 0xFF	; 255
     434:	81 f3       	breq	.-32     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     436:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <TMR0_voidStop>
            switch (local_lightNum)
     43a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     43e:	83 33       	cpi	r24, 0x33	; 51
     440:	09 f4       	brne	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     442:	a6 c0       	rjmp	.+332    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
     444:	30 f4       	brcc	.+12     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     446:	81 33       	cpi	r24, 0x31	; 49
     448:	69 f0       	breq	.+26     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     44a:	82 33       	cpi	r24, 0x32	; 50
     44c:	09 f4       	brne	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     44e:	54 c0       	rjmp	.+168    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     450:	08 95       	ret
     452:	85 33       	cpi	r24, 0x35	; 53
     454:	09 f4       	brne	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     456:	34 c1       	rjmp	.+616    	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
     458:	08 f4       	brcc	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     45a:	e6 c0       	rjmp	.+460    	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
     45c:	86 33       	cpi	r24, 0x36	; 54
     45e:	09 f4       	brne	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     460:	7b c1       	rjmp	.+758    	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
     462:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     464:	4e ea       	ldi	r20, 0xAE	; 174
     466:	53 e0       	ldi	r21, 0x03	; 3
     468:	63 e0       	ldi	r22, 0x03	; 3
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_voidGetPinValue>
                LCD_voidClear();
     470:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
                if (led_status == 1)
     474:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <led_status>
     478:	81 30       	cpi	r24, 0x01	; 1
     47a:	f1 f4       	brne	.+60     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     47c:	82 e9       	ldi	r24, 0x92	; 146
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     484:	80 ec       	ldi	r24, 0xC0	; 192
     486:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     48a:	80 ea       	ldi	r24, 0xA0	; 160
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     492:	04 c0       	rjmp	.+8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     494:	82 e6       	ldi	r24, 0x62	; 98
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     49c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     4a0:	8f 3f       	cpi	r24, 0xFF	; 255
     4a2:	c1 f3       	breq	.-16     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     4a4:	81 33       	cpi	r24, 0x31	; 49
     4a6:	29 f4       	brne	.+10     	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     4a8:	41 e0       	ldi	r20, 0x01	; 1
     4aa:	63 e0       	ldi	r22, 0x03	; 3
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	0e 94 0f 08 	call	0x101e	; 0x101e <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     4b2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Reset_AllKPDValues>
					break;
     4b6:	08 95       	ret
                }
                else if (led_status == 0)
     4b8:	81 11       	cpse	r24, r1
     4ba:	ab c2       	rjmp	.+1366   	; 0xa12 <__stack+0x1b3>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     4bc:	81 eb       	ldi	r24, 0xB1	; 177
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4c4:	80 ec       	ldi	r24, 0xC0	; 192
     4c6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     4ca:	80 ec       	ldi	r24, 0xC0	; 192
     4cc:	92 e0       	ldi	r25, 0x02	; 2
     4ce:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     4d4:	82 e6       	ldi	r24, 0x62	; 98
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     4dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     4e0:	8f 3f       	cpi	r24, 0xFF	; 255
     4e2:	c1 f3       	breq	.-16     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     4e4:	81 33       	cpi	r24, 0x31	; 49
     4e6:	29 f4       	brne	.+10     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	63 e0       	ldi	r22, 0x03	; 3
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	0e 94 02 08 	call	0x1004	; 0x1004 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     4f2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Reset_AllKPDValues>
     4f6:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
     4f8:	4e ea       	ldi	r20, 0xAE	; 174
     4fa:	53 e0       	ldi	r21, 0x03	; 3
     4fc:	64 e0       	ldi	r22, 0x04	; 4
     4fe:	83 e0       	ldi	r24, 0x03	; 3
     500:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_voidGetPinValue>
                LCD_voidClear();
     504:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
                if (led_status == 1)
     508:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <led_status>
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	f9 f4       	brne	.+62     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     510:	80 ed       	ldi	r24, 0xD0	; 208
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     518:	80 ec       	ldi	r24, 0xC0	; 192
     51a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     51e:	80 ea       	ldi	r24, 0xA0	; 160
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     526:	04 c0       	rjmp	.+8      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     528:	82 e6       	ldi	r24, 0x62	; 98
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     530:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     534:	8f 3f       	cpi	r24, 0xFF	; 255
     536:	c1 f3       	breq	.-16     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     538:	81 33       	cpi	r24, 0x31	; 49
     53a:	29 f4       	brne	.+10     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	64 e0       	ldi	r22, 0x04	; 4
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	0e 94 0f 08 	call	0x101e	; 0x101e <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     54c:	08 95       	ret
                }
                else if (led_status == 0)
     54e:	81 11       	cpse	r24, r1
     550:	60 c2       	rjmp	.+1216   	; 0xa12 <__stack+0x1b3>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     552:	8e ed       	ldi	r24, 0xDE	; 222
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     55a:	80 ec       	ldi	r24, 0xC0	; 192
     55c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     560:	80 ec       	ldi	r24, 0xC0	; 192
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     568:	04 c0       	rjmp	.+8      	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     56a:	82 e6       	ldi	r24, 0x62	; 98
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     572:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     576:	8f 3f       	cpi	r24, 0xFF	; 255
     578:	c1 f3       	breq	.-16     	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     57a:	81 33       	cpi	r24, 0x31	; 49
     57c:	29 f4       	brne	.+10     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	64 e0       	ldi	r22, 0x04	; 4
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	0e 94 02 08 	call	0x1004	; 0x1004 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     58e:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     590:	4e ea       	ldi	r20, 0xAE	; 174
     592:	53 e0       	ldi	r21, 0x03	; 3
     594:	62 e0       	ldi	r22, 0x02	; 2
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_voidGetPinValue>
                LCD_voidClear();
     59c:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
                if (led_status == 1)
     5a0:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <led_status>
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	f9 f4       	brne	.+62     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     5a8:	8d ee       	ldi	r24, 0xED	; 237
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5b0:	80 ec       	ldi	r24, 0xC0	; 192
     5b2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     5b6:	80 ea       	ldi	r24, 0xA0	; 160
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5c0:	82 e6       	ldi	r24, 0x62	; 98
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     5c8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     5cc:	8f 3f       	cpi	r24, 0xFF	; 255
     5ce:	c1 f3       	breq	.-16     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5d0:	81 33       	cpi	r24, 0x31	; 49
     5d2:	29 f4       	brne	.+10     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     5d4:	41 e0       	ldi	r20, 0x01	; 1
     5d6:	62 e0       	ldi	r22, 0x02	; 2
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 0f 08 	call	0x101e	; 0x101e <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     5e4:	08 95       	ret
                }
                else if (led_status == 0)
     5e6:	81 11       	cpse	r24, r1
     5e8:	14 c2       	rjmp	.+1064   	; 0xa12 <__stack+0x1b3>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     5ea:	8b ef       	ldi	r24, 0xFB	; 251
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     5f8:	80 ec       	ldi	r24, 0xC0	; 192
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     600:	04 c0       	rjmp	.+8      	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     602:	82 e6       	ldi	r24, 0x62	; 98
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     60a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     60e:	8f 3f       	cpi	r24, 0xFF	; 255
     610:	c1 f3       	breq	.-16     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     612:	81 33       	cpi	r24, 0x31	; 49
     614:	29 f4       	brne	.+10     	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	62 e0       	ldi	r22, 0x02	; 2
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	0e 94 02 08 	call	0x1004	; 0x1004 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     626:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     628:	4e ea       	ldi	r20, 0xAE	; 174
     62a:	53 e0       	ldi	r21, 0x03	; 3
     62c:	63 e0       	ldi	r22, 0x03	; 3
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_voidGetPinValue>
                LCD_voidClear();
     634:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
                if (led_status == 1)
     638:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <led_status>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	f9 f4       	brne	.+62     	; 0x67e <__EEPROM_REGION_LENGTH__+0x27e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     640:	8a e0       	ldi	r24, 0x0A	; 10
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     648:	80 ec       	ldi	r24, 0xC0	; 192
     64a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     64e:	80 ea       	ldi	r24, 0xA0	; 160
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     656:	04 c0       	rjmp	.+8      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     658:	82 e6       	ldi	r24, 0x62	; 98
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     660:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     664:	8f 3f       	cpi	r24, 0xFF	; 255
     666:	c1 f3       	breq	.-16     	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     668:	81 33       	cpi	r24, 0x31	; 49
     66a:	29 f4       	brne	.+10     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 0f 08 	call	0x101e	; 0x101e <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     676:	8f ef       	ldi	r24, 0xFF	; 255
     678:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     67c:	08 95       	ret
                }
                else if (led_status == 0)
     67e:	81 11       	cpse	r24, r1
     680:	c8 c1       	rjmp	.+912    	; 0xa12 <__stack+0x1b3>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     682:	88 e1       	ldi	r24, 0x18	; 24
     684:	93 e0       	ldi	r25, 0x03	; 3
     686:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     68a:	80 ec       	ldi	r24, 0xC0	; 192
     68c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     690:	80 ec       	ldi	r24, 0xC0	; 192
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     69a:	82 e6       	ldi	r24, 0x62	; 98
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     6a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     6a6:	8f 3f       	cpi	r24, 0xFF	; 255
     6a8:	c1 f3       	breq	.-16     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     6aa:	81 33       	cpi	r24, 0x31	; 49
     6ac:	29 f4       	brne	.+10     	; 0x6b8 <__EEPROM_REGION_LENGTH__+0x2b8>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	63 e0       	ldi	r22, 0x03	; 3
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	0e 94 02 08 	call	0x1004	; 0x1004 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     6b8:	8f ef       	ldi	r24, 0xFF	; 255
     6ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     6be:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     6c0:	4e ea       	ldi	r20, 0xAE	; 174
     6c2:	53 e0       	ldi	r21, 0x03	; 3
     6c4:	62 e0       	ldi	r22, 0x02	; 2
     6c6:	83 e0       	ldi	r24, 0x03	; 3
     6c8:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_voidGetPinValue>
                LCD_voidClear();
     6cc:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
                if (led_status == 1)
     6d0:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <led_status>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	f9 f4       	brne	.+62     	; 0x716 <__EEPROM_REGION_LENGTH__+0x316>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     6d8:	87 e2       	ldi	r24, 0x27	; 39
     6da:	93 e0       	ldi	r25, 0x03	; 3
     6dc:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     6e0:	80 ec       	ldi	r24, 0xC0	; 192
     6e2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     6e6:	80 ea       	ldi	r24, 0xA0	; 160
     6e8:	92 e0       	ldi	r25, 0x02	; 2
     6ea:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     6f0:	82 e6       	ldi	r24, 0x62	; 98
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     6f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     6fc:	8f 3f       	cpi	r24, 0xFF	; 255
     6fe:	c1 f3       	breq	.-16     	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     700:	81 33       	cpi	r24, 0x31	; 49
     702:	29 f4       	brne	.+10     	; 0x70e <__EEPROM_REGION_LENGTH__+0x30e>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	62 e0       	ldi	r22, 0x02	; 2
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	0e 94 0f 08 	call	0x101e	; 0x101e <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     714:	08 95       	ret
                }
                else if (led_status == 0)
     716:	81 11       	cpse	r24, r1
     718:	7c c1       	rjmp	.+760    	; 0xa12 <__stack+0x1b3>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     71a:	85 e3       	ldi	r24, 0x35	; 53
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     722:	80 ec       	ldi	r24, 0xC0	; 192
     724:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     728:	80 ec       	ldi	r24, 0xC0	; 192
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     730:	04 c0       	rjmp	.+8      	; 0x73a <__EEPROM_REGION_LENGTH__+0x33a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     732:	82 e6       	ldi	r24, 0x62	; 98
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     73a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     73e:	8f 3f       	cpi	r24, 0xFF	; 255
     740:	c1 f3       	breq	.-16     	; 0x732 <__EEPROM_REGION_LENGTH__+0x332>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     742:	81 33       	cpi	r24, 0x31	; 49
     744:	29 f4       	brne	.+10     	; 0x750 <__EEPROM_REGION_LENGTH__+0x350>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	62 e0       	ldi	r22, 0x02	; 2
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	0e 94 02 08 	call	0x1004	; 0x1004 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     750:	8f ef       	ldi	r24, 0xFF	; 255
     752:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     756:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     758:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
				
                if (dimmer_brightness > 0)
     75c:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <dimmer_brightness>
     760:	88 23       	and	r24, r24
     762:	09 f4       	brne	.+2      	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
     764:	82 c0       	rjmp	.+260    	; 0x86a <__stack+0xb>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     766:	84 e4       	ldi	r24, 0x44	; 68
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
     76e:	2f ef       	ldi	r18, 0xFF	; 255
     770:	33 ed       	ldi	r19, 0xD3	; 211
     772:	80 e3       	ldi	r24, 0x30	; 48
     774:	21 50       	subi	r18, 0x01	; 1
     776:	30 40       	sbci	r19, 0x00	; 0
     778:	80 40       	sbci	r24, 0x00	; 0
     77a:	e1 f7       	brne	.-8      	; 0x774 <__EEPROM_REGION_LENGTH__+0x374>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <__EEPROM_REGION_LENGTH__+0x37e>
     77e:	00 00       	nop
					_delay_ms(1000);
					LCD_voidClear();
     780:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
     784:	82 e5       	ldi	r24, 0x52	; 82
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     78c:	6d e0       	ldi	r22, 0x0D	; 13
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
     794:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
     7a2:	80 ec       	ldi	r24, 0xC0	; 192
     7a4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
     7a8:	81 e6       	ldi	r24, 0x61	; 97
     7aa:	93 e0       	ldi	r25, 0x03	; 3
     7ac:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
     7b0:	56 c0       	rjmp	.+172    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
					{
						KPD_voidGetValue(&local_lightStatus);
     7b2:	82 e6       	ldi	r24, 0x62	; 98
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
						if (local_lightStatus == '1')
     7ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     7be:	81 33       	cpi	r24, 0x31	; 49
     7c0:	59 f5       	brne	.+86     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
						{
							dimmer_brightness += 10;
     7c2:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     7c6:	66 5f       	subi	r22, 0xF6	; 246
     7c8:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatunsisf>
     7d6:	ab 01       	movw	r20, r22
     7d8:	bc 01       	movw	r22, r24
     7da:	88 ee       	ldi	r24, 0xE8	; 232
     7dc:	93 e0       	ldi	r25, 0x03	; 3
     7de:	0e 94 40 0a 	call	0x1480	; 0x1480 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     7e2:	6d e0       	ldi	r22, 0x0D	; 13
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     7ea:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
     7f8:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <dimmer_brightness>
     7fc:	85 36       	cpi	r24, 0x65	; 101
     7fe:	78 f1       	brcs	.+94     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
							{
								dimmer_brightness = 100;
     800:	84 e6       	ldi	r24, 0x64	; 100
     802:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	50 e0       	ldi	r21, 0x00	; 0
     80a:	68 ec       	ldi	r22, 0xC8	; 200
     80c:	72 e4       	ldi	r23, 0x42	; 66
     80e:	88 ee       	ldi	r24, 0xE8	; 232
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	0e 94 40 0a 	call	0x1480	; 0x1480 <PWM_voidGenerateChannel_1A>
     816:	23 c0       	rjmp	.+70     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
							}
						
							
						}
						else if (local_lightStatus == '2')
     818:	82 33       	cpi	r24, 0x32	; 50
     81a:	e1 f4       	brne	.+56     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
						{
							dimmer_brightness -= 10;
     81c:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     820:	6a 50       	subi	r22, 0x0A	; 10
     822:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatunsisf>
     830:	ab 01       	movw	r20, r22
     832:	bc 01       	movw	r22, r24
     834:	88 ee       	ldi	r24, 0xE8	; 232
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	0e 94 40 0a 	call	0x1480	; 0x1480 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     83c:	6d e0       	ldi	r22, 0x0D	; 13
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     844:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
     852:	05 c0       	rjmp	.+10     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
     854:	80 33       	cpi	r24, 0x30	; 48
     856:	19 f4       	brne	.+6      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
						{
							LCD_voidClear();
     858:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
							break;
     85c:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
     85e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     862:	8f 3f       	cpi	r24, 0xFF	; 255
     864:	09 f4       	brne	.+2      	; 0x868 <__stack+0x9>
     866:	a5 cf       	rjmp	.-182    	; 0x7b2 <__EEPROM_REGION_LENGTH__+0x3b2>
     868:	08 95       	ret
						}						
						
					}
					
                }
                else if (led_status == 0)
     86a:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <led_status>
     86e:	81 11       	cpse	r24, r1
     870:	d0 c0       	rjmp	.+416    	; 0xa12 <__stack+0x1b3>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     872:	81 e7       	ldi	r24, 0x71	; 113
     874:	93 e0       	ldi	r25, 0x03	; 3
     876:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	23 ed       	ldi	r18, 0xD3	; 211
     87e:	30 e3       	ldi	r19, 0x30	; 48
     880:	91 50       	subi	r25, 0x01	; 1
     882:	20 40       	sbci	r18, 0x00	; 0
     884:	30 40       	sbci	r19, 0x00	; 0
     886:	e1 f7       	brne	.-8      	; 0x880 <__stack+0x21>
     888:	00 c0       	rjmp	.+0      	; 0x88a <__stack+0x2b>
     88a:	00 00       	nop
					_delay_ms(1000);
                    LCD_voidClear();
     88c:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
     890:	82 e5       	ldi	r24, 0x52	; 82
     892:	93 e0       	ldi	r25, 0x03	; 3
     894:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     898:	6d e0       	ldi	r22, 0x0D	; 13
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
     8a0:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
     8ae:	80 ec       	ldi	r24, 0xC0	; 192
     8b0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
     8b4:	81 e6       	ldi	r24, 0x61	; 97
     8b6:	93 e0       	ldi	r25, 0x03	; 3
     8b8:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
     8bc:	56 c0       	rjmp	.+172    	; 0x96a <__stack+0x10b>
					{
						KPD_voidGetValue(&local_lightStatus);
     8be:	82 e6       	ldi	r24, 0x62	; 98
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
						if (local_lightStatus == '1')
     8c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     8ca:	81 33       	cpi	r24, 0x31	; 49
     8cc:	59 f5       	brne	.+86     	; 0x924 <__stack+0xc5>
						{
							dimmer_brightness += 10;
     8ce:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     8d2:	66 5f       	subi	r22, 0xF6	; 246
     8d4:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatunsisf>
     8e2:	ab 01       	movw	r20, r22
     8e4:	bc 01       	movw	r22, r24
     8e6:	88 ee       	ldi	r24, 0xE8	; 232
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 40 0a 	call	0x1480	; 0x1480 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     8ee:	6d e0       	ldi	r22, 0x0D	; 13
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     8f6:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
     904:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <dimmer_brightness>
     908:	85 36       	cpi	r24, 0x65	; 101
     90a:	78 f1       	brcs	.+94     	; 0x96a <__stack+0x10b>
							{
								dimmer_brightness = 100;
     90c:	84 e6       	ldi	r24, 0x64	; 100
     90e:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	68 ec       	ldi	r22, 0xC8	; 200
     918:	72 e4       	ldi	r23, 0x42	; 66
     91a:	88 ee       	ldi	r24, 0xE8	; 232
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0e 94 40 0a 	call	0x1480	; 0x1480 <PWM_voidGenerateChannel_1A>
     922:	23 c0       	rjmp	.+70     	; 0x96a <__stack+0x10b>
							}
						
							
						}
						else if (local_lightStatus == '2')
     924:	82 33       	cpi	r24, 0x32	; 50
     926:	e1 f4       	brne	.+56     	; 0x960 <__stack+0x101>
						{
							dimmer_brightness -= 10;
     928:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     92c:	6a 50       	subi	r22, 0x0A	; 10
     92e:	60 93 ad 03 	sts	0x03AD, r22	; 0x8003ad <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatunsisf>
     93c:	ab 01       	movw	r20, r22
     93e:	bc 01       	movw	r22, r24
     940:	88 ee       	ldi	r24, 0xE8	; 232
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	0e 94 40 0a 	call	0x1480	; 0x1480 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     948:	6d e0       	ldi	r22, 0x0D	; 13
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     950:	60 91 ad 03 	lds	r22, 0x03AD	; 0x8003ad <dimmer_brightness>
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
     95e:	05 c0       	rjmp	.+10     	; 0x96a <__stack+0x10b>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
     960:	80 33       	cpi	r24, 0x30	; 48
     962:	19 f4       	brne	.+6      	; 0x96a <__stack+0x10b>
						{
							LCD_voidClear();
     964:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
							break;
     968:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
     96a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     96e:	8f 3f       	cpi	r24, 0xFF	; 255
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x115>
     972:	a5 cf       	rjmp	.-182    	; 0x8be <__stack+0x5f>
     974:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
     976:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     97a:	6c ea       	ldi	r22, 0xAC	; 172
     97c:	73 e0       	ldi	r23, 0x03	; 3
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 88 08 	call	0x1110	; 0x1110 <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
     984:	80 e8       	ldi	r24, 0x80	; 128
     986:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
     98a:	87 e6       	ldi	r24, 0x67	; 103
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     992:	6b e0       	ldi	r22, 0x0B	; 11
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
     99a:	60 91 ac 03 	lds	r22, 0x03AC	; 0x8003ac <__data_end>
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 5f 07 	call	0xebe	; 0xebe <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
     9a8:	83 e6       	ldi	r24, 0x63	; 99
     9aa:	0e 94 f4 06 	call	0xde8	; 0xde8 <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
     9ae:	80 ec       	ldi	r24, 0xC0	; 192
     9b0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
     9b4:	80 e8       	ldi	r24, 0x80	; 128
     9b6:	93 e0       	ldi	r25, 0x03	; 3
     9b8:	0e 94 40 07 	call	0xe80	; 0xe80 <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
     9bc:	06 c0       	rjmp	.+12     	; 0x9ca <__stack+0x16b>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
     9be:	81 e6       	ldi	r24, 0x61	; 97
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 78 05 	call	0xaf0	; 0xaf0 <KPD_voidGetValue>
					Display_temp();
     9c6:	0e 94 3d 01 	call	0x27a	; 0x27a <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
     9ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     9ce:	8f 3f       	cpi	r24, 0xFF	; 255
     9d0:	b1 f3       	breq	.-20     	; 0x9be <__stack+0x15f>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
     9d2:	80 33       	cpi	r24, 0x30	; 48
     9d4:	f1 f4       	brne	.+60     	; 0xa12 <__stack+0x1b3>
				{
					LCD_voidClear();
     9d6:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
     9da:	08 95       	ret
				}
			break;

			case ('4'):
			LCD_voidClear();
     9dc:	0e 94 b2 07 	call	0xf64	; 0xf64 <LCD_voidClear>
			LCD_voidDisplayString("Door is opening");
     9e0:	8d e8       	ldi	r24, 0x8D	; 141
     9e2:	93 e0       	ldi	r25, 0x03	; 3
     9e4:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
			SERVO_voidStartByAngle(90);
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	84 eb       	ldi	r24, 0xB4	; 180
     9ee:	92 e4       	ldi	r25, 0x42	; 66
     9f0:	0e 94 22 08 	call	0x1044	; 0x1044 <SERVO_voidStartByAngle>
     9f4:	8a ea       	ldi	r24, 0xAA	; 170
     9f6:	96 ee       	ldi	r25, 0xE6	; 230
     9f8:	26 e9       	ldi	r18, 0x96	; 150
     9fa:	31 e0       	ldi	r19, 0x01	; 1
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	90 40       	sbci	r25, 0x00	; 0
     a00:	20 40       	sbci	r18, 0x00	; 0
     a02:	30 40       	sbci	r19, 0x00	; 0
     a04:	d9 f7       	brne	.-10     	; 0x9fc <__stack+0x19d>
     a06:	00 00       	nop
			_delay_ms(10000);
			SERVO_voidStartByAngle(0);
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	cb 01       	movw	r24, r22
     a0e:	0e 94 22 08 	call	0x1044	; 0x1044 <SERVO_voidStartByAngle>
     a12:	08 95       	ret

00000a14 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     a14:	0e 94 c8 0b 	call	0x1790	; 0x1790 <UART_voidInit>
     a18:	08 95       	ret

00000a1a <BL_voidTxChar>:
}


void BL_voidTxChar(u8 copy_u8BlTxData)
{
	UART_voidTxChar(copy_u8BlTxData);
     a1a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <UART_voidTxChar>
     a1e:	08 95       	ret

00000a20 <BL_voidRxChar>:



void BL_voidRxChar(u8* copy_pu8BlRxData)
{
	UART_voidRxChar(copy_pu8BlRxData);
     a20:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <UART_voidRxChar>
     a24:	08 95       	ret

00000a26 <BL_voidTxString>:
}


void BL_voidTxString(u8* copy_pu8BlTxString)
{
	UART_voidTxString(copy_pu8BlTxString);
     a26:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <UART_voidTxString>
     a2a:	08 95       	ret

00000a2c <EEPROM_voidInit>:
	TWI_voidSendStopCondition();
	_delay_ms(5);
	
	
	
}
     a2c:	0e 94 86 0b 	call	0x170c	; 0x170c <TWI_voidInitMaster>
     a30:	08 95       	ret

00000a32 <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
     a3a:	61 15       	cp	r22, r1
     a3c:	71 05       	cpc	r23, r1
     a3e:	f9 f0       	breq	.+62     	; 0xa7e <EEPROM_voidWritePage+0x4c>
     a40:	8b 01       	movw	r16, r22
     a42:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     a44:	c9 2f       	mov	r28, r25
     a46:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
     a48:	0e 94 92 0b 	call	0x1724	; 0x1724 <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     a4c:	8c 2f       	mov	r24, r28
     a4e:	0e 94 a7 0b 	call	0x174e	; 0x174e <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     a52:	8d 2f       	mov	r24, r29
     a54:	0e 94 bc 0b 	call	0x1778	; 0x1778 <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     a58:	c0 e0       	ldi	r28, 0x00	; 0
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
     a5c:	f8 01       	movw	r30, r16
     a5e:	ec 0f       	add	r30, r28
     a60:	f1 1d       	adc	r31, r1
     a62:	80 81       	ld	r24, Z
     a64:	0e 94 bc 0b 	call	0x1778	; 0x1778 <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     a68:	cf 5f       	subi	r28, 0xFF	; 255
     a6a:	c8 30       	cpi	r28, 0x08	; 8
     a6c:	b8 f3       	brcs	.-18     	; 0xa5c <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
     a6e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <TWI_voidSendStopCondition>
     a72:	8f e1       	ldi	r24, 0x1F	; 31
     a74:	9e e4       	ldi	r25, 0x4E	; 78
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	f1 f7       	brne	.-4      	; 0xa76 <EEPROM_voidWritePage+0x44>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <EEPROM_voidWritePage+0x4a>
     a7c:	00 00       	nop
		{
			//error state
		}
		
		
	}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	08 95       	ret

00000a88 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	64 e0       	ldi	r22, 0x04	; 4
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	65 e0       	ldi	r22, 0x05	; 5
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	66 e0       	ldi	r22, 0x06	; 6
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	63 e0       	ldi	r22, 0x03	; 3
     aaa:	82 e0       	ldi	r24, 0x02	; 2
     aac:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	64 e0       	ldi	r22, 0x04	; 4
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	65 e0       	ldi	r22, 0x05	; 5
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	66 e0       	ldi	r22, 0x06	; 6
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     ace:	63 e0       	ldi	r22, 0x03	; 3
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     ad6:	64 e0       	ldi	r22, 0x04	; 4
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     ade:	65 e0       	ldi	r22, 0x05	; 5
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     ae6:	66 e0       	ldi	r22, 0x06	; 6
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	0e 94 de 09 	call	0x13bc	; 0x13bc <DIO_voidActivePinInPullUpResistance>
     aee:	08 95       	ret

00000af0 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     af0:	6f 92       	push	r6
     af2:	7f 92       	push	r7
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	6b 97       	sbiw	r28, 0x1b	; 27
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     b1c:	00 97       	sbiw	r24, 0x00	; 0
     b1e:	09 f4       	brne	.+2      	; 0xb22 <KPD_voidGetValue+0x32>
     b20:	7e c0       	rjmp	.+252    	; 0xc1e <KPD_voidGetValue+0x12e>
     b22:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	88 8f       	std	Y+24, r24	; 0x18
     b28:	89 8f       	std	Y+25, r24	; 0x19
     b2a:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     b2c:	34 e0       	ldi	r19, 0x04	; 4
     b2e:	3d 8b       	std	Y+21, r19	; 0x15
     b30:	25 e0       	ldi	r18, 0x05	; 5
     b32:	2e 8b       	std	Y+22, r18	; 0x16
     b34:	96 e0       	ldi	r25, 0x06	; 6
     b36:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	89 8b       	std	Y+17, r24	; 0x11
     b3c:	8a 8b       	std	Y+18, r24	; 0x12
     b3e:	8b 8b       	std	Y+19, r24	; 0x13
     b40:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	8d 87       	std	Y+13, r24	; 0x0d
     b46:	3e 87       	std	Y+14, r19	; 0x0e
     b48:	2f 87       	std	Y+15, r18	; 0x0f
     b4a:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     b4c:	8c e0       	ldi	r24, 0x0C	; 12
     b4e:	e7 e6       	ldi	r30, 0x67	; 103
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	de 01       	movw	r26, r28
     b54:	11 96       	adiw	r26, 0x01	; 1
     b56:	01 90       	ld	r0, Z+
     b58:	0d 92       	st	X+, r0
     b5a:	8a 95       	dec	r24
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	f5 01       	movw	r30, r10
     b62:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     b64:	81 2c       	mov	r8, r1
     b66:	57 c0       	rjmp	.+174    	; 0xc16 <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     b68:	c8 2c       	mov	r12, r8
     b6a:	d1 2c       	mov	r13, r1
     b6c:	e5 e1       	ldi	r30, 0x15	; 21
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ec 0f       	add	r30, r28
     b72:	fd 1f       	adc	r31, r29
     b74:	ec 0d       	add	r30, r12
     b76:	fd 1d       	adc	r31, r13
     b78:	60 80       	ld	r6, Z
     b7a:	e8 e1       	ldi	r30, 0x18	; 24
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ec 0f       	add	r30, r28
     b80:	fd 1f       	adc	r31, r29
     b82:	ec 0d       	add	r30, r12
     b84:	fd 1d       	adc	r31, r13
     b86:	70 80       	ld	r7, Z
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	66 2d       	mov	r22, r6
     b8c:	87 2d       	mov	r24, r7
     b8e:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     b92:	10 e0       	ldi	r17, 0x00	; 0
     b94:	38 c0       	rjmp	.+112    	; 0xc06 <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     b96:	e1 2e       	mov	r14, r17
     b98:	f1 2c       	mov	r15, r1
     b9a:	ed e0       	ldi	r30, 0x0D	; 13
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	ec 0f       	add	r30, r28
     ba0:	fd 1f       	adc	r31, r29
     ba2:	ee 0d       	add	r30, r14
     ba4:	ff 1d       	adc	r31, r15
     ba6:	00 81       	ld	r16, Z
     ba8:	e1 e1       	ldi	r30, 0x11	; 17
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	ec 0f       	add	r30, r28
     bae:	fd 1f       	adc	r31, r29
     bb0:	ee 0d       	add	r30, r14
     bb2:	ff 1d       	adc	r31, r15
     bb4:	90 80       	ld	r9, Z
     bb6:	ae 01       	movw	r20, r28
     bb8:	45 5e       	subi	r20, 0xE5	; 229
     bba:	5f 4f       	sbci	r21, 0xFF	; 255
     bbc:	60 2f       	mov	r22, r16
     bbe:	89 2d       	mov	r24, r9
     bc0:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bc6:	81 11       	cpse	r24, r1
     bc8:	1d c0       	rjmp	.+58     	; 0xc04 <KPD_voidGetValue+0x114>
     bca:	07 c0       	rjmp	.+14     	; 0xbda <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     bcc:	ae 01       	movw	r20, r28
     bce:	45 5e       	subi	r20, 0xE5	; 229
     bd0:	5f 4f       	sbci	r21, 0xFF	; 255
     bd2:	60 2f       	mov	r22, r16
     bd4:	89 2d       	mov	r24, r9
     bd6:	0e 94 a3 09 	call	0x1346	; 0x1346 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bdc:	88 23       	and	r24, r24
     bde:	b1 f3       	breq	.-20     	; 0xbcc <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     be0:	c7 01       	movw	r24, r14
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	e8 0e       	add	r14, r24
     be8:	f9 1e       	adc	r15, r25
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	8c 0f       	add	r24, r28
     bf0:	9d 1f       	adc	r25, r29
     bf2:	e8 0e       	add	r14, r24
     bf4:	f9 1e       	adc	r15, r25
     bf6:	f7 01       	movw	r30, r14
     bf8:	ec 0d       	add	r30, r12
     bfa:	fd 1d       	adc	r31, r13
     bfc:	80 81       	ld	r24, Z
     bfe:	f5 01       	movw	r30, r10
     c00:	80 83       	st	Z, r24
     c02:	0d c0       	rjmp	.+26     	; 0xc1e <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     c04:	1f 5f       	subi	r17, 0xFF	; 255
     c06:	14 30       	cpi	r17, 0x04	; 4
     c08:	30 f2       	brcs	.-116    	; 0xb96 <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	66 2d       	mov	r22, r6
     c0e:	87 2d       	mov	r24, r7
     c10:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     c14:	83 94       	inc	r8
     c16:	f2 e0       	ldi	r31, 0x02	; 2
     c18:	f8 15       	cp	r31, r8
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <KPD_voidGetValue+0x12e>
     c1c:	a5 cf       	rjmp	.-182    	; 0xb68 <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
     c1e:	6b 96       	adiw	r28, 0x1b	; 27
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	f8 94       	cli
     c24:	de bf       	out	0x3e, r29	; 62
     c26:	0f be       	out	0x3f, r0	; 63
     c28:	cd bf       	out	0x3d, r28	; 61
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	7f 90       	pop	r7
     c44:	6f 90       	pop	r6
     c46:	08 95       	ret

00000c48 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     c48:	cf 93       	push	r28
     c4a:	c8 2f       	mov	r28, r24
     c4c:	80 ff       	sbrs	r24, 0
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <PRV_voidWriteHalfPort+0x14>
     c50:	41 e0       	ldi	r20, 0x01	; 1
     c52:	64 e0       	ldi	r22, 0x04	; 4
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <PRV_voidWriteHalfPort+0x1e>
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	64 e0       	ldi	r22, 0x04	; 4
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     c66:	c1 ff       	sbrs	r28, 1
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <PRV_voidWriteHalfPort+0x2e>
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	65 e0       	ldi	r22, 0x05	; 5
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <PRV_voidWriteHalfPort+0x38>
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	65 e0       	ldi	r22, 0x05	; 5
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     c80:	c2 ff       	sbrs	r28, 2
     c82:	06 c0       	rjmp	.+12     	; 0xc90 <PRV_voidWriteHalfPort+0x48>
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	66 e0       	ldi	r22, 0x06	; 6
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <PRV_voidWriteHalfPort+0x52>
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	66 e0       	ldi	r22, 0x06	; 6
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     c9a:	c3 ff       	sbrs	r28, 3
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <PRV_voidWriteHalfPort+0x62>
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	67 e0       	ldi	r22, 0x07	; 7
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <PRV_voidWriteHalfPort+0x6c>
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	67 e0       	ldi	r22, 0x07	; 7
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     cb4:	cf 91       	pop	r28
     cb6:	08 95       	ret

00000cb8 <LCD_voidSendCommand>:
     cb8:	cf 93       	push	r28
     cba:	c8 2f       	mov	r28, r24
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	62 e0       	ldi	r22, 0x02	; 2
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     cd0:	8c 2f       	mov	r24, r28
     cd2:	82 95       	swap	r24
     cd4:	8f 70       	andi	r24, 0x0F	; 15
     cd6:	0e 94 24 06 	call	0xc48	; 0xc48 <PRV_voidWriteHalfPort>
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	63 e0       	ldi	r22, 0x03	; 3
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     ce4:	8f e9       	ldi	r24, 0x9F	; 159
     ce6:	9f e0       	ldi	r25, 0x0F	; 15
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	f1 f7       	brne	.-4      	; 0xce8 <LCD_voidSendCommand+0x30>
     cec:	00 c0       	rjmp	.+0      	; 0xcee <LCD_voidSendCommand+0x36>
     cee:	00 00       	nop
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	63 e0       	ldi	r22, 0x03	; 3
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     cfa:	8c 2f       	mov	r24, r28
     cfc:	0e 94 24 06 	call	0xc48	; 0xc48 <PRV_voidWriteHalfPort>
     d00:	41 e0       	ldi	r20, 0x01	; 1
     d02:	63 e0       	ldi	r22, 0x03	; 3
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     d0a:	8f e9       	ldi	r24, 0x9F	; 159
     d0c:	9f e0       	ldi	r25, 0x0F	; 15
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <LCD_voidSendCommand+0x56>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <LCD_voidSendCommand+0x5c>
     d14:	00 00       	nop
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	63 e0       	ldi	r22, 0x03	; 3
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <LCD_voidInit>:
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	62 e0       	ldi	r22, 0x02	; 2
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	63 e0       	ldi	r22, 0x03	; 3
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	64 e0       	ldi	r22, 0x04	; 4
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	65 e0       	ldi	r22, 0x05	; 5
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
     d56:	41 e0       	ldi	r20, 0x01	; 1
     d58:	66 e0       	ldi	r22, 0x06	; 6
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
     d60:	41 e0       	ldi	r20, 0x01	; 1
     d62:	67 e0       	ldi	r22, 0x07	; 7
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
     d6a:	2f e7       	ldi	r18, 0x7F	; 127
     d6c:	85 eb       	ldi	r24, 0xB5	; 181
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	21 50       	subi	r18, 0x01	; 1
     d72:	80 40       	sbci	r24, 0x00	; 0
     d74:	90 40       	sbci	r25, 0x00	; 0
     d76:	e1 f7       	brne	.-8      	; 0xd70 <LCD_voidInit+0x4c>
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <LCD_voidInit+0x56>
     d7a:	00 00       	nop
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	62 e0       	ldi	r22, 0x02	; 2
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	0e 94 24 06 	call	0xc48	; 0xc48 <PRV_voidWriteHalfPort>
     d96:	41 e0       	ldi	r20, 0x01	; 1
     d98:	63 e0       	ldi	r22, 0x03	; 3
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     da0:	8f e9       	ldi	r24, 0x9F	; 159
     da2:	9f e0       	ldi	r25, 0x0F	; 15
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	f1 f7       	brne	.-4      	; 0xda4 <LCD_voidInit+0x80>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <LCD_voidInit+0x86>
     daa:	00 00       	nop
     dac:	40 e0       	ldi	r20, 0x00	; 0
     dae:	63 e0       	ldi	r22, 0x03	; 3
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     db6:	88 e2       	ldi	r24, 0x28	; 40
     db8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
     dbc:	90 ef       	ldi	r25, 0xF0	; 240
     dbe:	9a 95       	dec	r25
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <LCD_voidInit+0x9a>
     dc2:	8c e0       	ldi	r24, 0x0C	; 12
     dc4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
     dc8:	20 ef       	ldi	r18, 0xF0	; 240
     dca:	2a 95       	dec	r18
     dcc:	f1 f7       	brne	.-4      	; 0xdca <LCD_voidInit+0xa6>
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
     dd4:	8f e3       	ldi	r24, 0x3F	; 63
     dd6:	9f e1       	ldi	r25, 0x1F	; 31
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <LCD_voidInit+0xb4>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <LCD_voidInit+0xba>
     dde:	00 00       	nop
     de0:	86 e0       	ldi	r24, 0x06	; 6
     de2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
     de6:	08 95       	ret

00000de8 <LCD_voidDisplayChar>:
     de8:	cf 93       	push	r28
     dea:	c8 2f       	mov	r28, r24
     dec:	41 e0       	ldi	r20, 0x01	; 1
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	62 e0       	ldi	r22, 0x02	; 2
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     e00:	8c 2f       	mov	r24, r28
     e02:	82 95       	swap	r24
     e04:	8f 70       	andi	r24, 0x0F	; 15
     e06:	0e 94 24 06 	call	0xc48	; 0xc48 <PRV_voidWriteHalfPort>
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	63 e0       	ldi	r22, 0x03	; 3
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     e14:	8f e9       	ldi	r24, 0x9F	; 159
     e16:	9f e0       	ldi	r25, 0x0F	; 15
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <LCD_voidDisplayChar+0x30>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <LCD_voidDisplayChar+0x36>
     e1e:	00 00       	nop
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	63 e0       	ldi	r22, 0x03	; 3
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     e2a:	8c 2f       	mov	r24, r28
     e2c:	0e 94 24 06 	call	0xc48	; 0xc48 <PRV_voidWriteHalfPort>
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	63 e0       	ldi	r22, 0x03	; 3
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     e3a:	8f e9       	ldi	r24, 0x9F	; 159
     e3c:	9f e0       	ldi	r25, 0x0F	; 15
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <LCD_voidDisplayChar+0x56>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <LCD_voidDisplayChar+0x5c>
     e44:	00 00       	nop
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	63 e0       	ldi	r22, 0x03	; 3
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <LCD_voidDisplayString>:
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	29 f4       	brne	.+10     	; 0xe68 <LCD_voidDisplayString+0x14>
     e5e:	0c c0       	rjmp	.+24     	; 0xe78 <LCD_voidDisplayString+0x24>
     e60:	0e 94 f4 06 	call	0xde8	; 0xde8 <LCD_voidDisplayChar>
     e64:	cf 5f       	subi	r28, 0xFF	; 255
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <LCD_voidDisplayString+0x18>
     e68:	8c 01       	movw	r16, r24
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
     e6c:	f8 01       	movw	r30, r16
     e6e:	ec 0f       	add	r30, r28
     e70:	f1 1d       	adc	r31, r1
     e72:	80 81       	ld	r24, Z
     e74:	81 11       	cpse	r24, r1
     e76:	f4 cf       	rjmp	.-24     	; 0xe60 <LCD_voidDisplayString+0xc>
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <LCD_voidDisplayStringDelay>:
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	71 f4       	brne	.+28     	; 0xea6 <LCD_voidDisplayStringDelay+0x26>
     e8a:	15 c0       	rjmp	.+42     	; 0xeb6 <LCD_voidDisplayStringDelay+0x36>
     e8c:	0e 94 f4 06 	call	0xde8	; 0xde8 <LCD_voidDisplayChar>
     e90:	cf 5f       	subi	r28, 0xFF	; 255
     e92:	2f ef       	ldi	r18, 0xFF	; 255
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	21 50       	subi	r18, 0x01	; 1
     e9a:	80 40       	sbci	r24, 0x00	; 0
     e9c:	90 40       	sbci	r25, 0x00	; 0
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <LCD_voidDisplayStringDelay+0x18>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <LCD_voidDisplayStringDelay+0x22>
     ea2:	00 00       	nop
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <LCD_voidDisplayStringDelay+0x2a>
     ea6:	8c 01       	movw	r16, r24
     ea8:	c0 e0       	ldi	r28, 0x00	; 0
     eaa:	f8 01       	movw	r30, r16
     eac:	ec 0f       	add	r30, r28
     eae:	f1 1d       	adc	r31, r1
     eb0:	80 81       	ld	r24, Z
     eb2:	81 11       	cpse	r24, r1
     eb4:	eb cf       	rjmp	.-42     	; 0xe8c <LCD_voidDisplayStringDelay+0xc>
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <LCD_voidDisplayNumber>:
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <LCD_voidDisplayNumber+0xa>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <LCD_voidDisplayNumber+0xc>
     eca:	1f 92       	push	r1
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	26 2f       	mov	r18, r22
     ed2:	10 e0       	ldi	r17, 0x00	; 0
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <LCD_voidDisplayNumber+0x28>
     ed6:	1f 5f       	subi	r17, 0xFF	; 255
     ed8:	ed ec       	ldi	r30, 0xCD	; 205
     eda:	6e 9f       	mul	r22, r30
     edc:	61 2d       	mov	r22, r1
     ede:	11 24       	eor	r1, r1
     ee0:	66 95       	lsr	r22
     ee2:	66 95       	lsr	r22
     ee4:	66 95       	lsr	r22
     ee6:	61 11       	cpse	r22, r1
     ee8:	f6 cf       	rjmp	.-20     	; 0xed6 <LCD_voidDisplayNumber+0x18>
     eea:	00 e0       	ldi	r16, 0x00	; 0
     eec:	1a c0       	rjmp	.+52     	; 0xf22 <LCD_voidDisplayNumber+0x64>
     eee:	62 2f       	mov	r22, r18
     ef0:	2a e0       	ldi	r18, 0x0A	; 10
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__udivmodsi4>
     efc:	73 2f       	mov	r23, r19
     efe:	84 2f       	mov	r24, r20
     f00:	95 2f       	mov	r25, r21
     f02:	a0 2f       	mov	r26, r16
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	e1 2f       	mov	r30, r17
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	ea 1b       	sub	r30, r26
     f0e:	fb 0b       	sbc	r31, r27
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	4c 0f       	add	r20, r28
     f16:	5d 1f       	adc	r21, r29
     f18:	e4 0f       	add	r30, r20
     f1a:	f5 1f       	adc	r31, r21
     f1c:	60 5d       	subi	r22, 0xD0	; 208
     f1e:	60 83       	st	Z, r22
     f20:	0f 5f       	subi	r16, 0xFF	; 255
     f22:	01 17       	cp	r16, r17
     f24:	20 f3       	brcs	.-56     	; 0xeee <LCD_voidDisplayNumber+0x30>
     f26:	e1 e0       	ldi	r30, 0x01	; 1
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ec 0f       	add	r30, r28
     f2c:	fd 1f       	adc	r31, r29
     f2e:	e1 0f       	add	r30, r17
     f30:	f1 1d       	adc	r31, r1
     f32:	10 82       	st	Z, r1
     f34:	10 e0       	ldi	r17, 0x00	; 0
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <LCD_voidDisplayNumber+0x80>
     f38:	0e 94 f4 06 	call	0xde8	; 0xde8 <LCD_voidDisplayChar>
     f3c:	1f 5f       	subi	r17, 0xFF	; 255
     f3e:	e1 e0       	ldi	r30, 0x01	; 1
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	ec 0f       	add	r30, r28
     f44:	fd 1f       	adc	r31, r29
     f46:	e1 0f       	add	r30, r17
     f48:	f1 1d       	adc	r31, r1
     f4a:	80 81       	ld	r24, Z
     f4c:	81 11       	cpse	r24, r1
     f4e:	f4 cf       	rjmp	.-24     	; 0xf38 <LCD_voidDisplayNumber+0x7a>
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	08 95       	ret

00000f64 <LCD_voidClear>:
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	62 e0       	ldi	r22, 0x02	; 2
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	0e 94 24 06 	call	0xc48	; 0xc48 <PRV_voidWriteHalfPort>
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	63 e0       	ldi	r22, 0x03	; 3
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     f88:	8f e9       	ldi	r24, 0x9F	; 159
     f8a:	9f e0       	ldi	r25, 0x0F	; 15
     f8c:	01 97       	sbiw	r24, 0x01	; 1
     f8e:	f1 f7       	brne	.-4      	; 0xf8c <LCD_voidClear+0x28>
     f90:	00 c0       	rjmp	.+0      	; 0xf92 <LCD_voidClear+0x2e>
     f92:	00 00       	nop
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	63 e0       	ldi	r22, 0x03	; 3
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 24 06 	call	0xc48	; 0xc48 <PRV_voidWriteHalfPort>
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	63 e0       	ldi	r22, 0x03	; 3
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     fae:	8f e9       	ldi	r24, 0x9F	; 159
     fb0:	9f e0       	ldi	r25, 0x0F	; 15
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <LCD_voidClear+0x4e>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <LCD_voidClear+0x54>
     fb8:	00 00       	nop
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	63 e0       	ldi	r22, 0x03	; 3
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
     fc4:	08 95       	ret

00000fc6 <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
	if(copy_u8Position<40)
     fca:	68 32       	cpi	r22, 0x28	; 40
     fcc:	a0 f4       	brcc	.+40     	; 0xff6 <LCD_voidGoTOSpecificPosition+0x30>
     fce:	c6 2f       	mov	r28, r22
     fd0:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     fd8:	d1 30       	cpi	r29, 0x01	; 1
     fda:	19 f0       	breq	.+6      	; 0xfe2 <LCD_voidGoTOSpecificPosition+0x1c>
     fdc:	d2 30       	cpi	r29, 0x02	; 2
     fde:	31 f0       	breq	.+12     	; 0xfec <LCD_voidGoTOSpecificPosition+0x26>
     fe0:	0a c0       	rjmp	.+20     	; 0xff6 <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     fe2:	8c 2f       	mov	r24, r28
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
		
			
			break;
     fea:	05 c0       	rjmp	.+10     	; 0xff6 <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     fec:	80 e4       	ldi	r24, 0x40	; 64
     fee:	8c 0f       	add	r24, r28
     ff0:	80 68       	ori	r24, 0x80	; 128
     ff2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     ffc:	41 e0       	ldi	r20, 0x01	; 1
     ffe:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
    1002:	08 95       	ret

00001004 <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    1004:	41 30       	cpi	r20, 0x01	; 1
    1006:	19 f0       	breq	.+6      	; 0x100e <LED_voidOn+0xa>
    1008:	42 30       	cpi	r20, 0x02	; 2
    100a:	29 f0       	breq	.+10     	; 0x1016 <LED_voidOn+0x12>
    100c:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    100e:	41 e0       	ldi	r20, 0x01	; 1
    1010:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
		break;
    1014:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
    101c:	08 95       	ret

0000101e <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    101e:	41 30       	cpi	r20, 0x01	; 1
    1020:	19 f0       	breq	.+6      	; 0x1028 <LED_voidOff+0xa>
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	29 f0       	breq	.+10     	; 0x1030 <LED_voidOff+0x12>
    1026:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
		break;
    102e:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 23 09 	call	0x1246	; 0x1246 <DIO_voidSetPinValue>
    1036:	08 95       	ret

00001038 <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 a3 08 	call	0x1146	; 0x1146 <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
    103e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PWM_voidInitChannel_1A>
    1042:	08 95       	ret

00001044 <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e2       	ldi	r20, 0x20	; 32
    104a:	50 e4       	ldi	r21, 0x40	; 64
    104c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 ec       	ldi	r19, 0xC0	; 192
    1054:	48 e2       	ldi	r20, 0x28	; 40
    1056:	54 e4       	ldi	r21, 0x44	; 68
    1058:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	44 eb       	ldi	r20, 0xB4	; 180
    1062:	52 e4       	ldi	r21, 0x42	; 66
    1064:	0e 94 6d 0c 	call	0x18da	; 0x18da <__divsf3>
    1068:	ab 01       	movw	r20, r22
    106a:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1B(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
    106c:	82 e3       	ldi	r24, 0x32	; 50
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 8c 0a 	call	0x1518	; 0x1518 <PWM_voidGenerateChannel_1B>
    1074:	08 95       	ret

00001076 <main>:
u8 user_type =HOME_LOCAL_USER;

int main()
{
	u8 suc;
	APP_init();
    1076:	0e 94 bc 00 	call	0x178	; 0x178 <APP_init>
		//}
		
		
		
		// HOME_voidChangeUserNameAndPass();
		if (global_accessType ==accessPermited)
    107a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <global_accessType>
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	71 f4       	brne	.+28     	; 0x109e <main+0x28>
		{
			if (user_type == HOME_REMOTE_ADMIN)
    1082:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <user_type>
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	19 f4       	brne	.+6      	; 0x1090 <main+0x1a>
			{
				KPD_Interface_RemoteAdmin();
    108a:	0e 94 85 00 	call	0x10a	; 0x10a <KPD_Interface_RemoteAdmin>
    108e:	f5 cf       	rjmp	.-22     	; 0x107a <main+0x4>
			}
			else if (user_type == HOME_REMOTE_USER)
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	99 f3       	breq	.-26     	; 0x107a <main+0x4>
			{
				/* code */
			}

			else if (user_type == HOME_LOCAL_USER)
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	89 f7       	brne	.-30     	; 0x107a <main+0x4>
			{
				KPD_Interface_user();
    1098:	0e 94 7e 01 	call	0x2fc	; 0x2fc <KPD_Interface_user>
    109c:	ee cf       	rjmp	.-36     	; 0x107a <main+0x4>
			}

			
		}
		else if (global_accessType ==accessDenied)
    109e:	81 11       	cpse	r24, r1
    10a0:	ec cf       	rjmp	.-40     	; 0x107a <main+0x4>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
    10a2:	8d e9       	ldi	r24, 0x9D	; 157
    10a4:	93 e0       	ldi	r25, 0x03	; 3
    10a6:	0e 94 2a 07 	call	0xe54	; 0xe54 <LCD_voidDisplayString>
		}
		
		
		
	}
}
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	08 95       	ret

000010b0 <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	59 f0       	breq	.+22     	; 0x10ca <ADC_voidInit+0x1a>
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <ADC_voidInit+0x28>
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	a1 f4       	brne	.+40     	; 0x10e4 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
    10bc:	87 b1       	in	r24, 0x07	; 7
    10be:	80 64       	ori	r24, 0x40	; 64
    10c0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    10c2:	87 b1       	in	r24, 0x07	; 7
    10c4:	8f 77       	andi	r24, 0x7F	; 127
    10c6:	87 b9       	out	0x07, r24	; 7
		break;
    10c8:	0d c0       	rjmp	.+26     	; 0x10e4 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
    10ca:	87 b1       	in	r24, 0x07	; 7
    10cc:	8f 7b       	andi	r24, 0xBF	; 191
    10ce:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    10d0:	87 b1       	in	r24, 0x07	; 7
    10d2:	8f 77       	andi	r24, 0x7F	; 127
    10d4:	87 b9       	out	0x07, r24	; 7
		break;
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
    10d8:	87 b1       	in	r24, 0x07	; 7
    10da:	80 64       	ori	r24, 0x40	; 64
    10dc:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
    10de:	87 b1       	in	r24, 0x07	; 7
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
    10e4:	87 b1       	in	r24, 0x07	; 7
    10e6:	8f 7d       	andi	r24, 0xDF	; 223
    10e8:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
    10ea:	86 b1       	in	r24, 0x06	; 6
    10ec:	8f 7d       	andi	r24, 0xDF	; 223
    10ee:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
    10f0:	86 b1       	in	r24, 0x06	; 6
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
    10f6:	86 b1       	in	r24, 0x06	; 6
    10f8:	84 60       	ori	r24, 0x04	; 4
    10fa:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
    10fc:	86 b1       	in	r24, 0x06	; 6
    10fe:	82 60       	ori	r24, 0x02	; 2
    1100:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
    1102:	86 b1       	in	r24, 0x06	; 6
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
    1108:	86 b1       	in	r24, 0x06	; 6
    110a:	80 68       	ori	r24, 0x80	; 128
    110c:	86 b9       	out	0x06, r24	; 6
    110e:	08 95       	ret

00001110 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
    1110:	61 15       	cp	r22, r1
    1112:	71 05       	cpc	r23, r1
    1114:	b9 f0       	breq	.+46     	; 0x1144 <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
    1116:	97 b1       	in	r25, 0x07	; 7
    1118:	90 7e       	andi	r25, 0xE0	; 224
    111a:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
    111c:	97 b1       	in	r25, 0x07	; 7
    111e:	89 2b       	or	r24, r25
    1120:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
    1122:	86 b1       	in	r24, 0x06	; 6
    1124:	80 64       	ori	r24, 0x40	; 64
    1126:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
    1128:	34 9b       	sbis	0x06, 4	; 6
    112a:	fe cf       	rjmp	.-4      	; 0x1128 <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
    112c:	84 b1       	in	r24, 0x04	; 4
    112e:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
    1130:	96 95       	lsr	r25
    1132:	87 95       	ror	r24
    1134:	96 95       	lsr	r25
    1136:	87 95       	ror	r24
    1138:	fb 01       	movw	r30, r22
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
    113e:	86 b1       	in	r24, 0x06	; 6
    1140:	80 61       	ori	r24, 0x10	; 16
    1142:	86 b9       	out	0x06, r24	; 6
    1144:	08 95       	ret

00001146 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	08 f0       	brcs	.+2      	; 0x114c <DIO_voidSetPinDirection+0x6>
    114a:	7c c0       	rjmp	.+248    	; 0x1244 <DIO_voidSetPinDirection+0xfe>
    114c:	68 30       	cpi	r22, 0x08	; 8
    114e:	08 f0       	brcs	.+2      	; 0x1152 <DIO_voidSetPinDirection+0xc>
    1150:	79 c0       	rjmp	.+242    	; 0x1244 <DIO_voidSetPinDirection+0xfe>
    1152:	42 30       	cpi	r20, 0x02	; 2
    1154:	08 f0       	brcs	.+2      	; 0x1158 <DIO_voidSetPinDirection+0x12>
    1156:	76 c0       	rjmp	.+236    	; 0x1244 <DIO_voidSetPinDirection+0xfe>
    1158:	81 30       	cpi	r24, 0x01	; 1
    115a:	19 f1       	breq	.+70     	; 0x11a2 <DIO_voidSetPinDirection+0x5c>
    115c:	30 f0       	brcs	.+12     	; 0x116a <DIO_voidSetPinDirection+0x24>
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	e1 f1       	breq	.+120    	; 0x11da <DIO_voidSetPinDirection+0x94>
    1162:	83 30       	cpi	r24, 0x03	; 3
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_voidSetPinDirection+0x22>
    1166:	54 c0       	rjmp	.+168    	; 0x1210 <DIO_voidSetPinDirection+0xca>
    1168:	08 95       	ret
    116a:	44 23       	and	r20, r20
    116c:	71 f0       	breq	.+28     	; 0x118a <DIO_voidSetPinDirection+0x44>
    116e:	41 30       	cpi	r20, 0x01	; 1
    1170:	09 f0       	breq	.+2      	; 0x1174 <DIO_voidSetPinDirection+0x2e>
    1172:	68 c0       	rjmp	.+208    	; 0x1244 <DIO_voidSetPinDirection+0xfe>
    1174:	2a b3       	in	r18, 0x1a	; 26
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_voidSetPinDirection+0x3a>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	6a 95       	dec	r22
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_voidSetPinDirection+0x36>
    1184:	82 2b       	or	r24, r18
    1186:	8a bb       	out	0x1a, r24	; 26
    1188:	08 95       	ret
    118a:	2a b3       	in	r18, 0x1a	; 26
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_voidSetPinDirection+0x50>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	6a 95       	dec	r22
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_voidSetPinDirection+0x4c>
    119a:	80 95       	com	r24
    119c:	82 23       	and	r24, r18
    119e:	8a bb       	out	0x1a, r24	; 26
    11a0:	08 95       	ret
    11a2:	44 23       	and	r20, r20
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <DIO_voidSetPinDirection+0x7c>
    11a6:	41 30       	cpi	r20, 0x01	; 1
    11a8:	09 f0       	breq	.+2      	; 0x11ac <DIO_voidSetPinDirection+0x66>
    11aa:	4c c0       	rjmp	.+152    	; 0x1244 <DIO_voidSetPinDirection+0xfe>
    11ac:	27 b3       	in	r18, 0x17	; 23
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_voidSetPinDirection+0x72>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	6a 95       	dec	r22
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_voidSetPinDirection+0x6e>
    11bc:	82 2b       	or	r24, r18
    11be:	87 bb       	out	0x17, r24	; 23
    11c0:	08 95       	ret
    11c2:	27 b3       	in	r18, 0x17	; 23
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_voidSetPinDirection+0x88>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	6a 95       	dec	r22
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_voidSetPinDirection+0x84>
    11d2:	80 95       	com	r24
    11d4:	82 23       	and	r24, r18
    11d6:	87 bb       	out	0x17, r24	; 23
    11d8:	08 95       	ret
    11da:	44 23       	and	r20, r20
    11dc:	69 f0       	breq	.+26     	; 0x11f8 <DIO_voidSetPinDirection+0xb2>
    11de:	41 30       	cpi	r20, 0x01	; 1
    11e0:	89 f5       	brne	.+98     	; 0x1244 <DIO_voidSetPinDirection+0xfe>
    11e2:	24 b3       	in	r18, 0x14	; 20
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_voidSetPinDirection+0xa8>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	6a 95       	dec	r22
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_voidSetPinDirection+0xa4>
    11f2:	82 2b       	or	r24, r18
    11f4:	84 bb       	out	0x14, r24	; 20
    11f6:	08 95       	ret
    11f8:	24 b3       	in	r18, 0x14	; 20
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_voidSetPinDirection+0xbe>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	6a 95       	dec	r22
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_voidSetPinDirection+0xba>
    1208:	80 95       	com	r24
    120a:	82 23       	and	r24, r18
    120c:	84 bb       	out	0x14, r24	; 20
    120e:	08 95       	ret
    1210:	44 23       	and	r20, r20
    1212:	69 f0       	breq	.+26     	; 0x122e <DIO_voidSetPinDirection+0xe8>
    1214:	41 30       	cpi	r20, 0x01	; 1
    1216:	b1 f4       	brne	.+44     	; 0x1244 <DIO_voidSetPinDirection+0xfe>
    1218:	21 b3       	in	r18, 0x11	; 17
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_voidSetPinDirection+0xde>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	6a 95       	dec	r22
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_voidSetPinDirection+0xda>
    1228:	82 2b       	or	r24, r18
    122a:	81 bb       	out	0x11, r24	; 17
    122c:	08 95       	ret
    122e:	21 b3       	in	r18, 0x11	; 17
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	02 c0       	rjmp	.+4      	; 0x123a <DIO_voidSetPinDirection+0xf4>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	6a 95       	dec	r22
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <DIO_voidSetPinDirection+0xf0>
    123e:	80 95       	com	r24
    1240:	82 23       	and	r24, r18
    1242:	81 bb       	out	0x11, r24	; 17
    1244:	08 95       	ret

00001246 <DIO_voidSetPinValue>:
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	08 f0       	brcs	.+2      	; 0x124c <DIO_voidSetPinValue+0x6>
    124a:	7c c0       	rjmp	.+248    	; 0x1344 <DIO_voidSetPinValue+0xfe>
    124c:	68 30       	cpi	r22, 0x08	; 8
    124e:	08 f0       	brcs	.+2      	; 0x1252 <DIO_voidSetPinValue+0xc>
    1250:	79 c0       	rjmp	.+242    	; 0x1344 <DIO_voidSetPinValue+0xfe>
    1252:	42 30       	cpi	r20, 0x02	; 2
    1254:	08 f0       	brcs	.+2      	; 0x1258 <DIO_voidSetPinValue+0x12>
    1256:	76 c0       	rjmp	.+236    	; 0x1344 <DIO_voidSetPinValue+0xfe>
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	19 f1       	breq	.+70     	; 0x12a2 <DIO_voidSetPinValue+0x5c>
    125c:	30 f0       	brcs	.+12     	; 0x126a <DIO_voidSetPinValue+0x24>
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	e1 f1       	breq	.+120    	; 0x12da <DIO_voidSetPinValue+0x94>
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	09 f4       	brne	.+2      	; 0x1268 <DIO_voidSetPinValue+0x22>
    1266:	54 c0       	rjmp	.+168    	; 0x1310 <DIO_voidSetPinValue+0xca>
    1268:	08 95       	ret
    126a:	44 23       	and	r20, r20
    126c:	71 f0       	breq	.+28     	; 0x128a <DIO_voidSetPinValue+0x44>
    126e:	41 30       	cpi	r20, 0x01	; 1
    1270:	09 f0       	breq	.+2      	; 0x1274 <DIO_voidSetPinValue+0x2e>
    1272:	68 c0       	rjmp	.+208    	; 0x1344 <DIO_voidSetPinValue+0xfe>
    1274:	2b b3       	in	r18, 0x1b	; 27
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_voidSetPinValue+0x3a>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	6a 95       	dec	r22
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_voidSetPinValue+0x36>
    1284:	82 2b       	or	r24, r18
    1286:	8b bb       	out	0x1b, r24	; 27
    1288:	08 95       	ret
    128a:	2b b3       	in	r18, 0x1b	; 27
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_voidSetPinValue+0x50>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	6a 95       	dec	r22
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_voidSetPinValue+0x4c>
    129a:	80 95       	com	r24
    129c:	82 23       	and	r24, r18
    129e:	8b bb       	out	0x1b, r24	; 27
    12a0:	08 95       	ret
    12a2:	44 23       	and	r20, r20
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <DIO_voidSetPinValue+0x7c>
    12a6:	41 30       	cpi	r20, 0x01	; 1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <DIO_voidSetPinValue+0x66>
    12aa:	4c c0       	rjmp	.+152    	; 0x1344 <DIO_voidSetPinValue+0xfe>
    12ac:	28 b3       	in	r18, 0x18	; 24
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_voidSetPinValue+0x72>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	6a 95       	dec	r22
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_voidSetPinValue+0x6e>
    12bc:	82 2b       	or	r24, r18
    12be:	88 bb       	out	0x18, r24	; 24
    12c0:	08 95       	ret
    12c2:	28 b3       	in	r18, 0x18	; 24
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_voidSetPinValue+0x88>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	6a 95       	dec	r22
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_voidSetPinValue+0x84>
    12d2:	80 95       	com	r24
    12d4:	82 23       	and	r24, r18
    12d6:	88 bb       	out	0x18, r24	; 24
    12d8:	08 95       	ret
    12da:	44 23       	and	r20, r20
    12dc:	69 f0       	breq	.+26     	; 0x12f8 <DIO_voidSetPinValue+0xb2>
    12de:	41 30       	cpi	r20, 0x01	; 1
    12e0:	89 f5       	brne	.+98     	; 0x1344 <DIO_voidSetPinValue+0xfe>
    12e2:	25 b3       	in	r18, 0x15	; 21
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_voidSetPinValue+0xa8>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	6a 95       	dec	r22
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_voidSetPinValue+0xa4>
    12f2:	82 2b       	or	r24, r18
    12f4:	85 bb       	out	0x15, r24	; 21
    12f6:	08 95       	ret
    12f8:	25 b3       	in	r18, 0x15	; 21
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_voidSetPinValue+0xbe>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	6a 95       	dec	r22
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_voidSetPinValue+0xba>
    1308:	80 95       	com	r24
    130a:	82 23       	and	r24, r18
    130c:	85 bb       	out	0x15, r24	; 21
    130e:	08 95       	ret
    1310:	44 23       	and	r20, r20
    1312:	69 f0       	breq	.+26     	; 0x132e <DIO_voidSetPinValue+0xe8>
    1314:	41 30       	cpi	r20, 0x01	; 1
    1316:	b1 f4       	brne	.+44     	; 0x1344 <DIO_voidSetPinValue+0xfe>
    1318:	22 b3       	in	r18, 0x12	; 18
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_voidSetPinValue+0xde>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	6a 95       	dec	r22
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_voidSetPinValue+0xda>
    1328:	82 2b       	or	r24, r18
    132a:	82 bb       	out	0x12, r24	; 18
    132c:	08 95       	ret
    132e:	22 b3       	in	r18, 0x12	; 18
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_voidSetPinValue+0xf4>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	6a 95       	dec	r22
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_voidSetPinValue+0xf0>
    133e:	80 95       	com	r24
    1340:	82 23       	and	r24, r18
    1342:	82 bb       	out	0x12, r24	; 18
    1344:	08 95       	ret

00001346 <DIO_voidGetPinValue>:
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	c0 f5       	brcc	.+112    	; 0x13ba <DIO_voidGetPinValue+0x74>
    134a:	68 30       	cpi	r22, 0x08	; 8
    134c:	b0 f5       	brcc	.+108    	; 0x13ba <DIO_voidGetPinValue+0x74>
    134e:	41 15       	cp	r20, r1
    1350:	51 05       	cpc	r21, r1
    1352:	99 f1       	breq	.+102    	; 0x13ba <DIO_voidGetPinValue+0x74>
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	89 f0       	breq	.+34     	; 0x137a <DIO_voidGetPinValue+0x34>
    1358:	28 f0       	brcs	.+10     	; 0x1364 <DIO_voidGetPinValue+0x1e>
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	c9 f0       	breq	.+50     	; 0x1390 <DIO_voidGetPinValue+0x4a>
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	11 f1       	breq	.+68     	; 0x13a6 <DIO_voidGetPinValue+0x60>
    1362:	08 95       	ret
    1364:	89 b3       	in	r24, 0x19	; 25
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_voidGetPinValue+0x28>
    136a:	95 95       	asr	r25
    136c:	87 95       	ror	r24
    136e:	6a 95       	dec	r22
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_voidGetPinValue+0x24>
    1372:	81 70       	andi	r24, 0x01	; 1
    1374:	fa 01       	movw	r30, r20
    1376:	80 83       	st	Z, r24
    1378:	08 95       	ret
    137a:	86 b3       	in	r24, 0x16	; 22
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <DIO_voidGetPinValue+0x3e>
    1380:	95 95       	asr	r25
    1382:	87 95       	ror	r24
    1384:	6a 95       	dec	r22
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <DIO_voidGetPinValue+0x3a>
    1388:	81 70       	andi	r24, 0x01	; 1
    138a:	fa 01       	movw	r30, r20
    138c:	80 83       	st	Z, r24
    138e:	08 95       	ret
    1390:	83 b3       	in	r24, 0x13	; 19
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_voidGetPinValue+0x54>
    1396:	95 95       	asr	r25
    1398:	87 95       	ror	r24
    139a:	6a 95       	dec	r22
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_voidGetPinValue+0x50>
    139e:	81 70       	andi	r24, 0x01	; 1
    13a0:	fa 01       	movw	r30, r20
    13a2:	80 83       	st	Z, r24
    13a4:	08 95       	ret
    13a6:	80 b3       	in	r24, 0x10	; 16
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_voidGetPinValue+0x6a>
    13ac:	95 95       	asr	r25
    13ae:	87 95       	ror	r24
    13b0:	6a 95       	dec	r22
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_voidGetPinValue+0x66>
    13b4:	81 70       	andi	r24, 0x01	; 1
    13b6:	fa 01       	movw	r30, r20
    13b8:	80 83       	st	Z, r24
    13ba:	08 95       	ret

000013bc <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	a8 f5       	brcc	.+106    	; 0x142a <DIO_voidActivePinInPullUpResistance+0x6e>
    13c0:	68 30       	cpi	r22, 0x08	; 8
    13c2:	98 f5       	brcc	.+102    	; 0x142a <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	89 f0       	breq	.+34     	; 0x13ea <DIO_voidActivePinInPullUpResistance+0x2e>
    13c8:	28 f0       	brcs	.+10     	; 0x13d4 <DIO_voidActivePinInPullUpResistance+0x18>
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	c9 f0       	breq	.+50     	; 0x1400 <DIO_voidActivePinInPullUpResistance+0x44>
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	11 f1       	breq	.+68     	; 0x1416 <DIO_voidActivePinInPullUpResistance+0x5a>
    13d2:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    13d4:	2b b3       	in	r18, 0x1b	; 27
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_voidActivePinInPullUpResistance+0x24>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	6a 95       	dec	r22
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_voidActivePinInPullUpResistance+0x20>
    13e4:	82 2b       	or	r24, r18
    13e6:	8b bb       	out	0x1b, r24	; 27
			break;
    13e8:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    13ea:	28 b3       	in	r18, 0x18	; 24
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_voidActivePinInPullUpResistance+0x3a>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	6a 95       	dec	r22
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_voidActivePinInPullUpResistance+0x36>
    13fa:	82 2b       	or	r24, r18
    13fc:	88 bb       	out	0x18, r24	; 24
			break;
    13fe:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    1400:	25 b3       	in	r18, 0x15	; 21
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_voidActivePinInPullUpResistance+0x50>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	6a 95       	dec	r22
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_voidActivePinInPullUpResistance+0x4c>
    1410:	82 2b       	or	r24, r18
    1412:	85 bb       	out	0x15, r24	; 21
			break;
    1414:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    1416:	22 b3       	in	r18, 0x12	; 18
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <DIO_voidActivePinInPullUpResistance+0x66>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	6a 95       	dec	r22
    1424:	e2 f7       	brpl	.-8      	; 0x141e <DIO_voidActivePinInPullUpResistance+0x62>
    1426:	82 2b       	or	r24, r18
    1428:	82 bb       	out	0x12, r24	; 18
    142a:	08 95       	ret

0000142c <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    142c:	8f b7       	in	r24, 0x3f	; 63
    142e:	80 68       	ori	r24, 0x80	; 128
    1430:	8f bf       	out	0x3f, r24	; 63
    1432:	08 95       	ret

00001434 <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel A)*/
	SET_BIT(TCCR1B_REG, WGM13);
    1434:	8e b5       	in	r24, 0x2e	; 46
    1436:	80 61       	ori	r24, 0x10	; 16
    1438:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    143a:	8e b5       	in	r24, 0x2e	; 46
    143c:	88 60       	ori	r24, 0x08	; 8
    143e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    1440:	8f b5       	in	r24, 0x2f	; 47
    1442:	82 60       	ori	r24, 0x02	; 2
    1444:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    1446:	8f b5       	in	r24, 0x2f	; 47
    1448:	8e 7f       	andi	r24, 0xFE	; 254
    144a:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1A1);
    144c:	8f b5       	in	r24, 0x2f	; 47
    144e:	80 68       	ori	r24, 0x80	; 128
    1450:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0);
    1452:	8f b5       	in	r24, 0x2f	; 47
    1454:	8f 7b       	andi	r24, 0xBF	; 191
    1456:	8f bd       	out	0x2f, r24	; 47
    1458:	08 95       	ret

0000145a <PWM_voidInitChannel_1B>:
}

void PWM_voidInitChannel_1B(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel B)*/
	SET_BIT(TCCR1B_REG, WGM13);
    145a:	8e b5       	in	r24, 0x2e	; 46
    145c:	80 61       	ori	r24, 0x10	; 16
    145e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    1460:	8e b5       	in	r24, 0x2e	; 46
    1462:	88 60       	ori	r24, 0x08	; 8
    1464:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    1466:	8f b5       	in	r24, 0x2f	; 47
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    146c:	8f b5       	in	r24, 0x2f	; 47
    146e:	8e 7f       	andi	r24, 0xFE	; 254
    1470:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1B1);
    1472:	8f b5       	in	r24, 0x2f	; 47
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1B0);
    1478:	8f b5       	in	r24, 0x2f	; 47
    147a:	8f 7e       	andi	r24, 0xEF	; 239
    147c:	8f bd       	out	0x2f, r24	; 47
    147e:	08 95       	ret

00001480 <PWM_voidGenerateChannel_1A>:
}


void PWM_voidGenerateChannel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	ec 01       	movw	r28, r24
    148e:	6a 01       	movw	r12, r20
    1490:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	48 ec       	ldi	r20, 0xC8	; 200
    1498:	52 e4       	ldi	r21, 0x42	; 66
    149a:	c7 01       	movw	r24, r14
    149c:	b6 01       	movw	r22, r12
    149e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__cmpsf2>
    14a2:	18 16       	cp	r1, r24
    14a4:	94 f1       	brlt	.+100    	; 0x150a <PWM_voidGenerateChannel_1A+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    14a6:	9e 01       	movw	r18, r28
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	60 e9       	ldi	r22, 0x90	; 144
    14ae:	70 ed       	ldi	r23, 0xD0	; 208
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__udivmodsi4>
    14b8:	21 50       	subi	r18, 0x01	; 1
    14ba:	31 09       	sbc	r19, r1
    14bc:	37 bd       	out	0x27, r19	; 39
    14be:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1A_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    14c0:	66 b5       	in	r22, 0x26	; 38
    14c2:	77 b5       	in	r23, 0x27	; 39
    14c4:	6f 5f       	subi	r22, 0xFF	; 255
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatunsisf>
    14d0:	a7 01       	movw	r20, r14
    14d2:	96 01       	movw	r18, r12
    14d4:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	48 ec       	ldi	r20, 0xC8	; 200
    14de:	52 e4       	ldi	r21, 0x42	; 66
    14e0:	0e 94 6d 0c 	call	0x18da	; 0x18da <__divsf3>
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e8       	ldi	r20, 0x80	; 128
    14ea:	5f e3       	ldi	r21, 0x3F	; 63
    14ec:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
    14f0:	0e 94 df 0c 	call	0x19be	; 0x19be <__fixunssfsi>
    14f4:	7b bd       	out	0x2b, r23	; 43
    14f6:	6a bd       	out	0x2a, r22	; 42
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    14f8:	8e b5       	in	r24, 0x2e	; 46
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    14fe:	8e b5       	in	r24, 0x2e	; 46
    1500:	82 60       	ori	r24, 0x02	; 2
    1502:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    1504:	8e b5       	in	r24, 0x2e	; 46
    1506:	8b 7f       	andi	r24, 0xFB	; 251
    1508:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
}
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	ff 90       	pop	r15
    1510:	ef 90       	pop	r14
    1512:	df 90       	pop	r13
    1514:	cf 90       	pop	r12
    1516:	08 95       	ret

00001518 <PWM_voidGenerateChannel_1B>:



void PWM_voidGenerateChannel_1B(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	ec 01       	movw	r28, r24
    1526:	6a 01       	movw	r12, r20
    1528:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	48 ec       	ldi	r20, 0xC8	; 200
    1530:	52 e4       	ldi	r21, 0x42	; 66
    1532:	c7 01       	movw	r24, r14
    1534:	b6 01       	movw	r22, r12
    1536:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__cmpsf2>
    153a:	18 16       	cp	r1, r24
    153c:	94 f1       	brlt	.+100    	; 0x15a2 <PWM_voidGenerateChannel_1B+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    153e:	9e 01       	movw	r18, r28
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	60 e9       	ldi	r22, 0x90	; 144
    1546:	70 ed       	ldi	r23, 0xD0	; 208
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <__udivmodsi4>
    1550:	21 50       	subi	r18, 0x01	; 1
    1552:	31 09       	sbc	r19, r1
    1554:	37 bd       	out	0x27, r19	; 39
    1556:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1B_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    1558:	66 b5       	in	r22, 0x26	; 38
    155a:	77 b5       	in	r23, 0x27	; 39
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__floatunsisf>
    1568:	a7 01       	movw	r20, r14
    156a:	96 01       	movw	r18, r12
    156c:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__mulsf3>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	48 ec       	ldi	r20, 0xC8	; 200
    1576:	52 e4       	ldi	r21, 0x42	; 66
    1578:	0e 94 6d 0c 	call	0x18da	; 0x18da <__divsf3>
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__subsf3>
    1588:	0e 94 df 0c 	call	0x19be	; 0x19be <__fixunssfsi>
    158c:	79 bd       	out	0x29, r23	; 41
    158e:	68 bd       	out	0x28, r22	; 40
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    1590:	8e b5       	in	r24, 0x2e	; 46
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    1596:	8e b5       	in	r24, 0x2e	; 46
    1598:	82 60       	ori	r24, 0x02	; 2
    159a:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    159c:	8e b5       	in	r24, 0x2e	; 46
    159e:	8b 7f       	andi	r24, 0xFB	; 251
    15a0:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	08 95       	ret

000015b0 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    15b0:	83 b7       	in	r24, 0x33	; 51
    15b2:	8f 7b       	andi	r24, 0xBF	; 191
    15b4:	83 bf       	out	0x33, r24	; 51
    15b6:	83 b7       	in	r24, 0x33	; 51
    15b8:	88 60       	ori	r24, 0x08	; 8
    15ba:	83 bf       	out	0x33, r24	; 51
    15bc:	83 b7       	in	r24, 0x33	; 51
    15be:	8f 7e       	andi	r24, 0xEF	; 239
    15c0:	83 bf       	out	0x33, r24	; 51
    15c2:	83 b7       	in	r24, 0x33	; 51
    15c4:	8f 7d       	andi	r24, 0xDF	; 223
    15c6:	83 bf       	out	0x33, r24	; 51
    15c8:	89 b7       	in	r24, 0x39	; 57
    15ca:	82 60       	ori	r24, 0x02	; 2
    15cc:	89 bf       	out	0x39, r24	; 57
    15ce:	89 ef       	ldi	r24, 0xF9	; 249
    15d0:	8c bf       	out	0x3c, r24	; 60
    15d2:	08 95       	ret

000015d4 <TMR0_voidStart>:
    15d4:	83 b7       	in	r24, 0x33	; 51
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	83 bf       	out	0x33, r24	; 51
    15da:	83 b7       	in	r24, 0x33	; 51
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	83 bf       	out	0x33, r24	; 51
    15e0:	83 b7       	in	r24, 0x33	; 51
    15e2:	8b 7f       	andi	r24, 0xFB	; 251
    15e4:	83 bf       	out	0x33, r24	; 51
    15e6:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <local_u16Counter+0x1>
    15ea:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <local_u16Counter>
    15ee:	08 95       	ret

000015f0 <TMR0_voidStop>:
    15f0:	83 b7       	in	r24, 0x33	; 51
    15f2:	8e 7f       	andi	r24, 0xFE	; 254
    15f4:	83 bf       	out	0x33, r24	; 51
    15f6:	83 b7       	in	r24, 0x33	; 51
    15f8:	8d 7f       	andi	r24, 0xFD	; 253
    15fa:	83 bf       	out	0x33, r24	; 51
    15fc:	83 b7       	in	r24, 0x33	; 51
    15fe:	8b 7f       	andi	r24, 0xFB	; 251
    1600:	83 bf       	out	0x33, r24	; 51
    1602:	08 95       	ret

00001604 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	21 f0       	breq	.+8      	; 0x1610 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    1608:	90 93 b2 03 	sts	0x03B2, r25	; 0x8003b2 <PRV_pFunCallBackCTC+0x1>
    160c:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <PRV_pFunCallBackCTC>
    1610:	08 95       	ret

00001612 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    1612:	88 b7       	in	r24, 0x38	; 56
    1614:	82 60       	ori	r24, 0x02	; 2
    1616:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    1618:	88 b7       	in	r24, 0x38	; 56
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	88 bf       	out	0x38, r24	; 56
    161e:	08 95       	ret

00001620 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	2f 93       	push	r18
    162c:	3f 93       	push	r19
    162e:	4f 93       	push	r20
    1630:	5f 93       	push	r21
    1632:	6f 93       	push	r22
    1634:	7f 93       	push	r23
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	af 93       	push	r26
    163c:	bf 93       	push	r27
    163e:	ef 93       	push	r30
    1640:	ff 93       	push	r31
	
	
	local_u16Counter++;
    1642:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <local_u16Counter>
    1646:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <local_u16Counter+0x1>
    164a:	01 96       	adiw	r24, 0x01	; 1
    164c:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <local_u16Counter+0x1>
    1650:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    1654:	88 3e       	cpi	r24, 0xE8	; 232
    1656:	93 40       	sbci	r25, 0x03	; 3
    1658:	69 f4       	brne	.+26     	; 0x1674 <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    165a:	81 e7       	ldi	r24, 0x71	; 113
    165c:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    165e:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <local_u16Counter+0x1>
    1662:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    1666:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <PRV_pFunCallBackOVF>
    166a:	f0 91 b4 03 	lds	r31, 0x03B4	; 0x8003b4 <PRV_pFunCallBackOVF+0x1>
    166e:	30 97       	sbiw	r30, 0x00	; 0
    1670:	09 f0       	breq	.+2      	; 0x1674 <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    1672:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    1674:	ff 91       	pop	r31
    1676:	ef 91       	pop	r30
    1678:	bf 91       	pop	r27
    167a:	af 91       	pop	r26
    167c:	9f 91       	pop	r25
    167e:	8f 91       	pop	r24
    1680:	7f 91       	pop	r23
    1682:	6f 91       	pop	r22
    1684:	5f 91       	pop	r21
    1686:	4f 91       	pop	r20
    1688:	3f 91       	pop	r19
    168a:	2f 91       	pop	r18
    168c:	0f 90       	pop	r0
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	0f 90       	pop	r0
    1692:	1f 90       	pop	r1
    1694:	18 95       	reti

00001696 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    1696:	1f 92       	push	r1
    1698:	0f 92       	push	r0
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	0f 92       	push	r0
    169e:	11 24       	eor	r1, r1
    16a0:	2f 93       	push	r18
    16a2:	3f 93       	push	r19
    16a4:	4f 93       	push	r20
    16a6:	5f 93       	push	r21
    16a8:	6f 93       	push	r22
    16aa:	7f 93       	push	r23
    16ac:	8f 93       	push	r24
    16ae:	9f 93       	push	r25
    16b0:	af 93       	push	r26
    16b2:	bf 93       	push	r27
    16b4:	ef 93       	push	r30
    16b6:	ff 93       	push	r31
	

	
	local_u16Counter++;
    16b8:	80 91 af 03 	lds	r24, 0x03AF	; 0x8003af <local_u16Counter>
    16bc:	90 91 b0 03 	lds	r25, 0x03B0	; 0x8003b0 <local_u16Counter+0x1>
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	90 93 b0 03 	sts	0x03B0, r25	; 0x8003b0 <local_u16Counter+0x1>
    16c6:	80 93 af 03 	sts	0x03AF, r24	; 0x8003af <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    16ca:	88 38       	cpi	r24, 0x88	; 136
    16cc:	93 41       	sbci	r25, 0x13	; 19
    16ce:	69 f4       	brne	.+26     	; 0x16ea <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    16d0:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <local_u16Counter+0x1>
    16d4:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    16d8:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <PRV_pFunCallBackCTC>
    16dc:	f0 91 b2 03 	lds	r31, 0x03B2	; 0x8003b2 <PRV_pFunCallBackCTC+0x1>
    16e0:	30 97       	sbiw	r30, 0x00	; 0
    16e2:	19 f0       	breq	.+6      	; 0x16ea <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    16e4:	09 95       	icall
			TMR0clear_flag();
    16e6:	0e 94 09 0b 	call	0x1612	; 0x1612 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <TWI_voidInitMaster>:
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
		
		while(0==GET_BIT(TWCR_REG,TWINT));
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    170c:	8c e0       	ldi	r24, 0x0C	; 12
    170e:	80 b9       	out	0x00, r24	; 0
    1710:	81 b1       	in	r24, 0x01	; 1
    1712:	8d 7f       	andi	r24, 0xFD	; 253
    1714:	81 b9       	out	0x01, r24	; 1
    1716:	81 b1       	in	r24, 0x01	; 1
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	81 b9       	out	0x01, r24	; 1
    171c:	86 b7       	in	r24, 0x36	; 54
    171e:	84 60       	ori	r24, 0x04	; 4
    1720:	86 bf       	out	0x36, r24	; 54
    1722:	08 95       	ret

00001724 <TWI_voidSendStartCondition>:
    1724:	86 b7       	in	r24, 0x36	; 54
    1726:	80 62       	ori	r24, 0x20	; 32
    1728:	86 bf       	out	0x36, r24	; 54
    172a:	86 b7       	in	r24, 0x36	; 54
    172c:	80 68       	ori	r24, 0x80	; 128
    172e:	86 bf       	out	0x36, r24	; 54
    1730:	06 b6       	in	r0, 0x36	; 54
    1732:	07 fe       	sbrs	r0, 7
    1734:	fd cf       	rjmp	.-6      	; 0x1730 <TWI_voidSendStartCondition+0xc>
    1736:	81 b1       	in	r24, 0x01	; 1
    1738:	88 7f       	andi	r24, 0xF8	; 248
    173a:	88 30       	cpi	r24, 0x08	; 8
    173c:	e1 f7       	brne	.-8      	; 0x1736 <TWI_voidSendStartCondition+0x12>
    173e:	08 95       	ret

00001740 <TWI_voidSendStopCondition>:
    1740:	86 b7       	in	r24, 0x36	; 54
    1742:	80 61       	ori	r24, 0x10	; 16
    1744:	86 bf       	out	0x36, r24	; 54
    1746:	86 b7       	in	r24, 0x36	; 54
    1748:	80 68       	ori	r24, 0x80	; 128
    174a:	86 bf       	out	0x36, r24	; 54
    174c:	08 95       	ret

0000174e <TWI_voidSendSlaveAddWithWrite>:
    174e:	88 23       	and	r24, r24
    1750:	94 f0       	brlt	.+36     	; 0x1776 <TWI_voidSendSlaveAddWithWrite+0x28>
    1752:	88 0f       	add	r24, r24
    1754:	83 b9       	out	0x03, r24	; 3
    1756:	83 b1       	in	r24, 0x03	; 3
    1758:	8e 7f       	andi	r24, 0xFE	; 254
    175a:	83 b9       	out	0x03, r24	; 3
    175c:	86 b7       	in	r24, 0x36	; 54
    175e:	8f 7d       	andi	r24, 0xDF	; 223
    1760:	86 bf       	out	0x36, r24	; 54
    1762:	86 b7       	in	r24, 0x36	; 54
    1764:	80 68       	ori	r24, 0x80	; 128
    1766:	86 bf       	out	0x36, r24	; 54
    1768:	06 b6       	in	r0, 0x36	; 54
    176a:	07 fe       	sbrs	r0, 7
    176c:	fd cf       	rjmp	.-6      	; 0x1768 <TWI_voidSendSlaveAddWithWrite+0x1a>
    176e:	81 b1       	in	r24, 0x01	; 1
    1770:	88 7f       	andi	r24, 0xF8	; 248
    1772:	88 31       	cpi	r24, 0x18	; 24
    1774:	e1 f7       	brne	.-8      	; 0x176e <TWI_voidSendSlaveAddWithWrite+0x20>
    1776:	08 95       	ret

00001778 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    1778:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    177a:	86 b7       	in	r24, 0x36	; 54
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    1780:	06 b6       	in	r0, 0x36	; 54
    1782:	07 fe       	sbrs	r0, 7
    1784:	fd cf       	rjmp	.-6      	; 0x1780 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    1786:	81 b1       	in	r24, 0x01	; 1
    1788:	88 7f       	andi	r24, 0xF8	; 248
    178a:	88 32       	cpi	r24, 0x28	; 40
    178c:	e1 f7       	brne	.-8      	; 0x1786 <TWI_voidTransmitMasterDataByte+0xe>
}
    178e:	08 95       	ret

00001790 <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    1790:	8b b1       	in	r24, 0x0b	; 11
    1792:	8d 7f       	andi	r24, 0xFD	; 253
    1794:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    1796:	87 e6       	ldi	r24, 0x67	; 103
    1798:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    179a:	8a b1       	in	r24, 0x0a	; 10
    179c:	8b 7f       	andi	r24, 0xFB	; 251
    179e:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    17a0:	86 e8       	ldi	r24, 0x86	; 134
    17a2:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    17a4:	8a b1       	in	r24, 0x0a	; 10
    17a6:	80 61       	ori	r24, 0x10	; 16
    17a8:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    17aa:	8a b1       	in	r24, 0x0a	; 10
    17ac:	88 60       	ori	r24, 0x08	; 8
    17ae:	8a b9       	out	0x0a, r24	; 10
    17b0:	08 95       	ret

000017b2 <UART_voidTxChar>:


void UART_voidTxChar(u8 copy_u8TxData)
{
	/*write data to data register*/
	UDR_REG=copy_u8TxData;
    17b2:	8c b9       	out	0x0c, r24	; 12
	
	/*busy wait for data moved from data register to shift register*/
	while(0==GET_BIT(UCSRA_REG,UDRE));
    17b4:	5d 9b       	sbis	0x0b, 5	; 11
    17b6:	fe cf       	rjmp	.-4      	; 0x17b4 <UART_voidTxChar+0x2>
	
}
    17b8:	08 95       	ret

000017ba <UART_voidRxChar>:



void UART_voidRxChar(u8* copy_pu8RxData)
{
	if(copy_pu8RxData!=NULL)
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	29 f0       	breq	.+10     	; 0x17c8 <UART_voidRxChar+0xe>
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC));
    17be:	5f 9b       	sbis	0x0b, 7	; 11
    17c0:	fe cf       	rjmp	.-4      	; 0x17be <UART_voidRxChar+0x4>
		
		/*Read data to data register*/
		*copy_pu8RxData=UDR_REG;
    17c2:	2c b1       	in	r18, 0x0c	; 12
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
    17c8:	08 95       	ret

000017ca <UART_voidTxString>:
		//error state
	}
}

void UART_voidTxString	(u8* copy_pu8TxString)
{
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
	
	if(copy_pu8TxString!=NULL)
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	29 f4       	brne	.+10     	; 0x17de <UART_voidTxString+0x14>
    17d4:	0c c0       	rjmp	.+24     	; 0x17ee <UART_voidTxString+0x24>
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
		{
			/*send data[i]*/
			UART_voidTxChar(copy_pu8TxString[Local_u8Counter]);
    17d6:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <UART_voidTxChar>
			
			/*increase counter*/
			Local_u8Counter++;
    17da:	cf 5f       	subi	r28, 0xFF	; 255
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <UART_voidTxString+0x18>
    17de:	8c 01       	movw	r16, r24
    17e0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		/*Init counter*/
		u8 Local_u8Counter=0;
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
    17e2:	f8 01       	movw	r30, r16
    17e4:	ec 0f       	add	r30, r28
    17e6:	f1 1d       	adc	r31, r1
    17e8:	80 81       	ld	r24, Z
    17ea:	81 11       	cpse	r24, r1
    17ec:	f4 cf       	rjmp	.-24     	; 0x17d6 <UART_voidTxString+0xc>
	{
		//error state
	}
	
	
}
    17ee:	cf 91       	pop	r28
    17f0:	1f 91       	pop	r17
    17f2:	0f 91       	pop	r16
    17f4:	08 95       	ret

000017f6 <__subsf3>:
    17f6:	50 58       	subi	r21, 0x80	; 128

000017f8 <__addsf3>:
    17f8:	bb 27       	eor	r27, r27
    17fa:	aa 27       	eor	r26, r26
    17fc:	0e 94 13 0c 	call	0x1826	; 0x1826 <__addsf3x>
    1800:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__fp_round>
    1804:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__fp_pscA>
    1808:	38 f0       	brcs	.+14     	; 0x1818 <__addsf3+0x20>
    180a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__fp_pscB>
    180e:	20 f0       	brcs	.+8      	; 0x1818 <__addsf3+0x20>
    1810:	39 f4       	brne	.+14     	; 0x1820 <__addsf3+0x28>
    1812:	9f 3f       	cpi	r25, 0xFF	; 255
    1814:	19 f4       	brne	.+6      	; 0x181c <__addsf3+0x24>
    1816:	26 f4       	brtc	.+8      	; 0x1820 <__addsf3+0x28>
    1818:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_nan>
    181c:	0e f4       	brtc	.+2      	; 0x1820 <__addsf3+0x28>
    181e:	e0 95       	com	r30
    1820:	e7 fb       	bst	r30, 7
    1822:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_inf>

00001826 <__addsf3x>:
    1826:	e9 2f       	mov	r30, r25
    1828:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__fp_split3>
    182c:	58 f3       	brcs	.-42     	; 0x1804 <__addsf3+0xc>
    182e:	ba 17       	cp	r27, r26
    1830:	62 07       	cpc	r22, r18
    1832:	73 07       	cpc	r23, r19
    1834:	84 07       	cpc	r24, r20
    1836:	95 07       	cpc	r25, r21
    1838:	20 f0       	brcs	.+8      	; 0x1842 <__addsf3x+0x1c>
    183a:	79 f4       	brne	.+30     	; 0x185a <__addsf3x+0x34>
    183c:	a6 f5       	brtc	.+104    	; 0x18a6 <__addsf3x+0x80>
    183e:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_zero>
    1842:	0e f4       	brtc	.+2      	; 0x1846 <__addsf3x+0x20>
    1844:	e0 95       	com	r30
    1846:	0b 2e       	mov	r0, r27
    1848:	ba 2f       	mov	r27, r26
    184a:	a0 2d       	mov	r26, r0
    184c:	0b 01       	movw	r0, r22
    184e:	b9 01       	movw	r22, r18
    1850:	90 01       	movw	r18, r0
    1852:	0c 01       	movw	r0, r24
    1854:	ca 01       	movw	r24, r20
    1856:	a0 01       	movw	r20, r0
    1858:	11 24       	eor	r1, r1
    185a:	ff 27       	eor	r31, r31
    185c:	59 1b       	sub	r21, r25
    185e:	99 f0       	breq	.+38     	; 0x1886 <__addsf3x+0x60>
    1860:	59 3f       	cpi	r21, 0xF9	; 249
    1862:	50 f4       	brcc	.+20     	; 0x1878 <__addsf3x+0x52>
    1864:	50 3e       	cpi	r21, 0xE0	; 224
    1866:	68 f1       	brcs	.+90     	; 0x18c2 <__addsf3x+0x9c>
    1868:	1a 16       	cp	r1, r26
    186a:	f0 40       	sbci	r31, 0x00	; 0
    186c:	a2 2f       	mov	r26, r18
    186e:	23 2f       	mov	r18, r19
    1870:	34 2f       	mov	r19, r20
    1872:	44 27       	eor	r20, r20
    1874:	58 5f       	subi	r21, 0xF8	; 248
    1876:	f3 cf       	rjmp	.-26     	; 0x185e <__addsf3x+0x38>
    1878:	46 95       	lsr	r20
    187a:	37 95       	ror	r19
    187c:	27 95       	ror	r18
    187e:	a7 95       	ror	r26
    1880:	f0 40       	sbci	r31, 0x00	; 0
    1882:	53 95       	inc	r21
    1884:	c9 f7       	brne	.-14     	; 0x1878 <__addsf3x+0x52>
    1886:	7e f4       	brtc	.+30     	; 0x18a6 <__addsf3x+0x80>
    1888:	1f 16       	cp	r1, r31
    188a:	ba 0b       	sbc	r27, r26
    188c:	62 0b       	sbc	r22, r18
    188e:	73 0b       	sbc	r23, r19
    1890:	84 0b       	sbc	r24, r20
    1892:	ba f0       	brmi	.+46     	; 0x18c2 <__addsf3x+0x9c>
    1894:	91 50       	subi	r25, 0x01	; 1
    1896:	a1 f0       	breq	.+40     	; 0x18c0 <__addsf3x+0x9a>
    1898:	ff 0f       	add	r31, r31
    189a:	bb 1f       	adc	r27, r27
    189c:	66 1f       	adc	r22, r22
    189e:	77 1f       	adc	r23, r23
    18a0:	88 1f       	adc	r24, r24
    18a2:	c2 f7       	brpl	.-16     	; 0x1894 <__addsf3x+0x6e>
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <__addsf3x+0x9c>
    18a6:	ba 0f       	add	r27, r26
    18a8:	62 1f       	adc	r22, r18
    18aa:	73 1f       	adc	r23, r19
    18ac:	84 1f       	adc	r24, r20
    18ae:	48 f4       	brcc	.+18     	; 0x18c2 <__addsf3x+0x9c>
    18b0:	87 95       	ror	r24
    18b2:	77 95       	ror	r23
    18b4:	67 95       	ror	r22
    18b6:	b7 95       	ror	r27
    18b8:	f7 95       	ror	r31
    18ba:	9e 3f       	cpi	r25, 0xFE	; 254
    18bc:	08 f0       	brcs	.+2      	; 0x18c0 <__addsf3x+0x9a>
    18be:	b0 cf       	rjmp	.-160    	; 0x1820 <__addsf3+0x28>
    18c0:	93 95       	inc	r25
    18c2:	88 0f       	add	r24, r24
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <__addsf3x+0xa2>
    18c6:	99 27       	eor	r25, r25
    18c8:	ee 0f       	add	r30, r30
    18ca:	97 95       	ror	r25
    18cc:	87 95       	ror	r24
    18ce:	08 95       	ret

000018d0 <__cmpsf2>:
    18d0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <__fp_cmp>
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <__cmpsf2+0x8>
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	08 95       	ret

000018da <__divsf3>:
    18da:	0e 94 81 0c 	call	0x1902	; 0x1902 <__divsf3x>
    18de:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__fp_round>
    18e2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__fp_pscB>
    18e6:	58 f0       	brcs	.+22     	; 0x18fe <__divsf3+0x24>
    18e8:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__fp_pscA>
    18ec:	40 f0       	brcs	.+16     	; 0x18fe <__divsf3+0x24>
    18ee:	29 f4       	brne	.+10     	; 0x18fa <__divsf3+0x20>
    18f0:	5f 3f       	cpi	r21, 0xFF	; 255
    18f2:	29 f0       	breq	.+10     	; 0x18fe <__divsf3+0x24>
    18f4:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_inf>
    18f8:	51 11       	cpse	r21, r1
    18fa:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__fp_szero>
    18fe:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_nan>

00001902 <__divsf3x>:
    1902:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__fp_split3>
    1906:	68 f3       	brcs	.-38     	; 0x18e2 <__divsf3+0x8>

00001908 <__divsf3_pse>:
    1908:	99 23       	and	r25, r25
    190a:	b1 f3       	breq	.-20     	; 0x18f8 <__divsf3+0x1e>
    190c:	55 23       	and	r21, r21
    190e:	91 f3       	breq	.-28     	; 0x18f4 <__divsf3+0x1a>
    1910:	95 1b       	sub	r25, r21
    1912:	55 0b       	sbc	r21, r21
    1914:	bb 27       	eor	r27, r27
    1916:	aa 27       	eor	r26, r26
    1918:	62 17       	cp	r22, r18
    191a:	73 07       	cpc	r23, r19
    191c:	84 07       	cpc	r24, r20
    191e:	38 f0       	brcs	.+14     	; 0x192e <__divsf3_pse+0x26>
    1920:	9f 5f       	subi	r25, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	44 1f       	adc	r20, r20
    192a:	aa 1f       	adc	r26, r26
    192c:	a9 f3       	breq	.-22     	; 0x1918 <__divsf3_pse+0x10>
    192e:	35 d0       	rcall	.+106    	; 0x199a <__divsf3_pse+0x92>
    1930:	0e 2e       	mov	r0, r30
    1932:	3a f0       	brmi	.+14     	; 0x1942 <__divsf3_pse+0x3a>
    1934:	e0 e8       	ldi	r30, 0x80	; 128
    1936:	32 d0       	rcall	.+100    	; 0x199c <__divsf3_pse+0x94>
    1938:	91 50       	subi	r25, 0x01	; 1
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	e6 95       	lsr	r30
    193e:	00 1c       	adc	r0, r0
    1940:	ca f7       	brpl	.-14     	; 0x1934 <__divsf3_pse+0x2c>
    1942:	2b d0       	rcall	.+86     	; 0x199a <__divsf3_pse+0x92>
    1944:	fe 2f       	mov	r31, r30
    1946:	29 d0       	rcall	.+82     	; 0x199a <__divsf3_pse+0x92>
    1948:	66 0f       	add	r22, r22
    194a:	77 1f       	adc	r23, r23
    194c:	88 1f       	adc	r24, r24
    194e:	bb 1f       	adc	r27, r27
    1950:	26 17       	cp	r18, r22
    1952:	37 07       	cpc	r19, r23
    1954:	48 07       	cpc	r20, r24
    1956:	ab 07       	cpc	r26, r27
    1958:	b0 e8       	ldi	r27, 0x80	; 128
    195a:	09 f0       	breq	.+2      	; 0x195e <__divsf3_pse+0x56>
    195c:	bb 0b       	sbc	r27, r27
    195e:	80 2d       	mov	r24, r0
    1960:	bf 01       	movw	r22, r30
    1962:	ff 27       	eor	r31, r31
    1964:	93 58       	subi	r25, 0x83	; 131
    1966:	5f 4f       	sbci	r21, 0xFF	; 255
    1968:	3a f0       	brmi	.+14     	; 0x1978 <__divsf3_pse+0x70>
    196a:	9e 3f       	cpi	r25, 0xFE	; 254
    196c:	51 05       	cpc	r21, r1
    196e:	78 f0       	brcs	.+30     	; 0x198e <__divsf3_pse+0x86>
    1970:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_inf>
    1974:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__fp_szero>
    1978:	5f 3f       	cpi	r21, 0xFF	; 255
    197a:	e4 f3       	brlt	.-8      	; 0x1974 <__divsf3_pse+0x6c>
    197c:	98 3e       	cpi	r25, 0xE8	; 232
    197e:	d4 f3       	brlt	.-12     	; 0x1974 <__divsf3_pse+0x6c>
    1980:	86 95       	lsr	r24
    1982:	77 95       	ror	r23
    1984:	67 95       	ror	r22
    1986:	b7 95       	ror	r27
    1988:	f7 95       	ror	r31
    198a:	9f 5f       	subi	r25, 0xFF	; 255
    198c:	c9 f7       	brne	.-14     	; 0x1980 <__divsf3_pse+0x78>
    198e:	88 0f       	add	r24, r24
    1990:	91 1d       	adc	r25, r1
    1992:	96 95       	lsr	r25
    1994:	87 95       	ror	r24
    1996:	97 f9       	bld	r25, 7
    1998:	08 95       	ret
    199a:	e1 e0       	ldi	r30, 0x01	; 1
    199c:	66 0f       	add	r22, r22
    199e:	77 1f       	adc	r23, r23
    19a0:	88 1f       	adc	r24, r24
    19a2:	bb 1f       	adc	r27, r27
    19a4:	62 17       	cp	r22, r18
    19a6:	73 07       	cpc	r23, r19
    19a8:	84 07       	cpc	r24, r20
    19aa:	ba 07       	cpc	r27, r26
    19ac:	20 f0       	brcs	.+8      	; 0x19b6 <__divsf3_pse+0xae>
    19ae:	62 1b       	sub	r22, r18
    19b0:	73 0b       	sbc	r23, r19
    19b2:	84 0b       	sbc	r24, r20
    19b4:	ba 0b       	sbc	r27, r26
    19b6:	ee 1f       	adc	r30, r30
    19b8:	88 f7       	brcc	.-30     	; 0x199c <__divsf3_pse+0x94>
    19ba:	e0 95       	com	r30
    19bc:	08 95       	ret

000019be <__fixunssfsi>:
    19be:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__fp_splitA>
    19c2:	88 f0       	brcs	.+34     	; 0x19e6 <__fixunssfsi+0x28>
    19c4:	9f 57       	subi	r25, 0x7F	; 127
    19c6:	98 f0       	brcs	.+38     	; 0x19ee <__fixunssfsi+0x30>
    19c8:	b9 2f       	mov	r27, r25
    19ca:	99 27       	eor	r25, r25
    19cc:	b7 51       	subi	r27, 0x17	; 23
    19ce:	b0 f0       	brcs	.+44     	; 0x19fc <__fixunssfsi+0x3e>
    19d0:	e1 f0       	breq	.+56     	; 0x1a0a <__fixunssfsi+0x4c>
    19d2:	66 0f       	add	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	88 1f       	adc	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	1a f0       	brmi	.+6      	; 0x19e2 <__fixunssfsi+0x24>
    19dc:	ba 95       	dec	r27
    19de:	c9 f7       	brne	.-14     	; 0x19d2 <__fixunssfsi+0x14>
    19e0:	14 c0       	rjmp	.+40     	; 0x1a0a <__fixunssfsi+0x4c>
    19e2:	b1 30       	cpi	r27, 0x01	; 1
    19e4:	91 f0       	breq	.+36     	; 0x1a0a <__fixunssfsi+0x4c>
    19e6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__fp_zero>
    19ea:	b1 e0       	ldi	r27, 0x01	; 1
    19ec:	08 95       	ret
    19ee:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__fp_zero>
    19f2:	67 2f       	mov	r22, r23
    19f4:	78 2f       	mov	r23, r24
    19f6:	88 27       	eor	r24, r24
    19f8:	b8 5f       	subi	r27, 0xF8	; 248
    19fa:	39 f0       	breq	.+14     	; 0x1a0a <__fixunssfsi+0x4c>
    19fc:	b9 3f       	cpi	r27, 0xF9	; 249
    19fe:	cc f3       	brlt	.-14     	; 0x19f2 <__fixunssfsi+0x34>
    1a00:	86 95       	lsr	r24
    1a02:	77 95       	ror	r23
    1a04:	67 95       	ror	r22
    1a06:	b3 95       	inc	r27
    1a08:	d9 f7       	brne	.-10     	; 0x1a00 <__fixunssfsi+0x42>
    1a0a:	3e f4       	brtc	.+14     	; 0x1a1a <__fixunssfsi+0x5c>
    1a0c:	90 95       	com	r25
    1a0e:	80 95       	com	r24
    1a10:	70 95       	com	r23
    1a12:	61 95       	neg	r22
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <__floatunsisf>:
    1a1c:	e8 94       	clt
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <__floatsisf+0x12>

00001a20 <__floatsisf>:
    1a20:	97 fb       	bst	r25, 7
    1a22:	3e f4       	brtc	.+14     	; 0x1a32 <__floatsisf+0x12>
    1a24:	90 95       	com	r25
    1a26:	80 95       	com	r24
    1a28:	70 95       	com	r23
    1a2a:	61 95       	neg	r22
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	99 23       	and	r25, r25
    1a34:	a9 f0       	breq	.+42     	; 0x1a60 <__floatsisf+0x40>
    1a36:	f9 2f       	mov	r31, r25
    1a38:	96 e9       	ldi	r25, 0x96	; 150
    1a3a:	bb 27       	eor	r27, r27
    1a3c:	93 95       	inc	r25
    1a3e:	f6 95       	lsr	r31
    1a40:	87 95       	ror	r24
    1a42:	77 95       	ror	r23
    1a44:	67 95       	ror	r22
    1a46:	b7 95       	ror	r27
    1a48:	f1 11       	cpse	r31, r1
    1a4a:	f8 cf       	rjmp	.-16     	; 0x1a3c <__floatsisf+0x1c>
    1a4c:	fa f4       	brpl	.+62     	; 0x1a8c <__floatsisf+0x6c>
    1a4e:	bb 0f       	add	r27, r27
    1a50:	11 f4       	brne	.+4      	; 0x1a56 <__floatsisf+0x36>
    1a52:	60 ff       	sbrs	r22, 0
    1a54:	1b c0       	rjmp	.+54     	; 0x1a8c <__floatsisf+0x6c>
    1a56:	6f 5f       	subi	r22, 0xFF	; 255
    1a58:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5e:	16 c0       	rjmp	.+44     	; 0x1a8c <__floatsisf+0x6c>
    1a60:	88 23       	and	r24, r24
    1a62:	11 f0       	breq	.+4      	; 0x1a68 <__floatsisf+0x48>
    1a64:	96 e9       	ldi	r25, 0x96	; 150
    1a66:	11 c0       	rjmp	.+34     	; 0x1a8a <__floatsisf+0x6a>
    1a68:	77 23       	and	r23, r23
    1a6a:	21 f0       	breq	.+8      	; 0x1a74 <__floatsisf+0x54>
    1a6c:	9e e8       	ldi	r25, 0x8E	; 142
    1a6e:	87 2f       	mov	r24, r23
    1a70:	76 2f       	mov	r23, r22
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <__floatsisf+0x5e>
    1a74:	66 23       	and	r22, r22
    1a76:	71 f0       	breq	.+28     	; 0x1a94 <__floatsisf+0x74>
    1a78:	96 e8       	ldi	r25, 0x86	; 134
    1a7a:	86 2f       	mov	r24, r22
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	60 e0       	ldi	r22, 0x00	; 0
    1a80:	2a f0       	brmi	.+10     	; 0x1a8c <__floatsisf+0x6c>
    1a82:	9a 95       	dec	r25
    1a84:	66 0f       	add	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	88 1f       	adc	r24, r24
    1a8a:	da f7       	brpl	.-10     	; 0x1a82 <__floatsisf+0x62>
    1a8c:	88 0f       	add	r24, r24
    1a8e:	96 95       	lsr	r25
    1a90:	87 95       	ror	r24
    1a92:	97 f9       	bld	r25, 7
    1a94:	08 95       	ret

00001a96 <__fp_cmp>:
    1a96:	99 0f       	add	r25, r25
    1a98:	00 08       	sbc	r0, r0
    1a9a:	55 0f       	add	r21, r21
    1a9c:	aa 0b       	sbc	r26, r26
    1a9e:	e0 e8       	ldi	r30, 0x80	; 128
    1aa0:	fe ef       	ldi	r31, 0xFE	; 254
    1aa2:	16 16       	cp	r1, r22
    1aa4:	17 06       	cpc	r1, r23
    1aa6:	e8 07       	cpc	r30, r24
    1aa8:	f9 07       	cpc	r31, r25
    1aaa:	c0 f0       	brcs	.+48     	; 0x1adc <__fp_cmp+0x46>
    1aac:	12 16       	cp	r1, r18
    1aae:	13 06       	cpc	r1, r19
    1ab0:	e4 07       	cpc	r30, r20
    1ab2:	f5 07       	cpc	r31, r21
    1ab4:	98 f0       	brcs	.+38     	; 0x1adc <__fp_cmp+0x46>
    1ab6:	62 1b       	sub	r22, r18
    1ab8:	73 0b       	sbc	r23, r19
    1aba:	84 0b       	sbc	r24, r20
    1abc:	95 0b       	sbc	r25, r21
    1abe:	39 f4       	brne	.+14     	; 0x1ace <__fp_cmp+0x38>
    1ac0:	0a 26       	eor	r0, r26
    1ac2:	61 f0       	breq	.+24     	; 0x1adc <__fp_cmp+0x46>
    1ac4:	23 2b       	or	r18, r19
    1ac6:	24 2b       	or	r18, r20
    1ac8:	25 2b       	or	r18, r21
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <__fp_cmp+0x3e>
    1acc:	08 95       	ret
    1ace:	0a 26       	eor	r0, r26
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <__fp_cmp+0x3e>
    1ad2:	a1 40       	sbci	r26, 0x01	; 1
    1ad4:	a6 95       	lsr	r26
    1ad6:	8f ef       	ldi	r24, 0xFF	; 255
    1ad8:	81 1d       	adc	r24, r1
    1ada:	81 1d       	adc	r24, r1
    1adc:	08 95       	ret

00001ade <__fp_inf>:
    1ade:	97 f9       	bld	r25, 7
    1ae0:	9f 67       	ori	r25, 0x7F	; 127
    1ae2:	80 e8       	ldi	r24, 0x80	; 128
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	60 e0       	ldi	r22, 0x00	; 0
    1ae8:	08 95       	ret

00001aea <__fp_nan>:
    1aea:	9f ef       	ldi	r25, 0xFF	; 255
    1aec:	80 ec       	ldi	r24, 0xC0	; 192
    1aee:	08 95       	ret

00001af0 <__fp_pscA>:
    1af0:	00 24       	eor	r0, r0
    1af2:	0a 94       	dec	r0
    1af4:	16 16       	cp	r1, r22
    1af6:	17 06       	cpc	r1, r23
    1af8:	18 06       	cpc	r1, r24
    1afa:	09 06       	cpc	r0, r25
    1afc:	08 95       	ret

00001afe <__fp_pscB>:
    1afe:	00 24       	eor	r0, r0
    1b00:	0a 94       	dec	r0
    1b02:	12 16       	cp	r1, r18
    1b04:	13 06       	cpc	r1, r19
    1b06:	14 06       	cpc	r1, r20
    1b08:	05 06       	cpc	r0, r21
    1b0a:	08 95       	ret

00001b0c <__fp_round>:
    1b0c:	09 2e       	mov	r0, r25
    1b0e:	03 94       	inc	r0
    1b10:	00 0c       	add	r0, r0
    1b12:	11 f4       	brne	.+4      	; 0x1b18 <__fp_round+0xc>
    1b14:	88 23       	and	r24, r24
    1b16:	52 f0       	brmi	.+20     	; 0x1b2c <__fp_round+0x20>
    1b18:	bb 0f       	add	r27, r27
    1b1a:	40 f4       	brcc	.+16     	; 0x1b2c <__fp_round+0x20>
    1b1c:	bf 2b       	or	r27, r31
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <__fp_round+0x18>
    1b20:	60 ff       	sbrs	r22, 0
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <__fp_round+0x20>
    1b24:	6f 5f       	subi	r22, 0xFF	; 255
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	08 95       	ret

00001b2e <__fp_split3>:
    1b2e:	57 fd       	sbrc	r21, 7
    1b30:	90 58       	subi	r25, 0x80	; 128
    1b32:	44 0f       	add	r20, r20
    1b34:	55 1f       	adc	r21, r21
    1b36:	59 f0       	breq	.+22     	; 0x1b4e <__fp_splitA+0x10>
    1b38:	5f 3f       	cpi	r21, 0xFF	; 255
    1b3a:	71 f0       	breq	.+28     	; 0x1b58 <__fp_splitA+0x1a>
    1b3c:	47 95       	ror	r20

00001b3e <__fp_splitA>:
    1b3e:	88 0f       	add	r24, r24
    1b40:	97 fb       	bst	r25, 7
    1b42:	99 1f       	adc	r25, r25
    1b44:	61 f0       	breq	.+24     	; 0x1b5e <__fp_splitA+0x20>
    1b46:	9f 3f       	cpi	r25, 0xFF	; 255
    1b48:	79 f0       	breq	.+30     	; 0x1b68 <__fp_splitA+0x2a>
    1b4a:	87 95       	ror	r24
    1b4c:	08 95       	ret
    1b4e:	12 16       	cp	r1, r18
    1b50:	13 06       	cpc	r1, r19
    1b52:	14 06       	cpc	r1, r20
    1b54:	55 1f       	adc	r21, r21
    1b56:	f2 cf       	rjmp	.-28     	; 0x1b3c <__fp_split3+0xe>
    1b58:	46 95       	lsr	r20
    1b5a:	f1 df       	rcall	.-30     	; 0x1b3e <__fp_splitA>
    1b5c:	08 c0       	rjmp	.+16     	; 0x1b6e <__fp_splitA+0x30>
    1b5e:	16 16       	cp	r1, r22
    1b60:	17 06       	cpc	r1, r23
    1b62:	18 06       	cpc	r1, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	f1 cf       	rjmp	.-30     	; 0x1b4a <__fp_splitA+0xc>
    1b68:	86 95       	lsr	r24
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	61 05       	cpc	r22, r1
    1b6e:	08 94       	sec
    1b70:	08 95       	ret

00001b72 <__fp_zero>:
    1b72:	e8 94       	clt

00001b74 <__fp_szero>:
    1b74:	bb 27       	eor	r27, r27
    1b76:	66 27       	eor	r22, r22
    1b78:	77 27       	eor	r23, r23
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	97 f9       	bld	r25, 7
    1b7e:	08 95       	ret

00001b80 <__mulsf3>:
    1b80:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__mulsf3x>
    1b84:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__fp_round>
    1b88:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__fp_pscA>
    1b8c:	38 f0       	brcs	.+14     	; 0x1b9c <__mulsf3+0x1c>
    1b8e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__fp_pscB>
    1b92:	20 f0       	brcs	.+8      	; 0x1b9c <__mulsf3+0x1c>
    1b94:	95 23       	and	r25, r21
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <__mulsf3+0x1c>
    1b98:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_inf>
    1b9c:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__fp_nan>
    1ba0:	11 24       	eor	r1, r1
    1ba2:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__fp_szero>

00001ba6 <__mulsf3x>:
    1ba6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__fp_split3>
    1baa:	70 f3       	brcs	.-36     	; 0x1b88 <__mulsf3+0x8>

00001bac <__mulsf3_pse>:
    1bac:	95 9f       	mul	r25, r21
    1bae:	c1 f3       	breq	.-16     	; 0x1ba0 <__mulsf3+0x20>
    1bb0:	95 0f       	add	r25, r21
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	55 1f       	adc	r21, r21
    1bb6:	62 9f       	mul	r22, r18
    1bb8:	f0 01       	movw	r30, r0
    1bba:	72 9f       	mul	r23, r18
    1bbc:	bb 27       	eor	r27, r27
    1bbe:	f0 0d       	add	r31, r0
    1bc0:	b1 1d       	adc	r27, r1
    1bc2:	63 9f       	mul	r22, r19
    1bc4:	aa 27       	eor	r26, r26
    1bc6:	f0 0d       	add	r31, r0
    1bc8:	b1 1d       	adc	r27, r1
    1bca:	aa 1f       	adc	r26, r26
    1bcc:	64 9f       	mul	r22, r20
    1bce:	66 27       	eor	r22, r22
    1bd0:	b0 0d       	add	r27, r0
    1bd2:	a1 1d       	adc	r26, r1
    1bd4:	66 1f       	adc	r22, r22
    1bd6:	82 9f       	mul	r24, r18
    1bd8:	22 27       	eor	r18, r18
    1bda:	b0 0d       	add	r27, r0
    1bdc:	a1 1d       	adc	r26, r1
    1bde:	62 1f       	adc	r22, r18
    1be0:	73 9f       	mul	r23, r19
    1be2:	b0 0d       	add	r27, r0
    1be4:	a1 1d       	adc	r26, r1
    1be6:	62 1f       	adc	r22, r18
    1be8:	83 9f       	mul	r24, r19
    1bea:	a0 0d       	add	r26, r0
    1bec:	61 1d       	adc	r22, r1
    1bee:	22 1f       	adc	r18, r18
    1bf0:	74 9f       	mul	r23, r20
    1bf2:	33 27       	eor	r19, r19
    1bf4:	a0 0d       	add	r26, r0
    1bf6:	61 1d       	adc	r22, r1
    1bf8:	23 1f       	adc	r18, r19
    1bfa:	84 9f       	mul	r24, r20
    1bfc:	60 0d       	add	r22, r0
    1bfe:	21 1d       	adc	r18, r1
    1c00:	82 2f       	mov	r24, r18
    1c02:	76 2f       	mov	r23, r22
    1c04:	6a 2f       	mov	r22, r26
    1c06:	11 24       	eor	r1, r1
    1c08:	9f 57       	subi	r25, 0x7F	; 127
    1c0a:	50 40       	sbci	r21, 0x00	; 0
    1c0c:	9a f0       	brmi	.+38     	; 0x1c34 <__mulsf3_pse+0x88>
    1c0e:	f1 f0       	breq	.+60     	; 0x1c4c <__mulsf3_pse+0xa0>
    1c10:	88 23       	and	r24, r24
    1c12:	4a f0       	brmi	.+18     	; 0x1c26 <__mulsf3_pse+0x7a>
    1c14:	ee 0f       	add	r30, r30
    1c16:	ff 1f       	adc	r31, r31
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	91 50       	subi	r25, 0x01	; 1
    1c22:	50 40       	sbci	r21, 0x00	; 0
    1c24:	a9 f7       	brne	.-22     	; 0x1c10 <__mulsf3_pse+0x64>
    1c26:	9e 3f       	cpi	r25, 0xFE	; 254
    1c28:	51 05       	cpc	r21, r1
    1c2a:	80 f0       	brcs	.+32     	; 0x1c4c <__mulsf3_pse+0xa0>
    1c2c:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__fp_inf>
    1c30:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__fp_szero>
    1c34:	5f 3f       	cpi	r21, 0xFF	; 255
    1c36:	e4 f3       	brlt	.-8      	; 0x1c30 <__mulsf3_pse+0x84>
    1c38:	98 3e       	cpi	r25, 0xE8	; 232
    1c3a:	d4 f3       	brlt	.-12     	; 0x1c30 <__mulsf3_pse+0x84>
    1c3c:	86 95       	lsr	r24
    1c3e:	77 95       	ror	r23
    1c40:	67 95       	ror	r22
    1c42:	b7 95       	ror	r27
    1c44:	f7 95       	ror	r31
    1c46:	e7 95       	ror	r30
    1c48:	9f 5f       	subi	r25, 0xFF	; 255
    1c4a:	c1 f7       	brne	.-16     	; 0x1c3c <__mulsf3_pse+0x90>
    1c4c:	fe 2b       	or	r31, r30
    1c4e:	88 0f       	add	r24, r24
    1c50:	91 1d       	adc	r25, r1
    1c52:	96 95       	lsr	r25
    1c54:	87 95       	ror	r24
    1c56:	97 f9       	bld	r25, 7
    1c58:	08 95       	ret

00001c5a <__udivmodsi4>:
    1c5a:	a1 e2       	ldi	r26, 0x21	; 33
    1c5c:	1a 2e       	mov	r1, r26
    1c5e:	aa 1b       	sub	r26, r26
    1c60:	bb 1b       	sub	r27, r27
    1c62:	fd 01       	movw	r30, r26
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <__udivmodsi4_ep>

00001c66 <__udivmodsi4_loop>:
    1c66:	aa 1f       	adc	r26, r26
    1c68:	bb 1f       	adc	r27, r27
    1c6a:	ee 1f       	adc	r30, r30
    1c6c:	ff 1f       	adc	r31, r31
    1c6e:	a2 17       	cp	r26, r18
    1c70:	b3 07       	cpc	r27, r19
    1c72:	e4 07       	cpc	r30, r20
    1c74:	f5 07       	cpc	r31, r21
    1c76:	20 f0       	brcs	.+8      	; 0x1c80 <__udivmodsi4_ep>
    1c78:	a2 1b       	sub	r26, r18
    1c7a:	b3 0b       	sbc	r27, r19
    1c7c:	e4 0b       	sbc	r30, r20
    1c7e:	f5 0b       	sbc	r31, r21

00001c80 <__udivmodsi4_ep>:
    1c80:	66 1f       	adc	r22, r22
    1c82:	77 1f       	adc	r23, r23
    1c84:	88 1f       	adc	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	1a 94       	dec	r1
    1c8a:	69 f7       	brne	.-38     	; 0x1c66 <__udivmodsi4_loop>
    1c8c:	60 95       	com	r22
    1c8e:	70 95       	com	r23
    1c90:	80 95       	com	r24
    1c92:	90 95       	com	r25
    1c94:	9b 01       	movw	r18, r22
    1c96:	ac 01       	movw	r20, r24
    1c98:	bd 01       	movw	r22, r26
    1c9a:	cf 01       	movw	r24, r30
    1c9c:	08 95       	ret

00001c9e <_exit>:
    1c9e:	f8 94       	cli

00001ca0 <__stop_program>:
    1ca0:	ff cf       	rjmp	.-2      	; 0x1ca0 <__stop_program>
