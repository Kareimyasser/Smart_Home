
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000028c  00800060  000018a0  00001934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008002ec  008002ec  00001bc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004741  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011e5  00000000  00000000  00006735  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002672  00000000  00000000  0000791a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000878  00000000  00000000  00009f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000124c  00000000  00000000  0000a804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002496  00000000  00000000  0000ba50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000dee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_10>
      2c:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 06 	call	0xd82	; 0xd82 <main>
      8a:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HOME_voidInit>:
	}
	else
	{
		//error massage
	}
}
      92:	0e 94 18 05 	call	0xa30	; 0xa30 <LCD_voidInit>
      96:	0e 94 9c 03 	call	0x738	; 0x738 <EEPROM_voidInit>
      9a:	65 e0       	ldi	r22, 0x05	; 5
      9c:	83 e0       	ldi	r24, 0x03	; 3
      9e:	0e 94 a2 06 	call	0xd44	; 0xd44 <SERVO_voidInit>
      a2:	60 e0       	ldi	r22, 0x00	; 0
      a4:	70 e0       	ldi	r23, 0x00	; 0
      a6:	cb 01       	movw	r24, r22
      a8:	0e 94 a8 06 	call	0xd50	; 0xd50 <SERVO_voidStartByAngle>
      ac:	0e 94 ca 03 	call	0x794	; 0x794 <KPD_voidInit>
      b0:	0e 94 99 03 	call	0x732	; 0x732 <BL_voidInit>
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	61 e0       	ldi	r22, 0x01	; 1
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
      be:	40 e0       	ldi	r20, 0x00	; 0
      c0:	60 e0       	ldi	r22, 0x00	; 0
      c2:	83 e0       	ldi	r24, 0x03	; 3
      c4:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
      c8:	0e 94 96 08 	call	0x112c	; 0x112c <GI_voidEnable>
      cc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <TMR0_voidInit>
      d0:	63 e0       	ldi	r22, 0x03	; 3
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 84 06 	call	0xd08	; 0xd08 <LED_voidInit>
      d8:	61 e0       	ldi	r22, 0x01	; 1
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	0e 94 84 06 	call	0xd08	; 0xd08 <LED_voidInit>
      e0:	62 e0       	ldi	r22, 0x02	; 2
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	0e 94 84 06 	call	0xd08	; 0xd08 <LED_voidInit>
      e8:	63 e0       	ldi	r22, 0x03	; 3
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	0e 94 84 06 	call	0xd08	; 0xd08 <LED_voidInit>
      f0:	62 e0       	ldi	r22, 0x02	; 2
      f2:	83 e0       	ldi	r24, 0x03	; 3
      f4:	0e 94 84 06 	call	0xd08	; 0xd08 <LED_voidInit>
      f8:	64 e0       	ldi	r22, 0x04	; 4
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	0e 94 84 06 	call	0xd08	; 0xd08 <LED_voidInit>
     100:	08 95       	ret

00000102 <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     102:	84 e5       	ldi	r24, 0x54	; 84
     104:	91 e0       	ldi	r25, 0x01	; 1
     106:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     10a:	80 ec       	ldi	r24, 0xC0	; 192
     10c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     110:	85 e6       	ldi	r24, 0x65	; 101
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     118:	2f ef       	ldi	r18, 0xFF	; 255
     11a:	83 ed       	ldi	r24, 0xD3	; 211
     11c:	90 e3       	ldi	r25, 0x30	; 48
     11e:	21 50       	subi	r18, 0x01	; 1
     120:	80 40       	sbci	r24, 0x00	; 0
     122:	90 40       	sbci	r25, 0x00	; 0
     124:	e1 f7       	brne	.-8      	; 0x11e <WelcomeScreen+0x1c>
     126:	00 c0       	rjmp	.+0      	; 0x128 <WelcomeScreen+0x26>
     128:	00 00       	nop
     12a:	08 95       	ret

0000012c <APP_init>:




void APP_init(void)
{
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	a0 97       	sbiw	r28, 0x20	; 32
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	f8 94       	cli
     13a:	de bf       	out	0x3e, r29	; 62
     13c:	0f be       	out	0x3f, r0	; 63
     13e:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     140:	0e 94 49 00 	call	0x92	; 0x92 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_INTRNAL);
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <ADC_voidInit>
	
	
    // display the welcome screen
    WelcomeScreen();
     14a:	0e 94 81 00 	call	0x102	; 0x102 <WelcomeScreen>
	LCD_voidClear();
     14e:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
     152:	88 e0       	ldi	r24, 0x08	; 8
     154:	e5 e6       	ldi	r30, 0x65	; 101
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	de 01       	movw	r26, r28
     15a:	11 96       	adiw	r26, 0x01	; 1
     15c:	01 90       	ld	r0, Z+
     15e:	0d 92       	st	X+, r0
     160:	8a 95       	dec	r24
     162:	e1 f7       	brne	.-8      	; 0x15c <APP_init+0x30>
	u8 testuserpass[8]={"22222222"};
     164:	88 e0       	ldi	r24, 0x08	; 8
     166:	ee e6       	ldi	r30, 0x6E	; 110
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	de 01       	movw	r26, r28
     16c:	19 96       	adiw	r26, 0x09	; 9
     16e:	01 90       	ld	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	8a 95       	dec	r24
     174:	e1 f7       	brne	.-8      	; 0x16e <APP_init+0x42>
	u8 testadminname[8]={"12345678"};
     176:	88 e0       	ldi	r24, 0x08	; 8
     178:	e7 e7       	ldi	r30, 0x77	; 119
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	de 01       	movw	r26, r28
     17e:	51 96       	adiw	r26, 0x11	; 17
     180:	01 90       	ld	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	8a 95       	dec	r24
     186:	e1 f7       	brne	.-8      	; 0x180 <APP_init+0x54>
	u8 testadminpass[8]={"12345678"};
     188:	88 e0       	ldi	r24, 0x08	; 8
     18a:	e7 e7       	ldi	r30, 0x77	; 119
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	de 01       	movw	r26, r28
     190:	59 96       	adiw	r26, 0x19	; 25
     192:	01 90       	ld	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	8a 95       	dec	r24
     198:	e1 f7       	brne	.-8      	; 0x192 <APP_init+0x66>
	u8 usertype;	
	
	EEPROM_voidWritePage(304,&testusername[0]);
     19a:	be 01       	movw	r22, r28
     19c:	6f 5f       	subi	r22, 0xFF	; 255
     19e:	7f 4f       	sbci	r23, 0xFF	; 255
     1a0:	80 e3       	ldi	r24, 0x30	; 48
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 9f 03 	call	0x73e	; 0x73e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(312,&testuserpass[0]);
     1a8:	be 01       	movw	r22, r28
     1aa:	67 5f       	subi	r22, 0xF7	; 247
     1ac:	7f 4f       	sbci	r23, 0xFF	; 255
     1ae:	88 e3       	ldi	r24, 0x38	; 56
     1b0:	91 e0       	ldi	r25, 0x01	; 1
     1b2:	0e 94 9f 03 	call	0x73e	; 0x73e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
     1b6:	be 01       	movw	r22, r28
     1b8:	6f 5e       	subi	r22, 0xEF	; 239
     1ba:	7f 4f       	sbci	r23, 0xFF	; 255
     1bc:	80 ef       	ldi	r24, 0xF0	; 240
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 9f 03 	call	0x73e	; 0x73e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
     1c4:	be 01       	movw	r22, r28
     1c6:	67 5e       	subi	r22, 0xE7	; 231
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ca:	88 ef       	ldi	r24, 0xF8	; 248
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 9f 03 	call	0x73e	; 0x73e <EEPROM_voidWritePage>





}
     1d2:	a0 96       	adiw	r28, 0x20	; 32
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <Display_temp>:

}

void Display_temp(void)
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     1e4:	6c ee       	ldi	r22, 0xEC	; 236
     1e6:	72 e0       	ldi	r23, 0x02	; 2
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	0e 94 08 07 	call	0xe10	; 0xe10 <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     1ee:	6b e0       	ldi	r22, 0x0B	; 11
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
     1f6:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <__data_end>
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 e5 05 	call	0xbca	; 0xbca <LCD_voidDisplayNumber>
     204:	08 95       	ret

00000206 <Idle_Action>:
    _delay_ms(1000);
}

void Idle_Action()
{ 
    LCD_voidClear();
     206:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
     20a:	80 e8       	ldi	r24, 0x80	; 128
     20c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
     210:	83 e7       	ldi	r24, 0x73	; 115
     212:	91 e0       	ldi	r25, 0x01	; 1
     214:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_voidDisplayString>
	Display_temp();
     218:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
     21c:	80 ec       	ldi	r24, 0xC0	; 192
     21e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
     222:	82 e8       	ldi	r24, 0x82	; 130
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     22a:	06 c0       	rjmp	.+12     	; 0x238 <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
     22c:	81 e6       	ldi	r24, 0x61	; 97
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
		Display_temp();
     234:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     238:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     23c:	8f 3f       	cpi	r24, 0xFF	; 255
     23e:	b1 f3       	breq	.-20     	; 0x22c <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
     240:	80 33       	cpi	r24, 0x30	; 48
     242:	11 f4       	brne	.+4      	; 0x248 <Idle_Action+0x42>
    {
        LCD_voidClear();
     244:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
    }
    TMR0clear_flag();
     248:	0e 94 2a 09 	call	0x1254	; 0x1254 <TMR0clear_flag>
    LCD_voidClear();
     24c:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
     250:	08 95       	ret

00000252 <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     252:	8f ef       	ldi	r24, 0xFF	; 255
     254:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     258:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     25c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
     260:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
     264:	08 95       	ret

00000266 <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     266:	0e 94 29 01 	call	0x252	; 0x252 <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&Idle_Action);
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 23 09 	call	0x1246	; 0x1246 <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     272:	0e 94 0b 09 	call	0x1216	; 0x1216 <TMR0_voidStart>
        LCD_voidClear();
     276:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     27a:	8f e8       	ldi	r24, 0x8F	; 143
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     282:	80 ec       	ldi	r24, 0xC0	; 192
     284:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
     288:	8c e9       	ldi	r24, 0x9C	; 156
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_voidDisplayString>
        Reset_AllKPDValues();
     290:	0e 94 29 01 	call	0x252	; 0x252 <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     294:	0c c0       	rjmp	.+24     	; 0x2ae <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     296:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     29a:	80 33       	cpi	r24, 0x30	; 48
     29c:	21 f4       	brne	.+8      	; 0x2a6 <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
     2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     2a6:	84 e6       	ldi	r24, 0x64	; 100
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     2ae:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     2b2:	8f 3f       	cpi	r24, 0xFF	; 255
     2b4:	81 f3       	breq	.-32     	; 0x296 <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     2b6:	0e 94 19 09 	call	0x1232	; 0x1232 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     2ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     2be:	82 33       	cpi	r24, 0x32	; 50
     2c0:	c9 f0       	breq	.+50     	; 0x2f4 <KPD_Interface_user+0x8e>
     2c2:	18 f4       	brcc	.+6      	; 0x2ca <KPD_Interface_user+0x64>
     2c4:	81 33       	cpi	r24, 0x31	; 49
     2c6:	41 f0       	breq	.+16     	; 0x2d8 <KPD_Interface_user+0x72>
     2c8:	08 95       	ret
     2ca:	83 33       	cpi	r24, 0x33	; 51
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <KPD_Interface_user+0x6a>
     2ce:	e7 c1       	rjmp	.+974    	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
     2d0:	84 33       	cpi	r24, 0x34	; 52
     2d2:	09 f4       	brne	.+2      	; 0x2d6 <KPD_Interface_user+0x70>
     2d4:	12 c2       	rjmp	.+1060   	; 0x6fa <__EEPROM_REGION_LENGTH__+0x2fa>
     2d6:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     2d8:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     2dc:	8a ea       	ldi	r24, 0xAA	; 170
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     2e4:	80 ec       	ldi	r24, 0xC0	; 192
     2e6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     2ea:	87 eb       	ldi	r24, 0xB7	; 183
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>

            break;
     2f2:	08 95       	ret
			

        case ('2'):

            LCD_voidClear();
     2f4:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     2f8:	86 ec       	ldi	r24, 0xC6	; 198
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     300:	80 ec       	ldi	r24, 0xC0	; 192
     302:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     306:	86 ed       	ldi	r24, 0xD6	; 214
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	0e 94 23 09 	call	0x1246	; 0x1246 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     316:	0e 94 0b 09 	call	0x1216	; 0x1216 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     31a:	0c c0       	rjmp	.+24     	; 0x334 <KPD_Interface_user+0xce>
            {
                KPD_voidGetValue(&local_lightNum);
     31c:	83 e6       	ldi	r24, 0x63	; 99
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     324:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     328:	80 33       	cpi	r24, 0x30	; 48
     32a:	21 f4       	brne	.+8      	; 0x334 <KPD_Interface_user+0xce>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     32c:	8f ef       	ldi	r24, 0xFF	; 255
     32e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
     332:	04 c0       	rjmp	.+8      	; 0x33c <KPD_Interface_user+0xd6>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     334:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     338:	8f 3f       	cpi	r24, 0xFF	; 255
     33a:	81 f3       	breq	.-32     	; 0x31c <KPD_Interface_user+0xb6>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     33c:	0e 94 19 09 	call	0x1232	; 0x1232 <TMR0_voidStop>
            switch (local_lightNum)
     340:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     344:	83 33       	cpi	r24, 0x33	; 51
     346:	09 f4       	brne	.+2      	; 0x34a <KPD_Interface_user+0xe4>
     348:	a6 c0       	rjmp	.+332    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     34a:	30 f4       	brcc	.+12     	; 0x358 <KPD_Interface_user+0xf2>
     34c:	81 33       	cpi	r24, 0x31	; 49
     34e:	69 f0       	breq	.+26     	; 0x36a <KPD_Interface_user+0x104>
     350:	82 33       	cpi	r24, 0x32	; 50
     352:	09 f4       	brne	.+2      	; 0x356 <KPD_Interface_user+0xf0>
     354:	54 c0       	rjmp	.+168    	; 0x3fe <KPD_Interface_user+0x198>
     356:	08 95       	ret
     358:	85 33       	cpi	r24, 0x35	; 53
     35a:	09 f4       	brne	.+2      	; 0x35e <KPD_Interface_user+0xf8>
     35c:	34 c1       	rjmp	.+616    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     35e:	08 f4       	brcc	.+2      	; 0x362 <KPD_Interface_user+0xfc>
     360:	e6 c0       	rjmp	.+460    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
     362:	86 33       	cpi	r24, 0x36	; 54
     364:	09 f4       	brne	.+2      	; 0x368 <KPD_Interface_user+0x102>
     366:	7b c1       	rjmp	.+758    	; 0x65e <__EEPROM_REGION_LENGTH__+0x25e>
     368:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     36a:	4d ee       	ldi	r20, 0xED	; 237
     36c:	52 e0       	ldi	r21, 0x02	; 2
     36e:	63 e0       	ldi	r22, 0x03	; 3
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
                LCD_voidClear();
     376:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
                if (led_status == 1)
     37a:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	f1 f4       	brne	.+60     	; 0x3be <KPD_Interface_user+0x158>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     382:	83 ee       	ldi	r24, 0xE3	; 227
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     38a:	80 ec       	ldi	r24, 0xC0	; 192
     38c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     390:	81 ef       	ldi	r24, 0xF1	; 241
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     398:	04 c0       	rjmp	.+8      	; 0x3a2 <KPD_Interface_user+0x13c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     39a:	82 e6       	ldi	r24, 0x62	; 98
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     3a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     3a6:	8f 3f       	cpi	r24, 0xFF	; 255
     3a8:	c1 f3       	breq	.-16     	; 0x39a <KPD_Interface_user+0x134>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     3aa:	81 33       	cpi	r24, 0x31	; 49
     3ac:	29 f4       	brne	.+10     	; 0x3b8 <KPD_Interface_user+0x152>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	63 e0       	ldi	r22, 0x03	; 3
     3b2:	83 e0       	ldi	r24, 0x03	; 3
     3b4:	0e 94 95 06 	call	0xd2a	; 0xd2a <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     3b8:	0e 94 29 01 	call	0x252	; 0x252 <Reset_AllKPDValues>
					break;
     3bc:	08 95       	ret
                }
                else if (led_status == 0)
     3be:	81 11       	cpse	r24, r1
     3c0:	b7 c1       	rjmp	.+878    	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	92 e0       	ldi	r25, 0x02	; 2
     3c6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     3ca:	80 ec       	ldi	r24, 0xC0	; 192
     3cc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     3d0:	81 e1       	ldi	r24, 0x11	; 17
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <KPD_Interface_user+0x17c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     3da:	82 e6       	ldi	r24, 0x62	; 98
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     3e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     3e6:	8f 3f       	cpi	r24, 0xFF	; 255
     3e8:	c1 f3       	breq	.-16     	; 0x3da <KPD_Interface_user+0x174>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     3ea:	81 33       	cpi	r24, 0x31	; 49
     3ec:	29 f4       	brne	.+10     	; 0x3f8 <KPD_Interface_user+0x192>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	63 e0       	ldi	r22, 0x03	; 3
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	0e 94 88 06 	call	0xd10	; 0xd10 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     3f8:	0e 94 29 01 	call	0x252	; 0x252 <Reset_AllKPDValues>
     3fc:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
     3fe:	4d ee       	ldi	r20, 0xED	; 237
     400:	52 e0       	ldi	r21, 0x02	; 2
     402:	64 e0       	ldi	r22, 0x04	; 4
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
                LCD_voidClear();
     40a:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
                if (led_status == 1)
     40e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     412:	81 30       	cpi	r24, 0x01	; 1
     414:	f9 f4       	brne	.+62     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     416:	81 e2       	ldi	r24, 0x21	; 33
     418:	92 e0       	ldi	r25, 0x02	; 2
     41a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     41e:	80 ec       	ldi	r24, 0xC0	; 192
     420:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     424:	81 ef       	ldi	r24, 0xF1	; 241
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     42c:	04 c0       	rjmp	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     42e:	82 e6       	ldi	r24, 0x62	; 98
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     436:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     43a:	8f 3f       	cpi	r24, 0xFF	; 255
     43c:	c1 f3       	breq	.-16     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     43e:	81 33       	cpi	r24, 0x31	; 49
     440:	29 f4       	brne	.+10     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     442:	41 e0       	ldi	r20, 0x01	; 1
     444:	64 e0       	ldi	r22, 0x04	; 4
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	0e 94 95 06 	call	0xd2a	; 0xd2a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     452:	08 95       	ret
                }
                else if (led_status == 0)
     454:	81 11       	cpse	r24, r1
     456:	6c c1       	rjmp	.+728    	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     458:	8f e2       	ldi	r24, 0x2F	; 47
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     460:	80 ec       	ldi	r24, 0xC0	; 192
     462:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     466:	81 e1       	ldi	r24, 0x11	; 17
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     46e:	04 c0       	rjmp	.+8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     470:	82 e6       	ldi	r24, 0x62	; 98
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     478:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     47c:	8f 3f       	cpi	r24, 0xFF	; 255
     47e:	c1 f3       	breq	.-16     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     480:	81 33       	cpi	r24, 0x31	; 49
     482:	29 f4       	brne	.+10     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	64 e0       	ldi	r22, 0x04	; 4
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	0e 94 88 06 	call	0xd10	; 0xd10 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     494:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     496:	4d ee       	ldi	r20, 0xED	; 237
     498:	52 e0       	ldi	r21, 0x02	; 2
     49a:	62 e0       	ldi	r22, 0x02	; 2
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
                LCD_voidClear();
     4a2:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
                if (led_status == 1)
     4a6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     4aa:	81 30       	cpi	r24, 0x01	; 1
     4ac:	f9 f4       	brne	.+62     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     4ae:	8e e3       	ldi	r24, 0x3E	; 62
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4b6:	80 ec       	ldi	r24, 0xC0	; 192
     4b8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     4bc:	81 ef       	ldi	r24, 0xF1	; 241
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     4c6:	82 e6       	ldi	r24, 0x62	; 98
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     4ce:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     4d2:	8f 3f       	cpi	r24, 0xFF	; 255
     4d4:	c1 f3       	breq	.-16     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     4d6:	81 33       	cpi	r24, 0x31	; 49
     4d8:	29 f4       	brne	.+10     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 95 06 	call	0xd2a	; 0xd2a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     4ea:	08 95       	ret
                }
                else if (led_status == 0)
     4ec:	81 11       	cpse	r24, r1
     4ee:	20 c1       	rjmp	.+576    	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     4f0:	8c e4       	ldi	r24, 0x4C	; 76
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4f8:	80 ec       	ldi	r24, 0xC0	; 192
     4fa:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     4fe:	81 e1       	ldi	r24, 0x11	; 17
     500:	92 e0       	ldi	r25, 0x02	; 2
     502:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     506:	04 c0       	rjmp	.+8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     508:	82 e6       	ldi	r24, 0x62	; 98
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     510:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	c1 f3       	breq	.-16     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     518:	81 33       	cpi	r24, 0x31	; 49
     51a:	29 f4       	brne	.+10     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	62 e0       	ldi	r22, 0x02	; 2
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 88 06 	call	0xd10	; 0xd10 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     52c:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     52e:	4d ee       	ldi	r20, 0xED	; 237
     530:	52 e0       	ldi	r21, 0x02	; 2
     532:	63 e0       	ldi	r22, 0x03	; 3
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
                LCD_voidClear();
     53a:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
                if (led_status == 1)
     53e:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     542:	81 30       	cpi	r24, 0x01	; 1
     544:	f9 f4       	brne	.+62     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     546:	8b e5       	ldi	r24, 0x5B	; 91
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     54e:	80 ec       	ldi	r24, 0xC0	; 192
     550:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     554:	81 ef       	ldi	r24, 0xF1	; 241
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     55c:	04 c0       	rjmp	.+8      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     55e:	82 e6       	ldi	r24, 0x62	; 98
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     566:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     56a:	8f 3f       	cpi	r24, 0xFF	; 255
     56c:	c1 f3       	breq	.-16     	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     56e:	81 33       	cpi	r24, 0x31	; 49
     570:	29 f4       	brne	.+10     	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     572:	41 e0       	ldi	r20, 0x01	; 1
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	0e 94 95 06 	call	0xd2a	; 0xd2a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     582:	08 95       	ret
                }
                else if (led_status == 0)
     584:	81 11       	cpse	r24, r1
     586:	d4 c0       	rjmp	.+424    	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     588:	89 e6       	ldi	r24, 0x69	; 105
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     590:	80 ec       	ldi	r24, 0xC0	; 192
     592:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     596:	81 e1       	ldi	r24, 0x11	; 17
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     59e:	04 c0       	rjmp	.+8      	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5a0:	82 e6       	ldi	r24, 0x62	; 98
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     5a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     5ac:	8f 3f       	cpi	r24, 0xFF	; 255
     5ae:	c1 f3       	breq	.-16     	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5b0:	81 33       	cpi	r24, 0x31	; 49
     5b2:	29 f4       	brne	.+10     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	63 e0       	ldi	r22, 0x03	; 3
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 88 06 	call	0xd10	; 0xd10 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     5c4:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     5c6:	4d ee       	ldi	r20, 0xED	; 237
     5c8:	52 e0       	ldi	r21, 0x02	; 2
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
                LCD_voidClear();
     5d2:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
                if (led_status == 1)
     5d6:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	f9 f4       	brne	.+62     	; 0x61c <__EEPROM_REGION_LENGTH__+0x21c>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     5de:	88 e7       	ldi	r24, 0x78	; 120
     5e0:	92 e0       	ldi	r25, 0x02	; 2
     5e2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5e6:	80 ec       	ldi	r24, 0xC0	; 192
     5e8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     5ec:	81 ef       	ldi	r24, 0xF1	; 241
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     5f4:	04 c0       	rjmp	.+8      	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5f6:	82 e6       	ldi	r24, 0x62	; 98
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     5fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     602:	8f 3f       	cpi	r24, 0xFF	; 255
     604:	c1 f3       	breq	.-16     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     606:	81 33       	cpi	r24, 0x31	; 49
     608:	29 f4       	brne	.+10     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	0e 94 95 06 	call	0xd2a	; 0xd2a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     61a:	08 95       	ret
                }
                else if (led_status == 0)
     61c:	81 11       	cpse	r24, r1
     61e:	88 c0       	rjmp	.+272    	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     620:	86 e8       	ldi	r24, 0x86	; 134
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     628:	80 ec       	ldi	r24, 0xC0	; 192
     62a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     62e:	81 e1       	ldi	r24, 0x11	; 17
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     636:	04 c0       	rjmp	.+8      	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     638:	82 e6       	ldi	r24, 0x62	; 98
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     640:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     644:	8f 3f       	cpi	r24, 0xFF	; 255
     646:	c1 f3       	breq	.-16     	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     648:	81 33       	cpi	r24, 0x31	; 49
     64a:	29 f4       	brne	.+10     	; 0x656 <__EEPROM_REGION_LENGTH__+0x256>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	0e 94 88 06 	call	0xd10	; 0xd10 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     65c:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     65e:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
				
                if (led_status == 1)
     662:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <led_status>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	61 f4       	brne	.+24     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     66a:	85 e9       	ldi	r24, 0x95	; 149
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     672:	80 ec       	ldi	r24, 0xC0	; 192
     674:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     678:	81 ef       	ldi	r24, 0xF1	; 241
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
     680:	08 95       	ret
					
                }
                else if (led_status == 0)
     682:	81 11       	cpse	r24, r1
     684:	55 c0       	rjmp	.+170    	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     686:	83 ea       	ldi	r24, 0xA3	; 163
     688:	92 e0       	ldi	r25, 0x02	; 2
     68a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     68e:	80 ec       	ldi	r24, 0xC0	; 192
     690:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     694:	81 e1       	ldi	r24, 0x11	; 17
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
     69c:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
     69e:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
				// ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
				LCD_voidSendCommand(Write_FirstLine);
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
     6a8:	82 eb       	ldi	r24, 0xB2	; 178
     6aa:	92 e0       	ldi	r25, 0x02	; 2
     6ac:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     6b0:	6b e0       	ldi	r22, 0x0B	; 11
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
     6b8:	60 91 ec 02 	lds	r22, 0x02EC	; 0x8002ec <__data_end>
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 e5 05 	call	0xbca	; 0xbca <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
     6c6:	83 e6       	ldi	r24, 0x63	; 99
     6c8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
     6cc:	80 ec       	ldi	r24, 0xC0	; 192
     6ce:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
     6d2:	80 ec       	ldi	r24, 0xC0	; 192
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
     6da:	06 c0       	rjmp	.+12     	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
     6dc:	81 e6       	ldi	r24, 0x61	; 97
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 fe 03 	call	0x7fc	; 0x7fc <KPD_voidGetValue>
					Display_temp();
     6e4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
     6e8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     6ec:	8f 3f       	cpi	r24, 0xFF	; 255
     6ee:	b1 f3       	breq	.-20     	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
     6f0:	80 33       	cpi	r24, 0x30	; 48
     6f2:	f1 f4       	brne	.+60     	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
				{
					LCD_voidClear();
     6f4:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
     6f8:	08 95       	ret
				}
			break;

			case ('4'):
			LCD_voidClear();
     6fa:	0e 94 38 06 	call	0xc70	; 0xc70 <LCD_voidClear>
			LCD_voidDisplayString("Door is opening");
     6fe:	8d ec       	ldi	r24, 0xCD	; 205
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_voidDisplayString>
			SERVO_voidStartByAngle(90);
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	84 eb       	ldi	r24, 0xB4	; 180
     70c:	92 e4       	ldi	r25, 0x42	; 66
     70e:	0e 94 a8 06 	call	0xd50	; 0xd50 <SERVO_voidStartByAngle>
     712:	2a ea       	ldi	r18, 0xAA	; 170
     714:	36 ee       	ldi	r19, 0xE6	; 230
     716:	86 e9       	ldi	r24, 0x96	; 150
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	21 50       	subi	r18, 0x01	; 1
     71c:	30 40       	sbci	r19, 0x00	; 0
     71e:	80 40       	sbci	r24, 0x00	; 0
     720:	90 40       	sbci	r25, 0x00	; 0
     722:	d9 f7       	brne	.-10     	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
     724:	00 00       	nop
			_delay_ms(10000);
			SERVO_voidStartByAngle(0);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	cb 01       	movw	r24, r22
     72c:	0e 94 a8 06 	call	0xd50	; 0xd50 <SERVO_voidStartByAngle>
     730:	08 95       	ret

00000732 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     732:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <UART_voidInit>
     736:	08 95       	ret

00000738 <EEPROM_voidInit>:
	TWI_voidSendStopCondition();
	_delay_ms(5);
	
	
	
}
     738:	0e 94 a7 09 	call	0x134e	; 0x134e <TWI_voidInitMaster>
     73c:	08 95       	ret

0000073e <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
     746:	61 15       	cp	r22, r1
     748:	71 05       	cpc	r23, r1
     74a:	f9 f0       	breq	.+62     	; 0x78a <EEPROM_voidWritePage+0x4c>
     74c:	8b 01       	movw	r16, r22
     74e:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     750:	c9 2f       	mov	r28, r25
     752:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
     754:	0e 94 b3 09 	call	0x1366	; 0x1366 <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     758:	8c 2f       	mov	r24, r28
     75a:	0e 94 c8 09 	call	0x1390	; 0x1390 <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     75e:	8d 2f       	mov	r24, r29
     760:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     764:	c0 e0       	ldi	r28, 0x00	; 0
     766:	07 c0       	rjmp	.+14     	; 0x776 <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
     768:	f8 01       	movw	r30, r16
     76a:	ec 0f       	add	r30, r28
     76c:	f1 1d       	adc	r31, r1
     76e:	80 81       	ld	r24, Z
     770:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     774:	cf 5f       	subi	r28, 0xFF	; 255
     776:	c8 30       	cpi	r28, 0x08	; 8
     778:	b8 f3       	brcs	.-18     	; 0x768 <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
     77a:	0e 94 c1 09 	call	0x1382	; 0x1382 <TWI_voidSendStopCondition>
     77e:	8f e1       	ldi	r24, 0x1F	; 31
     780:	9e e4       	ldi	r25, 0x4E	; 78
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <EEPROM_voidWritePage+0x44>
     786:	00 c0       	rjmp	.+0      	; 0x788 <EEPROM_voidWritePage+0x4a>
     788:	00 00       	nop
		{
			//error state
		}
		
		
	}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	64 e0       	ldi	r22, 0x04	; 4
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	65 e0       	ldi	r22, 0x05	; 5
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     7a8:	41 e0       	ldi	r20, 0x01	; 1
     7aa:	66 e0       	ldi	r22, 0x06	; 6
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	64 e0       	ldi	r22, 0x04	; 4
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	65 e0       	ldi	r22, 0x05	; 5
     7ca:	82 e0       	ldi	r24, 0x02	; 2
     7cc:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	66 e0       	ldi	r22, 0x06	; 6
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     7da:	63 e0       	ldi	r22, 0x03	; 3
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     7e2:	64 e0       	ldi	r22, 0x04	; 4
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     7ea:	65 e0       	ldi	r22, 0x05	; 5
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     7f2:	66 e0       	ldi	r22, 0x06	; 6
     7f4:	82 e0       	ldi	r24, 0x02	; 2
     7f6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <DIO_voidActivePinInPullUpResistance>
     7fa:	08 95       	ret

000007fc <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     7fc:	6f 92       	push	r6
     7fe:	7f 92       	push	r7
     800:	8f 92       	push	r8
     802:	9f 92       	push	r9
     804:	af 92       	push	r10
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	6b 97       	sbiw	r28, 0x1b	; 27
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	09 f4       	brne	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82c:	7e c0       	rjmp	.+252    	; 0x92a <__stack+0xcb>
     82e:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	88 8f       	std	Y+24, r24	; 0x18
     834:	89 8f       	std	Y+25, r24	; 0x19
     836:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     838:	34 e0       	ldi	r19, 0x04	; 4
     83a:	3d 8b       	std	Y+21, r19	; 0x15
     83c:	25 e0       	ldi	r18, 0x05	; 5
     83e:	2e 8b       	std	Y+22, r18	; 0x16
     840:	96 e0       	ldi	r25, 0x06	; 6
     842:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	89 8b       	std	Y+17, r24	; 0x11
     848:	8a 8b       	std	Y+18, r24	; 0x12
     84a:	8b 8b       	std	Y+19, r24	; 0x13
     84c:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	8d 87       	std	Y+13, r24	; 0x0d
     852:	3e 87       	std	Y+14, r19	; 0x0e
     854:	2f 87       	std	Y+15, r18	; 0x0f
     856:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     858:	8c e0       	ldi	r24, 0x0C	; 12
     85a:	e0 e8       	ldi	r30, 0x80	; 128
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	de 01       	movw	r26, r28
     860:	11 96       	adiw	r26, 0x01	; 1
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	8a 95       	dec	r24
     868:	e1 f7       	brne	.-8      	; 0x862 <__stack+0x3>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	f5 01       	movw	r30, r10
     86e:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     870:	81 2c       	mov	r8, r1
     872:	57 c0       	rjmp	.+174    	; 0x922 <__stack+0xc3>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     874:	c8 2c       	mov	r12, r8
     876:	d1 2c       	mov	r13, r1
     878:	e5 e1       	ldi	r30, 0x15	; 21
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	ec 0f       	add	r30, r28
     87e:	fd 1f       	adc	r31, r29
     880:	ec 0d       	add	r30, r12
     882:	fd 1d       	adc	r31, r13
     884:	60 80       	ld	r6, Z
     886:	e8 e1       	ldi	r30, 0x18	; 24
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	ec 0f       	add	r30, r28
     88c:	fd 1f       	adc	r31, r29
     88e:	ec 0d       	add	r30, r12
     890:	fd 1d       	adc	r31, r13
     892:	70 80       	ld	r7, Z
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	66 2d       	mov	r22, r6
     898:	87 2d       	mov	r24, r7
     89a:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	38 c0       	rjmp	.+112    	; 0x912 <__stack+0xb3>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     8a2:	e1 2e       	mov	r14, r17
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ed e0       	ldi	r30, 0x0D	; 13
     8a8:	f0 e0       	ldi	r31, 0x00	; 0
     8aa:	ec 0f       	add	r30, r28
     8ac:	fd 1f       	adc	r31, r29
     8ae:	ee 0d       	add	r30, r14
     8b0:	ff 1d       	adc	r31, r15
     8b2:	00 81       	ld	r16, Z
     8b4:	e1 e1       	ldi	r30, 0x11	; 17
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	ec 0f       	add	r30, r28
     8ba:	fd 1f       	adc	r31, r29
     8bc:	ee 0d       	add	r30, r14
     8be:	ff 1d       	adc	r31, r15
     8c0:	90 80       	ld	r9, Z
     8c2:	ae 01       	movw	r20, r28
     8c4:	45 5e       	subi	r20, 0xE5	; 229
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	60 2f       	mov	r22, r16
     8ca:	89 2d       	mov	r24, r9
     8cc:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     8d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8d2:	81 11       	cpse	r24, r1
     8d4:	1d c0       	rjmp	.+58     	; 0x910 <__stack+0xb1>
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <__stack+0x87>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     8d8:	ae 01       	movw	r20, r28
     8da:	45 5e       	subi	r20, 0xE5	; 229
     8dc:	5f 4f       	sbci	r21, 0xFF	; 255
     8de:	60 2f       	mov	r22, r16
     8e0:	89 2d       	mov	r24, r9
     8e2:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     8e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8e8:	88 23       	and	r24, r24
     8ea:	b1 f3       	breq	.-20     	; 0x8d8 <__stack+0x79>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     8ec:	c7 01       	movw	r24, r14
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	e8 0e       	add	r14, r24
     8f4:	f9 1e       	adc	r15, r25
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	8c 0f       	add	r24, r28
     8fc:	9d 1f       	adc	r25, r29
     8fe:	e8 0e       	add	r14, r24
     900:	f9 1e       	adc	r15, r25
     902:	f7 01       	movw	r30, r14
     904:	ec 0d       	add	r30, r12
     906:	fd 1d       	adc	r31, r13
     908:	80 81       	ld	r24, Z
     90a:	f5 01       	movw	r30, r10
     90c:	80 83       	st	Z, r24
     90e:	0d c0       	rjmp	.+26     	; 0x92a <__stack+0xcb>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     910:	1f 5f       	subi	r17, 0xFF	; 255
     912:	14 30       	cpi	r17, 0x04	; 4
     914:	30 f2       	brcs	.-116    	; 0x8a2 <__stack+0x43>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     916:	41 e0       	ldi	r20, 0x01	; 1
     918:	66 2d       	mov	r22, r6
     91a:	87 2d       	mov	r24, r7
     91c:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     920:	83 94       	inc	r8
     922:	f2 e0       	ldi	r31, 0x02	; 2
     924:	f8 15       	cp	r31, r8
     926:	08 f0       	brcs	.+2      	; 0x92a <__stack+0xcb>
     928:	a5 cf       	rjmp	.-182    	; 0x874 <__stack+0x15>
	}
	else
	{
		
	}
}
     92a:	6b 96       	adiw	r28, 0x1b	; 27
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	df 90       	pop	r13
     944:	cf 90       	pop	r12
     946:	bf 90       	pop	r11
     948:	af 90       	pop	r10
     94a:	9f 90       	pop	r9
     94c:	8f 90       	pop	r8
     94e:	7f 90       	pop	r7
     950:	6f 90       	pop	r6
     952:	08 95       	ret

00000954 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     954:	cf 93       	push	r28
     956:	c8 2f       	mov	r28, r24
     958:	80 ff       	sbrs	r24, 0
     95a:	06 c0       	rjmp	.+12     	; 0x968 <PRV_voidWriteHalfPort+0x14>
     95c:	41 e0       	ldi	r20, 0x01	; 1
     95e:	64 e0       	ldi	r22, 0x04	; 4
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     966:	05 c0       	rjmp	.+10     	; 0x972 <PRV_voidWriteHalfPort+0x1e>
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	64 e0       	ldi	r22, 0x04	; 4
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     972:	c1 ff       	sbrs	r28, 1
     974:	06 c0       	rjmp	.+12     	; 0x982 <PRV_voidWriteHalfPort+0x2e>
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	65 e0       	ldi	r22, 0x05	; 5
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     980:	05 c0       	rjmp	.+10     	; 0x98c <PRV_voidWriteHalfPort+0x38>
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	65 e0       	ldi	r22, 0x05	; 5
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     98c:	c2 ff       	sbrs	r28, 2
     98e:	06 c0       	rjmp	.+12     	; 0x99c <PRV_voidWriteHalfPort+0x48>
     990:	41 e0       	ldi	r20, 0x01	; 1
     992:	66 e0       	ldi	r22, 0x06	; 6
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <PRV_voidWriteHalfPort+0x52>
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	66 e0       	ldi	r22, 0x06	; 6
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     9a6:	c3 ff       	sbrs	r28, 3
     9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <PRV_voidWriteHalfPort+0x62>
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	67 e0       	ldi	r22, 0x07	; 7
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <PRV_voidWriteHalfPort+0x6c>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	67 e0       	ldi	r22, 0x07	; 7
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <LCD_voidSendCommand>:
     9c4:	cf 93       	push	r28
     9c6:	c8 2f       	mov	r28, r24
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	62 e0       	ldi	r22, 0x02	; 2
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     9dc:	8c 2f       	mov	r24, r28
     9de:	82 95       	swap	r24
     9e0:	8f 70       	andi	r24, 0x0F	; 15
     9e2:	0e 94 aa 04 	call	0x954	; 0x954 <PRV_voidWriteHalfPort>
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	63 e0       	ldi	r22, 0x03	; 3
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     9f0:	8f e9       	ldi	r24, 0x9F	; 159
     9f2:	9f e0       	ldi	r25, 0x0F	; 15
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <LCD_voidSendCommand+0x30>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <LCD_voidSendCommand+0x36>
     9fa:	00 00       	nop
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     a06:	8c 2f       	mov	r24, r28
     a08:	0e 94 aa 04 	call	0x954	; 0x954 <PRV_voidWriteHalfPort>
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	63 e0       	ldi	r22, 0x03	; 3
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     a16:	8f e9       	ldi	r24, 0x9F	; 159
     a18:	9f e0       	ldi	r25, 0x0F	; 15
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <LCD_voidSendCommand+0x56>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <LCD_voidSendCommand+0x5c>
     a20:	00 00       	nop
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	63 e0       	ldi	r22, 0x03	; 3
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <LCD_voidInit>:
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	63 e0       	ldi	r22, 0x03	; 3
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     a4e:	41 e0       	ldi	r20, 0x01	; 1
     a50:	64 e0       	ldi	r22, 0x04	; 4
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     a58:	41 e0       	ldi	r20, 0x01	; 1
     a5a:	65 e0       	ldi	r22, 0x05	; 5
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	66 e0       	ldi	r22, 0x06	; 6
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     a6c:	41 e0       	ldi	r20, 0x01	; 1
     a6e:	67 e0       	ldi	r22, 0x07	; 7
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     a76:	2f e7       	ldi	r18, 0x7F	; 127
     a78:	85 eb       	ldi	r24, 0xB5	; 181
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	21 50       	subi	r18, 0x01	; 1
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	e1 f7       	brne	.-8      	; 0xa7c <LCD_voidInit+0x4c>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <LCD_voidInit+0x56>
     a86:	00 00       	nop
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	62 e0       	ldi	r22, 0x02	; 2
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	0e 94 aa 04 	call	0x954	; 0x954 <PRV_voidWriteHalfPort>
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	63 e0       	ldi	r22, 0x03	; 3
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     aac:	8f e9       	ldi	r24, 0x9F	; 159
     aae:	9f e0       	ldi	r25, 0x0F	; 15
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	f1 f7       	brne	.-4      	; 0xab0 <LCD_voidInit+0x80>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <LCD_voidInit+0x86>
     ab6:	00 00       	nop
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	63 e0       	ldi	r22, 0x03	; 3
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     ac2:	88 e2       	ldi	r24, 0x28	; 40
     ac4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
     ac8:	90 ef       	ldi	r25, 0xF0	; 240
     aca:	9a 95       	dec	r25
     acc:	f1 f7       	brne	.-4      	; 0xaca <LCD_voidInit+0x9a>
     ace:	8c e0       	ldi	r24, 0x0C	; 12
     ad0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
     ad4:	20 ef       	ldi	r18, 0xF0	; 240
     ad6:	2a 95       	dec	r18
     ad8:	f1 f7       	brne	.-4      	; 0xad6 <LCD_voidInit+0xa6>
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
     ae0:	8f e3       	ldi	r24, 0x3F	; 63
     ae2:	9f e1       	ldi	r25, 0x1F	; 31
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <LCD_voidInit+0xb4>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <LCD_voidInit+0xba>
     aea:	00 00       	nop
     aec:	86 e0       	ldi	r24, 0x06	; 6
     aee:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
     af2:	08 95       	ret

00000af4 <LCD_voidDisplayChar>:
     af4:	cf 93       	push	r28
     af6:	c8 2f       	mov	r28, r24
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	62 e0       	ldi	r22, 0x02	; 2
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     b0c:	8c 2f       	mov	r24, r28
     b0e:	82 95       	swap	r24
     b10:	8f 70       	andi	r24, 0x0F	; 15
     b12:	0e 94 aa 04 	call	0x954	; 0x954 <PRV_voidWriteHalfPort>
     b16:	41 e0       	ldi	r20, 0x01	; 1
     b18:	63 e0       	ldi	r22, 0x03	; 3
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     b20:	8f e9       	ldi	r24, 0x9F	; 159
     b22:	9f e0       	ldi	r25, 0x0F	; 15
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCD_voidDisplayChar+0x30>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <LCD_voidDisplayChar+0x36>
     b2a:	00 00       	nop
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	63 e0       	ldi	r22, 0x03	; 3
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     b36:	8c 2f       	mov	r24, r28
     b38:	0e 94 aa 04 	call	0x954	; 0x954 <PRV_voidWriteHalfPort>
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	63 e0       	ldi	r22, 0x03	; 3
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     b46:	8f e9       	ldi	r24, 0x9F	; 159
     b48:	9f e0       	ldi	r25, 0x0F	; 15
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	f1 f7       	brne	.-4      	; 0xb4a <LCD_voidDisplayChar+0x56>
     b4e:	00 c0       	rjmp	.+0      	; 0xb50 <LCD_voidDisplayChar+0x5c>
     b50:	00 00       	nop
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	63 e0       	ldi	r22, 0x03	; 3
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <LCD_voidDisplayString>:
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	29 f4       	brne	.+10     	; 0xb74 <LCD_voidDisplayString+0x14>
     b6a:	0c c0       	rjmp	.+24     	; 0xb84 <LCD_voidDisplayString+0x24>
     b6c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_voidDisplayChar>
     b70:	cf 5f       	subi	r28, 0xFF	; 255
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <LCD_voidDisplayString+0x18>
     b74:	8c 01       	movw	r16, r24
     b76:	c0 e0       	ldi	r28, 0x00	; 0
     b78:	f8 01       	movw	r30, r16
     b7a:	ec 0f       	add	r30, r28
     b7c:	f1 1d       	adc	r31, r1
     b7e:	80 81       	ld	r24, Z
     b80:	81 11       	cpse	r24, r1
     b82:	f4 cf       	rjmp	.-24     	; 0xb6c <LCD_voidDisplayString+0xc>
     b84:	cf 91       	pop	r28
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <LCD_voidDisplayStringDelay>:
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	71 f4       	brne	.+28     	; 0xbb2 <LCD_voidDisplayStringDelay+0x26>
     b96:	15 c0       	rjmp	.+42     	; 0xbc2 <LCD_voidDisplayStringDelay+0x36>
     b98:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_voidDisplayChar>
     b9c:	cf 5f       	subi	r28, 0xFF	; 255
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	80 e7       	ldi	r24, 0x70	; 112
     ba2:	92 e0       	ldi	r25, 0x02	; 2
     ba4:	21 50       	subi	r18, 0x01	; 1
     ba6:	80 40       	sbci	r24, 0x00	; 0
     ba8:	90 40       	sbci	r25, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <LCD_voidDisplayStringDelay+0x18>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <LCD_voidDisplayStringDelay+0x22>
     bae:	00 00       	nop
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <LCD_voidDisplayStringDelay+0x2a>
     bb2:	8c 01       	movw	r16, r24
     bb4:	c0 e0       	ldi	r28, 0x00	; 0
     bb6:	f8 01       	movw	r30, r16
     bb8:	ec 0f       	add	r30, r28
     bba:	f1 1d       	adc	r31, r1
     bbc:	80 81       	ld	r24, Z
     bbe:	81 11       	cpse	r24, r1
     bc0:	eb cf       	rjmp	.-42     	; 0xb98 <LCD_voidDisplayStringDelay+0xc>
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	08 95       	ret

00000bca <LCD_voidDisplayNumber>:
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <LCD_voidDisplayNumber+0xa>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <LCD_voidDisplayNumber+0xc>
     bd6:	1f 92       	push	r1
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	26 2f       	mov	r18, r22
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	08 c0       	rjmp	.+16     	; 0xbf2 <LCD_voidDisplayNumber+0x28>
     be2:	1f 5f       	subi	r17, 0xFF	; 255
     be4:	ed ec       	ldi	r30, 0xCD	; 205
     be6:	6e 9f       	mul	r22, r30
     be8:	61 2d       	mov	r22, r1
     bea:	11 24       	eor	r1, r1
     bec:	66 95       	lsr	r22
     bee:	66 95       	lsr	r22
     bf0:	66 95       	lsr	r22
     bf2:	61 11       	cpse	r22, r1
     bf4:	f6 cf       	rjmp	.-20     	; 0xbe2 <LCD_voidDisplayNumber+0x18>
     bf6:	00 e0       	ldi	r16, 0x00	; 0
     bf8:	1a c0       	rjmp	.+52     	; 0xc2e <LCD_voidDisplayNumber+0x64>
     bfa:	62 2f       	mov	r22, r18
     bfc:	2a e0       	ldi	r18, 0x0A	; 10
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__udivmodsi4>
     c08:	73 2f       	mov	r23, r19
     c0a:	84 2f       	mov	r24, r20
     c0c:	95 2f       	mov	r25, r21
     c0e:	a0 2f       	mov	r26, r16
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	11 96       	adiw	r26, 0x01	; 1
     c14:	e1 2f       	mov	r30, r17
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	ea 1b       	sub	r30, r26
     c1a:	fb 0b       	sbc	r31, r27
     c1c:	41 e0       	ldi	r20, 0x01	; 1
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	4c 0f       	add	r20, r28
     c22:	5d 1f       	adc	r21, r29
     c24:	e4 0f       	add	r30, r20
     c26:	f5 1f       	adc	r31, r21
     c28:	60 5d       	subi	r22, 0xD0	; 208
     c2a:	60 83       	st	Z, r22
     c2c:	0f 5f       	subi	r16, 0xFF	; 255
     c2e:	01 17       	cp	r16, r17
     c30:	20 f3       	brcs	.-56     	; 0xbfa <LCD_voidDisplayNumber+0x30>
     c32:	e1 e0       	ldi	r30, 0x01	; 1
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ec 0f       	add	r30, r28
     c38:	fd 1f       	adc	r31, r29
     c3a:	e1 0f       	add	r30, r17
     c3c:	f1 1d       	adc	r31, r1
     c3e:	10 82       	st	Z, r1
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <LCD_voidDisplayNumber+0x80>
     c44:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <LCD_voidDisplayChar>
     c48:	1f 5f       	subi	r17, 0xFF	; 255
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ec 0f       	add	r30, r28
     c50:	fd 1f       	adc	r31, r29
     c52:	e1 0f       	add	r30, r17
     c54:	f1 1d       	adc	r31, r1
     c56:	80 81       	ld	r24, Z
     c58:	81 11       	cpse	r24, r1
     c5a:	f4 cf       	rjmp	.-24     	; 0xc44 <LCD_voidDisplayNumber+0x7a>
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	08 95       	ret

00000c70 <LCD_voidClear>:
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	62 e0       	ldi	r22, 0x02	; 2
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 aa 04 	call	0x954	; 0x954 <PRV_voidWriteHalfPort>
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	63 e0       	ldi	r22, 0x03	; 3
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     c94:	8f e9       	ldi	r24, 0x9F	; 159
     c96:	9f e0       	ldi	r25, 0x0F	; 15
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <LCD_voidClear+0x28>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <LCD_voidClear+0x2e>
     c9e:	00 00       	nop
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	63 e0       	ldi	r22, 0x03	; 3
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 aa 04 	call	0x954	; 0x954 <PRV_voidWriteHalfPort>
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	63 e0       	ldi	r22, 0x03	; 3
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     cba:	8f e9       	ldi	r24, 0x9F	; 159
     cbc:	9f e0       	ldi	r25, 0x0F	; 15
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <LCD_voidClear+0x4e>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <LCD_voidClear+0x54>
     cc4:	00 00       	nop
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	63 e0       	ldi	r22, 0x03	; 3
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     cd0:	08 95       	ret

00000cd2 <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
	if(copy_u8Position<40)
     cd6:	68 32       	cpi	r22, 0x28	; 40
     cd8:	a0 f4       	brcc	.+40     	; 0xd02 <LCD_voidGoTOSpecificPosition+0x30>
     cda:	c6 2f       	mov	r28, r22
     cdc:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     ce4:	d1 30       	cpi	r29, 0x01	; 1
     ce6:	19 f0       	breq	.+6      	; 0xcee <LCD_voidGoTOSpecificPosition+0x1c>
     ce8:	d2 30       	cpi	r29, 0x02	; 2
     cea:	31 f0       	breq	.+12     	; 0xcf8 <LCD_voidGoTOSpecificPosition+0x26>
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     cee:	8c 2f       	mov	r24, r28
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
		
			
			break;
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	8c 0f       	add	r24, r28
     cfc:	80 68       	ori	r24, 0x80	; 128
     cfe:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
     d0e:	08 95       	ret

00000d10 <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     d10:	41 30       	cpi	r20, 0x01	; 1
     d12:	19 f0       	breq	.+6      	; 0xd1a <LED_voidOn+0xa>
     d14:	42 30       	cpi	r20, 0x02	; 2
     d16:	29 f0       	breq	.+10     	; 0xd22 <LED_voidOn+0x12>
     d18:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
		break;
     d20:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     d28:	08 95       	ret

00000d2a <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     d2a:	41 30       	cpi	r20, 0x01	; 1
     d2c:	19 f0       	breq	.+6      	; 0xd34 <LED_voidOff+0xa>
     d2e:	42 30       	cpi	r20, 0x02	; 2
     d30:	29 f0       	breq	.+10     	; 0xd3c <LED_voidOff+0x12>
     d32:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
		break;
     d3a:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	0e 94 a3 07 	call	0xf46	; 0xf46 <DIO_voidSetPinValue>
     d42:	08 95       	ret

00000d44 <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
     d4a:	0e 94 9a 08 	call	0x1134	; 0x1134 <PWM_voidInitChannel_1A>
     d4e:	08 95       	ret

00000d50 <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e2       	ldi	r20, 0x20	; 32
     d56:	50 e4       	ldi	r21, 0x40	; 64
     d58:	0e 94 bf 0b 	call	0x177e	; 0x177e <__mulsf3>
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 ec       	ldi	r19, 0xC0	; 192
     d60:	48 e2       	ldi	r20, 0x28	; 40
     d62:	54 e4       	ldi	r21, 0x44	; 68
     d64:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__addsf3>
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	44 eb       	ldi	r20, 0xB4	; 180
     d6e:	52 e4       	ldi	r21, 0x42	; 66
     d70:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__divsf3>
     d74:	ab 01       	movw	r20, r22
     d76:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1A(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
     d78:	82 e3       	ldi	r24, 0x32	; 50
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 ad 08 	call	0x115a	; 0x115a <PWM_voidGenerateChannel_1A>
     d80:	08 95       	ret

00000d82 <main>:

extern u8 global_accessType;

int main()
{
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0e 94 23 07 	call	0xe46	; 0xe46 <DIO_voidSetPinDirection>
	APP_init();
     d8c:	0e 94 96 00 	call	0x12c	; 0x12c <APP_init>



	while(1)
	{
		if (global_accessType ==accessPermited)
     d90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	19 f4       	brne	.+6      	; 0xd9e <main+0x1c>
		{
		KPD_Interface_user();
     d98:	0e 94 33 01 	call	0x266	; 0x266 <KPD_Interface_user>
     d9c:	f9 cf       	rjmp	.-14     	; 0xd90 <main+0xe>
		}
		else if (global_accessType ==accessDenied)
     d9e:	81 11       	cpse	r24, r1
     da0:	f7 cf       	rjmp	.-18     	; 0xd90 <main+0xe>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
     da2:	8d ed       	ldi	r24, 0xDD	; 221
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 b0 05 	call	0xb60	; 0xb60 <LCD_voidDisplayString>
		}
		
		
		
	}
}
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	08 95       	ret

00000db0 <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
     db0:	82 30       	cpi	r24, 0x02	; 2
     db2:	59 f0       	breq	.+22     	; 0xdca <ADC_voidInit+0x1a>
     db4:	83 30       	cpi	r24, 0x03	; 3
     db6:	81 f0       	breq	.+32     	; 0xdd8 <ADC_voidInit+0x28>
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	a1 f4       	brne	.+40     	; 0xde4 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
     dbc:	87 b1       	in	r24, 0x07	; 7
     dbe:	80 64       	ori	r24, 0x40	; 64
     dc0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     dc2:	87 b1       	in	r24, 0x07	; 7
     dc4:	8f 77       	andi	r24, 0x7F	; 127
     dc6:	87 b9       	out	0x07, r24	; 7
		break;
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
     dca:	87 b1       	in	r24, 0x07	; 7
     dcc:	8f 7b       	andi	r24, 0xBF	; 191
     dce:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     dd0:	87 b1       	in	r24, 0x07	; 7
     dd2:	8f 77       	andi	r24, 0x7F	; 127
     dd4:	87 b9       	out	0x07, r24	; 7
		break;
     dd6:	06 c0       	rjmp	.+12     	; 0xde4 <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
     dd8:	87 b1       	in	r24, 0x07	; 7
     dda:	80 64       	ori	r24, 0x40	; 64
     ddc:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
     dde:	87 b1       	in	r24, 0x07	; 7
     de0:	80 68       	ori	r24, 0x80	; 128
     de2:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
     de4:	87 b1       	in	r24, 0x07	; 7
     de6:	8f 7d       	andi	r24, 0xDF	; 223
     de8:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
     dea:	86 b1       	in	r24, 0x06	; 6
     dec:	8f 7d       	andi	r24, 0xDF	; 223
     dee:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
     df0:	86 b1       	in	r24, 0x06	; 6
     df2:	87 7f       	andi	r24, 0xF7	; 247
     df4:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
     df6:	86 b1       	in	r24, 0x06	; 6
     df8:	84 60       	ori	r24, 0x04	; 4
     dfa:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
     dfc:	86 b1       	in	r24, 0x06	; 6
     dfe:	82 60       	ori	r24, 0x02	; 2
     e00:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
     e02:	86 b1       	in	r24, 0x06	; 6
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
     e08:	86 b1       	in	r24, 0x06	; 6
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	86 b9       	out	0x06, r24	; 6
     e0e:	08 95       	ret

00000e10 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
     e10:	61 15       	cp	r22, r1
     e12:	71 05       	cpc	r23, r1
     e14:	b9 f0       	breq	.+46     	; 0xe44 <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
     e16:	97 b1       	in	r25, 0x07	; 7
     e18:	90 7e       	andi	r25, 0xE0	; 224
     e1a:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
     e1c:	97 b1       	in	r25, 0x07	; 7
     e1e:	89 2b       	or	r24, r25
     e20:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
     e22:	86 b1       	in	r24, 0x06	; 6
     e24:	80 64       	ori	r24, 0x40	; 64
     e26:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
     e28:	34 9b       	sbis	0x06, 4	; 6
     e2a:	fe cf       	rjmp	.-4      	; 0xe28 <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
     e2c:	84 b1       	in	r24, 0x04	; 4
     e2e:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
     e30:	96 95       	lsr	r25
     e32:	87 95       	ror	r24
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	fb 01       	movw	r30, r22
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
     e3e:	86 b1       	in	r24, 0x06	; 6
     e40:	80 61       	ori	r24, 0x10	; 16
     e42:	86 b9       	out	0x06, r24	; 6
     e44:	08 95       	ret

00000e46 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	08 f0       	brcs	.+2      	; 0xe4c <DIO_voidSetPinDirection+0x6>
     e4a:	7c c0       	rjmp	.+248    	; 0xf44 <DIO_voidSetPinDirection+0xfe>
     e4c:	68 30       	cpi	r22, 0x08	; 8
     e4e:	08 f0       	brcs	.+2      	; 0xe52 <DIO_voidSetPinDirection+0xc>
     e50:	79 c0       	rjmp	.+242    	; 0xf44 <DIO_voidSetPinDirection+0xfe>
     e52:	42 30       	cpi	r20, 0x02	; 2
     e54:	08 f0       	brcs	.+2      	; 0xe58 <DIO_voidSetPinDirection+0x12>
     e56:	76 c0       	rjmp	.+236    	; 0xf44 <DIO_voidSetPinDirection+0xfe>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	19 f1       	breq	.+70     	; 0xea2 <DIO_voidSetPinDirection+0x5c>
     e5c:	30 f0       	brcs	.+12     	; 0xe6a <DIO_voidSetPinDirection+0x24>
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	e1 f1       	breq	.+120    	; 0xeda <DIO_voidSetPinDirection+0x94>
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	09 f4       	brne	.+2      	; 0xe68 <DIO_voidSetPinDirection+0x22>
     e66:	54 c0       	rjmp	.+168    	; 0xf10 <DIO_voidSetPinDirection+0xca>
     e68:	08 95       	ret
     e6a:	44 23       	and	r20, r20
     e6c:	71 f0       	breq	.+28     	; 0xe8a <DIO_voidSetPinDirection+0x44>
     e6e:	41 30       	cpi	r20, 0x01	; 1
     e70:	09 f0       	breq	.+2      	; 0xe74 <DIO_voidSetPinDirection+0x2e>
     e72:	68 c0       	rjmp	.+208    	; 0xf44 <DIO_voidSetPinDirection+0xfe>
     e74:	2a b3       	in	r18, 0x1a	; 26
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_voidSetPinDirection+0x3a>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	6a 95       	dec	r22
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_voidSetPinDirection+0x36>
     e84:	82 2b       	or	r24, r18
     e86:	8a bb       	out	0x1a, r24	; 26
     e88:	08 95       	ret
     e8a:	2a b3       	in	r18, 0x1a	; 26
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_voidSetPinDirection+0x50>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	6a 95       	dec	r22
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_voidSetPinDirection+0x4c>
     e9a:	80 95       	com	r24
     e9c:	82 23       	and	r24, r18
     e9e:	8a bb       	out	0x1a, r24	; 26
     ea0:	08 95       	ret
     ea2:	44 23       	and	r20, r20
     ea4:	71 f0       	breq	.+28     	; 0xec2 <DIO_voidSetPinDirection+0x7c>
     ea6:	41 30       	cpi	r20, 0x01	; 1
     ea8:	09 f0       	breq	.+2      	; 0xeac <DIO_voidSetPinDirection+0x66>
     eaa:	4c c0       	rjmp	.+152    	; 0xf44 <DIO_voidSetPinDirection+0xfe>
     eac:	27 b3       	in	r18, 0x17	; 23
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_voidSetPinDirection+0x72>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	6a 95       	dec	r22
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_voidSetPinDirection+0x6e>
     ebc:	82 2b       	or	r24, r18
     ebe:	87 bb       	out	0x17, r24	; 23
     ec0:	08 95       	ret
     ec2:	27 b3       	in	r18, 0x17	; 23
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_voidSetPinDirection+0x88>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	6a 95       	dec	r22
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_voidSetPinDirection+0x84>
     ed2:	80 95       	com	r24
     ed4:	82 23       	and	r24, r18
     ed6:	87 bb       	out	0x17, r24	; 23
     ed8:	08 95       	ret
     eda:	44 23       	and	r20, r20
     edc:	69 f0       	breq	.+26     	; 0xef8 <DIO_voidSetPinDirection+0xb2>
     ede:	41 30       	cpi	r20, 0x01	; 1
     ee0:	89 f5       	brne	.+98     	; 0xf44 <DIO_voidSetPinDirection+0xfe>
     ee2:	24 b3       	in	r18, 0x14	; 20
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <DIO_voidSetPinDirection+0xa8>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	6a 95       	dec	r22
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <DIO_voidSetPinDirection+0xa4>
     ef2:	82 2b       	or	r24, r18
     ef4:	84 bb       	out	0x14, r24	; 20
     ef6:	08 95       	ret
     ef8:	24 b3       	in	r18, 0x14	; 20
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_voidSetPinDirection+0xbe>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	6a 95       	dec	r22
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_voidSetPinDirection+0xba>
     f08:	80 95       	com	r24
     f0a:	82 23       	and	r24, r18
     f0c:	84 bb       	out	0x14, r24	; 20
     f0e:	08 95       	ret
     f10:	44 23       	and	r20, r20
     f12:	69 f0       	breq	.+26     	; 0xf2e <DIO_voidSetPinDirection+0xe8>
     f14:	41 30       	cpi	r20, 0x01	; 1
     f16:	b1 f4       	brne	.+44     	; 0xf44 <DIO_voidSetPinDirection+0xfe>
     f18:	21 b3       	in	r18, 0x11	; 17
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_voidSetPinDirection+0xde>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	6a 95       	dec	r22
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_voidSetPinDirection+0xda>
     f28:	82 2b       	or	r24, r18
     f2a:	81 bb       	out	0x11, r24	; 17
     f2c:	08 95       	ret
     f2e:	21 b3       	in	r18, 0x11	; 17
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_voidSetPinDirection+0xf4>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	6a 95       	dec	r22
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_voidSetPinDirection+0xf0>
     f3e:	80 95       	com	r24
     f40:	82 23       	and	r24, r18
     f42:	81 bb       	out	0x11, r24	; 17
     f44:	08 95       	ret

00000f46 <DIO_voidSetPinValue>:
     f46:	84 30       	cpi	r24, 0x04	; 4
     f48:	08 f0       	brcs	.+2      	; 0xf4c <DIO_voidSetPinValue+0x6>
     f4a:	7c c0       	rjmp	.+248    	; 0x1044 <DIO_voidSetPinValue+0xfe>
     f4c:	68 30       	cpi	r22, 0x08	; 8
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <DIO_voidSetPinValue+0xc>
     f50:	79 c0       	rjmp	.+242    	; 0x1044 <DIO_voidSetPinValue+0xfe>
     f52:	42 30       	cpi	r20, 0x02	; 2
     f54:	08 f0       	brcs	.+2      	; 0xf58 <DIO_voidSetPinValue+0x12>
     f56:	76 c0       	rjmp	.+236    	; 0x1044 <DIO_voidSetPinValue+0xfe>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	19 f1       	breq	.+70     	; 0xfa2 <DIO_voidSetPinValue+0x5c>
     f5c:	30 f0       	brcs	.+12     	; 0xf6a <DIO_voidSetPinValue+0x24>
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	e1 f1       	breq	.+120    	; 0xfda <DIO_voidSetPinValue+0x94>
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	09 f4       	brne	.+2      	; 0xf68 <DIO_voidSetPinValue+0x22>
     f66:	54 c0       	rjmp	.+168    	; 0x1010 <DIO_voidSetPinValue+0xca>
     f68:	08 95       	ret
     f6a:	44 23       	and	r20, r20
     f6c:	71 f0       	breq	.+28     	; 0xf8a <DIO_voidSetPinValue+0x44>
     f6e:	41 30       	cpi	r20, 0x01	; 1
     f70:	09 f0       	breq	.+2      	; 0xf74 <DIO_voidSetPinValue+0x2e>
     f72:	68 c0       	rjmp	.+208    	; 0x1044 <DIO_voidSetPinValue+0xfe>
     f74:	2b b3       	in	r18, 0x1b	; 27
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_voidSetPinValue+0x3a>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	6a 95       	dec	r22
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_voidSetPinValue+0x36>
     f84:	82 2b       	or	r24, r18
     f86:	8b bb       	out	0x1b, r24	; 27
     f88:	08 95       	ret
     f8a:	2b b3       	in	r18, 0x1b	; 27
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_voidSetPinValue+0x50>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	6a 95       	dec	r22
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_voidSetPinValue+0x4c>
     f9a:	80 95       	com	r24
     f9c:	82 23       	and	r24, r18
     f9e:	8b bb       	out	0x1b, r24	; 27
     fa0:	08 95       	ret
     fa2:	44 23       	and	r20, r20
     fa4:	71 f0       	breq	.+28     	; 0xfc2 <DIO_voidSetPinValue+0x7c>
     fa6:	41 30       	cpi	r20, 0x01	; 1
     fa8:	09 f0       	breq	.+2      	; 0xfac <DIO_voidSetPinValue+0x66>
     faa:	4c c0       	rjmp	.+152    	; 0x1044 <DIO_voidSetPinValue+0xfe>
     fac:	28 b3       	in	r18, 0x18	; 24
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <DIO_voidSetPinValue+0x72>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	6a 95       	dec	r22
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <DIO_voidSetPinValue+0x6e>
     fbc:	82 2b       	or	r24, r18
     fbe:	88 bb       	out	0x18, r24	; 24
     fc0:	08 95       	ret
     fc2:	28 b3       	in	r18, 0x18	; 24
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_voidSetPinValue+0x88>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	6a 95       	dec	r22
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_voidSetPinValue+0x84>
     fd2:	80 95       	com	r24
     fd4:	82 23       	and	r24, r18
     fd6:	88 bb       	out	0x18, r24	; 24
     fd8:	08 95       	ret
     fda:	44 23       	and	r20, r20
     fdc:	69 f0       	breq	.+26     	; 0xff8 <DIO_voidSetPinValue+0xb2>
     fde:	41 30       	cpi	r20, 0x01	; 1
     fe0:	89 f5       	brne	.+98     	; 0x1044 <DIO_voidSetPinValue+0xfe>
     fe2:	25 b3       	in	r18, 0x15	; 21
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_voidSetPinValue+0xa8>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	6a 95       	dec	r22
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_voidSetPinValue+0xa4>
     ff2:	82 2b       	or	r24, r18
     ff4:	85 bb       	out	0x15, r24	; 21
     ff6:	08 95       	ret
     ff8:	25 b3       	in	r18, 0x15	; 21
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_voidSetPinValue+0xbe>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	6a 95       	dec	r22
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_voidSetPinValue+0xba>
    1008:	80 95       	com	r24
    100a:	82 23       	and	r24, r18
    100c:	85 bb       	out	0x15, r24	; 21
    100e:	08 95       	ret
    1010:	44 23       	and	r20, r20
    1012:	69 f0       	breq	.+26     	; 0x102e <DIO_voidSetPinValue+0xe8>
    1014:	41 30       	cpi	r20, 0x01	; 1
    1016:	b1 f4       	brne	.+44     	; 0x1044 <DIO_voidSetPinValue+0xfe>
    1018:	22 b3       	in	r18, 0x12	; 18
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_voidSetPinValue+0xde>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	6a 95       	dec	r22
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_voidSetPinValue+0xda>
    1028:	82 2b       	or	r24, r18
    102a:	82 bb       	out	0x12, r24	; 18
    102c:	08 95       	ret
    102e:	22 b3       	in	r18, 0x12	; 18
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_voidSetPinValue+0xf4>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	6a 95       	dec	r22
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_voidSetPinValue+0xf0>
    103e:	80 95       	com	r24
    1040:	82 23       	and	r24, r18
    1042:	82 bb       	out	0x12, r24	; 18
    1044:	08 95       	ret

00001046 <DIO_voidGetPinValue>:
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	c0 f5       	brcc	.+112    	; 0x10ba <DIO_voidGetPinValue+0x74>
    104a:	68 30       	cpi	r22, 0x08	; 8
    104c:	b0 f5       	brcc	.+108    	; 0x10ba <DIO_voidGetPinValue+0x74>
    104e:	41 15       	cp	r20, r1
    1050:	51 05       	cpc	r21, r1
    1052:	99 f1       	breq	.+102    	; 0x10ba <DIO_voidGetPinValue+0x74>
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	89 f0       	breq	.+34     	; 0x107a <DIO_voidGetPinValue+0x34>
    1058:	28 f0       	brcs	.+10     	; 0x1064 <DIO_voidGetPinValue+0x1e>
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	c9 f0       	breq	.+50     	; 0x1090 <DIO_voidGetPinValue+0x4a>
    105e:	83 30       	cpi	r24, 0x03	; 3
    1060:	11 f1       	breq	.+68     	; 0x10a6 <DIO_voidGetPinValue+0x60>
    1062:	08 95       	ret
    1064:	89 b3       	in	r24, 0x19	; 25
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_voidGetPinValue+0x28>
    106a:	95 95       	asr	r25
    106c:	87 95       	ror	r24
    106e:	6a 95       	dec	r22
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_voidGetPinValue+0x24>
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	fa 01       	movw	r30, r20
    1076:	80 83       	st	Z, r24
    1078:	08 95       	ret
    107a:	86 b3       	in	r24, 0x16	; 22
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_voidGetPinValue+0x3e>
    1080:	95 95       	asr	r25
    1082:	87 95       	ror	r24
    1084:	6a 95       	dec	r22
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_voidGetPinValue+0x3a>
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	fa 01       	movw	r30, r20
    108c:	80 83       	st	Z, r24
    108e:	08 95       	ret
    1090:	83 b3       	in	r24, 0x13	; 19
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_voidGetPinValue+0x54>
    1096:	95 95       	asr	r25
    1098:	87 95       	ror	r24
    109a:	6a 95       	dec	r22
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_voidGetPinValue+0x50>
    109e:	81 70       	andi	r24, 0x01	; 1
    10a0:	fa 01       	movw	r30, r20
    10a2:	80 83       	st	Z, r24
    10a4:	08 95       	ret
    10a6:	80 b3       	in	r24, 0x10	; 16
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_voidGetPinValue+0x6a>
    10ac:	95 95       	asr	r25
    10ae:	87 95       	ror	r24
    10b0:	6a 95       	dec	r22
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_voidGetPinValue+0x66>
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	fa 01       	movw	r30, r20
    10b8:	80 83       	st	Z, r24
    10ba:	08 95       	ret

000010bc <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	a8 f5       	brcc	.+106    	; 0x112a <DIO_voidActivePinInPullUpResistance+0x6e>
    10c0:	68 30       	cpi	r22, 0x08	; 8
    10c2:	98 f5       	brcc	.+102    	; 0x112a <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	89 f0       	breq	.+34     	; 0x10ea <DIO_voidActivePinInPullUpResistance+0x2e>
    10c8:	28 f0       	brcs	.+10     	; 0x10d4 <DIO_voidActivePinInPullUpResistance+0x18>
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	c9 f0       	breq	.+50     	; 0x1100 <DIO_voidActivePinInPullUpResistance+0x44>
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	11 f1       	breq	.+68     	; 0x1116 <DIO_voidActivePinInPullUpResistance+0x5a>
    10d2:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    10d4:	2b b3       	in	r18, 0x1b	; 27
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_voidActivePinInPullUpResistance+0x24>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	6a 95       	dec	r22
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_voidActivePinInPullUpResistance+0x20>
    10e4:	82 2b       	or	r24, r18
    10e6:	8b bb       	out	0x1b, r24	; 27
			break;
    10e8:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    10ea:	28 b3       	in	r18, 0x18	; 24
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <DIO_voidActivePinInPullUpResistance+0x3a>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	6a 95       	dec	r22
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <DIO_voidActivePinInPullUpResistance+0x36>
    10fa:	82 2b       	or	r24, r18
    10fc:	88 bb       	out	0x18, r24	; 24
			break;
    10fe:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    1100:	25 b3       	in	r18, 0x15	; 21
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_voidActivePinInPullUpResistance+0x50>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	6a 95       	dec	r22
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_voidActivePinInPullUpResistance+0x4c>
    1110:	82 2b       	or	r24, r18
    1112:	85 bb       	out	0x15, r24	; 21
			break;
    1114:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    1116:	22 b3       	in	r18, 0x12	; 18
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_voidActivePinInPullUpResistance+0x66>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	6a 95       	dec	r22
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_voidActivePinInPullUpResistance+0x62>
    1126:	82 2b       	or	r24, r18
    1128:	82 bb       	out	0x12, r24	; 18
    112a:	08 95       	ret

0000112c <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    112c:	8f b7       	in	r24, 0x3f	; 63
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	8f bf       	out	0x3f, r24	; 63
    1132:	08 95       	ret

00001134 <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel A)*/
	SET_BIT(TCCR1B_REG, WGM13);
    1134:	8e b5       	in	r24, 0x2e	; 46
    1136:	80 61       	ori	r24, 0x10	; 16
    1138:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    113a:	8e b5       	in	r24, 0x2e	; 46
    113c:	88 60       	ori	r24, 0x08	; 8
    113e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    1140:	8f b5       	in	r24, 0x2f	; 47
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    1146:	8f b5       	in	r24, 0x2f	; 47
    1148:	8e 7f       	andi	r24, 0xFE	; 254
    114a:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1A1);
    114c:	8f b5       	in	r24, 0x2f	; 47
    114e:	80 68       	ori	r24, 0x80	; 128
    1150:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0);
    1152:	8f b5       	in	r24, 0x2f	; 47
    1154:	8f 7b       	andi	r24, 0xBF	; 191
    1156:	8f bd       	out	0x2f, r24	; 47
    1158:	08 95       	ret

0000115a <PWM_voidGenerateChannel_1A>:
}



void PWM_voidGenerateChannel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
    1168:	6a 01       	movw	r12, r20
    116a:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	48 ec       	ldi	r20, 0xC8	; 200
    1172:	52 e4       	ldi	r21, 0x42	; 66
    1174:	c7 01       	movw	r24, r14
    1176:	b6 01       	movw	r22, r12
    1178:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__cmpsf2>
    117c:	18 16       	cp	r1, r24
    117e:	94 f1       	brlt	.+100    	; 0x11e4 <PWM_voidGenerateChannel_1A+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    1180:	9e 01       	movw	r18, r28
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	60 e9       	ldi	r22, 0x90	; 144
    1188:	70 ed       	ldi	r23, 0xD0	; 208
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__udivmodsi4>
    1192:	21 50       	subi	r18, 0x01	; 1
    1194:	31 09       	sbc	r19, r1
    1196:	37 bd       	out	0x27, r19	; 39
    1198:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1A_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    119a:	66 b5       	in	r22, 0x26	; 38
    119c:	77 b5       	in	r23, 0x27	; 39
    119e:	6f 5f       	subi	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 0d 0b 	call	0x161a	; 0x161a <__floatunsisf>
    11aa:	a7 01       	movw	r20, r14
    11ac:	96 01       	movw	r18, r12
    11ae:	0e 94 bf 0b 	call	0x177e	; 0x177e <__mulsf3>
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	48 ec       	ldi	r20, 0xC8	; 200
    11b8:	52 e4       	ldi	r21, 0x42	; 66
    11ba:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <__divsf3>
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__subsf3>
    11ca:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__fixunssfsi>
    11ce:	7b bd       	out	0x2b, r23	; 43
    11d0:	6a bd       	out	0x2a, r22	; 42
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    11d2:	8e b5       	in	r24, 0x2e	; 46
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    11d8:	8e b5       	in	r24, 0x2e	; 46
    11da:	82 60       	ori	r24, 0x02	; 2
    11dc:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    11de:	8e b5       	in	r24, 0x2e	; 46
    11e0:	8b 7f       	andi	r24, 0xFB	; 251
    11e2:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	df 90       	pop	r13
    11ee:	cf 90       	pop	r12
    11f0:	08 95       	ret

000011f2 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    11f2:	83 b7       	in	r24, 0x33	; 51
    11f4:	8f 7b       	andi	r24, 0xBF	; 191
    11f6:	83 bf       	out	0x33, r24	; 51
    11f8:	83 b7       	in	r24, 0x33	; 51
    11fa:	88 60       	ori	r24, 0x08	; 8
    11fc:	83 bf       	out	0x33, r24	; 51
    11fe:	83 b7       	in	r24, 0x33	; 51
    1200:	8f 7e       	andi	r24, 0xEF	; 239
    1202:	83 bf       	out	0x33, r24	; 51
    1204:	83 b7       	in	r24, 0x33	; 51
    1206:	8f 7d       	andi	r24, 0xDF	; 223
    1208:	83 bf       	out	0x33, r24	; 51
    120a:	89 b7       	in	r24, 0x39	; 57
    120c:	82 60       	ori	r24, 0x02	; 2
    120e:	89 bf       	out	0x39, r24	; 57
    1210:	89 ef       	ldi	r24, 0xF9	; 249
    1212:	8c bf       	out	0x3c, r24	; 60
    1214:	08 95       	ret

00001216 <TMR0_voidStart>:
    1216:	83 b7       	in	r24, 0x33	; 51
    1218:	81 60       	ori	r24, 0x01	; 1
    121a:	83 bf       	out	0x33, r24	; 51
    121c:	83 b7       	in	r24, 0x33	; 51
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	83 bf       	out	0x33, r24	; 51
    1222:	83 b7       	in	r24, 0x33	; 51
    1224:	8b 7f       	andi	r24, 0xFB	; 251
    1226:	83 bf       	out	0x33, r24	; 51
    1228:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <local_u16Counter+0x1>
    122c:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <local_u16Counter>
    1230:	08 95       	ret

00001232 <TMR0_voidStop>:
    1232:	83 b7       	in	r24, 0x33	; 51
    1234:	8e 7f       	andi	r24, 0xFE	; 254
    1236:	83 bf       	out	0x33, r24	; 51
    1238:	83 b7       	in	r24, 0x33	; 51
    123a:	8d 7f       	andi	r24, 0xFD	; 253
    123c:	83 bf       	out	0x33, r24	; 51
    123e:	83 b7       	in	r24, 0x33	; 51
    1240:	8b 7f       	andi	r24, 0xFB	; 251
    1242:	83 bf       	out	0x33, r24	; 51
    1244:	08 95       	ret

00001246 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	21 f0       	breq	.+8      	; 0x1252 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    124a:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <PRV_pFunCallBackCTC+0x1>
    124e:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <PRV_pFunCallBackCTC>
    1252:	08 95       	ret

00001254 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    1254:	88 b7       	in	r24, 0x38	; 56
    1256:	82 60       	ori	r24, 0x02	; 2
    1258:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    125a:	88 b7       	in	r24, 0x38	; 56
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	88 bf       	out	0x38, r24	; 56
    1260:	08 95       	ret

00001262 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	2f 93       	push	r18
    126e:	3f 93       	push	r19
    1270:	4f 93       	push	r20
    1272:	5f 93       	push	r21
    1274:	6f 93       	push	r22
    1276:	7f 93       	push	r23
    1278:	8f 93       	push	r24
    127a:	9f 93       	push	r25
    127c:	af 93       	push	r26
    127e:	bf 93       	push	r27
    1280:	ef 93       	push	r30
    1282:	ff 93       	push	r31
	
	
	local_u16Counter++;
    1284:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <local_u16Counter>
    1288:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <local_u16Counter+0x1>
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <local_u16Counter+0x1>
    1292:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    1296:	88 3e       	cpi	r24, 0xE8	; 232
    1298:	93 40       	sbci	r25, 0x03	; 3
    129a:	69 f4       	brne	.+26     	; 0x12b6 <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    129c:	81 e7       	ldi	r24, 0x71	; 113
    129e:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    12a0:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <local_u16Counter+0x1>
    12a4:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    12a8:	e0 91 f2 02 	lds	r30, 0x02F2	; 0x8002f2 <PRV_pFunCallBackOVF>
    12ac:	f0 91 f3 02 	lds	r31, 0x02F3	; 0x8002f3 <PRV_pFunCallBackOVF+0x1>
    12b0:	30 97       	sbiw	r30, 0x00	; 0
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    12b4:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	ef 93       	push	r30
    12f8:	ff 93       	push	r31
	

	
	local_u16Counter++;
    12fa:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <local_u16Counter>
    12fe:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <local_u16Counter+0x1>
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <local_u16Counter+0x1>
    1308:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    130c:	88 38       	cpi	r24, 0x88	; 136
    130e:	93 41       	sbci	r25, 0x13	; 19
    1310:	69 f4       	brne	.+26     	; 0x132c <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    1312:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <local_u16Counter+0x1>
    1316:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    131a:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <PRV_pFunCallBackCTC>
    131e:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <PRV_pFunCallBackCTC+0x1>
    1322:	30 97       	sbiw	r30, 0x00	; 0
    1324:	19 f0       	breq	.+6      	; 0x132c <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    1326:	09 95       	icall
			TMR0clear_flag();
    1328:	0e 94 2a 09 	call	0x1254	; 0x1254 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <TWI_voidInitMaster>:
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
		
		while(0==GET_BIT(TWCR_REG,TWINT));
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    134e:	8c e0       	ldi	r24, 0x0C	; 12
    1350:	80 b9       	out	0x00, r24	; 0
    1352:	81 b1       	in	r24, 0x01	; 1
    1354:	8d 7f       	andi	r24, 0xFD	; 253
    1356:	81 b9       	out	0x01, r24	; 1
    1358:	81 b1       	in	r24, 0x01	; 1
    135a:	8e 7f       	andi	r24, 0xFE	; 254
    135c:	81 b9       	out	0x01, r24	; 1
    135e:	86 b7       	in	r24, 0x36	; 54
    1360:	84 60       	ori	r24, 0x04	; 4
    1362:	86 bf       	out	0x36, r24	; 54
    1364:	08 95       	ret

00001366 <TWI_voidSendStartCondition>:
    1366:	86 b7       	in	r24, 0x36	; 54
    1368:	80 62       	ori	r24, 0x20	; 32
    136a:	86 bf       	out	0x36, r24	; 54
    136c:	86 b7       	in	r24, 0x36	; 54
    136e:	80 68       	ori	r24, 0x80	; 128
    1370:	86 bf       	out	0x36, r24	; 54
    1372:	06 b6       	in	r0, 0x36	; 54
    1374:	07 fe       	sbrs	r0, 7
    1376:	fd cf       	rjmp	.-6      	; 0x1372 <TWI_voidSendStartCondition+0xc>
    1378:	81 b1       	in	r24, 0x01	; 1
    137a:	88 7f       	andi	r24, 0xF8	; 248
    137c:	88 30       	cpi	r24, 0x08	; 8
    137e:	e1 f7       	brne	.-8      	; 0x1378 <TWI_voidSendStartCondition+0x12>
    1380:	08 95       	ret

00001382 <TWI_voidSendStopCondition>:
    1382:	86 b7       	in	r24, 0x36	; 54
    1384:	80 61       	ori	r24, 0x10	; 16
    1386:	86 bf       	out	0x36, r24	; 54
    1388:	86 b7       	in	r24, 0x36	; 54
    138a:	80 68       	ori	r24, 0x80	; 128
    138c:	86 bf       	out	0x36, r24	; 54
    138e:	08 95       	ret

00001390 <TWI_voidSendSlaveAddWithWrite>:
    1390:	88 23       	and	r24, r24
    1392:	94 f0       	brlt	.+36     	; 0x13b8 <TWI_voidSendSlaveAddWithWrite+0x28>
    1394:	88 0f       	add	r24, r24
    1396:	83 b9       	out	0x03, r24	; 3
    1398:	83 b1       	in	r24, 0x03	; 3
    139a:	8e 7f       	andi	r24, 0xFE	; 254
    139c:	83 b9       	out	0x03, r24	; 3
    139e:	86 b7       	in	r24, 0x36	; 54
    13a0:	8f 7d       	andi	r24, 0xDF	; 223
    13a2:	86 bf       	out	0x36, r24	; 54
    13a4:	86 b7       	in	r24, 0x36	; 54
    13a6:	80 68       	ori	r24, 0x80	; 128
    13a8:	86 bf       	out	0x36, r24	; 54
    13aa:	06 b6       	in	r0, 0x36	; 54
    13ac:	07 fe       	sbrs	r0, 7
    13ae:	fd cf       	rjmp	.-6      	; 0x13aa <TWI_voidSendSlaveAddWithWrite+0x1a>
    13b0:	81 b1       	in	r24, 0x01	; 1
    13b2:	88 7f       	andi	r24, 0xF8	; 248
    13b4:	88 31       	cpi	r24, 0x18	; 24
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <TWI_voidSendSlaveAddWithWrite+0x20>
    13b8:	08 95       	ret

000013ba <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    13ba:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    13bc:	86 b7       	in	r24, 0x36	; 54
    13be:	80 68       	ori	r24, 0x80	; 128
    13c0:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    13c2:	06 b6       	in	r0, 0x36	; 54
    13c4:	07 fe       	sbrs	r0, 7
    13c6:	fd cf       	rjmp	.-6      	; 0x13c2 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    13c8:	81 b1       	in	r24, 0x01	; 1
    13ca:	88 7f       	andi	r24, 0xF8	; 248
    13cc:	88 32       	cpi	r24, 0x28	; 40
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <TWI_voidTransmitMasterDataByte+0xe>
}
    13d0:	08 95       	ret

000013d2 <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    13d2:	8b b1       	in	r24, 0x0b	; 11
    13d4:	8d 7f       	andi	r24, 0xFD	; 253
    13d6:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    13d8:	87 e6       	ldi	r24, 0x67	; 103
    13da:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    13dc:	8a b1       	in	r24, 0x0a	; 10
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    13e2:	86 e8       	ldi	r24, 0x86	; 134
    13e4:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    13e6:	8a b1       	in	r24, 0x0a	; 10
    13e8:	80 61       	ori	r24, 0x10	; 16
    13ea:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    13ec:	8a b1       	in	r24, 0x0a	; 10
    13ee:	88 60       	ori	r24, 0x08	; 8
    13f0:	8a b9       	out	0x0a, r24	; 10
    13f2:	08 95       	ret

000013f4 <__subsf3>:
    13f4:	50 58       	subi	r21, 0x80	; 128

000013f6 <__addsf3>:
    13f6:	bb 27       	eor	r27, r27
    13f8:	aa 27       	eor	r26, r26
    13fa:	0e 94 12 0a 	call	0x1424	; 0x1424 <__addsf3x>
    13fe:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_round>
    1402:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_pscA>
    1406:	38 f0       	brcs	.+14     	; 0x1416 <__addsf3+0x20>
    1408:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fp_pscB>
    140c:	20 f0       	brcs	.+8      	; 0x1416 <__addsf3+0x20>
    140e:	39 f4       	brne	.+14     	; 0x141e <__addsf3+0x28>
    1410:	9f 3f       	cpi	r25, 0xFF	; 255
    1412:	19 f4       	brne	.+6      	; 0x141a <__addsf3+0x24>
    1414:	26 f4       	brtc	.+8      	; 0x141e <__addsf3+0x28>
    1416:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__fp_nan>
    141a:	0e f4       	brtc	.+2      	; 0x141e <__addsf3+0x28>
    141c:	e0 95       	com	r30
    141e:	e7 fb       	bst	r30, 7
    1420:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_inf>

00001424 <__addsf3x>:
    1424:	e9 2f       	mov	r30, r25
    1426:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_split3>
    142a:	58 f3       	brcs	.-42     	; 0x1402 <__addsf3+0xc>
    142c:	ba 17       	cp	r27, r26
    142e:	62 07       	cpc	r22, r18
    1430:	73 07       	cpc	r23, r19
    1432:	84 07       	cpc	r24, r20
    1434:	95 07       	cpc	r25, r21
    1436:	20 f0       	brcs	.+8      	; 0x1440 <__addsf3x+0x1c>
    1438:	79 f4       	brne	.+30     	; 0x1458 <__addsf3x+0x34>
    143a:	a6 f5       	brtc	.+104    	; 0x14a4 <__addsf3x+0x80>
    143c:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_zero>
    1440:	0e f4       	brtc	.+2      	; 0x1444 <__addsf3x+0x20>
    1442:	e0 95       	com	r30
    1444:	0b 2e       	mov	r0, r27
    1446:	ba 2f       	mov	r27, r26
    1448:	a0 2d       	mov	r26, r0
    144a:	0b 01       	movw	r0, r22
    144c:	b9 01       	movw	r22, r18
    144e:	90 01       	movw	r18, r0
    1450:	0c 01       	movw	r0, r24
    1452:	ca 01       	movw	r24, r20
    1454:	a0 01       	movw	r20, r0
    1456:	11 24       	eor	r1, r1
    1458:	ff 27       	eor	r31, r31
    145a:	59 1b       	sub	r21, r25
    145c:	99 f0       	breq	.+38     	; 0x1484 <__addsf3x+0x60>
    145e:	59 3f       	cpi	r21, 0xF9	; 249
    1460:	50 f4       	brcc	.+20     	; 0x1476 <__addsf3x+0x52>
    1462:	50 3e       	cpi	r21, 0xE0	; 224
    1464:	68 f1       	brcs	.+90     	; 0x14c0 <__addsf3x+0x9c>
    1466:	1a 16       	cp	r1, r26
    1468:	f0 40       	sbci	r31, 0x00	; 0
    146a:	a2 2f       	mov	r26, r18
    146c:	23 2f       	mov	r18, r19
    146e:	34 2f       	mov	r19, r20
    1470:	44 27       	eor	r20, r20
    1472:	58 5f       	subi	r21, 0xF8	; 248
    1474:	f3 cf       	rjmp	.-26     	; 0x145c <__addsf3x+0x38>
    1476:	46 95       	lsr	r20
    1478:	37 95       	ror	r19
    147a:	27 95       	ror	r18
    147c:	a7 95       	ror	r26
    147e:	f0 40       	sbci	r31, 0x00	; 0
    1480:	53 95       	inc	r21
    1482:	c9 f7       	brne	.-14     	; 0x1476 <__addsf3x+0x52>
    1484:	7e f4       	brtc	.+30     	; 0x14a4 <__addsf3x+0x80>
    1486:	1f 16       	cp	r1, r31
    1488:	ba 0b       	sbc	r27, r26
    148a:	62 0b       	sbc	r22, r18
    148c:	73 0b       	sbc	r23, r19
    148e:	84 0b       	sbc	r24, r20
    1490:	ba f0       	brmi	.+46     	; 0x14c0 <__addsf3x+0x9c>
    1492:	91 50       	subi	r25, 0x01	; 1
    1494:	a1 f0       	breq	.+40     	; 0x14be <__addsf3x+0x9a>
    1496:	ff 0f       	add	r31, r31
    1498:	bb 1f       	adc	r27, r27
    149a:	66 1f       	adc	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	c2 f7       	brpl	.-16     	; 0x1492 <__addsf3x+0x6e>
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <__addsf3x+0x9c>
    14a4:	ba 0f       	add	r27, r26
    14a6:	62 1f       	adc	r22, r18
    14a8:	73 1f       	adc	r23, r19
    14aa:	84 1f       	adc	r24, r20
    14ac:	48 f4       	brcc	.+18     	; 0x14c0 <__addsf3x+0x9c>
    14ae:	87 95       	ror	r24
    14b0:	77 95       	ror	r23
    14b2:	67 95       	ror	r22
    14b4:	b7 95       	ror	r27
    14b6:	f7 95       	ror	r31
    14b8:	9e 3f       	cpi	r25, 0xFE	; 254
    14ba:	08 f0       	brcs	.+2      	; 0x14be <__addsf3x+0x9a>
    14bc:	b0 cf       	rjmp	.-160    	; 0x141e <__addsf3+0x28>
    14be:	93 95       	inc	r25
    14c0:	88 0f       	add	r24, r24
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <__addsf3x+0xa2>
    14c4:	99 27       	eor	r25, r25
    14c6:	ee 0f       	add	r30, r30
    14c8:	97 95       	ror	r25
    14ca:	87 95       	ror	r24
    14cc:	08 95       	ret

000014ce <__cmpsf2>:
    14ce:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__fp_cmp>
    14d2:	08 f4       	brcc	.+2      	; 0x14d6 <__cmpsf2+0x8>
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	08 95       	ret

000014d8 <__divsf3>:
    14d8:	0e 94 80 0a 	call	0x1500	; 0x1500 <__divsf3x>
    14dc:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_round>
    14e0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fp_pscB>
    14e4:	58 f0       	brcs	.+22     	; 0x14fc <__divsf3+0x24>
    14e6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_pscA>
    14ea:	40 f0       	brcs	.+16     	; 0x14fc <__divsf3+0x24>
    14ec:	29 f4       	brne	.+10     	; 0x14f8 <__divsf3+0x20>
    14ee:	5f 3f       	cpi	r21, 0xFF	; 255
    14f0:	29 f0       	breq	.+10     	; 0x14fc <__divsf3+0x24>
    14f2:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_inf>
    14f6:	51 11       	cpse	r21, r1
    14f8:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>
    14fc:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__fp_nan>

00001500 <__divsf3x>:
    1500:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_split3>
    1504:	68 f3       	brcs	.-38     	; 0x14e0 <__divsf3+0x8>

00001506 <__divsf3_pse>:
    1506:	99 23       	and	r25, r25
    1508:	b1 f3       	breq	.-20     	; 0x14f6 <__divsf3+0x1e>
    150a:	55 23       	and	r21, r21
    150c:	91 f3       	breq	.-28     	; 0x14f2 <__divsf3+0x1a>
    150e:	95 1b       	sub	r25, r21
    1510:	55 0b       	sbc	r21, r21
    1512:	bb 27       	eor	r27, r27
    1514:	aa 27       	eor	r26, r26
    1516:	62 17       	cp	r22, r18
    1518:	73 07       	cpc	r23, r19
    151a:	84 07       	cpc	r24, r20
    151c:	38 f0       	brcs	.+14     	; 0x152c <__divsf3_pse+0x26>
    151e:	9f 5f       	subi	r25, 0xFF	; 255
    1520:	5f 4f       	sbci	r21, 0xFF	; 255
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	44 1f       	adc	r20, r20
    1528:	aa 1f       	adc	r26, r26
    152a:	a9 f3       	breq	.-22     	; 0x1516 <__divsf3_pse+0x10>
    152c:	35 d0       	rcall	.+106    	; 0x1598 <__divsf3_pse+0x92>
    152e:	0e 2e       	mov	r0, r30
    1530:	3a f0       	brmi	.+14     	; 0x1540 <__divsf3_pse+0x3a>
    1532:	e0 e8       	ldi	r30, 0x80	; 128
    1534:	32 d0       	rcall	.+100    	; 0x159a <__divsf3_pse+0x94>
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	e6 95       	lsr	r30
    153c:	00 1c       	adc	r0, r0
    153e:	ca f7       	brpl	.-14     	; 0x1532 <__divsf3_pse+0x2c>
    1540:	2b d0       	rcall	.+86     	; 0x1598 <__divsf3_pse+0x92>
    1542:	fe 2f       	mov	r31, r30
    1544:	29 d0       	rcall	.+82     	; 0x1598 <__divsf3_pse+0x92>
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	bb 1f       	adc	r27, r27
    154e:	26 17       	cp	r18, r22
    1550:	37 07       	cpc	r19, r23
    1552:	48 07       	cpc	r20, r24
    1554:	ab 07       	cpc	r26, r27
    1556:	b0 e8       	ldi	r27, 0x80	; 128
    1558:	09 f0       	breq	.+2      	; 0x155c <__divsf3_pse+0x56>
    155a:	bb 0b       	sbc	r27, r27
    155c:	80 2d       	mov	r24, r0
    155e:	bf 01       	movw	r22, r30
    1560:	ff 27       	eor	r31, r31
    1562:	93 58       	subi	r25, 0x83	; 131
    1564:	5f 4f       	sbci	r21, 0xFF	; 255
    1566:	3a f0       	brmi	.+14     	; 0x1576 <__divsf3_pse+0x70>
    1568:	9e 3f       	cpi	r25, 0xFE	; 254
    156a:	51 05       	cpc	r21, r1
    156c:	78 f0       	brcs	.+30     	; 0x158c <__divsf3_pse+0x86>
    156e:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_inf>
    1572:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>
    1576:	5f 3f       	cpi	r21, 0xFF	; 255
    1578:	e4 f3       	brlt	.-8      	; 0x1572 <__divsf3_pse+0x6c>
    157a:	98 3e       	cpi	r25, 0xE8	; 232
    157c:	d4 f3       	brlt	.-12     	; 0x1572 <__divsf3_pse+0x6c>
    157e:	86 95       	lsr	r24
    1580:	77 95       	ror	r23
    1582:	67 95       	ror	r22
    1584:	b7 95       	ror	r27
    1586:	f7 95       	ror	r31
    1588:	9f 5f       	subi	r25, 0xFF	; 255
    158a:	c9 f7       	brne	.-14     	; 0x157e <__divsf3_pse+0x78>
    158c:	88 0f       	add	r24, r24
    158e:	91 1d       	adc	r25, r1
    1590:	96 95       	lsr	r25
    1592:	87 95       	ror	r24
    1594:	97 f9       	bld	r25, 7
    1596:	08 95       	ret
    1598:	e1 e0       	ldi	r30, 0x01	; 1
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	88 1f       	adc	r24, r24
    15a0:	bb 1f       	adc	r27, r27
    15a2:	62 17       	cp	r22, r18
    15a4:	73 07       	cpc	r23, r19
    15a6:	84 07       	cpc	r24, r20
    15a8:	ba 07       	cpc	r27, r26
    15aa:	20 f0       	brcs	.+8      	; 0x15b4 <__divsf3_pse+0xae>
    15ac:	62 1b       	sub	r22, r18
    15ae:	73 0b       	sbc	r23, r19
    15b0:	84 0b       	sbc	r24, r20
    15b2:	ba 0b       	sbc	r27, r26
    15b4:	ee 1f       	adc	r30, r30
    15b6:	88 f7       	brcc	.-30     	; 0x159a <__divsf3_pse+0x94>
    15b8:	e0 95       	com	r30
    15ba:	08 95       	ret

000015bc <__fixunssfsi>:
    15bc:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_splitA>
    15c0:	88 f0       	brcs	.+34     	; 0x15e4 <__fixunssfsi+0x28>
    15c2:	9f 57       	subi	r25, 0x7F	; 127
    15c4:	98 f0       	brcs	.+38     	; 0x15ec <__fixunssfsi+0x30>
    15c6:	b9 2f       	mov	r27, r25
    15c8:	99 27       	eor	r25, r25
    15ca:	b7 51       	subi	r27, 0x17	; 23
    15cc:	b0 f0       	brcs	.+44     	; 0x15fa <__fixunssfsi+0x3e>
    15ce:	e1 f0       	breq	.+56     	; 0x1608 <__fixunssfsi+0x4c>
    15d0:	66 0f       	add	r22, r22
    15d2:	77 1f       	adc	r23, r23
    15d4:	88 1f       	adc	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	1a f0       	brmi	.+6      	; 0x15e0 <__fixunssfsi+0x24>
    15da:	ba 95       	dec	r27
    15dc:	c9 f7       	brne	.-14     	; 0x15d0 <__fixunssfsi+0x14>
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <__fixunssfsi+0x4c>
    15e0:	b1 30       	cpi	r27, 0x01	; 1
    15e2:	91 f0       	breq	.+36     	; 0x1608 <__fixunssfsi+0x4c>
    15e4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__fp_zero>
    15e8:	b1 e0       	ldi	r27, 0x01	; 1
    15ea:	08 95       	ret
    15ec:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__fp_zero>
    15f0:	67 2f       	mov	r22, r23
    15f2:	78 2f       	mov	r23, r24
    15f4:	88 27       	eor	r24, r24
    15f6:	b8 5f       	subi	r27, 0xF8	; 248
    15f8:	39 f0       	breq	.+14     	; 0x1608 <__fixunssfsi+0x4c>
    15fa:	b9 3f       	cpi	r27, 0xF9	; 249
    15fc:	cc f3       	brlt	.-14     	; 0x15f0 <__fixunssfsi+0x34>
    15fe:	86 95       	lsr	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b3 95       	inc	r27
    1606:	d9 f7       	brne	.-10     	; 0x15fe <__fixunssfsi+0x42>
    1608:	3e f4       	brtc	.+14     	; 0x1618 <__fixunssfsi+0x5c>
    160a:	90 95       	com	r25
    160c:	80 95       	com	r24
    160e:	70 95       	com	r23
    1610:	61 95       	neg	r22
    1612:	7f 4f       	sbci	r23, 0xFF	; 255
    1614:	8f 4f       	sbci	r24, 0xFF	; 255
    1616:	9f 4f       	sbci	r25, 0xFF	; 255
    1618:	08 95       	ret

0000161a <__floatunsisf>:
    161a:	e8 94       	clt
    161c:	09 c0       	rjmp	.+18     	; 0x1630 <__floatsisf+0x12>

0000161e <__floatsisf>:
    161e:	97 fb       	bst	r25, 7
    1620:	3e f4       	brtc	.+14     	; 0x1630 <__floatsisf+0x12>
    1622:	90 95       	com	r25
    1624:	80 95       	com	r24
    1626:	70 95       	com	r23
    1628:	61 95       	neg	r22
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	8f 4f       	sbci	r24, 0xFF	; 255
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	99 23       	and	r25, r25
    1632:	a9 f0       	breq	.+42     	; 0x165e <__floatsisf+0x40>
    1634:	f9 2f       	mov	r31, r25
    1636:	96 e9       	ldi	r25, 0x96	; 150
    1638:	bb 27       	eor	r27, r27
    163a:	93 95       	inc	r25
    163c:	f6 95       	lsr	r31
    163e:	87 95       	ror	r24
    1640:	77 95       	ror	r23
    1642:	67 95       	ror	r22
    1644:	b7 95       	ror	r27
    1646:	f1 11       	cpse	r31, r1
    1648:	f8 cf       	rjmp	.-16     	; 0x163a <__floatsisf+0x1c>
    164a:	fa f4       	brpl	.+62     	; 0x168a <__floatsisf+0x6c>
    164c:	bb 0f       	add	r27, r27
    164e:	11 f4       	brne	.+4      	; 0x1654 <__floatsisf+0x36>
    1650:	60 ff       	sbrs	r22, 0
    1652:	1b c0       	rjmp	.+54     	; 0x168a <__floatsisf+0x6c>
    1654:	6f 5f       	subi	r22, 0xFF	; 255
    1656:	7f 4f       	sbci	r23, 0xFF	; 255
    1658:	8f 4f       	sbci	r24, 0xFF	; 255
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	16 c0       	rjmp	.+44     	; 0x168a <__floatsisf+0x6c>
    165e:	88 23       	and	r24, r24
    1660:	11 f0       	breq	.+4      	; 0x1666 <__floatsisf+0x48>
    1662:	96 e9       	ldi	r25, 0x96	; 150
    1664:	11 c0       	rjmp	.+34     	; 0x1688 <__floatsisf+0x6a>
    1666:	77 23       	and	r23, r23
    1668:	21 f0       	breq	.+8      	; 0x1672 <__floatsisf+0x54>
    166a:	9e e8       	ldi	r25, 0x8E	; 142
    166c:	87 2f       	mov	r24, r23
    166e:	76 2f       	mov	r23, r22
    1670:	05 c0       	rjmp	.+10     	; 0x167c <__floatsisf+0x5e>
    1672:	66 23       	and	r22, r22
    1674:	71 f0       	breq	.+28     	; 0x1692 <__floatsisf+0x74>
    1676:	96 e8       	ldi	r25, 0x86	; 134
    1678:	86 2f       	mov	r24, r22
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	2a f0       	brmi	.+10     	; 0x168a <__floatsisf+0x6c>
    1680:	9a 95       	dec	r25
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	88 1f       	adc	r24, r24
    1688:	da f7       	brpl	.-10     	; 0x1680 <__floatsisf+0x62>
    168a:	88 0f       	add	r24, r24
    168c:	96 95       	lsr	r25
    168e:	87 95       	ror	r24
    1690:	97 f9       	bld	r25, 7
    1692:	08 95       	ret

00001694 <__fp_cmp>:
    1694:	99 0f       	add	r25, r25
    1696:	00 08       	sbc	r0, r0
    1698:	55 0f       	add	r21, r21
    169a:	aa 0b       	sbc	r26, r26
    169c:	e0 e8       	ldi	r30, 0x80	; 128
    169e:	fe ef       	ldi	r31, 0xFE	; 254
    16a0:	16 16       	cp	r1, r22
    16a2:	17 06       	cpc	r1, r23
    16a4:	e8 07       	cpc	r30, r24
    16a6:	f9 07       	cpc	r31, r25
    16a8:	c0 f0       	brcs	.+48     	; 0x16da <__fp_cmp+0x46>
    16aa:	12 16       	cp	r1, r18
    16ac:	13 06       	cpc	r1, r19
    16ae:	e4 07       	cpc	r30, r20
    16b0:	f5 07       	cpc	r31, r21
    16b2:	98 f0       	brcs	.+38     	; 0x16da <__fp_cmp+0x46>
    16b4:	62 1b       	sub	r22, r18
    16b6:	73 0b       	sbc	r23, r19
    16b8:	84 0b       	sbc	r24, r20
    16ba:	95 0b       	sbc	r25, r21
    16bc:	39 f4       	brne	.+14     	; 0x16cc <__fp_cmp+0x38>
    16be:	0a 26       	eor	r0, r26
    16c0:	61 f0       	breq	.+24     	; 0x16da <__fp_cmp+0x46>
    16c2:	23 2b       	or	r18, r19
    16c4:	24 2b       	or	r18, r20
    16c6:	25 2b       	or	r18, r21
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <__fp_cmp+0x3e>
    16ca:	08 95       	ret
    16cc:	0a 26       	eor	r0, r26
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <__fp_cmp+0x3e>
    16d0:	a1 40       	sbci	r26, 0x01	; 1
    16d2:	a6 95       	lsr	r26
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	81 1d       	adc	r24, r1
    16d8:	81 1d       	adc	r24, r1
    16da:	08 95       	ret

000016dc <__fp_inf>:
    16dc:	97 f9       	bld	r25, 7
    16de:	9f 67       	ori	r25, 0x7F	; 127
    16e0:	80 e8       	ldi	r24, 0x80	; 128
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	08 95       	ret

000016e8 <__fp_nan>:
    16e8:	9f ef       	ldi	r25, 0xFF	; 255
    16ea:	80 ec       	ldi	r24, 0xC0	; 192
    16ec:	08 95       	ret

000016ee <__fp_pscA>:
    16ee:	00 24       	eor	r0, r0
    16f0:	0a 94       	dec	r0
    16f2:	16 16       	cp	r1, r22
    16f4:	17 06       	cpc	r1, r23
    16f6:	18 06       	cpc	r1, r24
    16f8:	09 06       	cpc	r0, r25
    16fa:	08 95       	ret

000016fc <__fp_pscB>:
    16fc:	00 24       	eor	r0, r0
    16fe:	0a 94       	dec	r0
    1700:	12 16       	cp	r1, r18
    1702:	13 06       	cpc	r1, r19
    1704:	14 06       	cpc	r1, r20
    1706:	05 06       	cpc	r0, r21
    1708:	08 95       	ret

0000170a <__fp_round>:
    170a:	09 2e       	mov	r0, r25
    170c:	03 94       	inc	r0
    170e:	00 0c       	add	r0, r0
    1710:	11 f4       	brne	.+4      	; 0x1716 <__fp_round+0xc>
    1712:	88 23       	and	r24, r24
    1714:	52 f0       	brmi	.+20     	; 0x172a <__fp_round+0x20>
    1716:	bb 0f       	add	r27, r27
    1718:	40 f4       	brcc	.+16     	; 0x172a <__fp_round+0x20>
    171a:	bf 2b       	or	r27, r31
    171c:	11 f4       	brne	.+4      	; 0x1722 <__fp_round+0x18>
    171e:	60 ff       	sbrs	r22, 0
    1720:	04 c0       	rjmp	.+8      	; 0x172a <__fp_round+0x20>
    1722:	6f 5f       	subi	r22, 0xFF	; 255
    1724:	7f 4f       	sbci	r23, 0xFF	; 255
    1726:	8f 4f       	sbci	r24, 0xFF	; 255
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	08 95       	ret

0000172c <__fp_split3>:
    172c:	57 fd       	sbrc	r21, 7
    172e:	90 58       	subi	r25, 0x80	; 128
    1730:	44 0f       	add	r20, r20
    1732:	55 1f       	adc	r21, r21
    1734:	59 f0       	breq	.+22     	; 0x174c <__fp_splitA+0x10>
    1736:	5f 3f       	cpi	r21, 0xFF	; 255
    1738:	71 f0       	breq	.+28     	; 0x1756 <__fp_splitA+0x1a>
    173a:	47 95       	ror	r20

0000173c <__fp_splitA>:
    173c:	88 0f       	add	r24, r24
    173e:	97 fb       	bst	r25, 7
    1740:	99 1f       	adc	r25, r25
    1742:	61 f0       	breq	.+24     	; 0x175c <__fp_splitA+0x20>
    1744:	9f 3f       	cpi	r25, 0xFF	; 255
    1746:	79 f0       	breq	.+30     	; 0x1766 <__fp_splitA+0x2a>
    1748:	87 95       	ror	r24
    174a:	08 95       	ret
    174c:	12 16       	cp	r1, r18
    174e:	13 06       	cpc	r1, r19
    1750:	14 06       	cpc	r1, r20
    1752:	55 1f       	adc	r21, r21
    1754:	f2 cf       	rjmp	.-28     	; 0x173a <__fp_split3+0xe>
    1756:	46 95       	lsr	r20
    1758:	f1 df       	rcall	.-30     	; 0x173c <__fp_splitA>
    175a:	08 c0       	rjmp	.+16     	; 0x176c <__fp_splitA+0x30>
    175c:	16 16       	cp	r1, r22
    175e:	17 06       	cpc	r1, r23
    1760:	18 06       	cpc	r1, r24
    1762:	99 1f       	adc	r25, r25
    1764:	f1 cf       	rjmp	.-30     	; 0x1748 <__fp_splitA+0xc>
    1766:	86 95       	lsr	r24
    1768:	71 05       	cpc	r23, r1
    176a:	61 05       	cpc	r22, r1
    176c:	08 94       	sec
    176e:	08 95       	ret

00001770 <__fp_zero>:
    1770:	e8 94       	clt

00001772 <__fp_szero>:
    1772:	bb 27       	eor	r27, r27
    1774:	66 27       	eor	r22, r22
    1776:	77 27       	eor	r23, r23
    1778:	cb 01       	movw	r24, r22
    177a:	97 f9       	bld	r25, 7
    177c:	08 95       	ret

0000177e <__mulsf3>:
    177e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__mulsf3x>
    1782:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_round>
    1786:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__fp_pscA>
    178a:	38 f0       	brcs	.+14     	; 0x179a <__mulsf3+0x1c>
    178c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__fp_pscB>
    1790:	20 f0       	brcs	.+8      	; 0x179a <__mulsf3+0x1c>
    1792:	95 23       	and	r25, r21
    1794:	11 f0       	breq	.+4      	; 0x179a <__mulsf3+0x1c>
    1796:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_inf>
    179a:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__fp_nan>
    179e:	11 24       	eor	r1, r1
    17a0:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>

000017a4 <__mulsf3x>:
    17a4:	0e 94 96 0b 	call	0x172c	; 0x172c <__fp_split3>
    17a8:	70 f3       	brcs	.-36     	; 0x1786 <__mulsf3+0x8>

000017aa <__mulsf3_pse>:
    17aa:	95 9f       	mul	r25, r21
    17ac:	c1 f3       	breq	.-16     	; 0x179e <__mulsf3+0x20>
    17ae:	95 0f       	add	r25, r21
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	55 1f       	adc	r21, r21
    17b4:	62 9f       	mul	r22, r18
    17b6:	f0 01       	movw	r30, r0
    17b8:	72 9f       	mul	r23, r18
    17ba:	bb 27       	eor	r27, r27
    17bc:	f0 0d       	add	r31, r0
    17be:	b1 1d       	adc	r27, r1
    17c0:	63 9f       	mul	r22, r19
    17c2:	aa 27       	eor	r26, r26
    17c4:	f0 0d       	add	r31, r0
    17c6:	b1 1d       	adc	r27, r1
    17c8:	aa 1f       	adc	r26, r26
    17ca:	64 9f       	mul	r22, r20
    17cc:	66 27       	eor	r22, r22
    17ce:	b0 0d       	add	r27, r0
    17d0:	a1 1d       	adc	r26, r1
    17d2:	66 1f       	adc	r22, r22
    17d4:	82 9f       	mul	r24, r18
    17d6:	22 27       	eor	r18, r18
    17d8:	b0 0d       	add	r27, r0
    17da:	a1 1d       	adc	r26, r1
    17dc:	62 1f       	adc	r22, r18
    17de:	73 9f       	mul	r23, r19
    17e0:	b0 0d       	add	r27, r0
    17e2:	a1 1d       	adc	r26, r1
    17e4:	62 1f       	adc	r22, r18
    17e6:	83 9f       	mul	r24, r19
    17e8:	a0 0d       	add	r26, r0
    17ea:	61 1d       	adc	r22, r1
    17ec:	22 1f       	adc	r18, r18
    17ee:	74 9f       	mul	r23, r20
    17f0:	33 27       	eor	r19, r19
    17f2:	a0 0d       	add	r26, r0
    17f4:	61 1d       	adc	r22, r1
    17f6:	23 1f       	adc	r18, r19
    17f8:	84 9f       	mul	r24, r20
    17fa:	60 0d       	add	r22, r0
    17fc:	21 1d       	adc	r18, r1
    17fe:	82 2f       	mov	r24, r18
    1800:	76 2f       	mov	r23, r22
    1802:	6a 2f       	mov	r22, r26
    1804:	11 24       	eor	r1, r1
    1806:	9f 57       	subi	r25, 0x7F	; 127
    1808:	50 40       	sbci	r21, 0x00	; 0
    180a:	9a f0       	brmi	.+38     	; 0x1832 <__mulsf3_pse+0x88>
    180c:	f1 f0       	breq	.+60     	; 0x184a <__mulsf3_pse+0xa0>
    180e:	88 23       	and	r24, r24
    1810:	4a f0       	brmi	.+18     	; 0x1824 <__mulsf3_pse+0x7a>
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	bb 1f       	adc	r27, r27
    1818:	66 1f       	adc	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	91 50       	subi	r25, 0x01	; 1
    1820:	50 40       	sbci	r21, 0x00	; 0
    1822:	a9 f7       	brne	.-22     	; 0x180e <__mulsf3_pse+0x64>
    1824:	9e 3f       	cpi	r25, 0xFE	; 254
    1826:	51 05       	cpc	r21, r1
    1828:	80 f0       	brcs	.+32     	; 0x184a <__mulsf3_pse+0xa0>
    182a:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_inf>
    182e:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <__fp_szero>
    1832:	5f 3f       	cpi	r21, 0xFF	; 255
    1834:	e4 f3       	brlt	.-8      	; 0x182e <__mulsf3_pse+0x84>
    1836:	98 3e       	cpi	r25, 0xE8	; 232
    1838:	d4 f3       	brlt	.-12     	; 0x182e <__mulsf3_pse+0x84>
    183a:	86 95       	lsr	r24
    183c:	77 95       	ror	r23
    183e:	67 95       	ror	r22
    1840:	b7 95       	ror	r27
    1842:	f7 95       	ror	r31
    1844:	e7 95       	ror	r30
    1846:	9f 5f       	subi	r25, 0xFF	; 255
    1848:	c1 f7       	brne	.-16     	; 0x183a <__mulsf3_pse+0x90>
    184a:	fe 2b       	or	r31, r30
    184c:	88 0f       	add	r24, r24
    184e:	91 1d       	adc	r25, r1
    1850:	96 95       	lsr	r25
    1852:	87 95       	ror	r24
    1854:	97 f9       	bld	r25, 7
    1856:	08 95       	ret

00001858 <__udivmodsi4>:
    1858:	a1 e2       	ldi	r26, 0x21	; 33
    185a:	1a 2e       	mov	r1, r26
    185c:	aa 1b       	sub	r26, r26
    185e:	bb 1b       	sub	r27, r27
    1860:	fd 01       	movw	r30, r26
    1862:	0d c0       	rjmp	.+26     	; 0x187e <__udivmodsi4_ep>

00001864 <__udivmodsi4_loop>:
    1864:	aa 1f       	adc	r26, r26
    1866:	bb 1f       	adc	r27, r27
    1868:	ee 1f       	adc	r30, r30
    186a:	ff 1f       	adc	r31, r31
    186c:	a2 17       	cp	r26, r18
    186e:	b3 07       	cpc	r27, r19
    1870:	e4 07       	cpc	r30, r20
    1872:	f5 07       	cpc	r31, r21
    1874:	20 f0       	brcs	.+8      	; 0x187e <__udivmodsi4_ep>
    1876:	a2 1b       	sub	r26, r18
    1878:	b3 0b       	sbc	r27, r19
    187a:	e4 0b       	sbc	r30, r20
    187c:	f5 0b       	sbc	r31, r21

0000187e <__udivmodsi4_ep>:
    187e:	66 1f       	adc	r22, r22
    1880:	77 1f       	adc	r23, r23
    1882:	88 1f       	adc	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	1a 94       	dec	r1
    1888:	69 f7       	brne	.-38     	; 0x1864 <__udivmodsi4_loop>
    188a:	60 95       	com	r22
    188c:	70 95       	com	r23
    188e:	80 95       	com	r24
    1890:	90 95       	com	r25
    1892:	9b 01       	movw	r18, r22
    1894:	ac 01       	movw	r20, r24
    1896:	bd 01       	movw	r22, r26
    1898:	cf 01       	movw	r24, r30
    189a:	08 95       	ret

0000189c <_exit>:
    189c:	f8 94       	cli

0000189e <__stop_program>:
    189e:	ff cf       	rjmp	.-2      	; 0x189e <__stop_program>
