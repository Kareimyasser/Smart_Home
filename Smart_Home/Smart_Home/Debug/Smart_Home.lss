
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001976  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000244  00800060  00001976  00001a0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008002a4  008002a4  00001c4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004333  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001103  00000000  00000000  0000634f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000246c  00000000  00000000  00007452  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007d0  00000000  00000000  000098c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000115d  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002377  00000000  00000000  0000b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000d564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 9e 0b 	jmp	0x173c	; 0x173c <__vector_10>
      2c:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 09 	call	0x12a4	; 0x12a4 <main>
      8a:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_DisplayTemp>:
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    _delay_ms(1000);
}

void LCD_DisplayTemp()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	1f 92       	push	r1
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
    u8 local_tempValue=0;
      9c:	19 82       	std	Y+1, r1	; 0x01

    LCD_voidClear();
      9e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>

    while (local_KPDIdleValue == KPD_Not_Pressed)
      a2:	24 c0       	rjmp	.+72     	; 0xec <LCD_DisplayTemp+0x5a>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
      a4:	81 e6       	ldi	r24, 0x61	; 97
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>

        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_tempValue);
      ac:	be 01       	movw	r22, r28
      ae:	6f 5f       	subi	r22, 0xFF	; 255
      b0:	7f 4f       	sbci	r23, 0xFF	; 255
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 9d 09 	call	0x133a	; 0x133a <ADC_voidGetDigitalValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b8:	2f ef       	ldi	r18, 0xFF	; 255
      ba:	81 ee       	ldi	r24, 0xE1	; 225
      bc:	94 e0       	ldi	r25, 0x04	; 4
      be:	21 50       	subi	r18, 0x01	; 1
      c0:	80 40       	sbci	r24, 0x00	; 0
      c2:	90 40       	sbci	r25, 0x00	; 0
      c4:	e1 f7       	brne	.-8      	; 0xbe <LCD_DisplayTemp+0x2c>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <LCD_DisplayTemp+0x36>
      c8:	00 00       	nop
        _delay_ms(100);
        LCD_voidDisplayNumber(local_tempValue);
      ca:	69 81       	ldd	r22, Y+1	; 0x01
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	0e 94 95 08 	call	0x112a	; 0x112a <LCD_voidDisplayNumber>
      d6:	2f ef       	ldi	r18, 0xFF	; 255
      d8:	83 ed       	ldi	r24, 0xD3	; 211
      da:	90 e3       	ldi	r25, 0x30	; 48
      dc:	21 50       	subi	r18, 0x01	; 1
      de:	80 40       	sbci	r24, 0x00	; 0
      e0:	90 40       	sbci	r25, 0x00	; 0
      e2:	e1 f7       	brne	.-8      	; 0xdc <LCD_DisplayTemp+0x4a>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_DisplayTemp+0x54>
      e6:	00 00       	nop
        _delay_ms(1000);
        LCD_voidClear();
      e8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
{
    u8 local_tempValue=0;

    LCD_voidClear();

    while (local_KPDIdleValue == KPD_Not_Pressed)
      ec:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
      f0:	8f 3f       	cpi	r24, 0xFF	; 255
      f2:	c1 f2       	breq	.-80     	; 0xa4 <LCD_DisplayTemp+0x12>
        // LCD_voidSendCommand(Write_SecondLine);
        // LCD_voidDisplayStringDelay((u8 *)"0-go to home");
        
        
    }
    if (local_KPDIdleValue == '0')
      f4:	80 33       	cpi	r24, 0x30	; 48
      f6:	11 f4       	brne	.+4      	; 0xfc <LCD_DisplayTemp+0x6a>
    {
        LCD_voidClear();
      f8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
    }
    TMR0clear_flag();
      fc:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <TMR0clear_flag>
    LCD_voidClear();
     100:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>

}
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <HOME_voidInit>:



void HOME_voidInit(void)
{
	EEPROM_voidInit();
     10c:	0e 94 0c 06 	call	0xc18	; 0xc18 <EEPROM_voidInit>
	
    // initialize the LCD
    LCD_voidInit();
     110:	0e 94 c8 07 	call	0xf90	; 0xf90 <LCD_voidInit>
	
	// initialize the KPD
    KPD_voidInit();
     114:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <KPD_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
     118:	0e 94 00 06 	call	0xc00	; 0xc00 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	83 e0       	ldi	r24, 0x03	; 3
     122:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
     126:	40 e0       	ldi	r20, 0x00	; 0
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
     130:	0e 94 27 0b 	call	0x164e	; 0x164e <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
     134:	0e 94 2b 0b 	call	0x1656	; 0x1656 <TMR0_voidInit>
    // initialize the LEDs(1-5)
    LED_voidInit(DIO_PORTD, DIO_PIN3);
     138:	63 e0       	ldi	r22, 0x03	; 3
     13a:	83 e0       	ldi	r24, 0x03	; 3
     13c:	0e 94 34 09 	call	0x1268	; 0x1268 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN1);
     140:	61 e0       	ldi	r22, 0x01	; 1
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 34 09 	call	0x1268	; 0x1268 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	0e 94 34 09 	call	0x1268	; 0x1268 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     150:	63 e0       	ldi	r22, 0x03	; 3
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 34 09 	call	0x1268	; 0x1268 <LED_voidInit>
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     158:	62 e0       	ldi	r22, 0x02	; 2
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 34 09 	call	0x1268	; 0x1268 <LED_voidInit>
     160:	08 95       	ret

00000162 <HOME_voidLocalGetUserAndPass>:
	//check alarm 
}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     162:	cf 92       	push	r12
     164:	df 92       	push	r13
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	1f 93       	push	r17
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     170:	00 97       	sbiw	r24, 0x00	; 0
     172:	09 f4       	brne	.+2      	; 0x176 <HOME_voidLocalGetUserAndPass+0x14>
     174:	5f c0       	rjmp	.+190    	; 0x234 <HOME_voidLocalGetUserAndPass+0xd2>
     176:	61 15       	cp	r22, r1
     178:	71 05       	cpc	r23, r1
     17a:	09 f4       	brne	.+2      	; 0x17e <HOME_voidLocalGetUserAndPass+0x1c>
     17c:	5b c0       	rjmp	.+182    	; 0x234 <HOME_voidLocalGetUserAndPass+0xd2>
     17e:	7b 01       	movw	r14, r22
     180:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     182:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     18e:	8c e8       	ldi	r24, 0x8C	; 140
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     19e:	8e e9       	ldi	r24, 0x9E	; 158
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
     1a6:	2f ef       	ldi	r18, 0xFF	; 255
     1a8:	83 ed       	ldi	r24, 0xD3	; 211
     1aa:	90 e3       	ldi	r25, 0x30	; 48
     1ac:	21 50       	subi	r18, 0x01	; 1
     1ae:	80 40       	sbci	r24, 0x00	; 0
     1b0:	90 40       	sbci	r25, 0x00	; 0
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <HOME_voidLocalGetUserAndPass+0x4a>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <HOME_voidLocalGetUserAndPass+0x54>
     1b6:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     1b8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     1c4:	83 ee       	ldi	r24, 0xE3	; 227
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     1cc:	10 e0       	ldi	r17, 0x00	; 0
     1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1d0:	e6 01       	movw	r28, r12
     1d2:	c1 0f       	add	r28, r17
     1d4:	d1 1d       	adc	r29, r1
     1d6:	ce 01       	movw	r24, r28
     1d8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     1dc:	98 81       	ld	r25, Y
     1de:	9f 3f       	cpi	r25, 0xFF	; 255
     1e0:	b9 f3       	breq	.-18     	; 0x1d0 <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     1e2:	61 2f       	mov	r22, r17
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1ea:	88 81       	ld	r24, Y
     1ec:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     1f0:	1f 5f       	subi	r17, 0xFF	; 255
     1f2:	18 30       	cpi	r17, 0x08	; 8
     1f4:	68 f3       	brcs	.-38     	; 0x1d0 <HOME_voidLocalGetUserAndPass+0x6e>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
	
		//display request for pass
		LCD_voidClear();
     1f6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1fa:	60 e0       	ldi	r22, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     202:	8c ea       	ldi	r24, 0xAC	; 172
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     20a:	10 e0       	ldi	r17, 0x00	; 0
     20c:	11 c0       	rjmp	.+34     	; 0x230 <HOME_voidLocalGetUserAndPass+0xce>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     20e:	e7 01       	movw	r28, r14
     210:	c1 0f       	add	r28, r17
     212:	d1 1d       	adc	r29, r1
     214:	ce 01       	movw	r24, r28
     216:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     21a:	88 81       	ld	r24, Y
     21c:	8f 3f       	cpi	r24, 0xFF	; 255
     21e:	b9 f3       	breq	.-18     	; 0x20e <HOME_voidLocalGetUserAndPass+0xac>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     220:	61 2f       	mov	r22, r17
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     228:	88 81       	ld	r24, Y
     22a:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     22e:	1f 5f       	subi	r17, 0xFF	; 255
     230:	18 30       	cpi	r17, 0x08	; 8
     232:	68 f3       	brcs	.-38     	; 0x20e <HOME_voidLocalGetUserAndPass+0xac>
		//error massage
	}
			
	
		
}
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	1f 91       	pop	r17
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	df 90       	pop	r13
     240:	cf 90       	pop	r12
     242:	08 95       	ret

00000244 <HOME_voidRemoteGetUserAndPass>:



void HOME_voidRemoteGetUserAndPass(u8* copy_pu8RemoteUserName,u8* copy_pu8RemoteUserPass)
{
     244:	ef 92       	push	r14
     246:	ff 92       	push	r15
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	cf 93       	push	r28
	if((copy_pu8RemoteUserName!=NULL)&&(copy_pu8RemoteUserPass!=NULL))
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	09 f4       	brne	.+2      	; 0x254 <HOME_voidRemoteGetUserAndPass+0x10>
     252:	54 c0       	rjmp	.+168    	; 0x2fc <HOME_voidRemoteGetUserAndPass+0xb8>
     254:	61 15       	cp	r22, r1
     256:	71 05       	cpc	r23, r1
     258:	09 f4       	brne	.+2      	; 0x25c <HOME_voidRemoteGetUserAndPass+0x18>
     25a:	50 c0       	rjmp	.+160    	; 0x2fc <HOME_voidRemoteGetUserAndPass+0xb8>
     25c:	7b 01       	movw	r14, r22
     25e:	8c 01       	movw	r16, r24
	{
	
		u8 Local_u8UserNameLengthCounter=0,Local_u8UserPassCounter=0;
	
		//dis request for use name and pass
		BL_voidTxString	("Please Enter User Name & Password ");
     260:	86 eb       	ldi	r24, 0xB6	; 182
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
		BL_voidTxString("\n");
     268:	89 ed       	ldi	r24, 0xD9	; 217
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
	
		//dis request for user name
		BL_voidTxString	("User Name:");
     270:	83 ee       	ldi	r24, 0xE3	; 227
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
		BL_voidTxChar('\n');
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     27e:	c0 e0       	ldi	r28, 0x00	; 0
     280:	06 c0       	rjmp	.+12     	; 0x28e <HOME_voidRemoteGetUserAndPass+0x4a>
		{
			
			
			BL_voidRxChar(&copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     282:	c8 01       	movw	r24, r16
     284:	8c 0f       	add	r24, r28
     286:	91 1d       	adc	r25, r1
     288:	0e 94 06 06 	call	0xc0c	; 0xc0c <BL_voidRxChar>
		//dis request for user name
		BL_voidTxString	("User Name:");
		BL_voidTxChar('\n');
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     28c:	cf 5f       	subi	r28, 0xFF	; 255
     28e:	c8 30       	cpi	r28, 0x08	; 8
     290:	c0 f3       	brcs	.-16     	; 0x282 <HOME_voidRemoteGetUserAndPass+0x3e>
		//{
		//	break;
		//}
			
		}
		BL_voidTxString("Entered User Name:");
     292:	8b ed       	ldi	r24, 0xDB	; 219
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     29a:	c0 e0       	ldi	r28, 0x00	; 0
     29c:	07 c0       	rjmp	.+14     	; 0x2ac <HOME_voidRemoteGetUserAndPass+0x68>
		{
			
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     29e:	f8 01       	movw	r30, r16
     2a0:	ec 0f       	add	r30, r28
     2a2:	f1 1d       	adc	r31, r1
     2a4:	80 81       	ld	r24, Z
     2a6:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
			
		}
		BL_voidTxString("Entered User Name:");
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     2aa:	cf 5f       	subi	r28, 0xFF	; 255
     2ac:	c8 30       	cpi	r28, 0x08	; 8
     2ae:	b8 f3       	brcs	.-18     	; 0x29e <HOME_voidRemoteGetUserAndPass+0x5a>
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
			
		}
		
		BL_voidTxChar('\n');
     2b0:	8a e0       	ldi	r24, 0x0A	; 10
     2b2:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
		
		
		//display request for pass
		BL_voidTxString	("Password:");
     2b6:	8e ee       	ldi	r24, 0xEE	; 238
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
		BL_voidTxChar('\n');
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     2c4:	c0 e0       	ldi	r28, 0x00	; 0
     2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <HOME_voidRemoteGetUserAndPass+0x90>
		{
			
			BL_voidRxChar(&copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     2c8:	c7 01       	movw	r24, r14
     2ca:	8c 0f       	add	r24, r28
     2cc:	91 1d       	adc	r25, r1
     2ce:	0e 94 06 06 	call	0xc0c	; 0xc0c <BL_voidRxChar>
		//display request for pass
		BL_voidTxString	("Password:");
		BL_voidTxChar('\n');
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     2d2:	cf 5f       	subi	r28, 0xFF	; 255
     2d4:	c8 30       	cpi	r28, 0x08	; 8
     2d6:	c0 f3       	brcs	.-16     	; 0x2c8 <HOME_voidRemoteGetUserAndPass+0x84>
			//{
			//	break;
			//}
			
		}
		BL_voidTxString("Entered Pass:");
     2d8:	88 ef       	ldi	r24, 0xF8	; 248
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     2e0:	c0 e0       	ldi	r28, 0x00	; 0
     2e2:	07 c0       	rjmp	.+14     	; 0x2f2 <HOME_voidRemoteGetUserAndPass+0xae>
		{
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     2e4:	f7 01       	movw	r30, r14
     2e6:	ec 0f       	add	r30, r28
     2e8:	f1 1d       	adc	r31, r1
     2ea:	80 81       	ld	r24, Z
     2ec:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
			//}
			
		}
		BL_voidTxString("Entered Pass:");
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     2f0:	cf 5f       	subi	r28, 0xFF	; 255
     2f2:	c8 30       	cpi	r28, 0x08	; 8
     2f4:	b8 f3       	brcs	.-18     	; 0x2e4 <HOME_voidRemoteGetUserAndPass+0xa0>
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
		
		}

		BL_voidTxChar('\n');
     2f6:	8a e0       	ldi	r24, 0x0A	; 10
     2f8:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
		//error massage
	}
			
	
		
}
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	08 95       	ret

00000308 <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType )
{
     308:	6f 92       	push	r6
     30a:	7f 92       	push	r7
     30c:	8f 92       	push	r8
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	a0 97       	sbiw	r28, 0x20	; 32
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
	//page 32 to 61 for remote user name and password the first page for user name the followed by password
	//word 500 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserType!=NULL)
     334:	61 15       	cp	r22, r1
     336:	71 05       	cpc	r23, r1
     338:	09 f4       	brne	.+2      	; 0x33c <HOME_voidCheckUserAndPass+0x34>
     33a:	b0 c1       	rjmp	.+864    	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     33c:	3b 01       	movw	r6, r22
		u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,
		Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,Local_u8FireAnAlarm=0,Local_u8PagesCounter,
		Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,LocaL_u8RightEntery=0;
		
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	09 f0       	breq	.+2      	; 0x344 <HOME_voidCheckUserAndPass+0x3c>
     342:	e8 c0       	rjmp	.+464    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     344:	d8 c0       	rjmp	.+432    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     346:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     348:	be 01       	movw	r22, r28
     34a:	6f 5e       	subi	r22, 0xEF	; 239
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	ce 01       	movw	r24, r28
     350:	49 96       	adiw	r24, 0x19	; 25
     352:	0e 94 b1 00 	call	0x162	; 0x162 <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     356:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     358:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     35a:	00 e0       	ldi	r16, 0x00	; 0
     35c:	60 c0       	rjmp	.+192    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     35e:	e0 2e       	mov	r14, r16
     360:	ee 0c       	add	r14, r14
     362:	ee 0c       	add	r14, r14
     364:	ee 0c       	add	r14, r14
     366:	ee 0c       	add	r14, r14
     368:	f1 2c       	mov	r15, r1
     36a:	ae 01       	movw	r20, r28
     36c:	47 5f       	subi	r20, 0xF7	; 247
     36e:	5f 4f       	sbci	r21, 0xFF	; 255
     370:	68 e0       	ldi	r22, 0x08	; 8
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	c7 01       	movw	r24, r14
     376:	0e 94 3a 06 	call	0xc74	; 0xc74 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     37a:	ae 01       	movw	r20, r28
     37c:	4f 5f       	subi	r20, 0xFF	; 255
     37e:	5f 4f       	sbci	r21, 0xFF	; 255
     380:	68 e0       	ldi	r22, 0x08	; 8
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	c7 01       	movw	r24, r14
     386:	08 96       	adiw	r24, 0x08	; 8
     388:	0e 94 3a 06 	call	0xc74	; 0xc74 <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     38c:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	14 c0       	rjmp	.+40     	; 0x3ba <HOME_voidCheckUserAndPass+0xb2>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     392:	82 2f       	mov	r24, r18
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	e9 e1       	ldi	r30, 0x19	; 25
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	ec 0f       	add	r30, r28
     39c:	fd 1f       	adc	r31, r29
     39e:	e8 0f       	add	r30, r24
     3a0:	f9 1f       	adc	r31, r25
     3a2:	30 81       	ld	r19, Z
     3a4:	e9 e0       	ldi	r30, 0x09	; 9
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	ec 0f       	add	r30, r28
     3aa:	fd 1f       	adc	r31, r29
     3ac:	e8 0f       	add	r30, r24
     3ae:	f9 1f       	adc	r31, r25
     3b0:	80 81       	ld	r24, Z
     3b2:	38 13       	cpse	r19, r24
     3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <HOME_voidCheckUserAndPass+0xb0>
						{
							Local_u8NameByteCheck++;
     3b6:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     3b8:	2f 5f       	subi	r18, 0xFF	; 255
     3ba:	28 30       	cpi	r18, 0x08	; 8
     3bc:	50 f3       	brcs	.-44     	; 0x392 <HOME_voidCheckUserAndPass+0x8a>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     3be:	48 30       	cpi	r20, 0x08	; 8
     3c0:	61 f5       	brne	.+88     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     3c2:	15 c0       	rjmp	.+42     	; 0x3ee <HOME_voidCheckUserAndPass+0xe6>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     3c4:	82 2f       	mov	r24, r18
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	e1 e1       	ldi	r30, 0x11	; 17
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	ec 0f       	add	r30, r28
     3ce:	fd 1f       	adc	r31, r29
     3d0:	e8 0f       	add	r30, r24
     3d2:	f9 1f       	adc	r31, r25
     3d4:	30 81       	ld	r19, Z
     3d6:	e1 e0       	ldi	r30, 0x01	; 1
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	ec 0f       	add	r30, r28
     3dc:	fd 1f       	adc	r31, r29
     3de:	e8 0f       	add	r30, r24
     3e0:	f9 1f       	adc	r31, r25
     3e2:	80 81       	ld	r24, Z
     3e4:	38 13       	cpse	r19, r24
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <HOME_voidCheckUserAndPass+0xe2>
							{
								Local_u8PassByteCheck++;
     3e8:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <HOME_voidCheckUserAndPass+0xea>
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	28 30       	cpi	r18, 0x08	; 8
     3f4:	38 f3       	brcs	.-50     	; 0x3c4 <HOME_voidCheckUserAndPass+0xbc>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     3f6:	48 30       	cpi	r20, 0x08	; 8
     3f8:	71 f4       	brne	.+28     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     3fa:	0f 30       	cpi	r16, 0x0F	; 15
     3fc:	31 f4       	brne	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
							{
								*copy_pu8UserType=HOME_LOCAL_ADMIN;	
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	f3 01       	movw	r30, r6
     402:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     404:	dd 24       	eor	r13, r13
     406:	d3 94       	inc	r13
     408:	0d c0       	rjmp	.+26     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
							{
								*copy_pu8UserType=HOME_LOCAL_ADMIN;	
							}
							else
							{
								*copy_pu8UserType=HOME_LOCAL_USER;
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	f3 01       	movw	r30, r6
     40e:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     410:	dd 24       	eor	r13, r13
     412:	d3 94       	inc	r13
     414:	07 c0       	rjmp	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     416:	b3 94       	inc	r11
     418:	01 c0       	rjmp	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     41a:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     41c:	0f 5f       	subi	r16, 0xFF	; 255
     41e:	00 31       	cpi	r16, 0x10	; 16
     420:	08 f4       	brcc	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	9d cf       	rjmp	.-198    	; 0x35e <HOME_voidCheckUserAndPass+0x56>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	df 12       	cpse	r13, r31
     428:	14 c0       	rjmp	.+40     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
				{
					LCD_voidClear();
     42a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS PERMITED");
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	39 e6       	ldi	r19, 0x69	; 105
     442:	88 e1       	ldi	r24, 0x18	; 24
     444:	21 50       	subi	r18, 0x01	; 1
     446:	30 40       	sbci	r19, 0x00	; 0
     448:	80 40       	sbci	r24, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44e:	00 00       	nop
     450:	58 c0       	rjmp	.+176    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
					_delay_ms(500);
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==16)
     452:	90 e1       	ldi	r25, 0x10	; 16
     454:	c9 12       	cpse	r12, r25
     456:	26 c0       	rjmp	.+76     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				{
					LCD_voidClear();
     458:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     45c:	60 e0       	ldi	r22, 0x00	; 0
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     464:	86 e1       	ldi	r24, 0x16	; 22
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong User Name");
     474:	84 e2       	ldi	r24, 0x24	; 36
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     47c:	12 30       	cpi	r17, 0x02	; 2
     47e:	c9 f1       	breq	.+114    	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     480:	ef ef       	ldi	r30, 0xFF	; 255
     482:	f3 ed       	ldi	r31, 0xD3	; 211
     484:	20 e3       	ldi	r18, 0x30	; 48
     486:	e1 50       	subi	r30, 0x01	; 1
     488:	f0 40       	sbci	r31, 0x00	; 0
     48a:	20 40       	sbci	r18, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     490:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	82 e0       	ldi	r24, 0x02	; 2
     496:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     49a:	84 e3       	ldi	r24, 0x34	; 52
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
     4a2:	27 c0       	rjmp	.+78     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     4a4:	bb 20       	and	r11, r11
     4a6:	29 f1       	breq	.+74     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
				{
					LCD_voidClear();
     4a8:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     4b4:	86 e1       	ldi	r24, 0x16	; 22
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong Password");
     4c4:	85 e4       	ldi	r24, 0x45	; 69
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     4cc:	12 30       	cpi	r17, 0x02	; 2
     4ce:	89 f0       	breq	.+34     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4d0:	3f ef       	ldi	r19, 0xFF	; 255
     4d2:	83 ed       	ldi	r24, 0xD3	; 211
     4d4:	90 e3       	ldi	r25, 0x30	; 48
     4d6:	31 50       	subi	r19, 0x01	; 1
     4d8:	80 40       	sbci	r24, 0x00	; 0
     4da:	90 40       	sbci	r25, 0x00	; 0
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4e0:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	0e 94 19 09 	call	0x1232	; 0x1232 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     4ea:	84 e3       	ldi	r24, 0x34	; 52
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
			u8 local_u8EnteredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     4f2:	1f 5f       	subi	r17, 0xFF	; 255
     4f4:	03 c0       	rjmp	.+6      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4f6:	d1 2c       	mov	r13, r1
     4f8:	a1 2c       	mov	r10, r1
     4fa:	10 e0       	ldi	r17, 0x00	; 0
     4fc:	13 30       	cpi	r17, 0x03	; 3
     4fe:	08 f4       	brcc	.+2      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     500:	22 cf       	rjmp	.-444    	; 0x346 <HOME_voidCheckUserAndPass+0x3e>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     502:	e3 e0       	ldi	r30, 0x03	; 3
     504:	ae 12       	cpse	r10, r30
     506:	ca c0       	rjmp	.+404    	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     508:	d1 10       	cpse	r13, r1
     50a:	c8 c0       	rjmp	.+400    	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
			{
				*copy_pu8UserType=HOME_LOGIN_FAILED;
     50c:	85 e0       	ldi	r24, 0x05	; 5
     50e:	f3 01       	movw	r30, r6
     510:	80 83       	st	Z, r24
     512:	c4 c0       	rjmp	.+392    	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
			}
		}
		
		else if(copy_u8AccessType==HOME_REMOTE_ACCESS)
     514:	82 30       	cpi	r24, 0x02	; 2
     516:	09 f0       	breq	.+2      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     518:	c1 c0       	rjmp	.+386    	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     51a:	bb c0       	rjmp	.+374    	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
     51c:	f4 e5       	ldi	r31, 0x54	; 84
     51e:	2d ec       	ldi	r18, 0xCD	; 205
     520:	3d e2       	ldi	r19, 0x2D	; 45
     522:	83 e0       	ldi	r24, 0x03	; 3
     524:	f1 50       	subi	r31, 0x01	; 1
     526:	20 40       	sbci	r18, 0x00	; 0
     528:	30 40       	sbci	r19, 0x00	; 0
     52a:	80 40       	sbci	r24, 0x00	; 0
     52c:	d9 f7       	brne	.-10     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     530:	00 c0       	rjmp	.+0      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
     532:	00 00       	nop
				
				//delete this line later
				_delay_ms(20000);
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
     534:	be 01       	movw	r22, r28
     536:	6f 5e       	subi	r22, 0xEF	; 239
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	ce 01       	movw	r24, r28
     53c:	49 96       	adiw	r24, 0x19	; 25
     53e:	0e 94 22 01 	call	0x244	; 0x244 <HOME_voidRemoteGetUserAndPass>
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     542:	d1 2c       	mov	r13, r1
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     544:	e1 2c       	mov	r14, r1
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     546:	0f e0       	ldi	r16, 0x0F	; 15
     548:	60 c0       	rjmp	.+192    	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from EEPROM
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
     54a:	80 2e       	mov	r8, r16
     54c:	88 0c       	add	r8, r8
     54e:	88 0c       	add	r8, r8
     550:	88 0c       	add	r8, r8
     552:	88 0c       	add	r8, r8
     554:	91 2c       	mov	r9, r1
     556:	ae 01       	movw	r20, r28
     558:	47 5f       	subi	r20, 0xF7	; 247
     55a:	5f 4f       	sbci	r21, 0xFF	; 255
     55c:	68 e0       	ldi	r22, 0x08	; 8
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	c4 01       	movw	r24, r8
     562:	0e 94 3a 06 	call	0xc74	; 0xc74 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
     566:	ae 01       	movw	r20, r28
     568:	4f 5f       	subi	r20, 0xFF	; 255
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
     56c:	68 e0       	ldi	r22, 0x08	; 8
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	c4 01       	movw	r24, r8
     572:	08 96       	adiw	r24, 0x08	; 8
     574:	0e 94 3a 06 	call	0xc74	; 0xc74 <EEPROM_voidSequentialRead>
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
				{
					Local_u8NameByteCheck=0;
     578:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	14 c0       	rjmp	.+40     	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
					{
						
						//check the byte stored with the entered	
						if(local_u8EnteredRemoteUserName[Local_u8NameByteCheckCounter]==local_u8StoredRemoteUserName[Local_u8NameByteCheckCounter])
     57e:	82 2f       	mov	r24, r18
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	e9 e1       	ldi	r30, 0x19	; 25
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	ec 0f       	add	r30, r28
     588:	fd 1f       	adc	r31, r29
     58a:	e8 0f       	add	r30, r24
     58c:	f9 1f       	adc	r31, r25
     58e:	30 81       	ld	r19, Z
     590:	e9 e0       	ldi	r30, 0x09	; 9
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	ec 0f       	add	r30, r28
     596:	fd 1f       	adc	r31, r29
     598:	e8 0f       	add	r30, r24
     59a:	f9 1f       	adc	r31, r25
     59c:	80 81       	ld	r24, Z
     59e:	38 13       	cpse	r19, r24
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
						{
							
							Local_u8NameByteCheck++;
     5a2:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     5a4:	2f 5f       	subi	r18, 0xFF	; 255
     5a6:	28 30       	cpi	r18, 0x08	; 8
     5a8:	50 f3       	brcs	.-44     	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
							
							
						}
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     5aa:	48 30       	cpi	r20, 0x08	; 8
     5ac:	61 f5       	brne	.+88     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
     5ae:	15 c0       	rjmp	.+42     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							//check the byte stored with the entered
							if(local_u8EnteredRemoteUserPass[Local_u8PassByteCheckCounter]==local_u8StoredRemoteUserPass[Local_u8PassByteCheckCounter])
     5b0:	82 2f       	mov	r24, r18
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	e1 e1       	ldi	r30, 0x11	; 17
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	ec 0f       	add	r30, r28
     5ba:	fd 1f       	adc	r31, r29
     5bc:	e8 0f       	add	r30, r24
     5be:	f9 1f       	adc	r31, r25
     5c0:	30 81       	ld	r19, Z
     5c2:	e1 e0       	ldi	r30, 0x01	; 1
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	ec 0f       	add	r30, r28
     5c8:	fd 1f       	adc	r31, r29
     5ca:	e8 0f       	add	r30, r24
     5cc:	f9 1f       	adc	r31, r25
     5ce:	80 81       	ld	r24, Z
     5d0:	38 13       	cpse	r19, r24
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
							{
								Local_u8PassByteCheck++;
     5d4:	4f 5f       	subi	r20, 0xFF	; 255
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	20 e0       	ldi	r18, 0x00	; 0
     5de:	28 30       	cpi	r18, 0x08	; 8
     5e0:	38 f3       	brcs	.-50     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
								
							}
									
						}
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     5e2:	48 30       	cpi	r20, 0x08	; 8
     5e4:	71 f4       	brne	.+28     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     5e6:	0f 30       	cpi	r16, 0x0F	; 15
     5e8:	31 f4       	brne	.+12     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
							{
								*copy_pu8UserType=HOME_REMOTE_ADMIN;	
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	f3 01       	movw	r30, r6
     5ee:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     5f0:	ff 24       	eor	r15, r15
     5f2:	f3 94       	inc	r15
     5f4:	0d c0       	rjmp	.+26     	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
							{
								*copy_pu8UserType=HOME_REMOTE_ADMIN;	
							}
							else
							{
								*copy_pu8UserType=HOME_REMOTE_USER;
     5f6:	84 e0       	ldi	r24, 0x04	; 4
     5f8:	f3 01       	movw	r30, r6
     5fa:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     5fc:	ff 24       	eor	r15, r15
     5fe:	f3 94       	inc	r15
     600:	07 c0       	rjmp	.+14     	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     602:	d3 94       	inc	r13
     604:	01 c0       	rjmp	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
						
						
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     606:	e3 94       	inc	r14
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     608:	0f 5f       	subi	r16, 0xFF	; 255
     60a:	0f 31       	cpi	r16, 0x1F	; 31
     60c:	08 f4       	brcc	.+2      	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
     60e:	9d cf       	rjmp	.-198    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
						
					}
						
				}
				//case of wright entry
				if(LocaL_u8RightEntery==1)
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	ff 12       	cpse	r15, r31
     614:	08 c0       	rjmp	.+16     	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
				{
					
					BL_voidTxString	("ACCESS PERMITED");
     616:	86 e0       	ldi	r24, 0x06	; 6
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
					BL_voidTxChar('\n');
     61e:	8a e0       	ldi	r24, 0x0A	; 10
     620:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
					break;
     624:	3b c0       	rjmp	.+118    	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
				}
				//is the entery was wrong 
				else if(Local_u8WrongUserNameCounter==16)
     626:	20 e1       	ldi	r18, 0x10	; 16
     628:	e2 12       	cpse	r14, r18
     62a:	18 c0       	rjmp	.+48     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
				{
					BL_voidTxString	("ACCESS DENIED");
     62c:	86 e1       	ldi	r24, 0x16	; 22
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
					BL_voidTxChar('\n');
     634:	8a e0       	ldi	r24, 0x0A	; 10
     636:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
					BL_voidTxString	("Wrong User Name");
     63a:	84 e2       	ldi	r24, 0x24	; 36
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
					BL_voidTxChar('\n');
     642:	8a e0       	ldi	r24, 0x0A	; 10
     644:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     648:	12 30       	cpi	r17, 0x02	; 2
     64a:	09 f1       	breq	.+66     	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
					{	
						
						BL_voidTxString	("Please Try Again");
     64c:	84 e3       	ldi	r24, 0x34	; 52
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
						BL_voidTxChar('\n');
     654:	8a e0       	ldi	r24, 0x0A	; 10
     656:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
     65a:	19 c0       	rjmp	.+50     	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
						
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     65c:	dd 20       	and	r13, r13
     65e:	b9 f0       	breq	.+46     	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
				{
					BL_voidTxString	("ACCESS DENIED");
     660:	86 e1       	ldi	r24, 0x16	; 22
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
					BL_voidTxChar('\n');
     668:	8a e0       	ldi	r24, 0x0A	; 10
     66a:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
					BL_voidTxString	("Wrong Password");
     66e:	85 e4       	ldi	r24, 0x45	; 69
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
					BL_voidTxChar('\n');
     676:	8a e0       	ldi	r24, 0x0A	; 10
     678:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
										
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     67c:	12 30       	cpi	r17, 0x02	; 2
     67e:	39 f0       	breq	.+14     	; 0x68e <__EEPROM_REGION_LENGTH__+0x28e>
					{
						BL_voidTxString	("Please Try Again");
     680:	84 e3       	ldi	r24, 0x34	; 52
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 09 06 	call	0xc12	; 0xc12 <BL_voidTxString>
						BL_voidTxChar('\n');
     688:	8a e0       	ldi	r24, 0x0A	; 10
     68a:	0e 94 03 06 	call	0xc06	; 0xc06 <BL_voidTxChar>
			u8 local_u8EnteredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8RemoteUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     68e:	1f 5f       	subi	r17, 0xFF	; 255
     690:	02 c0       	rjmp	.+4      	; 0x696 <__EEPROM_REGION_LENGTH__+0x296>
     692:	f1 2c       	mov	r15, r1
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	13 30       	cpi	r17, 0x03	; 3
     698:	08 f4       	brcc	.+2      	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     69a:	40 cf       	rjmp	.-384    	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
	}
	else
	{
		//error massage
	}
}
     69c:	a0 96       	adiw	r28, 0x20	; 32
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	df 91       	pop	r29
     6aa:	cf 91       	pop	r28
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	df 90       	pop	r13
     6b6:	cf 90       	pop	r12
     6b8:	bf 90       	pop	r11
     6ba:	af 90       	pop	r10
     6bc:	9f 90       	pop	r9
     6be:	8f 90       	pop	r8
     6c0:	7f 90       	pop	r7
     6c2:	6f 90       	pop	r6
     6c4:	08 95       	ret

000006c6 <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     6c6:	84 e5       	ldi	r24, 0x54	; 84
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     6ce:	80 ec       	ldi	r24, 0xC0	; 192
     6d0:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     6d4:	85 e6       	ldi	r24, 0x65	; 101
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	83 ed       	ldi	r24, 0xD3	; 211
     6e0:	90 e3       	ldi	r25, 0x30	; 48
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <WelcomeScreen+0x1c>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <WelcomeScreen+0x26>
     6ec:	00 00       	nop
     6ee:	08 95       	ret

000006f0 <APP_init>:




void APP_init(void)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	a1 97       	sbiw	r28, 0x21	; 33
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     704:	0e 94 86 00 	call	0x10c	; 0x10c <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_AVCC);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 6d 09 	call	0x12da	; 0x12da <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
	
    // display the welcome screen
    WelcomeScreen();
     718:	0e 94 63 03 	call	0x6c6	; 0x6c6 <WelcomeScreen>
	LCD_voidClear();
     71c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	e5 e6       	ldi	r30, 0x65	; 101
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	de 01       	movw	r26, r28
     728:	11 96       	adiw	r26, 0x01	; 1
     72a:	01 90       	ld	r0, Z+
     72c:	0d 92       	st	X+, r0
     72e:	8a 95       	dec	r24
     730:	e1 f7       	brne	.-8      	; 0x72a <APP_init+0x3a>
	u8 testuserpass[8]={"22222222"};
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	ee e6       	ldi	r30, 0x6E	; 110
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	de 01       	movw	r26, r28
     73a:	19 96       	adiw	r26, 0x09	; 9
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <APP_init+0x4c>
	u8 testadminname[8]={"12345678"};
     744:	88 e0       	ldi	r24, 0x08	; 8
     746:	e7 e7       	ldi	r30, 0x77	; 119
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	de 01       	movw	r26, r28
     74c:	51 96       	adiw	r26, 0x11	; 17
     74e:	01 90       	ld	r0, Z+
     750:	0d 92       	st	X+, r0
     752:	8a 95       	dec	r24
     754:	e1 f7       	brne	.-8      	; 0x74e <APP_init+0x5e>
	u8 testadminpass[8]={"12345678"};
     756:	88 e0       	ldi	r24, 0x08	; 8
     758:	e7 e7       	ldi	r30, 0x77	; 119
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	de 01       	movw	r26, r28
     75e:	59 96       	adiw	r26, 0x19	; 25
     760:	01 90       	ld	r0, Z+
     762:	0d 92       	st	X+, r0
     764:	8a 95       	dec	r24
     766:	e1 f7       	brne	.-8      	; 0x760 <APP_init+0x70>
	u8 usertype;	
	
	EEPROM_voidWritePage(304,&testusername[0]);
     768:	be 01       	movw	r22, r28
     76a:	6f 5f       	subi	r22, 0xFF	; 255
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	80 e3       	ldi	r24, 0x30	; 48
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(312,&testuserpass[0]);
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	88 e3       	ldi	r24, 0x38	; 56
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
     784:	be 01       	movw	r22, r28
     786:	6f 5e       	subi	r22, 0xEF	; 239
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	80 ef       	ldi	r24, 0xF0	; 240
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
     792:	be 01       	movw	r22, r28
     794:	67 5e       	subi	r22, 0xE7	; 231
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	88 ef       	ldi	r24, 0xF8	; 248
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 0f 06 	call	0xc1e	; 0xc1e <EEPROM_voidWritePage>
	
	HOME_voidCheckUserAndPass(HOME_REMOTE_ACCESS,&usertype);
     7a0:	be 01       	movw	r22, r28
     7a2:	6f 5d       	subi	r22, 0xDF	; 223
     7a4:	7f 4f       	sbci	r23, 0xFF	; 255
     7a6:	82 e0       	ldi	r24, 0x02	; 2
     7a8:	0e 94 84 01 	call	0x308	; 0x308 <HOME_voidCheckUserAndPass>





}
     7ac:	a1 96       	adiw	r28, 0x21	; 33
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	de bf       	out	0x3e, r29	; 62
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     7c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     7c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     7cc:	08 95       	ret

000007ce <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     7ce:	0e 94 df 03 	call	0x7be	; 0x7be <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     7d2:	89 e4       	ldi	r24, 0x49	; 73
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     7da:	0e 94 3d 0b 	call	0x167a	; 0x167a <TMR0_voidStart>
        LCD_voidClear();
     7de:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     7e2:	83 e7       	ldi	r24, 0x73	; 115
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     7ea:	80 ec       	ldi	r24, 0xC0	; 192
     7ec:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temperature");
     7f0:	80 e8       	ldi	r24, 0x80	; 128
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
        Reset_AllKPDValues();
     7f8:	0e 94 df 03 	call	0x7be	; 0x7be <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     7fc:	0c c0       	rjmp	.+24     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
        {
            if (local_KPDIdleValue == '0')
     7fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     802:	80 33       	cpi	r24, 0x30	; 48
     804:	21 f4       	brne	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
     80c:	08 c0       	rjmp	.+16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     80e:	84 e6       	ldi	r24, 0x64	; 100
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temperature");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     816:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     81a:	8f 3f       	cpi	r24, 0xFF	; 255
     81c:	81 f3       	breq	.-32     	; 0x7fe <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     81e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     822:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     826:	81 33       	cpi	r24, 0x31	; 49
     828:	19 f0       	breq	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     82a:	82 33       	cpi	r24, 0x32	; 50
     82c:	79 f0       	breq	.+30     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     82e:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     830:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     834:	8e e8       	ldi	r24, 0x8E	; 142
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     83c:	80 ec       	ldi	r24, 0xC0	; 192
     83e:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     842:	8b e9       	ldi	r24, 0x9B	; 155
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>

            break;
     84a:	08 95       	ret

        case ('2'):

            LCD_voidClear();
     84c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     850:	8a ea       	ldi	r24, 0xAA	; 170
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     858:	80 ec       	ldi	r24, 0xC0	; 192
     85a:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     85e:	8a eb       	ldi	r24, 0xBA	; 186
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     866:	89 e4       	ldi	r24, 0x49	; 73
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     86e:	0e 94 3d 0b 	call	0x167a	; 0x167a <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     872:	0c c0       	rjmp	.+24     	; 0x88c <__stack+0x2d>
            {
                KPD_voidGetValue(&local_lightNum);
     874:	83 e6       	ldi	r24, 0x63	; 99
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     87c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
     880:	80 33       	cpi	r24, 0x30	; 48
     882:	21 f4       	brne	.+8      	; 0x88c <__stack+0x2d>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
     88a:	04 c0       	rjmp	.+8      	; 0x894 <__stack+0x35>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     88c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     890:	8f 3f       	cpi	r24, 0xFF	; 255
     892:	81 f3       	breq	.-32     	; 0x874 <__stack+0x15>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     894:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TMR0_voidStop>
            switch (local_lightNum)
     898:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
     89c:	83 33       	cpi	r24, 0x33	; 51
     89e:	09 f4       	brne	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	a6 c0       	rjmp	.+332    	; 0x9ee <__stack+0x18f>
     8a2:	30 f4       	brcc	.+12     	; 0x8b0 <__stack+0x51>
     8a4:	81 33       	cpi	r24, 0x31	; 49
     8a6:	69 f0       	breq	.+26     	; 0x8c2 <__stack+0x63>
     8a8:	82 33       	cpi	r24, 0x32	; 50
     8aa:	09 f4       	brne	.+2      	; 0x8ae <__stack+0x4f>
     8ac:	54 c0       	rjmp	.+168    	; 0x956 <__stack+0xf7>
     8ae:	a2 c1       	rjmp	.+836    	; 0xbf4 <__stack+0x395>
     8b0:	85 33       	cpi	r24, 0x35	; 53
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	34 c1       	rjmp	.+616    	; 0xb1e <__stack+0x2bf>
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <__stack+0x5b>
     8b8:	e6 c0       	rjmp	.+460    	; 0xa86 <__stack+0x227>
     8ba:	86 33       	cpi	r24, 0x36	; 54
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__stack+0x61>
     8be:	7b c1       	rjmp	.+758    	; 0xbb6 <__stack+0x357>
     8c0:	99 c1       	rjmp	.+818    	; 0xbf4 <__stack+0x395>
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN0, &led_status);
     8c2:	44 ea       	ldi	r20, 0xA4	; 164
     8c4:	52 e0       	ldi	r21, 0x02	; 2
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_voidGetPinValue>
                LCD_voidClear();
     8ce:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
                if (led_status == 1)
     8d2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	f1 f4       	brne	.+60     	; 0x916 <__stack+0xb7>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     8da:	87 ec       	ldi	r24, 0xC7	; 199
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     8e2:	80 ec       	ldi	r24, 0xC0	; 192
     8e4:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     8e8:	85 ed       	ldi	r24, 0xD5	; 213
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__stack+0x9b>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     8f2:	82 e6       	ldi	r24, 0x62	; 98
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     8fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     8fe:	8f 3f       	cpi	r24, 0xFF	; 255
     900:	c1 f3       	breq	.-16     	; 0x8f2 <__stack+0x93>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     902:	81 33       	cpi	r24, 0x31	; 49
     904:	29 f4       	brne	.+10     	; 0x910 <__stack+0xb1>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
     906:	41 e0       	ldi	r20, 0x01	; 1
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 45 09 	call	0x128a	; 0x128a <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     910:	0e 94 df 03 	call	0x7be	; 0x7be <Reset_AllKPDValues>
     914:	6f c1       	rjmp	.+734    	; 0xbf4 <__stack+0x395>
                }
                else if (led_status == 0)
     916:	81 11       	cpse	r24, r1
     918:	6d c1       	rjmp	.+730    	; 0xbf4 <__stack+0x395>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     91a:	86 ee       	ldi	r24, 0xE6	; 230
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     922:	80 ec       	ldi	r24, 0xC0	; 192
     924:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     928:	85 ef       	ldi	r24, 0xF5	; 245
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     930:	04 c0       	rjmp	.+8      	; 0x93a <__stack+0xdb>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     932:	82 e6       	ldi	r24, 0x62	; 98
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     93a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     93e:	8f 3f       	cpi	r24, 0xFF	; 255
     940:	c1 f3       	breq	.-16     	; 0x932 <__stack+0xd3>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     942:	81 33       	cpi	r24, 0x31	; 49
     944:	29 f4       	brne	.+10     	; 0x950 <__stack+0xf1>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 38 09 	call	0x1270	; 0x1270 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     950:	0e 94 df 03 	call	0x7be	; 0x7be <Reset_AllKPDValues>
     954:	4f c1       	rjmp	.+670    	; 0xbf4 <__stack+0x395>
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN1, &led_status);
     956:	44 ea       	ldi	r20, 0xA4	; 164
     958:	52 e0       	ldi	r21, 0x02	; 2
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_voidGetPinValue>
                LCD_voidClear();
     962:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
                if (led_status == 1)
     966:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	f9 f4       	brne	.+62     	; 0x9ac <__stack+0x14d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     96e:	85 e0       	ldi	r24, 0x05	; 5
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     976:	80 ec       	ldi	r24, 0xC0	; 192
     978:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     97c:	85 ed       	ldi	r24, 0xD5	; 213
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     984:	04 c0       	rjmp	.+8      	; 0x98e <__stack+0x12f>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     986:	82 e6       	ldi	r24, 0x62	; 98
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     98e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	c1 f3       	breq	.-16     	; 0x986 <__stack+0x127>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     996:	81 33       	cpi	r24, 0x31	; 49
     998:	29 f4       	brne	.+10     	; 0x9a4 <__stack+0x145>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     99a:	41 e0       	ldi	r20, 0x01	; 1
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 45 09 	call	0x128a	; 0x128a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     9aa:	24 c1       	rjmp	.+584    	; 0xbf4 <__stack+0x395>
                }
                else if (led_status == 0)
     9ac:	81 11       	cpse	r24, r1
     9ae:	22 c1       	rjmp	.+580    	; 0xbf4 <__stack+0x395>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     9b0:	83 e1       	ldi	r24, 0x13	; 19
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     9b8:	80 ec       	ldi	r24, 0xC0	; 192
     9ba:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     9be:	85 ef       	ldi	r24, 0xF5	; 245
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__stack+0x171>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     9c8:	82 e6       	ldi	r24, 0x62	; 98
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     9d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     9d4:	8f 3f       	cpi	r24, 0xFF	; 255
     9d6:	c1 f3       	breq	.-16     	; 0x9c8 <__stack+0x169>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     9d8:	81 33       	cpi	r24, 0x31	; 49
     9da:	29 f4       	brne	.+10     	; 0x9e6 <__stack+0x187>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	0e 94 38 09 	call	0x1270	; 0x1270 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     9ec:	03 c1       	rjmp	.+518    	; 0xbf4 <__stack+0x395>
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     9ee:	44 ea       	ldi	r20, 0xA4	; 164
     9f0:	52 e0       	ldi	r21, 0x02	; 2
     9f2:	62 e0       	ldi	r22, 0x02	; 2
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_voidGetPinValue>
                LCD_voidClear();
     9fa:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
                if (led_status == 1)
     9fe:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	f9 f4       	brne	.+62     	; 0xa44 <__stack+0x1e5>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     a06:	82 e2       	ldi	r24, 0x22	; 34
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     a0e:	80 ec       	ldi	r24, 0xC0	; 192
     a10:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     a14:	85 ed       	ldi	r24, 0xD5	; 213
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__stack+0x1c7>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     a1e:	82 e6       	ldi	r24, 0x62	; 98
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     a26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     a2a:	8f 3f       	cpi	r24, 0xFF	; 255
     a2c:	c1 f3       	breq	.-16     	; 0xa1e <__stack+0x1bf>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     a2e:	81 33       	cpi	r24, 0x31	; 49
     a30:	29 f4       	brne	.+10     	; 0xa3c <__stack+0x1dd>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     a32:	41 e0       	ldi	r20, 0x01	; 1
     a34:	62 e0       	ldi	r22, 0x02	; 2
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 45 09 	call	0x128a	; 0x128a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     a42:	d8 c0       	rjmp	.+432    	; 0xbf4 <__stack+0x395>
                }
                else if (led_status == 0)
     a44:	81 11       	cpse	r24, r1
     a46:	d6 c0       	rjmp	.+428    	; 0xbf4 <__stack+0x395>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     a48:	80 e3       	ldi	r24, 0x30	; 48
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     a50:	80 ec       	ldi	r24, 0xC0	; 192
     a52:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     a56:	85 ef       	ldi	r24, 0xF5	; 245
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__stack+0x209>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     a60:	82 e6       	ldi	r24, 0x62	; 98
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     a68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     a6c:	8f 3f       	cpi	r24, 0xFF	; 255
     a6e:	c1 f3       	breq	.-16     	; 0xa60 <__stack+0x201>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     a70:	81 33       	cpi	r24, 0x31	; 49
     a72:	29 f4       	brne	.+10     	; 0xa7e <__stack+0x21f>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 38 09 	call	0x1270	; 0x1270 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     a7e:	8f ef       	ldi	r24, 0xFF	; 255
     a80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     a84:	b7 c0       	rjmp	.+366    	; 0xbf4 <__stack+0x395>
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     a86:	44 ea       	ldi	r20, 0xA4	; 164
     a88:	52 e0       	ldi	r21, 0x02	; 2
     a8a:	63 e0       	ldi	r22, 0x03	; 3
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_voidGetPinValue>
                LCD_voidClear();
     a92:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
                if (led_status == 1)
     a96:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	f9 f4       	brne	.+62     	; 0xadc <__stack+0x27d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     a9e:	8f e3       	ldi	r24, 0x3F	; 63
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     aa6:	80 ec       	ldi	r24, 0xC0	; 192
     aa8:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     aac:	85 ed       	ldi	r24, 0xD5	; 213
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__stack+0x25f>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     ab6:	82 e6       	ldi	r24, 0x62	; 98
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     abe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     ac2:	8f 3f       	cpi	r24, 0xFF	; 255
     ac4:	c1 f3       	breq	.-16     	; 0xab6 <__stack+0x257>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     ac6:	81 33       	cpi	r24, 0x31	; 49
     ac8:	29 f4       	brne	.+10     	; 0xad4 <__stack+0x275>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     aca:	41 e0       	ldi	r20, 0x01	; 1
     acc:	63 e0       	ldi	r22, 0x03	; 3
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	0e 94 45 09 	call	0x128a	; 0x128a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     ada:	8c c0       	rjmp	.+280    	; 0xbf4 <__stack+0x395>
                }
                else if (led_status == 0)
     adc:	81 11       	cpse	r24, r1
     ade:	8a c0       	rjmp	.+276    	; 0xbf4 <__stack+0x395>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     ae0:	8d e4       	ldi	r24, 0x4D	; 77
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     ae8:	80 ec       	ldi	r24, 0xC0	; 192
     aea:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     aee:	85 ef       	ldi	r24, 0xF5	; 245
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__stack+0x2a1>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     af8:	82 e6       	ldi	r24, 0x62	; 98
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     b00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     b04:	8f 3f       	cpi	r24, 0xFF	; 255
     b06:	c1 f3       	breq	.-16     	; 0xaf8 <__stack+0x299>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     b08:	81 33       	cpi	r24, 0x31	; 49
     b0a:	29 f4       	brne	.+10     	; 0xb16 <__stack+0x2b7>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	63 e0       	ldi	r22, 0x03	; 3
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 38 09 	call	0x1270	; 0x1270 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     b16:	8f ef       	ldi	r24, 0xFF	; 255
     b18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     b1c:	6b c0       	rjmp	.+214    	; 0xbf4 <__stack+0x395>
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     b1e:	44 ea       	ldi	r20, 0xA4	; 164
     b20:	52 e0       	ldi	r21, 0x02	; 2
     b22:	62 e0       	ldi	r22, 0x02	; 2
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_voidGetPinValue>
                LCD_voidClear();
     b2a:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
                if (led_status == 1)
     b2e:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	f9 f4       	brne	.+62     	; 0xb74 <__stack+0x315>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     b36:	8c e5       	ldi	r24, 0x5C	; 92
     b38:	92 e0       	ldi	r25, 0x02	; 2
     b3a:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     b3e:	80 ec       	ldi	r24, 0xC0	; 192
     b40:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     b44:	85 ed       	ldi	r24, 0xD5	; 213
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     b4c:	04 c0       	rjmp	.+8      	; 0xb56 <__stack+0x2f7>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     b4e:	82 e6       	ldi	r24, 0x62	; 98
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     b56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     b5a:	8f 3f       	cpi	r24, 0xFF	; 255
     b5c:	c1 f3       	breq	.-16     	; 0xb4e <__stack+0x2ef>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     b5e:	81 33       	cpi	r24, 0x31	; 49
     b60:	29 f4       	brne	.+10     	; 0xb6c <__stack+0x30d>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     b62:	41 e0       	ldi	r20, 0x01	; 1
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	0e 94 45 09 	call	0x128a	; 0x128a <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     b72:	40 c0       	rjmp	.+128    	; 0xbf4 <__stack+0x395>
                }
                else if (led_status == 0)
     b74:	81 11       	cpse	r24, r1
     b76:	3e c0       	rjmp	.+124    	; 0xbf4 <__stack+0x395>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     b78:	8a e6       	ldi	r24, 0x6A	; 106
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     b80:	80 ec       	ldi	r24, 0xC0	; 192
     b82:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     b86:	85 ef       	ldi	r24, 0xF5	; 245
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__stack+0x339>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     b90:	82 e6       	ldi	r24, 0x62	; 98
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 ae 06 	call	0xd5c	; 0xd5c <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     b98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
     b9c:	8f 3f       	cpi	r24, 0xFF	; 255
     b9e:	c1 f3       	breq	.-16     	; 0xb90 <__stack+0x331>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     ba0:	81 33       	cpi	r24, 0x31	; 49
     ba2:	29 f4       	brne	.+10     	; 0xbae <__stack+0x34f>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     ba4:	41 e0       	ldi	r20, 0x01	; 1
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	0e 94 38 09 	call	0x1270	; 0x1270 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
     bb4:	1f c0       	rjmp	.+62     	; 0xbf4 <__stack+0x395>
                break;
                // if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     bb6:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <LCD_voidClear>
                if (led_status == 1)
     bba:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <__data_end>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	61 f4       	brne	.+24     	; 0xbda <__stack+0x37b>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     bc2:	89 e7       	ldi	r24, 0x79	; 121
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     bca:	80 ec       	ldi	r24, 0xC0	; 192
     bcc:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     bd0:	85 ed       	ldi	r24, 0xD5	; 213
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
     bd8:	0d c0       	rjmp	.+26     	; 0xbf4 <__stack+0x395>
                }
                else if (led_status == 0)
     bda:	81 11       	cpse	r24, r1
     bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <__stack+0x395>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     bde:	87 e8       	ldi	r24, 0x87	; 135
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     be6:	80 ec       	ldi	r24, 0xC0	; 192
     be8:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     bec:	85 ef       	ldi	r24, 0xF5	; 245
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 76 08 	call	0x10ec	; 0x10ec <LCD_voidDisplayStringDelay>
                }
                break;

            }

            local_lightNum = KPD_Not_Pressed;
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
            Local_copyKPDValue = KPD_Not_Pressed;
     bfa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
     bfe:	08 95       	ret

00000c00 <BL_voidInit>:
     c00:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <UART_voidInit>
     c04:	08 95       	ret

00000c06 <BL_voidTxChar>:
     c06:	0e 94 75 0c 	call	0x18ea	; 0x18ea <UART_voidTxChar>
     c0a:	08 95       	ret

00000c0c <BL_voidRxChar>:
     c0c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <UART_voidRxChar>
     c10:	08 95       	ret

00000c12 <BL_voidTxString>:
     c12:	0e 94 81 0c 	call	0x1902	; 0x1902 <UART_voidTxString>
     c16:	08 95       	ret

00000c18 <EEPROM_voidInit>:
     c18:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <TWI_voidInitMaster>
     c1c:	08 95       	ret

00000c1e <EEPROM_voidWritePage>:
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	61 15       	cp	r22, r1
     c28:	71 05       	cpc	r23, r1
     c2a:	f9 f0       	breq	.+62     	; 0xc6a <EEPROM_voidWritePage+0x4c>
     c2c:	8b 01       	movw	r16, r22
     c2e:	d8 2f       	mov	r29, r24
     c30:	c9 2f       	mov	r28, r25
     c32:	c0 65       	ori	r28, 0x50	; 80
     c34:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <TWI_voidSendStartCondition>
     c38:	8c 2f       	mov	r24, r28
     c3a:	0e 94 08 0c 	call	0x1810	; 0x1810 <TWI_voidSendSlaveAddWithWrite>
     c3e:	8d 2f       	mov	r24, r29
     c40:	0e 94 32 0c 	call	0x1864	; 0x1864 <TWI_voidTransmitMasterDataByte>
     c44:	c0 e0       	ldi	r28, 0x00	; 0
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <EEPROM_voidWritePage+0x38>
     c48:	f8 01       	movw	r30, r16
     c4a:	ec 0f       	add	r30, r28
     c4c:	f1 1d       	adc	r31, r1
     c4e:	80 81       	ld	r24, Z
     c50:	0e 94 32 0c 	call	0x1864	; 0x1864 <TWI_voidTransmitMasterDataByte>
     c54:	cf 5f       	subi	r28, 0xFF	; 255
     c56:	c8 30       	cpi	r28, 0x08	; 8
     c58:	b8 f3       	brcs	.-18     	; 0xc48 <EEPROM_voidWritePage+0x2a>
     c5a:	0e 94 01 0c 	call	0x1802	; 0x1802 <TWI_voidSendStopCondition>
     c5e:	8f e1       	ldi	r24, 0x1F	; 31
     c60:	9e e4       	ldi	r25, 0x4E	; 78
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <EEPROM_voidWritePage+0x44>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <EEPROM_voidWritePage+0x4a>
     c68:	00 00       	nop
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <EEPROM_voidSequentialRead>:
     c74:	ef 92       	push	r14
     c76:	ff 92       	push	r15
     c78:	0f 93       	push	r16
     c7a:	1f 93       	push	r17
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	41 15       	cp	r20, r1
     c82:	51 05       	cpc	r21, r1
     c84:	81 f1       	breq	.+96     	; 0xce6 <EEPROM_voidSequentialRead+0x72>
     c86:	61 15       	cp	r22, r1
     c88:	22 e0       	ldi	r18, 0x02	; 2
     c8a:	72 07       	cpc	r23, r18
     c8c:	60 f5       	brcc	.+88     	; 0xce6 <EEPROM_voidSequentialRead+0x72>
     c8e:	8a 01       	movw	r16, r20
     c90:	7b 01       	movw	r14, r22
     c92:	d8 2f       	mov	r29, r24
     c94:	c9 2f       	mov	r28, r25
     c96:	c0 65       	ori	r28, 0x50	; 80
     c98:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <TWI_voidSendStartCondition>
     c9c:	8c 2f       	mov	r24, r28
     c9e:	0e 94 08 0c 	call	0x1810	; 0x1810 <TWI_voidSendSlaveAddWithWrite>
     ca2:	8d 2f       	mov	r24, r29
     ca4:	0e 94 32 0c 	call	0x1864	; 0x1864 <TWI_voidTransmitMasterDataByte>
     ca8:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <TWI_voidSendRepeatedStartCondition>
     cac:	8c 2f       	mov	r24, r28
     cae:	0e 94 1d 0c 	call	0x183a	; 0x183a <TWI_voidSendSlaveAddWithRead>
     cb2:	c0 e0       	ldi	r28, 0x00	; 0
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
     cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <EEPROM_voidSequentialRead+0x50>
     cb8:	c8 01       	movw	r24, r16
     cba:	8c 0f       	add	r24, r28
     cbc:	9d 1f       	adc	r25, r29
     cbe:	0e 94 3e 0c 	call	0x187c	; 0x187c <TWI_voidRecieveMasterDataByteWithAch>
     cc2:	21 96       	adiw	r28, 0x01	; 1
     cc4:	c7 01       	movw	r24, r14
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	c8 17       	cp	r28, r24
     cca:	d9 07       	cpc	r29, r25
     ccc:	a8 f3       	brcs	.-22     	; 0xcb8 <EEPROM_voidSequentialRead+0x44>
     cce:	80 0f       	add	r24, r16
     cd0:	91 1f       	adc	r25, r17
     cd2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <TWI_voidRecieveMasterDataByteWithNAch>
     cd6:	0e 94 01 0c 	call	0x1802	; 0x1802 <TWI_voidSendStopCondition>
     cda:	8f e1       	ldi	r24, 0x1F	; 31
     cdc:	9e e4       	ldi	r25, 0x4E	; 78
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <EEPROM_voidSequentialRead+0x6a>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <EEPROM_voidSequentialRead+0x70>
     ce4:	00 00       	nop
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	08 95       	ret

00000cf4 <KPD_voidInit>:
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	64 e0       	ldi	r22, 0x04	; 4
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	65 e0       	ldi	r22, 0x05	; 5
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	66 e0       	ldi	r22, 0x06	; 6
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	63 e0       	ldi	r22, 0x03	; 3
     d16:	82 e0       	ldi	r24, 0x02	; 2
     d18:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	64 e0       	ldi	r22, 0x04	; 4
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	65 e0       	ldi	r22, 0x05	; 5
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	66 e0       	ldi	r22, 0x06	; 6
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     d3a:	63 e0       	ldi	r22, 0x03	; 3
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	0e 94 ef 0a 	call	0x15de	; 0x15de <DIO_voidActivePinInPullUpResistance>
     d42:	64 e0       	ldi	r22, 0x04	; 4
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	0e 94 ef 0a 	call	0x15de	; 0x15de <DIO_voidActivePinInPullUpResistance>
     d4a:	65 e0       	ldi	r22, 0x05	; 5
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	0e 94 ef 0a 	call	0x15de	; 0x15de <DIO_voidActivePinInPullUpResistance>
     d52:	66 e0       	ldi	r22, 0x06	; 6
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	0e 94 ef 0a 	call	0x15de	; 0x15de <DIO_voidActivePinInPullUpResistance>
     d5a:	08 95       	ret

00000d5c <KPD_voidGetValue>:
     d5c:	6f 92       	push	r6
     d5e:	7f 92       	push	r7
     d60:	8f 92       	push	r8
     d62:	9f 92       	push	r9
     d64:	af 92       	push	r10
     d66:	bf 92       	push	r11
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	6b 97       	sbiw	r28, 0x1b	; 27
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f4       	brne	.+2      	; 0xd8e <KPD_voidGetValue+0x32>
     d8c:	7e c0       	rjmp	.+252    	; 0xe8a <KPD_voidGetValue+0x12e>
     d8e:	5c 01       	movw	r10, r24
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	88 8f       	std	Y+24, r24	; 0x18
     d94:	89 8f       	std	Y+25, r24	; 0x19
     d96:	8a 8f       	std	Y+26, r24	; 0x1a
     d98:	34 e0       	ldi	r19, 0x04	; 4
     d9a:	3d 8b       	std	Y+21, r19	; 0x15
     d9c:	25 e0       	ldi	r18, 0x05	; 5
     d9e:	2e 8b       	std	Y+22, r18	; 0x16
     da0:	96 e0       	ldi	r25, 0x06	; 6
     da2:	9f 8b       	std	Y+23, r25	; 0x17
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	89 8b       	std	Y+17, r24	; 0x11
     da8:	8a 8b       	std	Y+18, r24	; 0x12
     daa:	8b 8b       	std	Y+19, r24	; 0x13
     dac:	8c 8b       	std	Y+20, r24	; 0x14
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	8d 87       	std	Y+13, r24	; 0x0d
     db2:	3e 87       	std	Y+14, r19	; 0x0e
     db4:	2f 87       	std	Y+15, r18	; 0x0f
     db6:	98 8b       	std	Y+16, r25	; 0x10
     db8:	8c e0       	ldi	r24, 0x0C	; 12
     dba:	e0 e8       	ldi	r30, 0x80	; 128
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	de 01       	movw	r26, r28
     dc0:	11 96       	adiw	r26, 0x01	; 1
     dc2:	01 90       	ld	r0, Z+
     dc4:	0d 92       	st	X+, r0
     dc6:	8a 95       	dec	r24
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <KPD_voidGetValue+0x66>
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	f5 01       	movw	r30, r10
     dce:	80 83       	st	Z, r24
     dd0:	81 2c       	mov	r8, r1
     dd2:	57 c0       	rjmp	.+174    	; 0xe82 <KPD_voidGetValue+0x126>
     dd4:	c8 2c       	mov	r12, r8
     dd6:	d1 2c       	mov	r13, r1
     dd8:	e5 e1       	ldi	r30, 0x15	; 21
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	ec 0f       	add	r30, r28
     dde:	fd 1f       	adc	r31, r29
     de0:	ec 0d       	add	r30, r12
     de2:	fd 1d       	adc	r31, r13
     de4:	60 80       	ld	r6, Z
     de6:	e8 e1       	ldi	r30, 0x18	; 24
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	ec 0f       	add	r30, r28
     dec:	fd 1f       	adc	r31, r29
     dee:	ec 0d       	add	r30, r12
     df0:	fd 1d       	adc	r31, r13
     df2:	70 80       	ld	r7, Z
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	66 2d       	mov	r22, r6
     df8:	87 2d       	mov	r24, r7
     dfa:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     dfe:	10 e0       	ldi	r17, 0x00	; 0
     e00:	38 c0       	rjmp	.+112    	; 0xe72 <KPD_voidGetValue+0x116>
     e02:	e1 2e       	mov	r14, r17
     e04:	f1 2c       	mov	r15, r1
     e06:	ed e0       	ldi	r30, 0x0D	; 13
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	ec 0f       	add	r30, r28
     e0c:	fd 1f       	adc	r31, r29
     e0e:	ee 0d       	add	r30, r14
     e10:	ff 1d       	adc	r31, r15
     e12:	00 81       	ld	r16, Z
     e14:	e1 e1       	ldi	r30, 0x11	; 17
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	ec 0f       	add	r30, r28
     e1a:	fd 1f       	adc	r31, r29
     e1c:	ee 0d       	add	r30, r14
     e1e:	ff 1d       	adc	r31, r15
     e20:	90 80       	ld	r9, Z
     e22:	ae 01       	movw	r20, r28
     e24:	45 5e       	subi	r20, 0xE5	; 229
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	60 2f       	mov	r22, r16
     e2a:	89 2d       	mov	r24, r9
     e2c:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_voidGetPinValue>
     e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e32:	81 11       	cpse	r24, r1
     e34:	1d c0       	rjmp	.+58     	; 0xe70 <KPD_voidGetValue+0x114>
     e36:	07 c0       	rjmp	.+14     	; 0xe46 <KPD_voidGetValue+0xea>
     e38:	ae 01       	movw	r20, r28
     e3a:	45 5e       	subi	r20, 0xE5	; 229
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	60 2f       	mov	r22, r16
     e40:	89 2d       	mov	r24, r9
     e42:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_voidGetPinValue>
     e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e48:	88 23       	and	r24, r24
     e4a:	b1 f3       	breq	.-20     	; 0xe38 <KPD_voidGetValue+0xdc>
     e4c:	c7 01       	movw	r24, r14
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	e8 0e       	add	r14, r24
     e54:	f9 1e       	adc	r15, r25
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	8c 0f       	add	r24, r28
     e5c:	9d 1f       	adc	r25, r29
     e5e:	e8 0e       	add	r14, r24
     e60:	f9 1e       	adc	r15, r25
     e62:	f7 01       	movw	r30, r14
     e64:	ec 0d       	add	r30, r12
     e66:	fd 1d       	adc	r31, r13
     e68:	80 81       	ld	r24, Z
     e6a:	f5 01       	movw	r30, r10
     e6c:	80 83       	st	Z, r24
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <KPD_voidGetValue+0x12e>
     e70:	1f 5f       	subi	r17, 0xFF	; 255
     e72:	14 30       	cpi	r17, 0x04	; 4
     e74:	30 f2       	brcs	.-116    	; 0xe02 <KPD_voidGetValue+0xa6>
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	66 2d       	mov	r22, r6
     e7a:	87 2d       	mov	r24, r7
     e7c:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     e80:	83 94       	inc	r8
     e82:	f2 e0       	ldi	r31, 0x02	; 2
     e84:	f8 15       	cp	r31, r8
     e86:	08 f0       	brcs	.+2      	; 0xe8a <KPD_voidGetValue+0x12e>
     e88:	a5 cf       	rjmp	.-182    	; 0xdd4 <KPD_voidGetValue+0x78>
     e8a:	6b 96       	adiw	r28, 0x1b	; 27
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	bf 90       	pop	r11
     ea8:	af 90       	pop	r10
     eaa:	9f 90       	pop	r9
     eac:	8f 90       	pop	r8
     eae:	7f 90       	pop	r7
     eb0:	6f 90       	pop	r6
     eb2:	08 95       	ret

00000eb4 <PRV_voidWriteHalfPort>:
     eb4:	cf 93       	push	r28
     eb6:	c8 2f       	mov	r28, r24
     eb8:	80 ff       	sbrs	r24, 0
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <PRV_voidWriteHalfPort+0x14>
     ebc:	41 e0       	ldi	r20, 0x01	; 1
     ebe:	64 e0       	ldi	r22, 0x04	; 4
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <PRV_voidWriteHalfPort+0x1e>
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	64 e0       	ldi	r22, 0x04	; 4
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     ed2:	c1 ff       	sbrs	r28, 1
     ed4:	06 c0       	rjmp	.+12     	; 0xee2 <PRV_voidWriteHalfPort+0x2e>
     ed6:	41 e0       	ldi	r20, 0x01	; 1
     ed8:	65 e0       	ldi	r22, 0x05	; 5
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <PRV_voidWriteHalfPort+0x38>
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	65 e0       	ldi	r22, 0x05	; 5
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     eec:	c2 ff       	sbrs	r28, 2
     eee:	06 c0       	rjmp	.+12     	; 0xefc <PRV_voidWriteHalfPort+0x48>
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	66 e0       	ldi	r22, 0x06	; 6
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <PRV_voidWriteHalfPort+0x52>
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	66 e0       	ldi	r22, 0x06	; 6
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f06:	c3 ff       	sbrs	r28, 3
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <PRV_voidWriteHalfPort+0x62>
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	67 e0       	ldi	r22, 0x07	; 7
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <PRV_voidWriteHalfPort+0x6c>
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	67 e0       	ldi	r22, 0x07	; 7
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <LCD_voidSendCommand>:
     f24:	cf 93       	push	r28
     f26:	c8 2f       	mov	r28, r24
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f3c:	8c 2f       	mov	r24, r28
     f3e:	82 95       	swap	r24
     f40:	8f 70       	andi	r24, 0x0F	; 15
     f42:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PRV_voidWriteHalfPort>
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	63 e0       	ldi	r22, 0x03	; 3
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f50:	8f e9       	ldi	r24, 0x9F	; 159
     f52:	9f e0       	ldi	r25, 0x0F	; 15
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <LCD_voidSendCommand+0x30>
     f58:	00 c0       	rjmp	.+0      	; 0xf5a <LCD_voidSendCommand+0x36>
     f5a:	00 00       	nop
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	63 e0       	ldi	r22, 0x03	; 3
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f66:	8c 2f       	mov	r24, r28
     f68:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PRV_voidWriteHalfPort>
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	63 e0       	ldi	r22, 0x03	; 3
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f76:	8f e9       	ldi	r24, 0x9F	; 159
     f78:	9f e0       	ldi	r25, 0x0F	; 15
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	f1 f7       	brne	.-4      	; 0xf7a <LCD_voidSendCommand+0x56>
     f7e:	00 c0       	rjmp	.+0      	; 0xf80 <LCD_voidSendCommand+0x5c>
     f80:	00 00       	nop
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	63 e0       	ldi	r22, 0x03	; 3
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <LCD_voidInit>:
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	62 e0       	ldi	r22, 0x02	; 2
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	63 e0       	ldi	r22, 0x03	; 3
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     fae:	41 e0       	ldi	r20, 0x01	; 1
     fb0:	64 e0       	ldi	r22, 0x04	; 4
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     fb8:	41 e0       	ldi	r20, 0x01	; 1
     fba:	65 e0       	ldi	r22, 0x05	; 5
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	66 e0       	ldi	r22, 0x06	; 6
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	67 e0       	ldi	r22, 0x07	; 7
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
     fd6:	2f e7       	ldi	r18, 0x7F	; 127
     fd8:	85 eb       	ldi	r24, 0xB5	; 181
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	80 40       	sbci	r24, 0x00	; 0
     fe0:	90 40       	sbci	r25, 0x00	; 0
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <LCD_voidInit+0x4c>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <LCD_voidInit+0x56>
     fe6:	00 00       	nop
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	61 e0       	ldi	r22, 0x01	; 1
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	62 e0       	ldi	r22, 0x02	; 2
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PRV_voidWriteHalfPort>
    1002:	41 e0       	ldi	r20, 0x01	; 1
    1004:	63 e0       	ldi	r22, 0x03	; 3
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    100c:	8f e9       	ldi	r24, 0x9F	; 159
    100e:	9f e0       	ldi	r25, 0x0F	; 15
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <LCD_voidInit+0x80>
    1014:	00 c0       	rjmp	.+0      	; 0x1016 <LCD_voidInit+0x86>
    1016:	00 00       	nop
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	63 e0       	ldi	r22, 0x03	; 3
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    1022:	88 e2       	ldi	r24, 0x28	; 40
    1024:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    1028:	90 ef       	ldi	r25, 0xF0	; 240
    102a:	9a 95       	dec	r25
    102c:	f1 f7       	brne	.-4      	; 0x102a <LCD_voidInit+0x9a>
    102e:	8f e0       	ldi	r24, 0x0F	; 15
    1030:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    1034:	20 ef       	ldi	r18, 0xF0	; 240
    1036:	2a 95       	dec	r18
    1038:	f1 f7       	brne	.-4      	; 0x1036 <LCD_voidInit+0xa6>
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    1040:	8f e3       	ldi	r24, 0x3F	; 63
    1042:	9f e1       	ldi	r25, 0x1F	; 31
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <LCD_voidInit+0xb4>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <LCD_voidInit+0xba>
    104a:	00 00       	nop
    104c:	86 e0       	ldi	r24, 0x06	; 6
    104e:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    1052:	08 95       	ret

00001054 <LCD_voidDisplayChar>:
    1054:	cf 93       	push	r28
    1056:	c8 2f       	mov	r28, r24
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	61 e0       	ldi	r22, 0x01	; 1
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    106c:	8c 2f       	mov	r24, r28
    106e:	82 95       	swap	r24
    1070:	8f 70       	andi	r24, 0x0F	; 15
    1072:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PRV_voidWriteHalfPort>
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	63 e0       	ldi	r22, 0x03	; 3
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    1080:	8f e9       	ldi	r24, 0x9F	; 159
    1082:	9f e0       	ldi	r25, 0x0F	; 15
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	f1 f7       	brne	.-4      	; 0x1084 <LCD_voidDisplayChar+0x30>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <LCD_voidDisplayChar+0x36>
    108a:	00 00       	nop
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	63 e0       	ldi	r22, 0x03	; 3
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    1096:	8c 2f       	mov	r24, r28
    1098:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PRV_voidWriteHalfPort>
    109c:	41 e0       	ldi	r20, 0x01	; 1
    109e:	63 e0       	ldi	r22, 0x03	; 3
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    10a6:	8f e9       	ldi	r24, 0x9F	; 159
    10a8:	9f e0       	ldi	r25, 0x0F	; 15
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <LCD_voidDisplayChar+0x56>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <LCD_voidDisplayChar+0x5c>
    10b0:	00 00       	nop
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	63 e0       	ldi	r22, 0x03	; 3
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <LCD_voidDisplayString>:
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <LCD_voidDisplayString+0x14>
    10ca:	0c c0       	rjmp	.+24     	; 0x10e4 <LCD_voidDisplayString+0x24>
    10cc:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidDisplayChar>
    10d0:	cf 5f       	subi	r28, 0xFF	; 255
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <LCD_voidDisplayString+0x18>
    10d4:	8c 01       	movw	r16, r24
    10d6:	c0 e0       	ldi	r28, 0x00	; 0
    10d8:	f8 01       	movw	r30, r16
    10da:	ec 0f       	add	r30, r28
    10dc:	f1 1d       	adc	r31, r1
    10de:	80 81       	ld	r24, Z
    10e0:	81 11       	cpse	r24, r1
    10e2:	f4 cf       	rjmp	.-24     	; 0x10cc <LCD_voidDisplayString+0xc>
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	08 95       	ret

000010ec <LCD_voidDisplayStringDelay>:
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	71 f4       	brne	.+28     	; 0x1112 <LCD_voidDisplayStringDelay+0x26>
    10f6:	15 c0       	rjmp	.+42     	; 0x1122 <LCD_voidDisplayStringDelay+0x36>
    10f8:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidDisplayChar>
    10fc:	cf 5f       	subi	r28, 0xFF	; 255
    10fe:	2f ef       	ldi	r18, 0xFF	; 255
    1100:	80 e7       	ldi	r24, 0x70	; 112
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	80 40       	sbci	r24, 0x00	; 0
    1108:	90 40       	sbci	r25, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <LCD_voidDisplayStringDelay+0x18>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <LCD_voidDisplayStringDelay+0x22>
    110e:	00 00       	nop
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <LCD_voidDisplayStringDelay+0x2a>
    1112:	8c 01       	movw	r16, r24
    1114:	c0 e0       	ldi	r28, 0x00	; 0
    1116:	f8 01       	movw	r30, r16
    1118:	ec 0f       	add	r30, r28
    111a:	f1 1d       	adc	r31, r1
    111c:	80 81       	ld	r24, Z
    111e:	81 11       	cpse	r24, r1
    1120:	eb cf       	rjmp	.-42     	; 0x10f8 <LCD_voidDisplayStringDelay+0xc>
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <LCD_voidDisplayNumber>:
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	00 d0       	rcall	.+0      	; 0x1134 <LCD_voidDisplayNumber+0xa>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <LCD_voidDisplayNumber+0xc>
    1136:	1f 92       	push	r1
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	26 2f       	mov	r18, r22
    113e:	10 e0       	ldi	r17, 0x00	; 0
    1140:	08 c0       	rjmp	.+16     	; 0x1152 <LCD_voidDisplayNumber+0x28>
    1142:	1f 5f       	subi	r17, 0xFF	; 255
    1144:	ed ec       	ldi	r30, 0xCD	; 205
    1146:	6e 9f       	mul	r22, r30
    1148:	61 2d       	mov	r22, r1
    114a:	11 24       	eor	r1, r1
    114c:	66 95       	lsr	r22
    114e:	66 95       	lsr	r22
    1150:	66 95       	lsr	r22
    1152:	61 11       	cpse	r22, r1
    1154:	f6 cf       	rjmp	.-20     	; 0x1142 <LCD_voidDisplayNumber+0x18>
    1156:	00 e0       	ldi	r16, 0x00	; 0
    1158:	1a c0       	rjmp	.+52     	; 0x118e <LCD_voidDisplayNumber+0x64>
    115a:	62 2f       	mov	r22, r18
    115c:	2a e0       	ldi	r18, 0x0A	; 10
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	40 e0       	ldi	r20, 0x00	; 0
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	0e 94 97 0c 	call	0x192e	; 0x192e <__udivmodsi4>
    1168:	73 2f       	mov	r23, r19
    116a:	84 2f       	mov	r24, r20
    116c:	95 2f       	mov	r25, r21
    116e:	a0 2f       	mov	r26, r16
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	11 96       	adiw	r26, 0x01	; 1
    1174:	e1 2f       	mov	r30, r17
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	ea 1b       	sub	r30, r26
    117a:	fb 0b       	sbc	r31, r27
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	50 e0       	ldi	r21, 0x00	; 0
    1180:	4c 0f       	add	r20, r28
    1182:	5d 1f       	adc	r21, r29
    1184:	e4 0f       	add	r30, r20
    1186:	f5 1f       	adc	r31, r21
    1188:	60 5d       	subi	r22, 0xD0	; 208
    118a:	60 83       	st	Z, r22
    118c:	0f 5f       	subi	r16, 0xFF	; 255
    118e:	01 17       	cp	r16, r17
    1190:	20 f3       	brcs	.-56     	; 0x115a <LCD_voidDisplayNumber+0x30>
    1192:	e1 e0       	ldi	r30, 0x01	; 1
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	ec 0f       	add	r30, r28
    1198:	fd 1f       	adc	r31, r29
    119a:	e1 0f       	add	r30, r17
    119c:	f1 1d       	adc	r31, r1
    119e:	10 82       	st	Z, r1
    11a0:	10 e0       	ldi	r17, 0x00	; 0
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <LCD_voidDisplayNumber+0x80>
    11a4:	0e 94 2a 08 	call	0x1054	; 0x1054 <LCD_voidDisplayChar>
    11a8:	1f 5f       	subi	r17, 0xFF	; 255
    11aa:	e1 e0       	ldi	r30, 0x01	; 1
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	ec 0f       	add	r30, r28
    11b0:	fd 1f       	adc	r31, r29
    11b2:	e1 0f       	add	r30, r17
    11b4:	f1 1d       	adc	r31, r1
    11b6:	80 81       	ld	r24, Z
    11b8:	81 11       	cpse	r24, r1
    11ba:	f4 cf       	rjmp	.-24     	; 0x11a4 <LCD_voidDisplayNumber+0x7a>
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	08 95       	ret

000011d0 <LCD_voidClear>:
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PRV_voidWriteHalfPort>
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	63 e0       	ldi	r22, 0x03	; 3
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    11f4:	8f e9       	ldi	r24, 0x9F	; 159
    11f6:	9f e0       	ldi	r25, 0x0F	; 15
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <LCD_voidClear+0x28>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <LCD_voidClear+0x2e>
    11fe:	00 00       	nop
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	63 e0       	ldi	r22, 0x03	; 3
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PRV_voidWriteHalfPort>
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	63 e0       	ldi	r22, 0x03	; 3
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    121a:	8f e9       	ldi	r24, 0x9F	; 159
    121c:	9f e0       	ldi	r25, 0x0F	; 15
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <LCD_voidClear+0x4e>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <LCD_voidClear+0x54>
    1224:	00 00       	nop
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	63 e0       	ldi	r22, 0x03	; 3
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    1230:	08 95       	ret

00001232 <LCD_voidGoTOSpecificPosition>:
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	68 32       	cpi	r22, 0x28	; 40
    1238:	a0 f4       	brcc	.+40     	; 0x1262 <LCD_voidGoTOSpecificPosition+0x30>
    123a:	c6 2f       	mov	r28, r22
    123c:	d8 2f       	mov	r29, r24
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    1244:	d1 30       	cpi	r29, 0x01	; 1
    1246:	19 f0       	breq	.+6      	; 0x124e <LCD_voidGoTOSpecificPosition+0x1c>
    1248:	d2 30       	cpi	r29, 0x02	; 2
    124a:	31 f0       	breq	.+12     	; 0x1258 <LCD_voidGoTOSpecificPosition+0x26>
    124c:	0a c0       	rjmp	.+20     	; 0x1262 <LCD_voidGoTOSpecificPosition+0x30>
    124e:	8c 2f       	mov	r24, r28
    1250:	80 68       	ori	r24, 0x80	; 128
    1252:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <LCD_voidGoTOSpecificPosition+0x30>
    1258:	80 e4       	ldi	r24, 0x40	; 64
    125a:	8c 0f       	add	r24, r28
    125c:	80 68       	ori	r24, 0x80	; 128
    125e:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_voidSendCommand>
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <LED_voidInit>:
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_voidSetPinDirection>
    126e:	08 95       	ret

00001270 <LED_voidOn>:
    1270:	41 30       	cpi	r20, 0x01	; 1
    1272:	19 f0       	breq	.+6      	; 0x127a <LED_voidOn+0xa>
    1274:	42 30       	cpi	r20, 0x02	; 2
    1276:	29 f0       	breq	.+10     	; 0x1282 <LED_voidOn+0x12>
    1278:	08 95       	ret
    127a:	41 e0       	ldi	r20, 0x01	; 1
    127c:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    1280:	08 95       	ret
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    1288:	08 95       	ret

0000128a <LED_voidOff>:
    128a:	41 30       	cpi	r20, 0x01	; 1
    128c:	19 f0       	breq	.+6      	; 0x1294 <LED_voidOff+0xa>
    128e:	42 30       	cpi	r20, 0x02	; 2
    1290:	29 f0       	breq	.+10     	; 0x129c <LED_voidOff+0x12>
    1292:	08 95       	ret
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    129a:	08 95       	ret
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	0e 94 34 0a 	call	0x1468	; 0x1468 <DIO_voidSetPinValue>
    12a2:	08 95       	ret

000012a4 <main>:

extern u8 global_accessType;

int main()
{
	APP_init();
    12a4:	0e 94 78 03 	call	0x6f0	; 0x6f0 <APP_init>
    12a8:	2f ef       	ldi	r18, 0xFF	; 255
    12aa:	83 ed       	ldi	r24, 0xD3	; 211
    12ac:	90 e3       	ldi	r25, 0x30	; 48
    12ae:	21 50       	subi	r18, 0x01	; 1
    12b0:	80 40       	sbci	r24, 0x00	; 0
    12b2:	90 40       	sbci	r25, 0x00	; 0
    12b4:	e1 f7       	brne	.-8      	; 0x12ae <main+0xa>
    12b6:	00 c0       	rjmp	.+0      	; 0x12b8 <main+0x14>
    12b8:	00 00       	nop
_delay_ms(1000);


	while(1)
	{
		if (global_accessType ==accessPermited)
    12ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <main+0x24>
		{
		KPD_Interface_user();
    12c2:	0e 94 e7 03 	call	0x7ce	; 0x7ce <KPD_Interface_user>
    12c6:	f9 cf       	rjmp	.-14     	; 0x12ba <main+0x16>
		}
		else if (global_accessType ==accessDenied)
    12c8:	81 11       	cpse	r24, r1
    12ca:	f7 cf       	rjmp	.-18     	; 0x12ba <main+0x16>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
    12cc:	86 e9       	ldi	r24, 0x96	; 150
    12ce:	92 e0       	ldi	r25, 0x02	; 2
    12d0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <LCD_voidDisplayString>
		}
		
		
		
	}
}
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	08 95       	ret

000012da <ADC_voidInit>:
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	59 f0       	breq	.+22     	; 0x12f4 <ADC_voidInit+0x1a>
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	81 f0       	breq	.+32     	; 0x1302 <ADC_voidInit+0x28>
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	a1 f4       	brne	.+40     	; 0x130e <ADC_voidInit+0x34>
    12e6:	87 b1       	in	r24, 0x07	; 7
    12e8:	80 64       	ori	r24, 0x40	; 64
    12ea:	87 b9       	out	0x07, r24	; 7
    12ec:	87 b1       	in	r24, 0x07	; 7
    12ee:	8f 77       	andi	r24, 0x7F	; 127
    12f0:	87 b9       	out	0x07, r24	; 7
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <ADC_voidInit+0x34>
    12f4:	87 b1       	in	r24, 0x07	; 7
    12f6:	8f 7b       	andi	r24, 0xBF	; 191
    12f8:	87 b9       	out	0x07, r24	; 7
    12fa:	87 b1       	in	r24, 0x07	; 7
    12fc:	8f 77       	andi	r24, 0x7F	; 127
    12fe:	87 b9       	out	0x07, r24	; 7
    1300:	06 c0       	rjmp	.+12     	; 0x130e <ADC_voidInit+0x34>
    1302:	87 b1       	in	r24, 0x07	; 7
    1304:	80 64       	ori	r24, 0x40	; 64
    1306:	87 b9       	out	0x07, r24	; 7
    1308:	87 b1       	in	r24, 0x07	; 7
    130a:	80 68       	ori	r24, 0x80	; 128
    130c:	87 b9       	out	0x07, r24	; 7
    130e:	87 b1       	in	r24, 0x07	; 7
    1310:	8f 7d       	andi	r24, 0xDF	; 223
    1312:	87 b9       	out	0x07, r24	; 7
    1314:	86 b1       	in	r24, 0x06	; 6
    1316:	8f 7d       	andi	r24, 0xDF	; 223
    1318:	86 b9       	out	0x06, r24	; 6
    131a:	86 b1       	in	r24, 0x06	; 6
    131c:	87 7f       	andi	r24, 0xF7	; 247
    131e:	86 b9       	out	0x06, r24	; 6
    1320:	86 b1       	in	r24, 0x06	; 6
    1322:	84 60       	ori	r24, 0x04	; 4
    1324:	86 b9       	out	0x06, r24	; 6
    1326:	86 b1       	in	r24, 0x06	; 6
    1328:	82 60       	ori	r24, 0x02	; 2
    132a:	86 b9       	out	0x06, r24	; 6
    132c:	86 b1       	in	r24, 0x06	; 6
    132e:	81 60       	ori	r24, 0x01	; 1
    1330:	86 b9       	out	0x06, r24	; 6
    1332:	86 b1       	in	r24, 0x06	; 6
    1334:	80 68       	ori	r24, 0x80	; 128
    1336:	86 b9       	out	0x06, r24	; 6
    1338:	08 95       	ret

0000133a <ADC_voidGetDigitalValue>:
    133a:	61 15       	cp	r22, r1
    133c:	71 05       	cpc	r23, r1
    133e:	99 f0       	breq	.+38     	; 0x1366 <ADC_voidGetDigitalValue+0x2c>
    1340:	97 b1       	in	r25, 0x07	; 7
    1342:	90 7e       	andi	r25, 0xE0	; 224
    1344:	97 b9       	out	0x07, r25	; 7
    1346:	97 b1       	in	r25, 0x07	; 7
    1348:	89 2b       	or	r24, r25
    134a:	87 b9       	out	0x07, r24	; 7
    134c:	86 b1       	in	r24, 0x06	; 6
    134e:	80 64       	ori	r24, 0x40	; 64
    1350:	86 b9       	out	0x06, r24	; 6
    1352:	34 9b       	sbis	0x06, 4	; 6
    1354:	fe cf       	rjmp	.-4      	; 0x1352 <ADC_voidGetDigitalValue+0x18>
    1356:	86 b1       	in	r24, 0x06	; 6
    1358:	80 61       	ori	r24, 0x10	; 16
    135a:	86 b9       	out	0x06, r24	; 6
    135c:	84 b1       	in	r24, 0x04	; 4
    135e:	95 b1       	in	r25, 0x05	; 5
    1360:	fb 01       	movw	r30, r22
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
    1366:	08 95       	ret

00001368 <DIO_voidSetPinDirection>:
    1368:	84 30       	cpi	r24, 0x04	; 4
    136a:	08 f0       	brcs	.+2      	; 0x136e <DIO_voidSetPinDirection+0x6>
    136c:	7c c0       	rjmp	.+248    	; 0x1466 <DIO_voidSetPinDirection+0xfe>
    136e:	68 30       	cpi	r22, 0x08	; 8
    1370:	08 f0       	brcs	.+2      	; 0x1374 <DIO_voidSetPinDirection+0xc>
    1372:	79 c0       	rjmp	.+242    	; 0x1466 <DIO_voidSetPinDirection+0xfe>
    1374:	42 30       	cpi	r20, 0x02	; 2
    1376:	08 f0       	brcs	.+2      	; 0x137a <DIO_voidSetPinDirection+0x12>
    1378:	76 c0       	rjmp	.+236    	; 0x1466 <DIO_voidSetPinDirection+0xfe>
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	19 f1       	breq	.+70     	; 0x13c4 <DIO_voidSetPinDirection+0x5c>
    137e:	30 f0       	brcs	.+12     	; 0x138c <DIO_voidSetPinDirection+0x24>
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	e1 f1       	breq	.+120    	; 0x13fc <DIO_voidSetPinDirection+0x94>
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	09 f4       	brne	.+2      	; 0x138a <DIO_voidSetPinDirection+0x22>
    1388:	54 c0       	rjmp	.+168    	; 0x1432 <DIO_voidSetPinDirection+0xca>
    138a:	08 95       	ret
    138c:	44 23       	and	r20, r20
    138e:	71 f0       	breq	.+28     	; 0x13ac <DIO_voidSetPinDirection+0x44>
    1390:	41 30       	cpi	r20, 0x01	; 1
    1392:	09 f0       	breq	.+2      	; 0x1396 <DIO_voidSetPinDirection+0x2e>
    1394:	68 c0       	rjmp	.+208    	; 0x1466 <DIO_voidSetPinDirection+0xfe>
    1396:	2a b3       	in	r18, 0x1a	; 26
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_voidSetPinDirection+0x3a>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	6a 95       	dec	r22
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_voidSetPinDirection+0x36>
    13a6:	82 2b       	or	r24, r18
    13a8:	8a bb       	out	0x1a, r24	; 26
    13aa:	08 95       	ret
    13ac:	2a b3       	in	r18, 0x1a	; 26
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_voidSetPinDirection+0x50>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	6a 95       	dec	r22
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_voidSetPinDirection+0x4c>
    13bc:	80 95       	com	r24
    13be:	82 23       	and	r24, r18
    13c0:	8a bb       	out	0x1a, r24	; 26
    13c2:	08 95       	ret
    13c4:	44 23       	and	r20, r20
    13c6:	71 f0       	breq	.+28     	; 0x13e4 <DIO_voidSetPinDirection+0x7c>
    13c8:	41 30       	cpi	r20, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <DIO_voidSetPinDirection+0x66>
    13cc:	4c c0       	rjmp	.+152    	; 0x1466 <DIO_voidSetPinDirection+0xfe>
    13ce:	27 b3       	in	r18, 0x17	; 23
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_voidSetPinDirection+0x72>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	6a 95       	dec	r22
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_voidSetPinDirection+0x6e>
    13de:	82 2b       	or	r24, r18
    13e0:	87 bb       	out	0x17, r24	; 23
    13e2:	08 95       	ret
    13e4:	27 b3       	in	r18, 0x17	; 23
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_voidSetPinDirection+0x88>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	6a 95       	dec	r22
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_voidSetPinDirection+0x84>
    13f4:	80 95       	com	r24
    13f6:	82 23       	and	r24, r18
    13f8:	87 bb       	out	0x17, r24	; 23
    13fa:	08 95       	ret
    13fc:	44 23       	and	r20, r20
    13fe:	69 f0       	breq	.+26     	; 0x141a <DIO_voidSetPinDirection+0xb2>
    1400:	41 30       	cpi	r20, 0x01	; 1
    1402:	89 f5       	brne	.+98     	; 0x1466 <DIO_voidSetPinDirection+0xfe>
    1404:	24 b3       	in	r18, 0x14	; 20
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_voidSetPinDirection+0xa8>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	6a 95       	dec	r22
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_voidSetPinDirection+0xa4>
    1414:	82 2b       	or	r24, r18
    1416:	84 bb       	out	0x14, r24	; 20
    1418:	08 95       	ret
    141a:	24 b3       	in	r18, 0x14	; 20
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_voidSetPinDirection+0xbe>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	6a 95       	dec	r22
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_voidSetPinDirection+0xba>
    142a:	80 95       	com	r24
    142c:	82 23       	and	r24, r18
    142e:	84 bb       	out	0x14, r24	; 20
    1430:	08 95       	ret
    1432:	44 23       	and	r20, r20
    1434:	69 f0       	breq	.+26     	; 0x1450 <DIO_voidSetPinDirection+0xe8>
    1436:	41 30       	cpi	r20, 0x01	; 1
    1438:	b1 f4       	brne	.+44     	; 0x1466 <DIO_voidSetPinDirection+0xfe>
    143a:	21 b3       	in	r18, 0x11	; 17
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_voidSetPinDirection+0xde>
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	6a 95       	dec	r22
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_voidSetPinDirection+0xda>
    144a:	82 2b       	or	r24, r18
    144c:	81 bb       	out	0x11, r24	; 17
    144e:	08 95       	ret
    1450:	21 b3       	in	r18, 0x11	; 17
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_voidSetPinDirection+0xf4>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	6a 95       	dec	r22
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_voidSetPinDirection+0xf0>
    1460:	80 95       	com	r24
    1462:	82 23       	and	r24, r18
    1464:	81 bb       	out	0x11, r24	; 17
    1466:	08 95       	ret

00001468 <DIO_voidSetPinValue>:
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	08 f0       	brcs	.+2      	; 0x146e <DIO_voidSetPinValue+0x6>
    146c:	7c c0       	rjmp	.+248    	; 0x1566 <DIO_voidSetPinValue+0xfe>
    146e:	68 30       	cpi	r22, 0x08	; 8
    1470:	08 f0       	brcs	.+2      	; 0x1474 <DIO_voidSetPinValue+0xc>
    1472:	79 c0       	rjmp	.+242    	; 0x1566 <DIO_voidSetPinValue+0xfe>
    1474:	42 30       	cpi	r20, 0x02	; 2
    1476:	08 f0       	brcs	.+2      	; 0x147a <DIO_voidSetPinValue+0x12>
    1478:	76 c0       	rjmp	.+236    	; 0x1566 <DIO_voidSetPinValue+0xfe>
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	19 f1       	breq	.+70     	; 0x14c4 <DIO_voidSetPinValue+0x5c>
    147e:	30 f0       	brcs	.+12     	; 0x148c <DIO_voidSetPinValue+0x24>
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	e1 f1       	breq	.+120    	; 0x14fc <DIO_voidSetPinValue+0x94>
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	09 f4       	brne	.+2      	; 0x148a <DIO_voidSetPinValue+0x22>
    1488:	54 c0       	rjmp	.+168    	; 0x1532 <DIO_voidSetPinValue+0xca>
    148a:	08 95       	ret
    148c:	44 23       	and	r20, r20
    148e:	71 f0       	breq	.+28     	; 0x14ac <DIO_voidSetPinValue+0x44>
    1490:	41 30       	cpi	r20, 0x01	; 1
    1492:	09 f0       	breq	.+2      	; 0x1496 <DIO_voidSetPinValue+0x2e>
    1494:	68 c0       	rjmp	.+208    	; 0x1566 <DIO_voidSetPinValue+0xfe>
    1496:	2b b3       	in	r18, 0x1b	; 27
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_voidSetPinValue+0x3a>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	6a 95       	dec	r22
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_voidSetPinValue+0x36>
    14a6:	82 2b       	or	r24, r18
    14a8:	8b bb       	out	0x1b, r24	; 27
    14aa:	08 95       	ret
    14ac:	2b b3       	in	r18, 0x1b	; 27
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_voidSetPinValue+0x50>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	6a 95       	dec	r22
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_voidSetPinValue+0x4c>
    14bc:	80 95       	com	r24
    14be:	82 23       	and	r24, r18
    14c0:	8b bb       	out	0x1b, r24	; 27
    14c2:	08 95       	ret
    14c4:	44 23       	and	r20, r20
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <DIO_voidSetPinValue+0x7c>
    14c8:	41 30       	cpi	r20, 0x01	; 1
    14ca:	09 f0       	breq	.+2      	; 0x14ce <DIO_voidSetPinValue+0x66>
    14cc:	4c c0       	rjmp	.+152    	; 0x1566 <DIO_voidSetPinValue+0xfe>
    14ce:	28 b3       	in	r18, 0x18	; 24
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_voidSetPinValue+0x72>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	6a 95       	dec	r22
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_voidSetPinValue+0x6e>
    14de:	82 2b       	or	r24, r18
    14e0:	88 bb       	out	0x18, r24	; 24
    14e2:	08 95       	ret
    14e4:	28 b3       	in	r18, 0x18	; 24
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_voidSetPinValue+0x88>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	6a 95       	dec	r22
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_voidSetPinValue+0x84>
    14f4:	80 95       	com	r24
    14f6:	82 23       	and	r24, r18
    14f8:	88 bb       	out	0x18, r24	; 24
    14fa:	08 95       	ret
    14fc:	44 23       	and	r20, r20
    14fe:	69 f0       	breq	.+26     	; 0x151a <DIO_voidSetPinValue+0xb2>
    1500:	41 30       	cpi	r20, 0x01	; 1
    1502:	89 f5       	brne	.+98     	; 0x1566 <DIO_voidSetPinValue+0xfe>
    1504:	25 b3       	in	r18, 0x15	; 21
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_voidSetPinValue+0xa8>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	6a 95       	dec	r22
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_voidSetPinValue+0xa4>
    1514:	82 2b       	or	r24, r18
    1516:	85 bb       	out	0x15, r24	; 21
    1518:	08 95       	ret
    151a:	25 b3       	in	r18, 0x15	; 21
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <DIO_voidSetPinValue+0xbe>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	6a 95       	dec	r22
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <DIO_voidSetPinValue+0xba>
    152a:	80 95       	com	r24
    152c:	82 23       	and	r24, r18
    152e:	85 bb       	out	0x15, r24	; 21
    1530:	08 95       	ret
    1532:	44 23       	and	r20, r20
    1534:	69 f0       	breq	.+26     	; 0x1550 <DIO_voidSetPinValue+0xe8>
    1536:	41 30       	cpi	r20, 0x01	; 1
    1538:	b1 f4       	brne	.+44     	; 0x1566 <DIO_voidSetPinValue+0xfe>
    153a:	22 b3       	in	r18, 0x12	; 18
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_voidSetPinValue+0xde>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	6a 95       	dec	r22
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_voidSetPinValue+0xda>
    154a:	82 2b       	or	r24, r18
    154c:	82 bb       	out	0x12, r24	; 18
    154e:	08 95       	ret
    1550:	22 b3       	in	r18, 0x12	; 18
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_voidSetPinValue+0xf4>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	6a 95       	dec	r22
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_voidSetPinValue+0xf0>
    1560:	80 95       	com	r24
    1562:	82 23       	and	r24, r18
    1564:	82 bb       	out	0x12, r24	; 18
    1566:	08 95       	ret

00001568 <DIO_voidGetPinValue>:
    1568:	84 30       	cpi	r24, 0x04	; 4
    156a:	c0 f5       	brcc	.+112    	; 0x15dc <DIO_voidGetPinValue+0x74>
    156c:	68 30       	cpi	r22, 0x08	; 8
    156e:	b0 f5       	brcc	.+108    	; 0x15dc <DIO_voidGetPinValue+0x74>
    1570:	41 15       	cp	r20, r1
    1572:	51 05       	cpc	r21, r1
    1574:	99 f1       	breq	.+102    	; 0x15dc <DIO_voidGetPinValue+0x74>
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	89 f0       	breq	.+34     	; 0x159c <DIO_voidGetPinValue+0x34>
    157a:	28 f0       	brcs	.+10     	; 0x1586 <DIO_voidGetPinValue+0x1e>
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	c9 f0       	breq	.+50     	; 0x15b2 <DIO_voidGetPinValue+0x4a>
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	11 f1       	breq	.+68     	; 0x15c8 <DIO_voidGetPinValue+0x60>
    1584:	08 95       	ret
    1586:	89 b3       	in	r24, 0x19	; 25
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_voidGetPinValue+0x28>
    158c:	95 95       	asr	r25
    158e:	87 95       	ror	r24
    1590:	6a 95       	dec	r22
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_voidGetPinValue+0x24>
    1594:	81 70       	andi	r24, 0x01	; 1
    1596:	fa 01       	movw	r30, r20
    1598:	80 83       	st	Z, r24
    159a:	08 95       	ret
    159c:	86 b3       	in	r24, 0x16	; 22
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_voidGetPinValue+0x3e>
    15a2:	95 95       	asr	r25
    15a4:	87 95       	ror	r24
    15a6:	6a 95       	dec	r22
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_voidGetPinValue+0x3a>
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	fa 01       	movw	r30, r20
    15ae:	80 83       	st	Z, r24
    15b0:	08 95       	ret
    15b2:	83 b3       	in	r24, 0x13	; 19
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <DIO_voidGetPinValue+0x54>
    15b8:	95 95       	asr	r25
    15ba:	87 95       	ror	r24
    15bc:	6a 95       	dec	r22
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <DIO_voidGetPinValue+0x50>
    15c0:	81 70       	andi	r24, 0x01	; 1
    15c2:	fa 01       	movw	r30, r20
    15c4:	80 83       	st	Z, r24
    15c6:	08 95       	ret
    15c8:	80 b3       	in	r24, 0x10	; 16
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_voidGetPinValue+0x6a>
    15ce:	95 95       	asr	r25
    15d0:	87 95       	ror	r24
    15d2:	6a 95       	dec	r22
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_voidGetPinValue+0x66>
    15d6:	81 70       	andi	r24, 0x01	; 1
    15d8:	fa 01       	movw	r30, r20
    15da:	80 83       	st	Z, r24
    15dc:	08 95       	ret

000015de <DIO_voidActivePinInPullUpResistance>:
    15de:	84 30       	cpi	r24, 0x04	; 4
    15e0:	a8 f5       	brcc	.+106    	; 0x164c <DIO_voidActivePinInPullUpResistance+0x6e>
    15e2:	68 30       	cpi	r22, 0x08	; 8
    15e4:	98 f5       	brcc	.+102    	; 0x164c <DIO_voidActivePinInPullUpResistance+0x6e>
    15e6:	81 30       	cpi	r24, 0x01	; 1
    15e8:	89 f0       	breq	.+34     	; 0x160c <DIO_voidActivePinInPullUpResistance+0x2e>
    15ea:	28 f0       	brcs	.+10     	; 0x15f6 <DIO_voidActivePinInPullUpResistance+0x18>
    15ec:	82 30       	cpi	r24, 0x02	; 2
    15ee:	c9 f0       	breq	.+50     	; 0x1622 <DIO_voidActivePinInPullUpResistance+0x44>
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	11 f1       	breq	.+68     	; 0x1638 <DIO_voidActivePinInPullUpResistance+0x5a>
    15f4:	08 95       	ret
    15f6:	2b b3       	in	r18, 0x1b	; 27
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_voidActivePinInPullUpResistance+0x24>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	6a 95       	dec	r22
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_voidActivePinInPullUpResistance+0x20>
    1606:	82 2b       	or	r24, r18
    1608:	8b bb       	out	0x1b, r24	; 27
    160a:	08 95       	ret
    160c:	28 b3       	in	r18, 0x18	; 24
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_voidActivePinInPullUpResistance+0x3a>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	6a 95       	dec	r22
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_voidActivePinInPullUpResistance+0x36>
    161c:	82 2b       	or	r24, r18
    161e:	88 bb       	out	0x18, r24	; 24
    1620:	08 95       	ret
    1622:	25 b3       	in	r18, 0x15	; 21
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_voidActivePinInPullUpResistance+0x50>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	6a 95       	dec	r22
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_voidActivePinInPullUpResistance+0x4c>
    1632:	82 2b       	or	r24, r18
    1634:	85 bb       	out	0x15, r24	; 21
    1636:	08 95       	ret
    1638:	22 b3       	in	r18, 0x12	; 18
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_voidActivePinInPullUpResistance+0x66>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	6a 95       	dec	r22
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_voidActivePinInPullUpResistance+0x62>
    1648:	82 2b       	or	r24, r18
    164a:	82 bb       	out	0x12, r24	; 18
    164c:	08 95       	ret

0000164e <GI_voidEnable>:
    164e:	8f b7       	in	r24, 0x3f	; 63
    1650:	80 68       	ori	r24, 0x80	; 128
    1652:	8f bf       	out	0x3f, r24	; 63
    1654:	08 95       	ret

00001656 <TMR0_voidInit>:
    1656:	83 b7       	in	r24, 0x33	; 51
    1658:	8f 7b       	andi	r24, 0xBF	; 191
    165a:	83 bf       	out	0x33, r24	; 51
    165c:	83 b7       	in	r24, 0x33	; 51
    165e:	88 60       	ori	r24, 0x08	; 8
    1660:	83 bf       	out	0x33, r24	; 51
    1662:	83 b7       	in	r24, 0x33	; 51
    1664:	8f 7e       	andi	r24, 0xEF	; 239
    1666:	83 bf       	out	0x33, r24	; 51
    1668:	83 b7       	in	r24, 0x33	; 51
    166a:	8f 7d       	andi	r24, 0xDF	; 223
    166c:	83 bf       	out	0x33, r24	; 51
    166e:	89 b7       	in	r24, 0x39	; 57
    1670:	82 60       	ori	r24, 0x02	; 2
    1672:	89 bf       	out	0x39, r24	; 57
    1674:	89 ef       	ldi	r24, 0xF9	; 249
    1676:	8c bf       	out	0x3c, r24	; 60
    1678:	08 95       	ret

0000167a <TMR0_voidStart>:
    167a:	83 b7       	in	r24, 0x33	; 51
    167c:	81 60       	ori	r24, 0x01	; 1
    167e:	83 bf       	out	0x33, r24	; 51
    1680:	83 b7       	in	r24, 0x33	; 51
    1682:	82 60       	ori	r24, 0x02	; 2
    1684:	83 bf       	out	0x33, r24	; 51
    1686:	83 b7       	in	r24, 0x33	; 51
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	83 bf       	out	0x33, r24	; 51
    168c:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <local_u16Counter+0x1>
    1690:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <local_u16Counter>
    1694:	08 95       	ret

00001696 <TMR0_voidStop>:
    1696:	83 b7       	in	r24, 0x33	; 51
    1698:	8e 7f       	andi	r24, 0xFE	; 254
    169a:	83 bf       	out	0x33, r24	; 51
    169c:	83 b7       	in	r24, 0x33	; 51
    169e:	8d 7f       	andi	r24, 0xFD	; 253
    16a0:	83 bf       	out	0x33, r24	; 51
    16a2:	83 b7       	in	r24, 0x33	; 51
    16a4:	8b 7f       	andi	r24, 0xFB	; 251
    16a6:	83 bf       	out	0x33, r24	; 51
    16a8:	08 95       	ret

000016aa <TMR0_SetCallBackCTC>:
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	21 f0       	breq	.+8      	; 0x16b6 <TMR0_SetCallBackCTC+0xc>
    16ae:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <PRV_pFunCallBackCTC+0x1>
    16b2:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <PRV_pFunCallBackCTC>
    16b6:	08 95       	ret

000016b8 <TMR0clear_flag>:
    16b8:	88 b7       	in	r24, 0x38	; 56
    16ba:	82 60       	ori	r24, 0x02	; 2
    16bc:	88 bf       	out	0x38, r24	; 56
    16be:	88 b7       	in	r24, 0x38	; 56
    16c0:	81 60       	ori	r24, 0x01	; 1
    16c2:	88 bf       	out	0x38, r24	; 56
    16c4:	08 95       	ret

000016c6 <__vector_11>:
    16c6:	1f 92       	push	r1
    16c8:	0f 92       	push	r0
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	0f 92       	push	r0
    16ce:	11 24       	eor	r1, r1
    16d0:	2f 93       	push	r18
    16d2:	3f 93       	push	r19
    16d4:	4f 93       	push	r20
    16d6:	5f 93       	push	r21
    16d8:	6f 93       	push	r22
    16da:	7f 93       	push	r23
    16dc:	8f 93       	push	r24
    16de:	9f 93       	push	r25
    16e0:	af 93       	push	r26
    16e2:	bf 93       	push	r27
    16e4:	ef 93       	push	r30
    16e6:	ff 93       	push	r31
    16e8:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <local_u16Counter>
    16ec:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <local_u16Counter+0x1>
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <local_u16Counter+0x1>
    16f6:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <local_u16Counter>
    16fa:	88 3e       	cpi	r24, 0xE8	; 232
    16fc:	93 40       	sbci	r25, 0x03	; 3
    16fe:	69 f4       	brne	.+26     	; 0x171a <__vector_11+0x54>
    1700:	81 e7       	ldi	r24, 0x71	; 113
    1702:	82 bf       	out	0x32, r24	; 50
    1704:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <local_u16Counter+0x1>
    1708:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <local_u16Counter>
    170c:	e0 91 a9 02 	lds	r30, 0x02A9	; 0x8002a9 <PRV_pFunCallBackOVF>
    1710:	f0 91 aa 02 	lds	r31, 0x02AA	; 0x8002aa <PRV_pFunCallBackOVF+0x1>
    1714:	30 97       	sbiw	r30, 0x00	; 0
    1716:	09 f0       	breq	.+2      	; 0x171a <__vector_11+0x54>
    1718:	09 95       	icall
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	0f 90       	pop	r0
    1738:	1f 90       	pop	r1
    173a:	18 95       	reti

0000173c <__vector_10>:
    173c:	1f 92       	push	r1
    173e:	0f 92       	push	r0
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	0f 92       	push	r0
    1744:	11 24       	eor	r1, r1
    1746:	2f 93       	push	r18
    1748:	3f 93       	push	r19
    174a:	4f 93       	push	r20
    174c:	5f 93       	push	r21
    174e:	6f 93       	push	r22
    1750:	7f 93       	push	r23
    1752:	8f 93       	push	r24
    1754:	9f 93       	push	r25
    1756:	af 93       	push	r26
    1758:	bf 93       	push	r27
    175a:	ef 93       	push	r30
    175c:	ff 93       	push	r31
    175e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <local_u16Counter>
    1762:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <local_u16Counter+0x1>
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <local_u16Counter+0x1>
    176c:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <local_u16Counter>
    1770:	88 38       	cpi	r24, 0x88	; 136
    1772:	93 41       	sbci	r25, 0x13	; 19
    1774:	69 f4       	brne	.+26     	; 0x1790 <__vector_10+0x54>
    1776:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <local_u16Counter+0x1>
    177a:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <local_u16Counter>
    177e:	e0 91 a7 02 	lds	r30, 0x02A7	; 0x8002a7 <PRV_pFunCallBackCTC>
    1782:	f0 91 a8 02 	lds	r31, 0x02A8	; 0x8002a8 <PRV_pFunCallBackCTC+0x1>
    1786:	30 97       	sbiw	r30, 0x00	; 0
    1788:	19 f0       	breq	.+6      	; 0x1790 <__vector_10+0x54>
    178a:	09 95       	icall
    178c:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <TMR0clear_flag>
    1790:	ff 91       	pop	r31
    1792:	ef 91       	pop	r30
    1794:	bf 91       	pop	r27
    1796:	af 91       	pop	r26
    1798:	9f 91       	pop	r25
    179a:	8f 91       	pop	r24
    179c:	7f 91       	pop	r23
    179e:	6f 91       	pop	r22
    17a0:	5f 91       	pop	r21
    17a2:	4f 91       	pop	r20
    17a4:	3f 91       	pop	r19
    17a6:	2f 91       	pop	r18
    17a8:	0f 90       	pop	r0
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	0f 90       	pop	r0
    17ae:	1f 90       	pop	r1
    17b0:	18 95       	reti

000017b2 <TWI_voidInitMaster>:
    17b2:	8c e0       	ldi	r24, 0x0C	; 12
    17b4:	80 b9       	out	0x00, r24	; 0
    17b6:	81 b1       	in	r24, 0x01	; 1
    17b8:	8d 7f       	andi	r24, 0xFD	; 253
    17ba:	81 b9       	out	0x01, r24	; 1
    17bc:	81 b1       	in	r24, 0x01	; 1
    17be:	8e 7f       	andi	r24, 0xFE	; 254
    17c0:	81 b9       	out	0x01, r24	; 1
    17c2:	86 b7       	in	r24, 0x36	; 54
    17c4:	84 60       	ori	r24, 0x04	; 4
    17c6:	86 bf       	out	0x36, r24	; 54
    17c8:	08 95       	ret

000017ca <TWI_voidSendStartCondition>:
    17ca:	86 b7       	in	r24, 0x36	; 54
    17cc:	80 62       	ori	r24, 0x20	; 32
    17ce:	86 bf       	out	0x36, r24	; 54
    17d0:	86 b7       	in	r24, 0x36	; 54
    17d2:	80 68       	ori	r24, 0x80	; 128
    17d4:	86 bf       	out	0x36, r24	; 54
    17d6:	06 b6       	in	r0, 0x36	; 54
    17d8:	07 fe       	sbrs	r0, 7
    17da:	fd cf       	rjmp	.-6      	; 0x17d6 <TWI_voidSendStartCondition+0xc>
    17dc:	81 b1       	in	r24, 0x01	; 1
    17de:	88 7f       	andi	r24, 0xF8	; 248
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	e1 f7       	brne	.-8      	; 0x17dc <TWI_voidSendStartCondition+0x12>
    17e4:	08 95       	ret

000017e6 <TWI_voidSendRepeatedStartCondition>:
    17e6:	86 b7       	in	r24, 0x36	; 54
    17e8:	80 62       	ori	r24, 0x20	; 32
    17ea:	86 bf       	out	0x36, r24	; 54
    17ec:	86 b7       	in	r24, 0x36	; 54
    17ee:	80 68       	ori	r24, 0x80	; 128
    17f0:	86 bf       	out	0x36, r24	; 54
    17f2:	06 b6       	in	r0, 0x36	; 54
    17f4:	07 fe       	sbrs	r0, 7
    17f6:	fd cf       	rjmp	.-6      	; 0x17f2 <TWI_voidSendRepeatedStartCondition+0xc>
    17f8:	81 b1       	in	r24, 0x01	; 1
    17fa:	88 7f       	andi	r24, 0xF8	; 248
    17fc:	80 31       	cpi	r24, 0x10	; 16
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <TWI_voidSendRepeatedStartCondition+0x12>
    1800:	08 95       	ret

00001802 <TWI_voidSendStopCondition>:
    1802:	86 b7       	in	r24, 0x36	; 54
    1804:	80 61       	ori	r24, 0x10	; 16
    1806:	86 bf       	out	0x36, r24	; 54
    1808:	86 b7       	in	r24, 0x36	; 54
    180a:	80 68       	ori	r24, 0x80	; 128
    180c:	86 bf       	out	0x36, r24	; 54
    180e:	08 95       	ret

00001810 <TWI_voidSendSlaveAddWithWrite>:
    1810:	88 23       	and	r24, r24
    1812:	94 f0       	brlt	.+36     	; 0x1838 <TWI_voidSendSlaveAddWithWrite+0x28>
    1814:	88 0f       	add	r24, r24
    1816:	83 b9       	out	0x03, r24	; 3
    1818:	83 b1       	in	r24, 0x03	; 3
    181a:	8e 7f       	andi	r24, 0xFE	; 254
    181c:	83 b9       	out	0x03, r24	; 3
    181e:	86 b7       	in	r24, 0x36	; 54
    1820:	8f 7d       	andi	r24, 0xDF	; 223
    1822:	86 bf       	out	0x36, r24	; 54
    1824:	86 b7       	in	r24, 0x36	; 54
    1826:	80 68       	ori	r24, 0x80	; 128
    1828:	86 bf       	out	0x36, r24	; 54
    182a:	06 b6       	in	r0, 0x36	; 54
    182c:	07 fe       	sbrs	r0, 7
    182e:	fd cf       	rjmp	.-6      	; 0x182a <TWI_voidSendSlaveAddWithWrite+0x1a>
    1830:	81 b1       	in	r24, 0x01	; 1
    1832:	88 7f       	andi	r24, 0xF8	; 248
    1834:	88 31       	cpi	r24, 0x18	; 24
    1836:	e1 f7       	brne	.-8      	; 0x1830 <TWI_voidSendSlaveAddWithWrite+0x20>
    1838:	08 95       	ret

0000183a <TWI_voidSendSlaveAddWithRead>:
    183a:	88 23       	and	r24, r24
    183c:	94 f0       	brlt	.+36     	; 0x1862 <TWI_voidSendSlaveAddWithRead+0x28>
    183e:	88 0f       	add	r24, r24
    1840:	83 b9       	out	0x03, r24	; 3
    1842:	83 b1       	in	r24, 0x03	; 3
    1844:	81 60       	ori	r24, 0x01	; 1
    1846:	83 b9       	out	0x03, r24	; 3
    1848:	86 b7       	in	r24, 0x36	; 54
    184a:	8f 7d       	andi	r24, 0xDF	; 223
    184c:	86 bf       	out	0x36, r24	; 54
    184e:	86 b7       	in	r24, 0x36	; 54
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	86 bf       	out	0x36, r24	; 54
    1854:	06 b6       	in	r0, 0x36	; 54
    1856:	07 fe       	sbrs	r0, 7
    1858:	fd cf       	rjmp	.-6      	; 0x1854 <TWI_voidSendSlaveAddWithRead+0x1a>
    185a:	81 b1       	in	r24, 0x01	; 1
    185c:	88 7f       	andi	r24, 0xF8	; 248
    185e:	80 34       	cpi	r24, 0x40	; 64
    1860:	e1 f7       	brne	.-8      	; 0x185a <TWI_voidSendSlaveAddWithRead+0x20>
    1862:	08 95       	ret

00001864 <TWI_voidTransmitMasterDataByte>:
    1864:	83 b9       	out	0x03, r24	; 3
    1866:	86 b7       	in	r24, 0x36	; 54
    1868:	80 68       	ori	r24, 0x80	; 128
    186a:	86 bf       	out	0x36, r24	; 54
    186c:	06 b6       	in	r0, 0x36	; 54
    186e:	07 fe       	sbrs	r0, 7
    1870:	fd cf       	rjmp	.-6      	; 0x186c <TWI_voidTransmitMasterDataByte+0x8>
    1872:	81 b1       	in	r24, 0x01	; 1
    1874:	88 7f       	andi	r24, 0xF8	; 248
    1876:	88 32       	cpi	r24, 0x28	; 40
    1878:	e1 f7       	brne	.-8      	; 0x1872 <TWI_voidTransmitMasterDataByte+0xe>
    187a:	08 95       	ret

0000187c <TWI_voidRecieveMasterDataByteWithAch>:
    187c:	fc 01       	movw	r30, r24
    187e:	89 2b       	or	r24, r25
    1880:	91 f0       	breq	.+36     	; 0x18a6 <TWI_voidRecieveMasterDataByteWithAch+0x2a>
    1882:	96 b7       	in	r25, 0x36	; 54
    1884:	90 64       	ori	r25, 0x40	; 64
    1886:	96 bf       	out	0x36, r25	; 54
    1888:	96 b7       	in	r25, 0x36	; 54
    188a:	90 68       	ori	r25, 0x80	; 128
    188c:	96 bf       	out	0x36, r25	; 54
    188e:	06 b6       	in	r0, 0x36	; 54
    1890:	07 fe       	sbrs	r0, 7
    1892:	fd cf       	rjmp	.-6      	; 0x188e <TWI_voidRecieveMasterDataByteWithAch+0x12>
    1894:	91 b1       	in	r25, 0x01	; 1
    1896:	98 7f       	andi	r25, 0xF8	; 248
    1898:	90 35       	cpi	r25, 0x50	; 80
    189a:	e1 f7       	brne	.-8      	; 0x1894 <TWI_voidRecieveMasterDataByteWithAch+0x18>
    189c:	83 b1       	in	r24, 0x03	; 3
    189e:	80 83       	st	Z, r24
    18a0:	86 b7       	in	r24, 0x36	; 54
    18a2:	8f 7b       	andi	r24, 0xBF	; 191
    18a4:	86 bf       	out	0x36, r24	; 54
    18a6:	08 95       	ret

000018a8 <TWI_voidRecieveMasterDataByteWithNAch>:
    18a8:	fc 01       	movw	r30, r24
    18aa:	89 2b       	or	r24, r25
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
    18ae:	96 b7       	in	r25, 0x36	; 54
    18b0:	90 68       	ori	r25, 0x80	; 128
    18b2:	96 bf       	out	0x36, r25	; 54
    18b4:	06 b6       	in	r0, 0x36	; 54
    18b6:	07 fe       	sbrs	r0, 7
    18b8:	fd cf       	rjmp	.-6      	; 0x18b4 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
    18ba:	91 b1       	in	r25, 0x01	; 1
    18bc:	98 7f       	andi	r25, 0xF8	; 248
    18be:	98 35       	cpi	r25, 0x58	; 88
    18c0:	e1 f7       	brne	.-8      	; 0x18ba <TWI_voidRecieveMasterDataByteWithNAch+0x12>
    18c2:	83 b1       	in	r24, 0x03	; 3
    18c4:	80 83       	st	Z, r24
    18c6:	08 95       	ret

000018c8 <UART_voidInit>:
    18c8:	8b b1       	in	r24, 0x0b	; 11
    18ca:	8d 7f       	andi	r24, 0xFD	; 253
    18cc:	8b b9       	out	0x0b, r24	; 11
    18ce:	87 e6       	ldi	r24, 0x67	; 103
    18d0:	89 b9       	out	0x09, r24	; 9
    18d2:	8a b1       	in	r24, 0x0a	; 10
    18d4:	8b 7f       	andi	r24, 0xFB	; 251
    18d6:	8a b9       	out	0x0a, r24	; 10
    18d8:	86 e8       	ldi	r24, 0x86	; 134
    18da:	80 bd       	out	0x20, r24	; 32
    18dc:	8a b1       	in	r24, 0x0a	; 10
    18de:	80 61       	ori	r24, 0x10	; 16
    18e0:	8a b9       	out	0x0a, r24	; 10
    18e2:	8a b1       	in	r24, 0x0a	; 10
    18e4:	88 60       	ori	r24, 0x08	; 8
    18e6:	8a b9       	out	0x0a, r24	; 10
    18e8:	08 95       	ret

000018ea <UART_voidTxChar>:
    18ea:	8c b9       	out	0x0c, r24	; 12
    18ec:	5d 9b       	sbis	0x0b, 5	; 11
    18ee:	fe cf       	rjmp	.-4      	; 0x18ec <UART_voidTxChar+0x2>
    18f0:	08 95       	ret

000018f2 <UART_voidRxChar>:
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	29 f0       	breq	.+10     	; 0x1900 <UART_voidRxChar+0xe>
    18f6:	5f 9b       	sbis	0x0b, 7	; 11
    18f8:	fe cf       	rjmp	.-4      	; 0x18f6 <UART_voidRxChar+0x4>
    18fa:	2c b1       	in	r18, 0x0c	; 12
    18fc:	fc 01       	movw	r30, r24
    18fe:	20 83       	st	Z, r18
    1900:	08 95       	ret

00001902 <UART_voidTxString>:
    1902:	0f 93       	push	r16
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	29 f4       	brne	.+10     	; 0x1916 <UART_voidTxString+0x14>
    190c:	0c c0       	rjmp	.+24     	; 0x1926 <UART_voidTxString+0x24>
    190e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <UART_voidTxChar>
    1912:	cf 5f       	subi	r28, 0xFF	; 255
    1914:	02 c0       	rjmp	.+4      	; 0x191a <UART_voidTxString+0x18>
    1916:	8c 01       	movw	r16, r24
    1918:	c0 e0       	ldi	r28, 0x00	; 0
    191a:	f8 01       	movw	r30, r16
    191c:	ec 0f       	add	r30, r28
    191e:	f1 1d       	adc	r31, r1
    1920:	80 81       	ld	r24, Z
    1922:	81 11       	cpse	r24, r1
    1924:	f4 cf       	rjmp	.-24     	; 0x190e <UART_voidTxString+0xc>
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	08 95       	ret

0000192e <__udivmodsi4>:
    192e:	a1 e2       	ldi	r26, 0x21	; 33
    1930:	1a 2e       	mov	r1, r26
    1932:	aa 1b       	sub	r26, r26
    1934:	bb 1b       	sub	r27, r27
    1936:	fd 01       	movw	r30, r26
    1938:	0d c0       	rjmp	.+26     	; 0x1954 <__udivmodsi4_ep>

0000193a <__udivmodsi4_loop>:
    193a:	aa 1f       	adc	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	ee 1f       	adc	r30, r30
    1940:	ff 1f       	adc	r31, r31
    1942:	a2 17       	cp	r26, r18
    1944:	b3 07       	cpc	r27, r19
    1946:	e4 07       	cpc	r30, r20
    1948:	f5 07       	cpc	r31, r21
    194a:	20 f0       	brcs	.+8      	; 0x1954 <__udivmodsi4_ep>
    194c:	a2 1b       	sub	r26, r18
    194e:	b3 0b       	sbc	r27, r19
    1950:	e4 0b       	sbc	r30, r20
    1952:	f5 0b       	sbc	r31, r21

00001954 <__udivmodsi4_ep>:
    1954:	66 1f       	adc	r22, r22
    1956:	77 1f       	adc	r23, r23
    1958:	88 1f       	adc	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	1a 94       	dec	r1
    195e:	69 f7       	brne	.-38     	; 0x193a <__udivmodsi4_loop>
    1960:	60 95       	com	r22
    1962:	70 95       	com	r23
    1964:	80 95       	com	r24
    1966:	90 95       	com	r25
    1968:	9b 01       	movw	r18, r22
    196a:	ac 01       	movw	r20, r24
    196c:	bd 01       	movw	r22, r26
    196e:	cf 01       	movw	r24, r30
    1970:	08 95       	ret

00001972 <_exit>:
    1972:	f8 94       	cli

00001974 <__stop_program>:
    1974:	ff cf       	rjmp	.-2      	; 0x1974 <__stop_program>
