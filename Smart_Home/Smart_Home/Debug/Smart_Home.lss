
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000466  00800060  000035d6  0000366a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000039  008004c6  008004c6  00003ad0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000079a3  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001407  00000000  00000000  0000b9bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039d7  00000000  00000000  0000cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c68  00000000  00000000  0001079c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017aa  00000000  00000000  00011404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003220  00000000  00000000  00012bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00015dce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__vector_4>
      14:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0e 14 	jmp	0x281c	; 0x281c <__vector_10>
      2c:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 10 	call	0x21ea	; 0x21ea <main>
      8a:	0c 94 e9 1a 	jmp	0x35d2	; 0x35d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CheckTempForAc>:
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
	}
}
      92:	66 ec       	ldi	r22, 0xC6	; 198
      94:	74 e0       	ldi	r23, 0x04	; 4
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
      9c:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <__data_end>
      a0:	8d 31       	cpi	r24, 0x1D	; 29
      a2:	30 f0       	brcs	.+12     	; 0xb0 <CheckTempForAc+0x1e>
      a4:	40 e0       	ldi	r20, 0x00	; 0
      a6:	62 e0       	ldi	r22, 0x02	; 2
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
      ae:	08 95       	ret
      b0:	85 31       	cpi	r24, 0x15	; 21
      b2:	28 f4       	brcc	.+10     	; 0xbe <CheckTempForAc+0x2c>
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
      be:	08 95       	ret

000000c0 <HOME_voidInit>:
      c0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_voidInit>
      c4:	0e 94 dd 12 	call	0x25ba	; 0x25ba <PWM_voidInitChannel_1A>
      c8:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <PWM_voidInitChannel_1B>
      cc:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <EEPROM_voidInit>
      d0:	64 e0       	ldi	r22, 0x04	; 4
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 d6 10 	call	0x21ac	; 0x21ac <SERVO_voidInit>
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SERVO_voidStartByAngle>
      e2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <KPD_voidInit>
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 1b 11 	call	0x2236	; 0x2236 <ADC_voidInit>
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
      f6:	41 e0       	ldi	r20, 0x01	; 1
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
     100:	66 e0       	ldi	r22, 0x06	; 6
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <BUZZER_voidInit>
     108:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <BL_voidInit>
     10c:	41 e0       	ldi	r20, 0x01	; 1
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
     120:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <GI_voidEnable>
     124:	0e 94 9b 13 	call	0x2736	; 0x2736 <TMR0_voidInit>
     128:	63 e0       	ldi	r22, 0x03	; 3
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LED_voidInit>
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 b8 10 	call	0x2170	; 0x2170 <LED_voidInit>
     138:	62 e0       	ldi	r22, 0x02	; 2
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LED_voidInit>
     140:	63 e0       	ldi	r22, 0x03	; 3
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 b8 10 	call	0x2170	; 0x2170 <LED_voidInit>
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	0e 94 b8 10 	call	0x2170	; 0x2170 <LED_voidInit>
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 b8 10 	call	0x2170	; 0x2170 <LED_voidInit>
     158:	0e 94 49 14 	call	0x2892	; 0x2892 <TMR2_voidInit>
     15c:	89 e4       	ldi	r24, 0x49	; 73
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 69 14 	call	0x28d2	; 0x28d2 <TMR2_SetCallBackCTC>
     164:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <TMR2_voidStart>
     168:	08 95       	ret

0000016a <HOME_voidRemoteGetUserAndPass>:
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	09 f4       	brne	.+2      	; 0x17e <HOME_voidRemoteGetUserAndPass+0x14>
     17c:	5e c0       	rjmp	.+188    	; 0x23a <HOME_voidRemoteGetUserAndPass+0xd0>
     17e:	61 15       	cp	r22, r1
     180:	71 05       	cpc	r23, r1
     182:	09 f4       	brne	.+2      	; 0x186 <HOME_voidRemoteGetUserAndPass+0x1c>
     184:	5a c0       	rjmp	.+180    	; 0x23a <HOME_voidRemoteGetUserAndPass+0xd0>
     186:	8b 01       	movw	r16, r22
     188:	7c 01       	movw	r14, r24
     18a:	8c ef       	ldi	r24, 0xFC	; 252
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     192:	8a e0       	ldi	r24, 0x0A	; 10
     194:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     198:	c0 e0       	ldi	r28, 0x00	; 0
     19a:	0b c0       	rjmp	.+22     	; 0x1b2 <HOME_voidRemoteGetUserAndPass+0x48>
     19c:	67 01       	movw	r12, r14
     19e:	cc 0e       	add	r12, r28
     1a0:	d1 1c       	adc	r13, r1
     1a2:	c6 01       	movw	r24, r12
     1a4:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
     1a8:	f6 01       	movw	r30, r12
     1aa:	80 81       	ld	r24, Z
     1ac:	83 32       	cpi	r24, 0x23	; 35
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <HOME_voidRemoteGetUserAndPass+0x4c>
     1b0:	cf 5f       	subi	r28, 0xFF	; 255
     1b2:	c8 30       	cpi	r28, 0x08	; 8
     1b4:	98 f3       	brcs	.-26     	; 0x19c <HOME_voidRemoteGetUserAndPass+0x32>
     1b6:	f7 01       	movw	r30, r14
     1b8:	ec 0f       	add	r30, r28
     1ba:	f1 1d       	adc	r31, r1
     1bc:	10 82       	st	Z, r1
     1be:	84 ef       	ldi	r24, 0xF4	; 244
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     1c6:	c0 e0       	ldi	r28, 0x00	; 0
     1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <HOME_voidRemoteGetUserAndPass+0x6e>
     1ca:	f7 01       	movw	r30, r14
     1cc:	ec 0f       	add	r30, r28
     1ce:	f1 1d       	adc	r31, r1
     1d0:	80 81       	ld	r24, Z
     1d2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     1d6:	cf 5f       	subi	r28, 0xFF	; 255
     1d8:	c8 30       	cpi	r28, 0x08	; 8
     1da:	b8 f3       	brcs	.-18     	; 0x1ca <HOME_voidRemoteGetUserAndPass+0x60>
     1dc:	8a e0       	ldi	r24, 0x0A	; 10
     1de:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     1e2:	87 e0       	ldi	r24, 0x07	; 7
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     1ea:	8a e0       	ldi	r24, 0x0A	; 10
     1ec:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     1f0:	c0 e0       	ldi	r28, 0x00	; 0
     1f2:	0b c0       	rjmp	.+22     	; 0x20a <HOME_voidRemoteGetUserAndPass+0xa0>
     1f4:	78 01       	movw	r14, r16
     1f6:	ec 0e       	add	r14, r28
     1f8:	f1 1c       	adc	r15, r1
     1fa:	c7 01       	movw	r24, r14
     1fc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
     200:	f7 01       	movw	r30, r14
     202:	80 81       	ld	r24, Z
     204:	83 32       	cpi	r24, 0x23	; 35
     206:	19 f0       	breq	.+6      	; 0x20e <HOME_voidRemoteGetUserAndPass+0xa4>
     208:	cf 5f       	subi	r28, 0xFF	; 255
     20a:	c9 30       	cpi	r28, 0x09	; 9
     20c:	98 f3       	brcs	.-26     	; 0x1f4 <HOME_voidRemoteGetUserAndPass+0x8a>
     20e:	f8 01       	movw	r30, r16
     210:	ec 0f       	add	r30, r28
     212:	f1 1d       	adc	r31, r1
     214:	10 82       	st	Z, r1
     216:	81 e1       	ldi	r24, 0x11	; 17
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     21e:	c0 e0       	ldi	r28, 0x00	; 0
     220:	07 c0       	rjmp	.+14     	; 0x230 <HOME_voidRemoteGetUserAndPass+0xc6>
     222:	f8 01       	movw	r30, r16
     224:	ec 0f       	add	r30, r28
     226:	f1 1d       	adc	r31, r1
     228:	80 81       	ld	r24, Z
     22a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     22e:	cf 5f       	subi	r28, 0xFF	; 255
     230:	c8 30       	cpi	r28, 0x08	; 8
     232:	b8 f3       	brcs	.-18     	; 0x222 <HOME_voidRemoteGetUserAndPass+0xb8>
     234:	8a e0       	ldi	r24, 0x0A	; 10
     236:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	df 90       	pop	r13
     246:	cf 90       	pop	r12
     248:	08 95       	ret

0000024a <HOME_voidChangeUserNameAndPass>:
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	e0 97       	sbiw	r28, 0x30	; 48
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	f8 94       	cli
     260:	de bf       	out	0x3e, r29	; 62
     262:	0f be       	out	0x3f, r0	; 63
     264:	cd bf       	out	0x3d, r28	; 61
     266:	8a ee       	ldi	r24, 0xEA	; 234
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     26e:	80 e9       	ldi	r24, 0x90	; 144
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     276:	be 01       	movw	r22, r28
     278:	67 5f       	subi	r22, 0xF7	; 247
     27a:	7f 4f       	sbci	r23, 0xFF	; 255
     27c:	ce 01       	movw	r24, r28
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	0e 94 b5 00 	call	0x16a	; 0x16a <HOME_voidRemoteGetUserAndPass>
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	51 c0       	rjmp	.+162    	; 0x32a <HOME_voidChangeUserNameAndPass+0xe0>
     288:	15 30       	cpi	r17, 0x05	; 5
     28a:	09 f4       	brne	.+2      	; 0x28e <HOME_voidChangeUserNameAndPass+0x44>
     28c:	4d c0       	rjmp	.+154    	; 0x328 <HOME_voidChangeUserNameAndPass+0xde>
     28e:	01 2f       	mov	r16, r17
     290:	02 95       	swap	r16
     292:	00 7f       	andi	r16, 0xF0	; 240
     294:	e0 2e       	mov	r14, r16
     296:	f1 2c       	mov	r15, r1
     298:	ae 01       	movw	r20, r28
     29a:	4f 5d       	subi	r20, 0xDF	; 223
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	68 e0       	ldi	r22, 0x08	; 8
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	c7 01       	movw	r24, r14
     2a4:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <EEPROM_voidSequentialRead>
     2a8:	ae 01       	movw	r20, r28
     2aa:	47 5d       	subi	r20, 0xD7	; 215
     2ac:	5f 4f       	sbci	r21, 0xFF	; 255
     2ae:	68 e0       	ldi	r22, 0x08	; 8
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	c7 01       	movw	r24, r14
     2b4:	08 96       	adiw	r24, 0x08	; 8
     2b6:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <EEPROM_voidSequentialRead>
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	20 e0       	ldi	r18, 0x00	; 0
     2be:	14 c0       	rjmp	.+40     	; 0x2e8 <HOME_voidChangeUserNameAndPass+0x9e>
     2c0:	82 2f       	mov	r24, r18
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	e1 e0       	ldi	r30, 0x01	; 1
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	ec 0f       	add	r30, r28
     2ca:	fd 1f       	adc	r31, r29
     2cc:	e8 0f       	add	r30, r24
     2ce:	f9 1f       	adc	r31, r25
     2d0:	30 81       	ld	r19, Z
     2d2:	e1 e2       	ldi	r30, 0x21	; 33
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	ec 0f       	add	r30, r28
     2d8:	fd 1f       	adc	r31, r29
     2da:	e8 0f       	add	r30, r24
     2dc:	f9 1f       	adc	r31, r25
     2de:	80 81       	ld	r24, Z
     2e0:	38 13       	cpse	r19, r24
     2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <HOME_voidChangeUserNameAndPass+0x9c>
     2e4:	4f 5f       	subi	r20, 0xFF	; 255
     2e6:	2f 5f       	subi	r18, 0xFF	; 255
     2e8:	28 30       	cpi	r18, 0x08	; 8
     2ea:	50 f3       	brcs	.-44     	; 0x2c0 <HOME_voidChangeUserNameAndPass+0x76>
     2ec:	48 30       	cpi	r20, 0x08	; 8
     2ee:	e1 f4       	brne	.+56     	; 0x328 <HOME_voidChangeUserNameAndPass+0xde>
     2f0:	15 c0       	rjmp	.+42     	; 0x31c <HOME_voidChangeUserNameAndPass+0xd2>
     2f2:	82 2f       	mov	r24, r18
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	e9 e0       	ldi	r30, 0x09	; 9
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	ec 0f       	add	r30, r28
     2fc:	fd 1f       	adc	r31, r29
     2fe:	e8 0f       	add	r30, r24
     300:	f9 1f       	adc	r31, r25
     302:	30 81       	ld	r19, Z
     304:	e9 e2       	ldi	r30, 0x29	; 41
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	ec 0f       	add	r30, r28
     30a:	fd 1f       	adc	r31, r29
     30c:	e8 0f       	add	r30, r24
     30e:	f9 1f       	adc	r31, r25
     310:	80 81       	ld	r24, Z
     312:	38 13       	cpse	r19, r24
     314:	01 c0       	rjmp	.+2      	; 0x318 <HOME_voidChangeUserNameAndPass+0xce>
     316:	4f 5f       	subi	r20, 0xFF	; 255
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	02 c0       	rjmp	.+4      	; 0x320 <HOME_voidChangeUserNameAndPass+0xd6>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	28 30       	cpi	r18, 0x08	; 8
     322:	38 f3       	brcs	.-50     	; 0x2f2 <HOME_voidChangeUserNameAndPass+0xa8>
     324:	48 30       	cpi	r20, 0x08	; 8
     326:	31 f0       	breq	.+12     	; 0x334 <HOME_voidChangeUserNameAndPass+0xea>
     328:	1f 5f       	subi	r17, 0xFF	; 255
     32a:	1b 30       	cpi	r17, 0x0B	; 11
     32c:	08 f4       	brcc	.+2      	; 0x330 <HOME_voidChangeUserNameAndPass+0xe6>
     32e:	ac cf       	rjmp	.-168    	; 0x288 <HOME_voidChangeUserNameAndPass+0x3e>
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	01 c0       	rjmp	.+2      	; 0x336 <HOME_voidChangeUserNameAndPass+0xec>
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	21 f5       	brne	.+72     	; 0x382 <HOME_voidChangeUserNameAndPass+0x138>
     33a:	8d e1       	ldi	r24, 0x1D	; 29
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     342:	8a e0       	ldi	r24, 0x0A	; 10
     344:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     348:	be 01       	movw	r22, r28
     34a:	67 5e       	subi	r22, 0xE7	; 231
     34c:	7f 4f       	sbci	r23, 0xFF	; 255
     34e:	ce 01       	movw	r24, r28
     350:	41 96       	adiw	r24, 0x11	; 17
     352:	0e 94 b5 00 	call	0x16a	; 0x16a <HOME_voidRemoteGetUserAndPass>
     356:	10 e0       	ldi	r17, 0x00	; 0
     358:	be 01       	movw	r22, r28
     35a:	6f 5e       	subi	r22, 0xEF	; 239
     35c:	7f 4f       	sbci	r23, 0xFF	; 255
     35e:	c8 01       	movw	r24, r16
     360:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <EEPROM_voidWritePage>
     364:	be 01       	movw	r22, r28
     366:	67 5e       	subi	r22, 0xE7	; 231
     368:	7f 4f       	sbci	r23, 0xFF	; 255
     36a:	c8 01       	movw	r24, r16
     36c:	08 96       	adiw	r24, 0x08	; 8
     36e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <EEPROM_voidWritePage>
     372:	80 e4       	ldi	r24, 0x40	; 64
     374:	92 e0       	ldi	r25, 0x02	; 2
     376:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     37a:	8a e0       	ldi	r24, 0x0A	; 10
     37c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     380:	07 c0       	rjmp	.+14     	; 0x390 <HOME_voidChangeUserNameAndPass+0x146>
     382:	8f e5       	ldi	r24, 0x5F	; 95
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
     38a:	8a e0       	ldi	r24, 0x0A	; 10
     38c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
     390:	e0 96       	adiw	r28, 0x30	; 48
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	ff 90       	pop	r15
     3a6:	ef 90       	pop	r14
     3a8:	08 95       	ret

000003aa <KPD_Interface_RemoteAdmin>:
void KPD_Interface_RemoteAdmin(void)
{
	// This function is for admin usertype for accessing the smart home remotely showing all options available for the admin//

	//setting the TRM0 ctc interrupt function
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
     3aa:	8d eb       	ldi	r24, 0xBD	; 189
     3ac:	99 e0       	ldi	r25, 0x09	; 9
     3ae:	0e 94 c5 13 	call	0x278a	; 0x278a <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
     3b2:	8d e0       	ldi	r24, 0x0D	; 13
     3b4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
     3b8:	8b e7       	ldi	r24, 0x7B	; 123
     3ba:	92 e0       	ldi	r25, 0x02	; 2
     3bc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	BL_voidTxChar('\r');
     3c0:	8d e0       	ldi	r24, 0x0D	; 13
     3c2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
     3c6:	88 e8       	ldi	r24, 0x88	; 136
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	BL_voidTxChar('\r');
     3ce:	8d e0       	ldi	r24, 0x0D	; 13
     3d0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	BL_voidTxString("5- change username and password");
     3d4:	86 e9       	ldi	r24, 0x96	; 150
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	BL_voidTxChar('\r');
     3dc:	8d e0       	ldi	r24, 0x0D	; 13
     3de:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	TMR0_voidStart();
     3e2:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
	//reciving user selection from BL
	BL_voidRxChar(&bluetooh_value);
     3e6:	89 ec       	ldi	r24, 0xC9	; 201
     3e8:	94 e0       	ldi	r25, 0x04	; 4
     3ea:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
	TMR0_voidStop();
     3ee:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
	switch (bluetooh_value)
     3f2:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     3f6:	83 33       	cpi	r24, 0x33	; 51
     3f8:	09 f4       	brne	.+2      	; 0x3fc <KPD_Interface_RemoteAdmin+0x52>
     3fa:	56 c3       	rjmp	.+1708   	; 0xaa8 <__stack+0x249>
     3fc:	30 f4       	brcc	.+12     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     3fe:	81 33       	cpi	r24, 0x31	; 49
     400:	59 f0       	breq	.+22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     402:	82 33       	cpi	r24, 0x32	; 50
     404:	09 f4       	brne	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     406:	3f c0       	rjmp	.+126    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     408:	08 95       	ret
     40a:	84 33       	cpi	r24, 0x34	; 52
     40c:	09 f4       	brne	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40e:	78 c3       	rjmp	.+1776   	; 0xb00 <__stack+0x2a1>
     410:	85 33       	cpi	r24, 0x35	; 53
     412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	c7 c3       	rjmp	.+1934   	; 0xba4 <__stack+0x345>
     416:	08 95       	ret
	{
	case ('1'):
		BL_voidTxString("AC Is On/off");
     418:	86 eb       	ldi	r24, 0xB6	; 182
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
        BL_voidTxChar('\r');
     420:	8d e0       	ldi	r24, 0x0D	; 13
     422:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
		//getting temp from ADC
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     426:	66 ec       	ldi	r22, 0xC6	; 198
     428:	74 e0       	ldi	r23, 0x04	; 4
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
				//sprintf is used to format and store a string in a buffer
				sprintf(tempString, "Room Temp: %d c", local_temp);
     430:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <__data_end>
     434:	1f 92       	push	r1
     436:	8f 93       	push	r24
     438:	83 ec       	ldi	r24, 0xC3	; 195
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	8b ee       	ldi	r24, 0xEB	; 235
     442:	94 e0       	ldi	r25, 0x04	; 4
     444:	9f 93       	push	r25
     446:	8f 93       	push	r24
     448:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
				BL_voidTxString(tempString);
     44c:	8b ee       	ldi	r24, 0xEB	; 235
     44e:	94 e0       	ldi	r25, 0x04	; 4
     450:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
     454:	8d e0       	ldi	r24, 0x0D	; 13
     456:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
     45a:	83 ed       	ldi	r24, 0xD3	; 211
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
     462:	8d e0       	ldi	r24, 0x0D	; 13
     464:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				TMR0_voidStart();
     468:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
				BL_voidRxChar(&bluetooh_value);
     46c:	89 ec       	ldi	r24, 0xC9	; 201
     46e:	94 e0       	ldi	r25, 0x04	; 4
     470:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
				TMR0_voidStop();
     474:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
				if (bluetooh_value=='0')
				{
					
				}
		break;
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	08 95       	ret
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
     486:	8d e0       	ldi	r24, 0x0D	; 13
     488:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
            BL_voidTxString("Choose light to");
     48c:	80 ee       	ldi	r24, 0xE0	; 224
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
            BL_voidTxChar('\r');
     494:	8d e0       	ldi	r24, 0x0D	; 13
     496:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
     49a:	80 ef       	ldi	r24, 0xF0	; 240
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
			BL_voidTxChar('\r');
     4a2:	8d e0       	ldi	r24, 0x0D	; 13
     4a4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
			BL_voidTxChar('\r');
     4a8:	8d e0       	ldi	r24, 0x0D	; 13
     4aa:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
            TMR0_voidStart();
     4ae:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     4b2:	89 ec       	ldi	r24, 0xC9	; 201
     4b4:	94 e0       	ldi	r25, 0x04	; 4
     4b6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
            TMR0_voidStop();
     4ba:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
            switch (bluetooh_value)
     4be:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     4c2:	83 33       	cpi	r24, 0x33	; 51
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c6:	a0 c0       	rjmp	.+320    	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     4c8:	30 f4       	brcc	.+12     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4ca:	81 33       	cpi	r24, 0x31	; 49
     4cc:	69 f0       	breq	.+26     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4ce:	82 33       	cpi	r24, 0x32	; 50
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
     4d2:	50 c0       	rjmp	.+160    	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
     4d4:	08 95       	ret
     4d6:	85 33       	cpi	r24, 0x35	; 53
     4d8:	09 f4       	brne	.+2      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4da:	2a c1       	rjmp	.+596    	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
     4dc:	08 f4       	brcc	.+2      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4de:	de c0       	rjmp	.+444    	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     4e0:	86 33       	cpi	r24, 0x36	; 54
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e4:	6f c1       	rjmp	.+734    	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
     4e6:	08 95       	ret
            {
            case ('1'):
			//DIO_voidGetPinValue is used to check if the led is on or off before changing its state

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     4e8:	48 ec       	ldi	r20, 0xC8	; 200
     4ea:	54 e0       	ldi	r21, 0x04	; 4
     4ec:	63 e0       	ldi	r22, 0x03	; 3
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     4f4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	e9 f4       	brne	.+58     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
                {
                    BL_voidTxString("Light 1 is On");
     4fc:	8d ef       	ldi	r24, 0xFD	; 253
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     504:	8d e0       	ldi	r24, 0x0D	; 13
     506:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     50a:	8b e0       	ldi	r24, 0x0B	; 11
     50c:	93 e0       	ldi	r25, 0x03	; 3
     50e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     512:	8d e0       	ldi	r24, 0x0D	; 13
     514:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     518:	89 ec       	ldi	r24, 0xC9	; 201
     51a:	94 e0       	ldi	r25, 0x04	; 4
     51c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     520:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     524:	81 33       	cpi	r24, 0x31	; 49
     526:	09 f0       	breq	.+2      	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
     528:	3f c3       	rjmp	.+1662   	; 0xba8 <__stack+0x349>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     52a:	41 e0       	ldi	r20, 0x01	; 1
     52c:	63 e0       	ldi	r22, 0x03	; 3
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
     534:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
     536:	81 11       	cpse	r24, r1
     538:	37 c3       	rjmp	.+1646   	; 0xba8 <__stack+0x349>
                {
                    BL_voidTxString("Light 1 is OFF");
     53a:	8c e1       	ldi	r24, 0x1C	; 28
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     542:	8d e0       	ldi	r24, 0x0D	; 13
     544:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     548:	8b e2       	ldi	r24, 0x2B	; 43
     54a:	93 e0       	ldi	r25, 0x03	; 3
     54c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     550:	8d e0       	ldi	r24, 0x0D	; 13
     552:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     556:	89 ec       	ldi	r24, 0xC9	; 201
     558:	94 e0       	ldi	r25, 0x04	; 4
     55a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     55e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     562:	81 33       	cpi	r24, 0x31	; 49
     564:	09 f0       	breq	.+2      	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
     566:	20 c3       	rjmp	.+1600   	; 0xba8 <__stack+0x349>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     568:	41 e0       	ldi	r20, 0x01	; 1
     56a:	63 e0       	ldi	r22, 0x03	; 3
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
     572:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
     574:	48 ec       	ldi	r20, 0xC8	; 200
     576:	54 e0       	ldi	r21, 0x04	; 4
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     580:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	f9 f4       	brne	.+62     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
                {
                    BL_voidTxString("Light 2 is On");
     588:	8b e3       	ldi	r24, 0x3B	; 59
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     590:	8d e0       	ldi	r24, 0x0D	; 13
     592:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     596:	8b e0       	ldi	r24, 0x0B	; 11
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     59e:	8d e0       	ldi	r24, 0x0D	; 13
     5a0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     5a4:	89 ec       	ldi	r24, 0xC9	; 201
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     5ac:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     5b0:	81 33       	cpi	r24, 0x31	; 49
     5b2:	29 f4       	brne	.+10     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     5b4:	41 e0       	ldi	r20, 0x01	; 1
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     5be:	8f ef       	ldi	r24, 0xFF	; 255
     5c0:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     5c4:	08 95       	ret
                }
                else if (led_status == 0)
     5c6:	81 11       	cpse	r24, r1
     5c8:	ef c2       	rjmp	.+1502   	; 0xba8 <__stack+0x349>
                {
                    BL_voidTxString("Light 2 is OFF");
     5ca:	89 e4       	ldi	r24, 0x49	; 73
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     5d2:	8d e0       	ldi	r24, 0x0D	; 13
     5d4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     5d8:	8b e2       	ldi	r24, 0x2B	; 43
     5da:	93 e0       	ldi	r25, 0x03	; 3
     5dc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     5e0:	8d e0       	ldi	r24, 0x0D	; 13
     5e2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     5e6:	89 ec       	ldi	r24, 0xC9	; 201
     5e8:	94 e0       	ldi	r25, 0x04	; 4
     5ea:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     5ee:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     5f2:	81 33       	cpi	r24, 0x31	; 49
     5f4:	29 f4       	brne	.+10     	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     600:	8f ef       	ldi	r24, 0xFF	; 255
     602:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     606:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     608:	48 ec       	ldi	r20, 0xC8	; 200
     60a:	54 e0       	ldi	r21, 0x04	; 4
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     614:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	f9 f4       	brne	.+62     	; 0x65a <__EEPROM_REGION_LENGTH__+0x25a>
                {
                    BL_voidTxString("Light 3 is On");
     61c:	88 e5       	ldi	r24, 0x58	; 88
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     624:	8d e0       	ldi	r24, 0x0D	; 13
     626:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     62a:	8b e0       	ldi	r24, 0x0B	; 11
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     632:	8d e0       	ldi	r24, 0x0D	; 13
     634:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     638:	89 ec       	ldi	r24, 0xC9	; 201
     63a:	94 e0       	ldi	r25, 0x04	; 4
     63c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     640:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     644:	81 33       	cpi	r24, 0x31	; 49
     646:	29 f4       	brne	.+10     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	62 e0       	ldi	r22, 0x02	; 2
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     658:	08 95       	ret
                }
                else if (led_status == 0)
     65a:	81 11       	cpse	r24, r1
     65c:	a5 c2       	rjmp	.+1354   	; 0xba8 <__stack+0x349>
                {
                    BL_voidTxString("Light 3 is OFF");
     65e:	86 e6       	ldi	r24, 0x66	; 102
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     666:	8d e0       	ldi	r24, 0x0D	; 13
     668:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     66c:	8b e2       	ldi	r24, 0x2B	; 43
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     674:	8d e0       	ldi	r24, 0x0D	; 13
     676:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     67a:	89 ec       	ldi	r24, 0xC9	; 201
     67c:	94 e0       	ldi	r25, 0x04	; 4
     67e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     682:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     686:	81 33       	cpi	r24, 0x31	; 49
     688:	29 f4       	brne	.+10     	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	62 e0       	ldi	r22, 0x02	; 2
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     69a:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     69c:	48 ec       	ldi	r20, 0xC8	; 200
     69e:	54 e0       	ldi	r21, 0x04	; 4
     6a0:	63 e0       	ldi	r22, 0x03	; 3
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     6a8:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	f9 f4       	brne	.+62     	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
                {
                    BL_voidTxString("Light 4 is On");
     6b0:	85 e7       	ldi	r24, 0x75	; 117
     6b2:	93 e0       	ldi	r25, 0x03	; 3
     6b4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     6b8:	8d e0       	ldi	r24, 0x0D	; 13
     6ba:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     6be:	8b e0       	ldi	r24, 0x0B	; 11
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     6c6:	8d e0       	ldi	r24, 0x0D	; 13
     6c8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     6cc:	89 ec       	ldi	r24, 0xC9	; 201
     6ce:	94 e0       	ldi	r25, 0x04	; 4
     6d0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     6d4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     6d8:	81 33       	cpi	r24, 0x31	; 49
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__EEPROM_REGION_LENGTH__+0x2e6>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     6dc:	41 e0       	ldi	r20, 0x01	; 1
     6de:	63 e0       	ldi	r22, 0x03	; 3
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     6ec:	08 95       	ret
                }
                else if (led_status == 0)
     6ee:	81 11       	cpse	r24, r1
     6f0:	5b c2       	rjmp	.+1206   	; 0xba8 <__stack+0x349>
                {
                    BL_voidTxString("Light 4 is OFF");
     6f2:	83 e8       	ldi	r24, 0x83	; 131
     6f4:	93 e0       	ldi	r25, 0x03	; 3
     6f6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     6fa:	8d e0       	ldi	r24, 0x0D	; 13
     6fc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     700:	8b e2       	ldi	r24, 0x2B	; 43
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     708:	8d e0       	ldi	r24, 0x0D	; 13
     70a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     70e:	89 ec       	ldi	r24, 0xC9	; 201
     710:	94 e0       	ldi	r25, 0x04	; 4
     712:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     716:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     71a:	81 33       	cpi	r24, 0x31	; 49
     71c:	29 f4       	brne	.+10     	; 0x728 <__EEPROM_REGION_LENGTH__+0x328>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	63 e0       	ldi	r22, 0x03	; 3
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     72e:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     730:	48 ec       	ldi	r20, 0xC8	; 200
     732:	54 e0       	ldi	r21, 0x04	; 4
     734:	62 e0       	ldi	r22, 0x02	; 2
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     73c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	f9 f4       	brne	.+62     	; 0x782 <__EEPROM_REGION_LENGTH__+0x382>
                {
                    BL_voidTxString("Light 5 is On");
     744:	82 e9       	ldi	r24, 0x92	; 146
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     74c:	8d e0       	ldi	r24, 0x0D	; 13
     74e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     752:	8b e0       	ldi	r24, 0x0B	; 11
     754:	93 e0       	ldi	r25, 0x03	; 3
     756:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     75a:	8d e0       	ldi	r24, 0x0D	; 13
     75c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     760:	89 ec       	ldi	r24, 0xC9	; 201
     762:	94 e0       	ldi	r25, 0x04	; 4
     764:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     768:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     76c:	81 33       	cpi	r24, 0x31	; 49
     76e:	29 f4       	brne	.+10     	; 0x77a <__EEPROM_REGION_LENGTH__+0x37a>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	62 e0       	ldi	r22, 0x02	; 2
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     780:	08 95       	ret
                }
                else if (led_status == 0)
     782:	81 11       	cpse	r24, r1
     784:	11 c2       	rjmp	.+1058   	; 0xba8 <__stack+0x349>
                {
                    BL_voidTxString("Light 5 is OFF");
     786:	80 ea       	ldi	r24, 0xA0	; 160
     788:	93 e0       	ldi	r25, 0x03	; 3
     78a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     78e:	8d e0       	ldi	r24, 0x0D	; 13
     790:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     794:	8b e2       	ldi	r24, 0x2B	; 43
     796:	93 e0       	ldi	r25, 0x03	; 3
     798:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     79c:	8d e0       	ldi	r24, 0x0D	; 13
     79e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     7a2:	89 ec       	ldi	r24, 0xC9	; 201
     7a4:	94 e0       	ldi	r25, 0x04	; 4
     7a6:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     7aa:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     7ae:	81 33       	cpi	r24, 0x31	; 49
     7b0:	29 f4       	brne	.+10     	; 0x7bc <__EEPROM_REGION_LENGTH__+0x3bc>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     7b2:	41 e0       	ldi	r20, 0x01	; 1
     7b4:	62 e0       	ldi	r22, 0x02	; 2
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     7c2:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):
				// Dimmer can be controlled using TMR1 PWM mode range from 0 to 100 with -+10% step
                if (dimmer_brightness > 0)
     7c4:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     7c8:	88 23       	and	r24, r24
     7ca:	09 f4       	brne	.+2      	; 0x7ce <__EEPROM_REGION_LENGTH__+0x3ce>
     7cc:	b1 c0       	rjmp	.+354    	; 0x930 <__stack+0xd1>
                {
					 BL_voidTxChar('\r');
     7ce:	8d e0       	ldi	r24, 0x0D	; 13
     7d0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
     7d4:	8f ea       	ldi	r24, 0xAF	; 175
     7d6:	93 e0       	ldi	r25, 0x03	; 3
     7d8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     7dc:	8d e0       	ldi	r24, 0x0D	; 13
     7de:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     7e2:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     7e6:	1f 92       	push	r1
     7e8:	8f 93       	push	r24
     7ea:	8d eb       	ldi	r24, 0xBD	; 189
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	9f 93       	push	r25
     7f0:	8f 93       	push	r24
     7f2:	87 ed       	ldi	r24, 0xD7	; 215
     7f4:	94 e0       	ldi	r25, 0x04	; 4
     7f6:	9f 93       	push	r25
     7f8:	8f 93       	push	r24
     7fa:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
					BL_voidTxString(DimmerString);
     7fe:	87 ed       	ldi	r24, 0xD7	; 215
     800:	94 e0       	ldi	r25, 0x04	; 4
     802:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     806:	8d e0       	ldi	r24, 0x0D	; 13
     808:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     80c:	8d ec       	ldi	r24, 0xCD	; 205
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     814:	8d e0       	ldi	r24, 0x0D	; 13
     816:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     81a:	89 ec       	ldi	r24, 0xC9	; 201
     81c:	94 e0       	ldi	r25, 0x04	; 4
     81e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
					while (bluetooh_value != 0)
     822:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	88 23       	and	r24, r24
     834:	09 f4       	brne	.+2      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     836:	b8 c1       	rjmp	.+880    	; 0xba8 <__stack+0x349>
					{
						if (bluetooh_value == '1')
     838:	81 33       	cpi	r24, 0x31	; 49
     83a:	09 f0       	breq	.+2      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     83c:	43 c0       	rjmp	.+134    	; 0x8c4 <__stack+0x65>
						{
							dimmer_brightness += 10;
     83e:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
     842:	66 5f       	subi	r22, 0xF6	; 246
     844:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
     852:	ab 01       	movw	r20, r22
     854:	bc 01       	movw	r22, r24
     856:	88 ee       	ldi	r24, 0xE8	; 232
     858:	93 e0       	ldi	r25, 0x03	; 3
     85a:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     85e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     862:	1f 92       	push	r1
     864:	8f 93       	push	r24
     866:	8d eb       	ldi	r24, 0xBD	; 189
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	87 ed       	ldi	r24, 0xD7	; 215
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
     87a:	87 ed       	ldi	r24, 0xD7	; 215
     87c:	94 e0       	ldi	r25, 0x04	; 4
     87e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     882:	8d e0       	ldi	r24, 0x0D	; 13
     884:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     888:	8d ec       	ldi	r24, 0xCD	; 205
     88a:	93 e0       	ldi	r25, 0x03	; 3
     88c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
     890:	8d e0       	ldi	r24, 0x0D	; 13
     892:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							// check if is the brightness is more than 100
							if (dimmer_brightness > 100)
     896:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	85 36       	cpi	r24, 0x65	; 101
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <__stack+0x4d>
     8aa:	7e c1       	rjmp	.+764    	; 0xba8 <__stack+0x349>
							{
								//block increasing the brightness above 100
								dimmer_brightness = 100;
     8ac:	84 e6       	ldi	r24, 0x64	; 100
     8ae:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	68 ec       	ldi	r22, 0xC8	; 200
     8b8:	72 e4       	ldi	r23, 0x42	; 66
     8ba:	88 ee       	ldi	r24, 0xE8	; 232
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
     8c2:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
     8c4:	82 33       	cpi	r24, 0x32	; 50
     8c6:	09 f0       	breq	.+2      	; 0x8ca <__stack+0x6b>
     8c8:	6f c1       	rjmp	.+734    	; 0xba8 <__stack+0x349>
						{
							dimmer_brightness -= 10;
     8ca:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
     8ce:	6a 50       	subi	r22, 0x0A	; 10
     8d0:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
     8de:	ab 01       	movw	r20, r22
     8e0:	bc 01       	movw	r22, r24
     8e2:	88 ee       	ldi	r24, 0xE8	; 232
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     8ea:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     8ee:	1f 92       	push	r1
     8f0:	8f 93       	push	r24
     8f2:	8d eb       	ldi	r24, 0xBD	; 189
     8f4:	93 e0       	ldi	r25, 0x03	; 3
     8f6:	9f 93       	push	r25
     8f8:	8f 93       	push	r24
     8fa:	87 ed       	ldi	r24, 0xD7	; 215
     8fc:	94 e0       	ldi	r25, 0x04	; 4
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
     906:	87 ed       	ldi	r24, 0xD7	; 215
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     90e:	8d e0       	ldi	r24, 0x0D	; 13
     910:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     914:	8d ec       	ldi	r24, 0xCD	; 205
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
     91c:	8d e0       	ldi	r24, 0x0D	; 13
     91e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							{
								//block decreasing the brightness below 0
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
     930:	81 11       	cpse	r24, r1
     932:	3a c1       	rjmp	.+628    	; 0xba8 <__stack+0x349>
                {
                    BL_voidTxString("Light 6 is OFF");
     934:	8d ed       	ldi	r24, 0xDD	; 221
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93c:	2f ef       	ldi	r18, 0xFF	; 255
     93e:	83 ed       	ldi	r24, 0xD3	; 211
     940:	90 e3       	ldi	r25, 0x30	; 48
     942:	21 50       	subi	r18, 0x01	; 1
     944:	80 40       	sbci	r24, 0x00	; 0
     946:	90 40       	sbci	r25, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <__stack+0xe3>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <__stack+0xed>
     94c:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
     94e:	8d e0       	ldi	r24, 0x0D	; 13
     950:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     954:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     958:	1f 92       	push	r1
     95a:	8f 93       	push	r24
     95c:	8d eb       	ldi	r24, 0xBD	; 189
     95e:	93 e0       	ldi	r25, 0x03	; 3
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	87 ed       	ldi	r24, 0xD7	; 215
     966:	94 e0       	ldi	r25, 0x04	; 4
     968:	9f 93       	push	r25
     96a:	8f 93       	push	r24
     96c:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
					BL_voidTxString(DimmerString);
     970:	87 ed       	ldi	r24, 0xD7	; 215
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     978:	8d e0       	ldi	r24, 0x0D	; 13
     97a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     97e:	8d ec       	ldi	r24, 0xCD	; 205
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     986:	8d e0       	ldi	r24, 0x0D	; 13
     988:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     98c:	89 ec       	ldi	r24, 0xC9	; 201
     98e:	94 e0       	ldi	r25, 0x04	; 4
     990:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
					while (bluetooh_value != 0)
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	7e c0       	rjmp	.+252    	; 0xa9e <__stack+0x23f>
					{
						if (bluetooh_value == '1')
     9a2:	81 33       	cpi	r24, 0x31	; 49
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <__stack+0x149>
     9a6:	43 c0       	rjmp	.+134    	; 0xa2e <__stack+0x1cf>
						{
							dimmer_brightness += 10;
     9a8:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
     9ac:	66 5f       	subi	r22, 0xF6	; 246
     9ae:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
     9bc:	ab 01       	movw	r20, r22
     9be:	bc 01       	movw	r22, r24
     9c0:	88 ee       	ldi	r24, 0xE8	; 232
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     9c8:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     9cc:	1f 92       	push	r1
     9ce:	8f 93       	push	r24
     9d0:	8d eb       	ldi	r24, 0xBD	; 189
     9d2:	93 e0       	ldi	r25, 0x03	; 3
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	87 ed       	ldi	r24, 0xD7	; 215
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
     9e4:	87 ed       	ldi	r24, 0xD7	; 215
     9e6:	94 e0       	ldi	r25, 0x04	; 4
     9e8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     9ec:	8d e0       	ldi	r24, 0x0D	; 13
     9ee:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     9f2:	8d ec       	ldi	r24, 0xCD	; 205
     9f4:	93 e0       	ldi	r25, 0x03	; 3
     9f6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
     9fa:	8d e0       	ldi	r24, 0x0D	; 13
     9fc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							if (dimmer_brightness > 100)
     a00:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	85 36       	cpi	r24, 0x65	; 101
     a12:	08 f4       	brcc	.+2      	; 0xa16 <__stack+0x1b7>
     a14:	c9 c0       	rjmp	.+402    	; 0xba8 <__stack+0x349>
							{
								dimmer_brightness = 100;
     a16:	84 e6       	ldi	r24, 0x64	; 100
     a18:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     a1c:	40 e0       	ldi	r20, 0x00	; 0
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	68 ec       	ldi	r22, 0xC8	; 200
     a22:	72 e4       	ldi	r23, 0x42	; 66
     a24:	88 ee       	ldi	r24, 0xE8	; 232
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
     a2c:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
     a2e:	82 33       	cpi	r24, 0x32	; 50
     a30:	99 f5       	brne	.+102    	; 0xa98 <__stack+0x239>
						{
							dimmer_brightness -= 10;
     a32:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
     a36:	6a 50       	subi	r22, 0x0A	; 10
     a38:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
     a46:	ab 01       	movw	r20, r22
     a48:	bc 01       	movw	r22, r24
     a4a:	88 ee       	ldi	r24, 0xE8	; 232
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     a52:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     a56:	1f 92       	push	r1
     a58:	8f 93       	push	r24
     a5a:	8d eb       	ldi	r24, 0xBD	; 189
     a5c:	93 e0       	ldi	r25, 0x03	; 3
     a5e:	9f 93       	push	r25
     a60:	8f 93       	push	r24
     a62:	87 ed       	ldi	r24, 0xD7	; 215
     a64:	94 e0       	ldi	r25, 0x04	; 4
     a66:	9f 93       	push	r25
     a68:	8f 93       	push	r24
     a6a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
     a6e:	87 ed       	ldi	r24, 0xD7	; 215
     a70:	94 e0       	ldi	r25, 0x04	; 4
     a72:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     a76:	8d e0       	ldi	r24, 0x0D	; 13
     a78:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     a7c:	8d ec       	ldi	r24, 0xCD	; 205
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
     a84:	8d e0       	ldi	r24, 0x0D	; 13
     a86:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	08 95       	ret
						}
						else if (bluetooh_value == '0')
     a98:	80 33       	cpi	r24, 0x30	; 48
     a9a:	09 f4       	brne	.+2      	; 0xa9e <__stack+0x23f>
     a9c:	85 c0       	rjmp	.+266    	; 0xba8 <__stack+0x349>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
     a9e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     aa2:	81 11       	cpse	r24, r1
     aa4:	7e cf       	rjmp	.-260    	; 0x9a2 <__stack+0x143>
     aa6:	08 95       	ret
			break;

			case ('3'):
			
				// checking the temperature from the ADC before displaying it
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     aa8:	66 ec       	ldi	r22, 0xC6	; 198
     aaa:	74 e0       	ldi	r23, 0x04	; 4
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
     ab2:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <__data_end>
     ab6:	1f 92       	push	r1
     ab8:	8f 93       	push	r24
     aba:	83 ec       	ldi	r24, 0xC3	; 195
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	9f 93       	push	r25
     ac0:	8f 93       	push	r24
     ac2:	8b ee       	ldi	r24, 0xEB	; 235
     ac4:	94 e0       	ldi	r25, 0x04	; 4
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
				BL_voidTxString(tempString);
     ace:	8b ee       	ldi	r24, 0xEB	; 235
     ad0:	94 e0       	ldi	r25, 0x04	; 4
     ad2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
     ad6:	8d e0       	ldi	r24, 0x0D	; 13
     ad8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
     adc:	83 ed       	ldi	r24, 0xD3	; 211
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
     ae4:	8d e0       	ldi	r24, 0x0D	; 13
     ae6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
     aea:	89 ec       	ldi	r24, 0xC9	; 201
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
				if (bluetooh_value=='0')
				{
					
				}
				break;
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	08 95       	ret

			case ('4'):
				// checking the door status before displaying it
				if (door_angle==0)
     b00:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <door_angle>
     b04:	81 11       	cpse	r24, r1
     b06:	27 c0       	rjmp	.+78     	; 0xb56 <__stack+0x2f7>
				{
					BL_voidTxString("Door is closed");
     b08:	8c ee       	ldi	r24, 0xEC	; 236
     b0a:	93 e0       	ldi	r25, 0x03	; 3
     b0c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     b10:	8d e0       	ldi	r24, 0x0D	; 13
     b12:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidTxString("1-Open Door 0-Home");
     b16:	8b ef       	ldi	r24, 0xFB	; 251
     b18:	93 e0       	ldi	r25, 0x03	; 3
     b1a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     b1e:	8d e0       	ldi	r24, 0x0D	; 13
     b20:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     b24:	89 ec       	ldi	r24, 0xC9	; 201
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
					BL_voidTxChar('\r');
     b2c:	8d e0       	ldi	r24, 0x0D	; 13
     b2e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					if (bluetooh_value=='1')
     b32:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     b36:	81 33       	cpi	r24, 0x31	; 49
     b38:	b9 f5       	brne	.+110    	; 0xba8 <__stack+0x349>
					{
						BL_voidTxString("Door is opening");
     b3a:	8e e0       	ldi	r24, 0x0E	; 14
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
						SERVO_voidStartByAngle(90);
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	84 eb       	ldi	r24, 0xB4	; 180
     b48:	92 e4       	ldi	r25, 0x42	; 66
     b4a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SERVO_voidStartByAngle>
						door_angle=90;
     b4e:	8a e5       	ldi	r24, 0x5A	; 90
     b50:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <door_angle>
     b54:	08 95       	ret
						break;
					}
					break;

				}
				else if (door_angle==90)
     b56:	8a 35       	cpi	r24, 0x5A	; 90
     b58:	39 f5       	brne	.+78     	; 0xba8 <__stack+0x349>
				{
					BL_voidTxString("Door is open");
     b5a:	8e e1       	ldi	r24, 0x1E	; 30
     b5c:	94 e0       	ldi	r25, 0x04	; 4
     b5e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     b62:	8d e0       	ldi	r24, 0x0D	; 13
     b64:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidTxString("1-Close Door 0-Home");
     b68:	8b e2       	ldi	r24, 0x2B	; 43
     b6a:	94 e0       	ldi	r25, 0x04	; 4
     b6c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     b70:	8d e0       	ldi	r24, 0x0D	; 13
     b72:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     b76:	89 ec       	ldi	r24, 0xC9	; 201
     b78:	94 e0       	ldi	r25, 0x04	; 4
     b7a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
					BL_voidTxChar('\r');
     b7e:	8d e0       	ldi	r24, 0x0D	; 13
     b80:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					if (bluetooh_value=='1')
     b84:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     b88:	81 33       	cpi	r24, 0x31	; 49
     b8a:	71 f4       	brne	.+28     	; 0xba8 <__stack+0x349>
					{
						BL_voidTxString("Door is closing");
     b8c:	8f e3       	ldi	r24, 0x3F	; 63
     b8e:	94 e0       	ldi	r25, 0x04	; 4
     b90:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
						SERVO_voidStartByAngle(0);
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	cb 01       	movw	r24, r22
     b9a:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <SERVO_voidStartByAngle>
						door_angle=0;
     b9e:	10 92 ca 04 	sts	0x04CA, r1	; 0x8004ca <door_angle>
     ba2:	08 95       	ret
			break;


			case ('5'):
			// this case is only for admin to change the username and password (Admin is only remote typeuser)
			HOME_voidChangeUserNameAndPass();
     ba4:	0e 94 25 01 	call	0x24a	; 0x24a <HOME_voidChangeUserNameAndPass>
     ba8:	08 95       	ret

00000baa <KPD_Interface_RemoteUser>:


void KPD_Interface_RemoteUser(void)
{
	//this is the remote user interface to control the smart home (same as the admin but with less options without(door control,changing username and password))
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
     baa:	8d eb       	ldi	r24, 0xBD	; 189
     bac:	99 e0       	ldi	r25, 0x09	; 9
     bae:	0e 94 c5 13 	call	0x278a	; 0x278a <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
     bb2:	8d e0       	ldi	r24, 0x0D	; 13
     bb4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
     bb8:	8b e7       	ldi	r24, 0x7B	; 123
     bba:	92 e0       	ldi	r25, 0x02	; 2
     bbc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	BL_voidTxChar('\r');
     bc0:	8d e0       	ldi	r24, 0x0D	; 13
     bc2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
     bc6:	88 e8       	ldi	r24, 0x88	; 136
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	BL_voidTxChar('\r');
     bce:	8d e0       	ldi	r24, 0x0D	; 13
     bd0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	TMR0_voidStart();
     bd4:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
	BL_voidRxChar(&bluetooh_value);
     bd8:	89 ec       	ldi	r24, 0xC9	; 201
     bda:	94 e0       	ldi	r25, 0x04	; 4
     bdc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
	TMR0_voidStop();
     be0:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
	switch (bluetooh_value)
     be4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     be8:	82 33       	cpi	r24, 0x32	; 50
     bea:	e9 f1       	breq	.+122    	; 0xc66 <KPD_Interface_RemoteUser+0xbc>
     bec:	83 33       	cpi	r24, 0x33	; 51
     bee:	09 f4       	brne	.+2      	; 0xbf2 <KPD_Interface_RemoteUser+0x48>
     bf0:	4a c3       	rjmp	.+1684   	; 0x1286 <KPD_Interface_RemoteUser+0x6dc>
     bf2:	81 33       	cpi	r24, 0x31	; 49
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <KPD_Interface_RemoteUser+0x4e>
     bf6:	72 c3       	rjmp	.+1764   	; 0x12dc <KPD_Interface_RemoteUser+0x732>
	{
	case ('1'):
		// DIO_voidGetPinValue()/////////////////////////////
		BL_voidTxString("AC Is On/off");
     bf8:	86 eb       	ldi	r24, 0xB6	; 182
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
        BL_voidTxChar('\r');
     c00:	8d e0       	ldi	r24, 0x0D	; 13
     c02:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     c06:	66 ec       	ldi	r22, 0xC6	; 198
     c08:	74 e0       	ldi	r23, 0x04	; 4
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
     c10:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <__data_end>
     c14:	1f 92       	push	r1
     c16:	8f 93       	push	r24
     c18:	83 ec       	ldi	r24, 0xC3	; 195
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	9f 93       	push	r25
     c1e:	8f 93       	push	r24
     c20:	8b ee       	ldi	r24, 0xEB	; 235
     c22:	94 e0       	ldi	r25, 0x04	; 4
     c24:	9f 93       	push	r25
     c26:	8f 93       	push	r24
     c28:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
				BL_voidTxString(tempString);
     c2c:	8b ee       	ldi	r24, 0xEB	; 235
     c2e:	94 e0       	ldi	r25, 0x04	; 4
     c30:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
     c34:	8d e0       	ldi	r24, 0x0D	; 13
     c36:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
     c3a:	83 ed       	ldi	r24, 0xD3	; 211
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
     c42:	8d e0       	ldi	r24, 0x0D	; 13
     c44:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				TMR0_voidStart();
     c48:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
				BL_voidRxChar(&bluetooh_value);
     c4c:	89 ec       	ldi	r24, 0xC9	; 201
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
				TMR0_voidStop();
     c54:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
				if (bluetooh_value=='0')
				{
					
				}
		break;
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	08 95       	ret
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
     c66:	8d e0       	ldi	r24, 0x0D	; 13
     c68:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
            BL_voidTxString("Choose light to");
     c6c:	80 ee       	ldi	r24, 0xE0	; 224
     c6e:	92 e0       	ldi	r25, 0x02	; 2
     c70:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
            BL_voidTxChar('\r');
     c74:	8d e0       	ldi	r24, 0x0D	; 13
     c76:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
     c7a:	80 ef       	ldi	r24, 0xF0	; 240
     c7c:	92 e0       	ldi	r25, 0x02	; 2
     c7e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
			BL_voidTxChar('\r');
     c82:	8d e0       	ldi	r24, 0x0D	; 13
     c84:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
			BL_voidTxChar('\r');
     c88:	8d e0       	ldi	r24, 0x0D	; 13
     c8a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
            TMR0_voidStart();
     c8e:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     c92:	89 ec       	ldi	r24, 0xC9	; 201
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
            TMR0_voidStop();
     c9a:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
            switch (bluetooh_value)
     c9e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     ca2:	83 33       	cpi	r24, 0x33	; 51
     ca4:	09 f4       	brne	.+2      	; 0xca8 <KPD_Interface_RemoteUser+0xfe>
     ca6:	a0 c0       	rjmp	.+320    	; 0xde8 <KPD_Interface_RemoteUser+0x23e>
     ca8:	30 f4       	brcc	.+12     	; 0xcb6 <KPD_Interface_RemoteUser+0x10c>
     caa:	81 33       	cpi	r24, 0x31	; 49
     cac:	69 f0       	breq	.+26     	; 0xcc8 <KPD_Interface_RemoteUser+0x11e>
     cae:	82 33       	cpi	r24, 0x32	; 50
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <KPD_Interface_RemoteUser+0x10a>
     cb2:	50 c0       	rjmp	.+160    	; 0xd54 <KPD_Interface_RemoteUser+0x1aa>
     cb4:	08 95       	ret
     cb6:	85 33       	cpi	r24, 0x35	; 53
     cb8:	09 f4       	brne	.+2      	; 0xcbc <KPD_Interface_RemoteUser+0x112>
     cba:	2a c1       	rjmp	.+596    	; 0xf10 <KPD_Interface_RemoteUser+0x366>
     cbc:	08 f4       	brcc	.+2      	; 0xcc0 <KPD_Interface_RemoteUser+0x116>
     cbe:	de c0       	rjmp	.+444    	; 0xe7c <KPD_Interface_RemoteUser+0x2d2>
     cc0:	86 33       	cpi	r24, 0x36	; 54
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <KPD_Interface_RemoteUser+0x11c>
     cc4:	6f c1       	rjmp	.+734    	; 0xfa4 <KPD_Interface_RemoteUser+0x3fa>
     cc6:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     cc8:	48 ec       	ldi	r20, 0xC8	; 200
     cca:	54 e0       	ldi	r21, 0x04	; 4
     ccc:	63 e0       	ldi	r22, 0x03	; 3
     cce:	83 e0       	ldi	r24, 0x03	; 3
     cd0:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     cd4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	e9 f4       	brne	.+58     	; 0xd16 <KPD_Interface_RemoteUser+0x16c>
                {
                    BL_voidTxString("Light 1 is On");
     cdc:	8d ef       	ldi	r24, 0xFD	; 253
     cde:	92 e0       	ldi	r25, 0x02	; 2
     ce0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     ce4:	8d e0       	ldi	r24, 0x0D	; 13
     ce6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     cea:	8b e0       	ldi	r24, 0x0B	; 11
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     cf2:	8d e0       	ldi	r24, 0x0D	; 13
     cf4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     cf8:	89 ec       	ldi	r24, 0xC9	; 201
     cfa:	94 e0       	ldi	r25, 0x04	; 4
     cfc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     d00:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     d04:	81 33       	cpi	r24, 0x31	; 49
     d06:	09 f0       	breq	.+2      	; 0xd0a <KPD_Interface_RemoteUser+0x160>
     d08:	e9 c2       	rjmp	.+1490   	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	63 e0       	ldi	r22, 0x03	; 3
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
     d14:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
     d16:	81 11       	cpse	r24, r1
     d18:	e1 c2       	rjmp	.+1474   	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 1 is OFF");
     d1a:	8c e1       	ldi	r24, 0x1C	; 28
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     d22:	8d e0       	ldi	r24, 0x0D	; 13
     d24:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     d28:	8b e2       	ldi	r24, 0x2B	; 43
     d2a:	93 e0       	ldi	r25, 0x03	; 3
     d2c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     d30:	8d e0       	ldi	r24, 0x0D	; 13
     d32:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d36:	89 ec       	ldi	r24, 0xC9	; 201
     d38:	94 e0       	ldi	r25, 0x04	; 4
     d3a:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     d3e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     d42:	81 33       	cpi	r24, 0x31	; 49
     d44:	09 f0       	breq	.+2      	; 0xd48 <KPD_Interface_RemoteUser+0x19e>
     d46:	ca c2       	rjmp	.+1428   	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	63 e0       	ldi	r22, 0x03	; 3
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
     d52:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
     d54:	48 ec       	ldi	r20, 0xC8	; 200
     d56:	54 e0       	ldi	r21, 0x04	; 4
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     d60:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	f9 f4       	brne	.+62     	; 0xda6 <KPD_Interface_RemoteUser+0x1fc>
                {
                    BL_voidTxString("Light 2 is On");
     d68:	8b e3       	ldi	r24, 0x3B	; 59
     d6a:	93 e0       	ldi	r25, 0x03	; 3
     d6c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     d70:	8d e0       	ldi	r24, 0x0D	; 13
     d72:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     d76:	8b e0       	ldi	r24, 0x0B	; 11
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     d7e:	8d e0       	ldi	r24, 0x0D	; 13
     d80:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d84:	89 ec       	ldi	r24, 0xC9	; 201
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     d8c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     d90:	81 33       	cpi	r24, 0x31	; 49
     d92:	29 f4       	brne	.+10     	; 0xd9e <KPD_Interface_RemoteUser+0x1f4>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     da4:	08 95       	ret
                }
                else if (led_status == 0)
     da6:	81 11       	cpse	r24, r1
     da8:	99 c2       	rjmp	.+1330   	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 2 is OFF");
     daa:	89 e4       	ldi	r24, 0x49	; 73
     dac:	93 e0       	ldi	r25, 0x03	; 3
     dae:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     db2:	8d e0       	ldi	r24, 0x0D	; 13
     db4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     db8:	8b e2       	ldi	r24, 0x2B	; 43
     dba:	93 e0       	ldi	r25, 0x03	; 3
     dbc:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     dc0:	8d e0       	ldi	r24, 0x0D	; 13
     dc2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     dc6:	89 ec       	ldi	r24, 0xC9	; 201
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
                    if (bluetooh_value == '1')
     dce:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     dd2:	81 33       	cpi	r24, 0x31	; 49
     dd4:	29 f4       	brne	.+10     	; 0xde0 <KPD_Interface_RemoteUser+0x236>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     de6:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     de8:	48 ec       	ldi	r20, 0xC8	; 200
     dea:	54 e0       	ldi	r21, 0x04	; 4
     dec:	62 e0       	ldi	r22, 0x02	; 2
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     df4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     df8:	81 30       	cpi	r24, 0x01	; 1
     dfa:	f9 f4       	brne	.+62     	; 0xe3a <KPD_Interface_RemoteUser+0x290>
                {
                    BL_voidTxString("Light 3 is On");
     dfc:	88 e5       	ldi	r24, 0x58	; 88
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e04:	8d e0       	ldi	r24, 0x0D	; 13
     e06:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     e0a:	8b e0       	ldi	r24, 0x0B	; 11
     e0c:	93 e0       	ldi	r25, 0x03	; 3
     e0e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     e12:	8d e0       	ldi	r24, 0x0D	; 13
     e14:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     e18:	89 ec       	ldi	r24, 0xC9	; 201
     e1a:	94 e0       	ldi	r25, 0x04	; 4
     e1c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     e20:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     e24:	81 33       	cpi	r24, 0x31	; 49
     e26:	29 f4       	brne	.+10     	; 0xe32 <KPD_Interface_RemoteUser+0x288>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	62 e0       	ldi	r22, 0x02	; 2
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     e32:	8f ef       	ldi	r24, 0xFF	; 255
     e34:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     e38:	08 95       	ret
                }
                else if (led_status == 0)
     e3a:	81 11       	cpse	r24, r1
     e3c:	4f c2       	rjmp	.+1182   	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 3 is OFF");
     e3e:	86 e6       	ldi	r24, 0x66	; 102
     e40:	93 e0       	ldi	r25, 0x03	; 3
     e42:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e46:	8d e0       	ldi	r24, 0x0D	; 13
     e48:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     e4c:	8b e2       	ldi	r24, 0x2B	; 43
     e4e:	93 e0       	ldi	r25, 0x03	; 3
     e50:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     e54:	8d e0       	ldi	r24, 0x0D	; 13
     e56:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     e5a:	89 ec       	ldi	r24, 0xC9	; 201
     e5c:	94 e0       	ldi	r25, 0x04	; 4
     e5e:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     e62:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     e66:	81 33       	cpi	r24, 0x31	; 49
     e68:	29 f4       	brne	.+10     	; 0xe74 <KPD_Interface_RemoteUser+0x2ca>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	62 e0       	ldi	r22, 0x02	; 2
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     e7a:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     e7c:	48 ec       	ldi	r20, 0xC8	; 200
     e7e:	54 e0       	ldi	r21, 0x04	; 4
     e80:	63 e0       	ldi	r22, 0x03	; 3
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     e88:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	f9 f4       	brne	.+62     	; 0xece <KPD_Interface_RemoteUser+0x324>
                {
                    BL_voidTxString("Light 4 is On");
     e90:	85 e7       	ldi	r24, 0x75	; 117
     e92:	93 e0       	ldi	r25, 0x03	; 3
     e94:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e98:	8d e0       	ldi	r24, 0x0D	; 13
     e9a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     e9e:	8b e0       	ldi	r24, 0x0B	; 11
     ea0:	93 e0       	ldi	r25, 0x03	; 3
     ea2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     ea6:	8d e0       	ldi	r24, 0x0D	; 13
     ea8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     eac:	89 ec       	ldi	r24, 0xC9	; 201
     eae:	94 e0       	ldi	r25, 0x04	; 4
     eb0:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     eb4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     eb8:	81 33       	cpi	r24, 0x31	; 49
     eba:	29 f4       	brne	.+10     	; 0xec6 <KPD_Interface_RemoteUser+0x31c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     ebc:	41 e0       	ldi	r20, 0x01	; 1
     ebe:	63 e0       	ldi	r22, 0x03	; 3
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     ecc:	08 95       	ret
                }
                else if (led_status == 0)
     ece:	81 11       	cpse	r24, r1
     ed0:	05 c2       	rjmp	.+1034   	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 4 is OFF");
     ed2:	83 e8       	ldi	r24, 0x83	; 131
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     eda:	8d e0       	ldi	r24, 0x0D	; 13
     edc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     ee0:	8b e2       	ldi	r24, 0x2B	; 43
     ee2:	93 e0       	ldi	r25, 0x03	; 3
     ee4:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     ee8:	8d e0       	ldi	r24, 0x0D	; 13
     eea:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     eee:	89 ec       	ldi	r24, 0xC9	; 201
     ef0:	94 e0       	ldi	r25, 0x04	; 4
     ef2:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     ef6:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     efa:	81 33       	cpi	r24, 0x31	; 49
     efc:	29 f4       	brne	.+10     	; 0xf08 <KPD_Interface_RemoteUser+0x35e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	63 e0       	ldi	r22, 0x03	; 3
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     f0e:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     f10:	48 ec       	ldi	r20, 0xC8	; 200
     f12:	54 e0       	ldi	r21, 0x04	; 4
     f14:	62 e0       	ldi	r22, 0x02	; 2
     f16:	83 e0       	ldi	r24, 0x03	; 3
     f18:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                
                if (led_status == 1)
     f1c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	f9 f4       	brne	.+62     	; 0xf62 <KPD_Interface_RemoteUser+0x3b8>
                {
                    BL_voidTxString("Light 5 is On");
     f24:	82 e9       	ldi	r24, 0x92	; 146
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     f2c:	8d e0       	ldi	r24, 0x0D	; 13
     f2e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     f32:	8b e0       	ldi	r24, 0x0B	; 11
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     f3a:	8d e0       	ldi	r24, 0x0D	; 13
     f3c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     f40:	89 ec       	ldi	r24, 0xC9	; 201
     f42:	94 e0       	ldi	r25, 0x04	; 4
     f44:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     f48:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     f4c:	81 33       	cpi	r24, 0x31	; 49
     f4e:	29 f4       	brne	.+10     	; 0xf5a <KPD_Interface_RemoteUser+0x3b0>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     f50:	41 e0       	ldi	r20, 0x01	; 1
     f52:	62 e0       	ldi	r22, 0x02	; 2
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     f60:	08 95       	ret
                }
                else if (led_status == 0)
     f62:	81 11       	cpse	r24, r1
     f64:	bb c1       	rjmp	.+886    	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 5 is OFF");
     f66:	80 ea       	ldi	r24, 0xA0	; 160
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     f6e:	8d e0       	ldi	r24, 0x0D	; 13
     f70:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     f74:	8b e2       	ldi	r24, 0x2B	; 43
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     f7c:	8d e0       	ldi	r24, 0x0D	; 13
     f7e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     f82:	89 ec       	ldi	r24, 0xC9	; 201
     f84:	94 e0       	ldi	r25, 0x04	; 4
     f86:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>

                    if (bluetooh_value == '1')
     f8a:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
     f8e:	81 33       	cpi	r24, 0x31	; 49
     f90:	29 f4       	brne	.+10     	; 0xf9c <KPD_Interface_RemoteUser+0x3f2>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <bluetooh_value>
     fa2:	08 95       	ret

            case ('6'):
				
                
				
                if (dimmer_brightness > 0)
     fa4:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     fa8:	88 23       	and	r24, r24
     faa:	09 f4       	brne	.+2      	; 0xfae <KPD_Interface_RemoteUser+0x404>
     fac:	b1 c0       	rjmp	.+354    	; 0x1110 <KPD_Interface_RemoteUser+0x566>
                {
					 BL_voidTxChar('\r');
     fae:	8d e0       	ldi	r24, 0x0D	; 13
     fb0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
     fb4:	8f ea       	ldi	r24, 0xAF	; 175
     fb6:	93 e0       	ldi	r25, 0x03	; 3
     fb8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     fbc:	8d e0       	ldi	r24, 0x0D	; 13
     fbe:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     fc2:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
     fc6:	1f 92       	push	r1
     fc8:	8f 93       	push	r24
     fca:	8d eb       	ldi	r24, 0xBD	; 189
     fcc:	93 e0       	ldi	r25, 0x03	; 3
     fce:	9f 93       	push	r25
     fd0:	8f 93       	push	r24
     fd2:	87 ed       	ldi	r24, 0xD7	; 215
     fd4:	94 e0       	ldi	r25, 0x04	; 4
     fd6:	9f 93       	push	r25
     fd8:	8f 93       	push	r24
     fda:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
					BL_voidTxString(DimmerString);
     fde:	87 ed       	ldi	r24, 0xD7	; 215
     fe0:	94 e0       	ldi	r25, 0x04	; 4
     fe2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
     fe6:	8d e0       	ldi	r24, 0x0D	; 13
     fe8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     fec:	8d ec       	ldi	r24, 0xCD	; 205
     fee:	93 e0       	ldi	r25, 0x03	; 3
     ff0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
     ff4:	8d e0       	ldi	r24, 0x0D	; 13
     ff6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     ffa:	89 ec       	ldi	r24, 0xC9	; 201
     ffc:	94 e0       	ldi	r25, 0x04	; 4
     ffe:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
					while (bluetooh_value != 0)
    1002:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	88 23       	and	r24, r24
    1014:	09 f4       	brne	.+2      	; 0x1018 <KPD_Interface_RemoteUser+0x46e>
    1016:	62 c1       	rjmp	.+708    	; 0x12dc <KPD_Interface_RemoteUser+0x732>
					{
						if (bluetooh_value == '1')
    1018:	81 33       	cpi	r24, 0x31	; 49
    101a:	09 f0       	breq	.+2      	; 0x101e <KPD_Interface_RemoteUser+0x474>
    101c:	43 c0       	rjmp	.+134    	; 0x10a4 <KPD_Interface_RemoteUser+0x4fa>
						{
							dimmer_brightness += 10;
    101e:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1022:	66 5f       	subi	r22, 0xF6	; 246
    1024:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    1032:	ab 01       	movw	r20, r22
    1034:	bc 01       	movw	r22, r24
    1036:	88 ee       	ldi	r24, 0xE8	; 232
    1038:	93 e0       	ldi	r25, 0x03	; 3
    103a:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    103e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1042:	1f 92       	push	r1
    1044:	8f 93       	push	r24
    1046:	8d eb       	ldi	r24, 0xBD	; 189
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	9f 93       	push	r25
    104c:	8f 93       	push	r24
    104e:	87 ed       	ldi	r24, 0xD7	; 215
    1050:	94 e0       	ldi	r25, 0x04	; 4
    1052:	9f 93       	push	r25
    1054:	8f 93       	push	r24
    1056:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
    105a:	87 ed       	ldi	r24, 0xD7	; 215
    105c:	94 e0       	ldi	r25, 0x04	; 4
    105e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1062:	8d e0       	ldi	r24, 0x0D	; 13
    1064:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1068:	8d ec       	ldi	r24, 0xCD	; 205
    106a:	93 e0       	ldi	r25, 0x03	; 3
    106c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
    1070:	8d e0       	ldi	r24, 0x0D	; 13
    1072:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1076:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	85 36       	cpi	r24, 0x65	; 101
    1088:	08 f4       	brcc	.+2      	; 0x108c <KPD_Interface_RemoteUser+0x4e2>
    108a:	28 c1       	rjmp	.+592    	; 0x12dc <KPD_Interface_RemoteUser+0x732>
							{
								dimmer_brightness = 100;
    108c:	84 e6       	ldi	r24, 0x64	; 100
    108e:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	68 ec       	ldi	r22, 0xC8	; 200
    1098:	72 e4       	ldi	r23, 0x42	; 66
    109a:	88 ee       	ldi	r24, 0xE8	; 232
    109c:	93 e0       	ldi	r25, 0x03	; 3
    109e:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
    10a2:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
    10a4:	82 33       	cpi	r24, 0x32	; 50
    10a6:	09 f0       	breq	.+2      	; 0x10aa <KPD_Interface_RemoteUser+0x500>
    10a8:	19 c1       	rjmp	.+562    	; 0x12dc <KPD_Interface_RemoteUser+0x732>
						{
							dimmer_brightness -= 10;
    10aa:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    10ae:	6a 50       	subi	r22, 0x0A	; 10
    10b0:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    10be:	ab 01       	movw	r20, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	88 ee       	ldi	r24, 0xE8	; 232
    10c4:	93 e0       	ldi	r25, 0x03	; 3
    10c6:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    10ca:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    10ce:	1f 92       	push	r1
    10d0:	8f 93       	push	r24
    10d2:	8d eb       	ldi	r24, 0xBD	; 189
    10d4:	93 e0       	ldi	r25, 0x03	; 3
    10d6:	9f 93       	push	r25
    10d8:	8f 93       	push	r24
    10da:	87 ed       	ldi	r24, 0xD7	; 215
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	9f 93       	push	r25
    10e0:	8f 93       	push	r24
    10e2:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
    10e6:	87 ed       	ldi	r24, 0xD7	; 215
    10e8:	94 e0       	ldi	r25, 0x04	; 4
    10ea:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    10ee:	8d e0       	ldi	r24, 0x0D	; 13
    10f0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    10f4:	8d ec       	ldi	r24, 0xCD	; 205
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
    10fc:	8d e0       	ldi	r24, 0x0D	; 13
    10fe:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
    1110:	81 11       	cpse	r24, r1
    1112:	e4 c0       	rjmp	.+456    	; 0x12dc <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 6 is OFF");
    1114:	8d ed       	ldi	r24, 0xDD	; 221
    1116:	93 e0       	ldi	r25, 0x03	; 3
    1118:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
    111c:	2f ef       	ldi	r18, 0xFF	; 255
    111e:	83 ed       	ldi	r24, 0xD3	; 211
    1120:	90 e3       	ldi	r25, 0x30	; 48
    1122:	21 50       	subi	r18, 0x01	; 1
    1124:	80 40       	sbci	r24, 0x00	; 0
    1126:	90 40       	sbci	r25, 0x00	; 0
    1128:	e1 f7       	brne	.-8      	; 0x1122 <KPD_Interface_RemoteUser+0x578>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <KPD_Interface_RemoteUser+0x582>
    112c:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
    112e:	8d e0       	ldi	r24, 0x0D	; 13
    1130:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1134:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1138:	1f 92       	push	r1
    113a:	8f 93       	push	r24
    113c:	8d eb       	ldi	r24, 0xBD	; 189
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	87 ed       	ldi	r24, 0xD7	; 215
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	9f 93       	push	r25
    114a:	8f 93       	push	r24
    114c:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
					BL_voidTxString(DimmerString);
    1150:	87 ed       	ldi	r24, 0xD7	; 215
    1152:	94 e0       	ldi	r25, 0x04	; 4
    1154:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1158:	8d e0       	ldi	r24, 0x0D	; 13
    115a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    115e:	8d ec       	ldi	r24, 0xCD	; 205
    1160:	93 e0       	ldi	r25, 0x03	; 3
    1162:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
					BL_voidTxChar('\r');
    1166:	8d e0       	ldi	r24, 0x0D	; 13
    1168:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    116c:	89 ec       	ldi	r24, 0xC9	; 201
    116e:	94 e0       	ldi	r25, 0x04	; 4
    1170:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
					while (bluetooh_value != 0)
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	7d c0       	rjmp	.+250    	; 0x127c <KPD_Interface_RemoteUser+0x6d2>
					{
						if (bluetooh_value == '1')
    1182:	81 33       	cpi	r24, 0x31	; 49
    1184:	09 f0       	breq	.+2      	; 0x1188 <KPD_Interface_RemoteUser+0x5de>
    1186:	43 c0       	rjmp	.+134    	; 0x120e <KPD_Interface_RemoteUser+0x664>
						{
							dimmer_brightness += 10;
    1188:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    118c:	66 5f       	subi	r22, 0xF6	; 246
    118e:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    119c:	ab 01       	movw	r20, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	88 ee       	ldi	r24, 0xE8	; 232
    11a2:	93 e0       	ldi	r25, 0x03	; 3
    11a4:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    11a8:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    11ac:	1f 92       	push	r1
    11ae:	8f 93       	push	r24
    11b0:	8d eb       	ldi	r24, 0xBD	; 189
    11b2:	93 e0       	ldi	r25, 0x03	; 3
    11b4:	9f 93       	push	r25
    11b6:	8f 93       	push	r24
    11b8:	87 ed       	ldi	r24, 0xD7	; 215
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
    11c4:	87 ed       	ldi	r24, 0xD7	; 215
    11c6:	94 e0       	ldi	r25, 0x04	; 4
    11c8:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    11cc:	8d e0       	ldi	r24, 0x0D	; 13
    11ce:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    11d2:	8d ec       	ldi	r24, 0xCD	; 205
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
    11da:	8d e0       	ldi	r24, 0x0D	; 13
    11dc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							if (dimmer_brightness > 100)
    11e0:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	85 36       	cpi	r24, 0x65	; 101
    11f2:	08 f4       	brcc	.+2      	; 0x11f6 <KPD_Interface_RemoteUser+0x64c>
    11f4:	73 c0       	rjmp	.+230    	; 0x12dc <KPD_Interface_RemoteUser+0x732>
							{
								dimmer_brightness = 100;
    11f6:	84 e6       	ldi	r24, 0x64	; 100
    11f8:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	68 ec       	ldi	r22, 0xC8	; 200
    1202:	72 e4       	ldi	r23, 0x42	; 66
    1204:	88 ee       	ldi	r24, 0xE8	; 232
    1206:	93 e0       	ldi	r25, 0x03	; 3
    1208:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
    120c:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    120e:	82 33       	cpi	r24, 0x32	; 50
    1210:	99 f5       	brne	.+102    	; 0x1278 <KPD_Interface_RemoteUser+0x6ce>
						{
							dimmer_brightness -= 10;
    1212:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1216:	6a 50       	subi	r22, 0x0A	; 10
    1218:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    121c:	70 e0       	ldi	r23, 0x00	; 0
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    1226:	ab 01       	movw	r20, r22
    1228:	bc 01       	movw	r22, r24
    122a:	88 ee       	ldi	r24, 0xE8	; 232
    122c:	93 e0       	ldi	r25, 0x03	; 3
    122e:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1232:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1236:	1f 92       	push	r1
    1238:	8f 93       	push	r24
    123a:	8d eb       	ldi	r24, 0xBD	; 189
    123c:	93 e0       	ldi	r25, 0x03	; 3
    123e:	9f 93       	push	r25
    1240:	8f 93       	push	r24
    1242:	87 ed       	ldi	r24, 0xD7	; 215
    1244:	94 e0       	ldi	r25, 0x04	; 4
    1246:	9f 93       	push	r25
    1248:	8f 93       	push	r24
    124a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
							BL_voidTxString(DimmerString);
    124e:	87 ed       	ldi	r24, 0xD7	; 215
    1250:	94 e0       	ldi	r25, 0x04	; 4
    1252:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1256:	8d e0       	ldi	r24, 0x0D	; 13
    1258:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    125c:	8d ec       	ldi	r24, 0xCD	; 205
    125e:	93 e0       	ldi	r25, 0x03	; 3
    1260:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
							BL_voidTxChar('\r');
    1264:	8d e0       	ldi	r24, 0x0D	; 13
    1266:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    1278:	80 33       	cpi	r24, 0x30	; 48
    127a:	81 f1       	breq	.+96     	; 0x12dc <KPD_Interface_RemoteUser+0x732>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    127c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
    1280:	81 11       	cpse	r24, r1
    1282:	7f cf       	rjmp	.-258    	; 0x1182 <KPD_Interface_RemoteUser+0x5d8>
    1284:	08 95       	ret
			break;

			case ('3'):
			
				
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1286:	66 ec       	ldi	r22, 0xC6	; 198
    1288:	74 e0       	ldi	r23, 0x04	; 4
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    1290:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <__data_end>
    1294:	1f 92       	push	r1
    1296:	8f 93       	push	r24
    1298:	83 ec       	ldi	r24, 0xC3	; 195
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	9f 93       	push	r25
    129e:	8f 93       	push	r24
    12a0:	8b ee       	ldi	r24, 0xEB	; 235
    12a2:	94 e0       	ldi	r25, 0x04	; 4
    12a4:	9f 93       	push	r25
    12a6:	8f 93       	push	r24
    12a8:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
				BL_voidTxString(tempString);
    12ac:	8b ee       	ldi	r24, 0xEB	; 235
    12ae:	94 e0       	ldi	r25, 0x04	; 4
    12b0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
    12b4:	8d e0       	ldi	r24, 0x0D	; 13
    12b6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    12ba:	83 ed       	ldi	r24, 0xD3	; 211
    12bc:	92 e0       	ldi	r25, 0x02	; 2
    12be:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
				BL_voidTxChar('\r');
    12c2:	8d e0       	ldi	r24, 0x0D	; 13
    12c4:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    12c8:	89 ec       	ldi	r24, 0xC9	; 201
    12ca:	94 e0       	ldi	r25, 0x04	; 4
    12cc:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
				{
					
				}

					
        break;
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	08 95       	ret

000012de <WelcomeScreenRemote>:
}

void WelcomeScreenRemote()
// this function is for greeting the user in remote user interface
{
    BL_voidTxString(" Welcome to your");
    12de:	8f e4       	ldi	r24, 0x4F	; 79
    12e0:	94 e0       	ldi	r25, 0x04	; 4
    12e2:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
    BL_voidTxChar('\r');
    12e6:	8d e0       	ldi	r24, 0x0D	; 13
    12e8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
    BL_voidTxString("Smart Home");
    12ec:	83 e6       	ldi	r24, 0x63	; 99
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
    BL_voidTxChar('\r');
    12f4:	8d e0       	ldi	r24, 0x0D	; 13
    12f6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
    12fa:	2f ef       	ldi	r18, 0xFF	; 255
    12fc:	83 ed       	ldi	r24, 0xD3	; 211
    12fe:	90 e3       	ldi	r25, 0x30	; 48
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	80 40       	sbci	r24, 0x00	; 0
    1304:	90 40       	sbci	r25, 0x00	; 0
    1306:	e1 f7       	brne	.-8      	; 0x1300 <WelcomeScreenRemote+0x22>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <WelcomeScreenRemote+0x2c>
    130a:	00 00       	nop
    130c:	08 95       	ret

0000130e <WelcomeScreenLocal>:
}

void WelcomeScreenLocal()
// this function is for greeting the user in local user interface
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
    130e:	8f e4       	ldi	r24, 0x4F	; 79
    1310:	94 e0       	ldi	r25, 0x04	; 4
    1312:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
    1316:	80 ec       	ldi	r24, 0xC0	; 192
    1318:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    131c:	80 e6       	ldi	r24, 0x60	; 96
    131e:	94 e0       	ldi	r25, 0x04	; 4
    1320:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
    1324:	2f ef       	ldi	r18, 0xFF	; 255
    1326:	83 ed       	ldi	r24, 0xD3	; 211
    1328:	90 e3       	ldi	r25, 0x30	; 48
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	80 40       	sbci	r24, 0x00	; 0
    132e:	90 40       	sbci	r25, 0x00	; 0
    1330:	e1 f7       	brne	.-8      	; 0x132a <WelcomeScreenLocal+0x1c>
    1332:	00 c0       	rjmp	.+0      	; 0x1334 <WelcomeScreenLocal+0x26>
    1334:	00 00       	nop
    1336:	08 95       	ret

00001338 <Display_Remotetemp>:
}

void Display_Remotetemp(void)
//function for getting temp value from temp sensor and displaying it for remote user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1338:	66 ec       	ldi	r22, 0xC6	; 198
    133a:	74 e0       	ldi	r23, 0x04	; 4
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
	sprintf(tempString, "Room Temp: %d c", local_temp);
    1342:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <__data_end>
    1346:	1f 92       	push	r1
    1348:	8f 93       	push	r24
    134a:	83 ec       	ldi	r24, 0xC3	; 195
    134c:	92 e0       	ldi	r25, 0x02	; 2
    134e:	9f 93       	push	r25
    1350:	8f 93       	push	r24
    1352:	8b ee       	ldi	r24, 0xEB	; 235
    1354:	94 e0       	ldi	r25, 0x04	; 4
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <sprintf>
	BL_voidTxString(tempString);
    135e:	8b ee       	ldi	r24, 0xEB	; 235
    1360:	94 e0       	ldi	r25, 0x04	; 4
    1362:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	BL_voidTxChar('\r');
    1366:	8d e0       	ldi	r24, 0x0D	; 13
    1368:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	08 95       	ret

0000137a <Idle_RemoteAction>:

void Idle_RemoteAction()
//this function is for the remote user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the remote user 
{ 
    BL_voidTxChar('\r');
    137a:	8d e0       	ldi	r24, 0x0D	; 13
    137c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	Display_Remotetemp();
    1380:	0e 94 9c 09 	call	0x1338	; 0x1338 <Display_Remotetemp>
	BL_voidTxString("0-Go to Home");
    1384:	8e e6       	ldi	r24, 0x6E	; 110
    1386:	94 e0       	ldi	r25, 0x04	; 4
    1388:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <BL_voidTxString>
	BL_voidTxChar('\r');
    138c:	8d e0       	ldi	r24, 0x0D	; 13
    138e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <BL_voidTxChar>
	BL_voidRxChar(&bluetooh_value);
    1392:	89 ec       	ldi	r24, 0xC9	; 201
    1394:	94 e0       	ldi	r25, 0x04	; 4
    1396:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <BL_voidRxChar>
    if (bluetooh_value == '0')
    139a:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <bluetooh_value>
    139e:	80 33       	cpi	r24, 0x30	; 48
    13a0:	11 f4       	brne	.+4      	; 0x13a6 <Idle_RemoteAction+0x2c>
    {
        TMR0clear_flag();
    13a2:	0e 94 cc 13 	call	0x2798	; 0x2798 <TMR0clear_flag>
    13a6:	08 95       	ret

000013a8 <Display_temp>:
}

void Display_temp(void)
//function for getting temp value from temp sensor and displaying it for local user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    13a8:	66 ec       	ldi	r22, 0xC6	; 198
    13aa:	74 e0       	ldi	r23, 0x04	; 4
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    13b2:	6b e0       	ldi	r22, 0x0B	; 11
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
    13ba:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <__data_end>
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
    13c8:	08 95       	ret

000013ca <Idle_Action>:

void Idle_Action()
//this function is for the local user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the local user
{ 
    LCD_voidClear();
    13ca:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
    13ce:	80 e8       	ldi	r24, 0x80	; 128
    13d0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
    13d4:	8b e7       	ldi	r24, 0x7B	; 123
    13d6:	94 e0       	ldi	r25, 0x04	; 4
    13d8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
	Display_temp();
    13dc:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
    13e0:	80 ec       	ldi	r24, 0xC0	; 192
    13e2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
    13e6:	8e e6       	ldi	r24, 0x6E	; 110
    13e8:	94 e0       	ldi	r25, 0x04	; 4
    13ea:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
    13f0:	81 e6       	ldi	r24, 0x61	; 97
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
		Display_temp();
    13f8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    13fc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1400:	8f 3f       	cpi	r24, 0xFF	; 255
    1402:	b1 f3       	breq	.-20     	; 0x13f0 <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
    1404:	80 33       	cpi	r24, 0x30	; 48
    1406:	11 f4       	brne	.+4      	; 0x140c <Idle_Action+0x42>
    {
        LCD_voidClear();
    1408:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
    }
    TMR0clear_flag();
    140c:	0e 94 cc 13 	call	0x2798	; 0x2798 <TMR0clear_flag>
    LCD_voidClear();
    1410:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
    1414:	08 95       	ret

00001416 <Reset_AllKPDValues>:
}

void Reset_AllKPDValues()
//function for reseting all KPD values for new values to be entered
{
    Local_copyKPDValue = KPD_Not_Pressed;
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
    141c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
    1420:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
    1424:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
    1428:	08 95       	ret

0000142a <KPD_Interface_Localuser>:

void KPD_Interface_Localuser(void)
{
	//this is the local user interface to control the smart home all user allowed functions using lcd to display options and KPD for interaction
		//reseting all KPD variables for new values to be entered
        Reset_AllKPDValues();
    142a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Reset_AllKPDValues>
		2-start tmr0 before busy wait for KPD to avoid starting the tmr0 counter when the lcd didnt finish printing the options
		3-after the wihle loop is finished make sure to stop the tmr0 to avoid going to the idle function
		*/
	
		//setting the TRM0 ctc interrupt function
        TMR0_SetCallBackCTC(&Idle_Action);
    142e:	85 ee       	ldi	r24, 0xE5	; 229
    1430:	99 e0       	ldi	r25, 0x09	; 9
    1432:	0e 94 c5 13 	call	0x278a	; 0x278a <TMR0_SetCallBackCTC>
		//starting the timer0
        TMR0_voidStart();
    1436:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
        LCD_voidClear();
    143a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
    143e:	8b e7       	ldi	r24, 0x7B	; 123
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
    1446:	80 ec       	ldi	r24, 0xC0	; 192
    1448:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
    144c:	88 e8       	ldi	r24, 0x88	; 136
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
        Reset_AllKPDValues();
    1454:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Reset_AllKPDValues>

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1458:	0c c0       	rjmp	.+24     	; 0x1472 <KPD_Interface_Localuser+0x48>
        {
            if (local_KPDIdleValue == '0')
    145a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    145e:	80 33       	cpi	r24, 0x30	; 48
    1460:	21 f4       	brne	.+8      	; 0x146a <KPD_Interface_Localuser+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
    1462:	8f ef       	ldi	r24, 0xFF	; 255
    1464:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
    1468:	08 c0       	rjmp	.+16     	; 0x147a <KPD_Interface_Localuser+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
    146a:	84 e6       	ldi	r24, 0x64	; 100
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
        Reset_AllKPDValues();

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1472:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1476:	8f 3f       	cpi	r24, 0xFF	; 255
    1478:	81 f3       	breq	.-32     	; 0x145a <KPD_Interface_Localuser+0x30>
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
		//stopping timer after reciving the value to avoid tmr0 from going to idle function
        TMR0_voidStop();
    147a:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
        switch (Local_copyKPDValue)
    147e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1482:	82 33       	cpi	r24, 0x32	; 50
    1484:	09 f4       	brne	.+2      	; 0x1488 <KPD_Interface_Localuser+0x5e>
    1486:	45 c0       	rjmp	.+138    	; 0x1512 <KPD_Interface_Localuser+0xe8>
    1488:	83 33       	cpi	r24, 0x33	; 51
    148a:	09 f4       	brne	.+2      	; 0x148e <KPD_Interface_Localuser+0x64>
    148c:	06 c3       	rjmp	.+1548   	; 0x1a9a <KPD_Interface_Localuser+0x670>
    148e:	81 33       	cpi	r24, 0x31	; 49
    1490:	09 f0       	breq	.+2      	; 0x1494 <KPD_Interface_Localuser+0x6a>
    1492:	35 c3       	rjmp	.+1642   	; 0x1afe <KPD_Interface_Localuser+0x6d4>
        {
        case ('1'):

            LCD_voidClear();
    1494:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off 0-H");
    1498:	8a e8       	ldi	r24, 0x8A	; 138
    149a:	94 e0       	ldi	r25, 0x04	; 4
    149c:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    14a0:	80 ec       	ldi	r24, 0xC0	; 192
    14a2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    14a6:	66 ec       	ldi	r22, 0xC6	; 198
    14a8:	74 e0       	ldi	r23, 0x04	; 4
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
    14b0:	8b e9       	ldi	r24, 0x9B	; 155
    14b2:	94 e0       	ldi	r25, 0x04	; 4
    14b4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    14b8:	6c e0       	ldi	r22, 0x0C	; 12
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayNumber(local_temp);
    14c0:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <__data_end>
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
			while (local_KPDSelectValue == KPD_Not_Pressed)
    14ce:	1c c0       	rjmp	.+56     	; 0x1508 <KPD_Interface_Localuser+0xde>
			{
				KPD_voidGetValue(&local_KPDSelectValue);
    14d0:	80 e6       	ldi	r24, 0x60	; 96
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    14d8:	66 ec       	ldi	r22, 0xC6	; 198
    14da:	74 e0       	ldi	r23, 0x04	; 4
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    14e2:	6c e0       	ldi	r22, 0x0C	; 12
    14e4:	82 e0       	ldi	r24, 0x02	; 2
    14e6:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    14ea:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <__data_end>
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
				if (local_KPDSelectValue == '0')
    14f8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14fc:	80 33       	cpi	r24, 0x30	; 48
    14fe:	21 f4       	brne	.+8      	; 0x1508 <KPD_Interface_Localuser+0xde>
				{
					local_KPDSelectValue = KPD_Not_Pressed;
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
    1506:	08 95       	ret
            LCD_voidSendCommand(Write_SecondLine);
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
			LCD_voidDisplayNumber(local_temp);
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1508:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    150c:	8f 3f       	cpi	r24, 0xFF	; 255
    150e:	01 f3       	breq	.-64     	; 0x14d0 <KPD_Interface_Localuser+0xa6>
    1510:	08 95       	ret
            break;
			

        case ('2'):

            LCD_voidClear();
    1512:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
    1516:	80 ee       	ldi	r24, 0xE0	; 224
    1518:	92 e0       	ldi	r25, 0x02	; 2
    151a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    151e:	80 ec       	ldi	r24, 0xC0	; 192
    1520:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
    1524:	80 ef       	ldi	r24, 0xF0	; 240
    1526:	92 e0       	ldi	r25, 0x02	; 2
    1528:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
    152c:	85 ee       	ldi	r24, 0xE5	; 229
    152e:	99 e0       	ldi	r25, 0x09	; 9
    1530:	0e 94 c5 13 	call	0x278a	; 0x278a <TMR0_SetCallBackCTC>
            TMR0_voidStart();
    1534:	0e 94 ad 13 	call	0x275a	; 0x275a <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1538:	0c c0       	rjmp	.+24     	; 0x1552 <KPD_Interface_Localuser+0x128>
            {
                KPD_voidGetValue(&local_lightNum);
    153a:	83 e6       	ldi	r24, 0x63	; 99
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
    1542:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1546:	80 33       	cpi	r24, 0x30	; 48
    1548:	21 f4       	brne	.+8      	; 0x1552 <KPD_Interface_Localuser+0x128>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
    1550:	04 c0       	rjmp	.+8      	; 0x155a <KPD_Interface_Localuser+0x130>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1552:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1556:	8f 3f       	cpi	r24, 0xFF	; 255
    1558:	81 f3       	breq	.-32     	; 0x153a <KPD_Interface_Localuser+0x110>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
    155a:	0e 94 bb 13 	call	0x2776	; 0x2776 <TMR0_voidStop>
            switch (local_lightNum)
    155e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1562:	83 33       	cpi	r24, 0x33	; 51
    1564:	09 f4       	brne	.+2      	; 0x1568 <KPD_Interface_Localuser+0x13e>
    1566:	a6 c0       	rjmp	.+332    	; 0x16b4 <KPD_Interface_Localuser+0x28a>
    1568:	30 f4       	brcc	.+12     	; 0x1576 <KPD_Interface_Localuser+0x14c>
    156a:	81 33       	cpi	r24, 0x31	; 49
    156c:	69 f0       	breq	.+26     	; 0x1588 <KPD_Interface_Localuser+0x15e>
    156e:	82 33       	cpi	r24, 0x32	; 50
    1570:	09 f4       	brne	.+2      	; 0x1574 <KPD_Interface_Localuser+0x14a>
    1572:	54 c0       	rjmp	.+168    	; 0x161c <KPD_Interface_Localuser+0x1f2>
    1574:	08 95       	ret
    1576:	85 33       	cpi	r24, 0x35	; 53
    1578:	09 f4       	brne	.+2      	; 0x157c <KPD_Interface_Localuser+0x152>
    157a:	34 c1       	rjmp	.+616    	; 0x17e4 <KPD_Interface_Localuser+0x3ba>
    157c:	08 f4       	brcc	.+2      	; 0x1580 <KPD_Interface_Localuser+0x156>
    157e:	e6 c0       	rjmp	.+460    	; 0x174c <KPD_Interface_Localuser+0x322>
    1580:	86 33       	cpi	r24, 0x36	; 54
    1582:	09 f4       	brne	.+2      	; 0x1586 <KPD_Interface_Localuser+0x15c>
    1584:	7b c1       	rjmp	.+758    	; 0x187c <KPD_Interface_Localuser+0x452>
    1586:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    1588:	48 ec       	ldi	r20, 0xC8	; 200
    158a:	54 e0       	ldi	r21, 0x04	; 4
    158c:	63 e0       	ldi	r22, 0x03	; 3
    158e:	83 e0       	ldi	r24, 0x03	; 3
    1590:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                LCD_voidClear();
    1594:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
                if (led_status == 1)
    1598:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	f1 f4       	brne	.+60     	; 0x15dc <KPD_Interface_Localuser+0x1b2>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
    15a0:	8d ef       	ldi	r24, 0xFD	; 253
    15a2:	92 e0       	ldi	r25, 0x02	; 2
    15a4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    15a8:	80 ec       	ldi	r24, 0xC0	; 192
    15aa:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    15ae:	8b e0       	ldi	r24, 0x0B	; 11
    15b0:	93 e0       	ldi	r25, 0x03	; 3
    15b2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    15b6:	04 c0       	rjmp	.+8      	; 0x15c0 <KPD_Interface_Localuser+0x196>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    15b8:	82 e6       	ldi	r24, 0x62	; 98
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    15c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    15c4:	8f 3f       	cpi	r24, 0xFF	; 255
    15c6:	c1 f3       	breq	.-16     	; 0x15b8 <KPD_Interface_Localuser+0x18e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    15c8:	81 33       	cpi	r24, 0x31	; 49
    15ca:	29 f4       	brne	.+10     	; 0x15d6 <KPD_Interface_Localuser+0x1ac>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	63 e0       	ldi	r22, 0x03	; 3
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
    15d6:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Reset_AllKPDValues>
					break;
    15da:	08 95       	ret
                }
                else if (led_status == 0)
    15dc:	81 11       	cpse	r24, r1
    15de:	8f c2       	rjmp	.+1310   	; 0x1afe <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
    15e0:	8c e1       	ldi	r24, 0x1C	; 28
    15e2:	93 e0       	ldi	r25, 0x03	; 3
    15e4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    15e8:	80 ec       	ldi	r24, 0xC0	; 192
    15ea:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    15ee:	8b e2       	ldi	r24, 0x2B	; 43
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    15f6:	04 c0       	rjmp	.+8      	; 0x1600 <KPD_Interface_Localuser+0x1d6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    15f8:	82 e6       	ldi	r24, 0x62	; 98
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1600:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1604:	8f 3f       	cpi	r24, 0xFF	; 255
    1606:	c1 f3       	breq	.-16     	; 0x15f8 <KPD_Interface_Localuser+0x1ce>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1608:	81 33       	cpi	r24, 0x31	; 49
    160a:	29 f4       	brne	.+10     	; 0x1616 <KPD_Interface_Localuser+0x1ec>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
    1616:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Reset_AllKPDValues>
    161a:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
    161c:	48 ec       	ldi	r20, 0xC8	; 200
    161e:	54 e0       	ldi	r21, 0x04	; 4
    1620:	64 e0       	ldi	r22, 0x04	; 4
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                LCD_voidClear();
    1628:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
                if (led_status == 1)
    162c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	f9 f4       	brne	.+62     	; 0x1672 <KPD_Interface_Localuser+0x248>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
    1634:	8b e3       	ldi	r24, 0x3B	; 59
    1636:	93 e0       	ldi	r25, 0x03	; 3
    1638:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    163c:	80 ec       	ldi	r24, 0xC0	; 192
    163e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1642:	8b e0       	ldi	r24, 0x0B	; 11
    1644:	93 e0       	ldi	r25, 0x03	; 3
    1646:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <KPD_Interface_Localuser+0x22a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    164c:	82 e6       	ldi	r24, 0x62	; 98
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1654:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1658:	8f 3f       	cpi	r24, 0xFF	; 255
    165a:	c1 f3       	breq	.-16     	; 0x164c <KPD_Interface_Localuser+0x222>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    165c:	81 33       	cpi	r24, 0x31	; 49
    165e:	29 f4       	brne	.+10     	; 0x166a <KPD_Interface_Localuser+0x240>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	64 e0       	ldi	r22, 0x04	; 4
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1670:	08 95       	ret
                }
                else if (led_status == 0)
    1672:	81 11       	cpse	r24, r1
    1674:	44 c2       	rjmp	.+1160   	; 0x1afe <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
    1676:	89 e4       	ldi	r24, 0x49	; 73
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    167e:	80 ec       	ldi	r24, 0xC0	; 192
    1680:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1684:	8b e2       	ldi	r24, 0x2B	; 43
    1686:	93 e0       	ldi	r25, 0x03	; 3
    1688:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <KPD_Interface_Localuser+0x26c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    168e:	82 e6       	ldi	r24, 0x62	; 98
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1696:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    169a:	8f 3f       	cpi	r24, 0xFF	; 255
    169c:	c1 f3       	breq	.-16     	; 0x168e <KPD_Interface_Localuser+0x264>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    169e:	81 33       	cpi	r24, 0x31	; 49
    16a0:	29 f4       	brne	.+10     	; 0x16ac <KPD_Interface_Localuser+0x282>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	64 e0       	ldi	r22, 0x04	; 4
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    16b2:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    16b4:	48 ec       	ldi	r20, 0xC8	; 200
    16b6:	54 e0       	ldi	r21, 0x04	; 4
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                LCD_voidClear();
    16c0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
                if (led_status == 1)
    16c4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	f9 f4       	brne	.+62     	; 0x170a <KPD_Interface_Localuser+0x2e0>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
    16cc:	88 e5       	ldi	r24, 0x58	; 88
    16ce:	93 e0       	ldi	r25, 0x03	; 3
    16d0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    16d4:	80 ec       	ldi	r24, 0xC0	; 192
    16d6:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    16da:	8b e0       	ldi	r24, 0x0B	; 11
    16dc:	93 e0       	ldi	r25, 0x03	; 3
    16de:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <KPD_Interface_Localuser+0x2c2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    16e4:	82 e6       	ldi	r24, 0x62	; 98
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    16ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    16f0:	8f 3f       	cpi	r24, 0xFF	; 255
    16f2:	c1 f3       	breq	.-16     	; 0x16e4 <KPD_Interface_Localuser+0x2ba>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    16f4:	81 33       	cpi	r24, 0x31	; 49
    16f6:	29 f4       	brne	.+10     	; 0x1702 <KPD_Interface_Localuser+0x2d8>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    16f8:	41 e0       	ldi	r20, 0x01	; 1
    16fa:	62 e0       	ldi	r22, 0x02	; 2
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1702:	8f ef       	ldi	r24, 0xFF	; 255
    1704:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1708:	08 95       	ret
                }
                else if (led_status == 0)
    170a:	81 11       	cpse	r24, r1
    170c:	f8 c1       	rjmp	.+1008   	; 0x1afe <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
    170e:	86 e6       	ldi	r24, 0x66	; 102
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1716:	80 ec       	ldi	r24, 0xC0	; 192
    1718:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    171c:	8b e2       	ldi	r24, 0x2B	; 43
    171e:	93 e0       	ldi	r25, 0x03	; 3
    1720:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1724:	04 c0       	rjmp	.+8      	; 0x172e <KPD_Interface_Localuser+0x304>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1726:	82 e6       	ldi	r24, 0x62	; 98
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    172e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	c1 f3       	breq	.-16     	; 0x1726 <KPD_Interface_Localuser+0x2fc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1736:	81 33       	cpi	r24, 0x31	; 49
    1738:	29 f4       	brne	.+10     	; 0x1744 <KPD_Interface_Localuser+0x31a>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	62 e0       	ldi	r22, 0x02	; 2
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    174a:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    174c:	48 ec       	ldi	r20, 0xC8	; 200
    174e:	54 e0       	ldi	r21, 0x04	; 4
    1750:	63 e0       	ldi	r22, 0x03	; 3
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                LCD_voidClear();
    1758:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
                if (led_status == 1)
    175c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	f9 f4       	brne	.+62     	; 0x17a2 <KPD_Interface_Localuser+0x378>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
    1764:	85 e7       	ldi	r24, 0x75	; 117
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    176c:	80 ec       	ldi	r24, 0xC0	; 192
    176e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1772:	8b e0       	ldi	r24, 0x0B	; 11
    1774:	93 e0       	ldi	r25, 0x03	; 3
    1776:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <KPD_Interface_Localuser+0x35a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    177c:	82 e6       	ldi	r24, 0x62	; 98
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1784:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1788:	8f 3f       	cpi	r24, 0xFF	; 255
    178a:	c1 f3       	breq	.-16     	; 0x177c <KPD_Interface_Localuser+0x352>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    178c:	81 33       	cpi	r24, 0x31	; 49
    178e:	29 f4       	brne	.+10     	; 0x179a <KPD_Interface_Localuser+0x370>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1790:	41 e0       	ldi	r20, 0x01	; 1
    1792:	63 e0       	ldi	r22, 0x03	; 3
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    179a:	8f ef       	ldi	r24, 0xFF	; 255
    179c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    17a0:	08 95       	ret
                }
                else if (led_status == 0)
    17a2:	81 11       	cpse	r24, r1
    17a4:	ac c1       	rjmp	.+856    	; 0x1afe <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
    17a6:	83 e8       	ldi	r24, 0x83	; 131
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    17ae:	80 ec       	ldi	r24, 0xC0	; 192
    17b0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    17b4:	8b e2       	ldi	r24, 0x2B	; 43
    17b6:	93 e0       	ldi	r25, 0x03	; 3
    17b8:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <KPD_Interface_Localuser+0x39c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    17be:	82 e6       	ldi	r24, 0x62	; 98
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    17c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    17ca:	8f 3f       	cpi	r24, 0xFF	; 255
    17cc:	c1 f3       	breq	.-16     	; 0x17be <KPD_Interface_Localuser+0x394>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    17ce:	81 33       	cpi	r24, 0x31	; 49
    17d0:	29 f4       	brne	.+10     	; 0x17dc <KPD_Interface_Localuser+0x3b2>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	63 e0       	ldi	r22, 0x03	; 3
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    17e2:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    17e4:	48 ec       	ldi	r20, 0xC8	; 200
    17e6:	54 e0       	ldi	r21, 0x04	; 4
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
                LCD_voidClear();
    17f0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
                if (led_status == 1)
    17f4:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	f9 f4       	brne	.+62     	; 0x183a <KPD_Interface_Localuser+0x410>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
    17fc:	82 e9       	ldi	r24, 0x92	; 146
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    1800:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1804:	80 ec       	ldi	r24, 0xC0	; 192
    1806:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    180a:	8b e0       	ldi	r24, 0x0B	; 11
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1812:	04 c0       	rjmp	.+8      	; 0x181c <KPD_Interface_Localuser+0x3f2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1814:	82 e6       	ldi	r24, 0x62	; 98
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    181c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1820:	8f 3f       	cpi	r24, 0xFF	; 255
    1822:	c1 f3       	breq	.-16     	; 0x1814 <KPD_Interface_Localuser+0x3ea>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1824:	81 33       	cpi	r24, 0x31	; 49
    1826:	29 f4       	brne	.+10     	; 0x1832 <KPD_Interface_Localuser+0x408>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	62 e0       	ldi	r22, 0x02	; 2
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	0e 94 c9 10 	call	0x2192	; 0x2192 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1832:	8f ef       	ldi	r24, 0xFF	; 255
    1834:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1838:	08 95       	ret
                }
                else if (led_status == 0)
    183a:	81 11       	cpse	r24, r1
    183c:	60 c1       	rjmp	.+704    	; 0x1afe <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
    183e:	80 ea       	ldi	r24, 0xA0	; 160
    1840:	93 e0       	ldi	r25, 0x03	; 3
    1842:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1846:	80 ec       	ldi	r24, 0xC0	; 192
    1848:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    184c:	8b e2       	ldi	r24, 0x2B	; 43
    184e:	93 e0       	ldi	r25, 0x03	; 3
    1850:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1854:	04 c0       	rjmp	.+8      	; 0x185e <KPD_Interface_Localuser+0x434>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1856:	82 e6       	ldi	r24, 0x62	; 98
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    185e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1862:	8f 3f       	cpi	r24, 0xFF	; 255
    1864:	c1 f3       	breq	.-16     	; 0x1856 <KPD_Interface_Localuser+0x42c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1866:	81 33       	cpi	r24, 0x31	; 49
    1868:	29 f4       	brne	.+10     	; 0x1874 <KPD_Interface_Localuser+0x44a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	62 e0       	ldi	r22, 0x02	; 2
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	0e 94 bc 10 	call	0x2178	; 0x2178 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    187a:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
    187c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
				
                if (dimmer_brightness > 0)
    1880:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1884:	88 23       	and	r24, r24
    1886:	09 f4       	brne	.+2      	; 0x188a <KPD_Interface_Localuser+0x460>
    1888:	82 c0       	rjmp	.+260    	; 0x198e <KPD_Interface_Localuser+0x564>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
    188a:	8f ea       	ldi	r24, 0xAF	; 175
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
    1892:	2f ef       	ldi	r18, 0xFF	; 255
    1894:	83 ed       	ldi	r24, 0xD3	; 211
    1896:	90 e3       	ldi	r25, 0x30	; 48
    1898:	21 50       	subi	r18, 0x01	; 1
    189a:	80 40       	sbci	r24, 0x00	; 0
    189c:	90 40       	sbci	r25, 0x00	; 0
    189e:	e1 f7       	brne	.-8      	; 0x1898 <KPD_Interface_Localuser+0x46e>
    18a0:	00 c0       	rjmp	.+0      	; 0x18a2 <KPD_Interface_Localuser+0x478>
    18a2:	00 00       	nop
					_delay_ms(1000);
					LCD_voidClear();
    18a4:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    18a8:	89 ea       	ldi	r24, 0xA9	; 169
    18aa:	94 e0       	ldi	r25, 0x04	; 4
    18ac:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    18b0:	6d e0       	ldi	r22, 0x0D	; 13
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    18b8:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    18c6:	80 ec       	ldi	r24, 0xC0	; 192
    18c8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    18cc:	8d ec       	ldi	r24, 0xCD	; 205
    18ce:	93 e0       	ldi	r25, 0x03	; 3
    18d0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    18d4:	56 c0       	rjmp	.+172    	; 0x1982 <KPD_Interface_Localuser+0x558>
					{
						KPD_voidGetValue(&local_lightStatus);
    18d6:	82 e6       	ldi	r24, 0x62	; 98
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    18de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    18e2:	81 33       	cpi	r24, 0x31	; 49
    18e4:	59 f5       	brne	.+86     	; 0x193c <KPD_Interface_Localuser+0x512>
						{
							dimmer_brightness += 10;
    18e6:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    18ea:	66 5f       	subi	r22, 0xF6	; 246
    18ec:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    18fa:	ab 01       	movw	r20, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	88 ee       	ldi	r24, 0xE8	; 232
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1906:	6d e0       	ldi	r22, 0x0D	; 13
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    190e:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1912:	70 e0       	ldi	r23, 0x00	; 0
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    191c:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1920:	85 36       	cpi	r24, 0x65	; 101
    1922:	78 f1       	brcs	.+94     	; 0x1982 <KPD_Interface_Localuser+0x558>
							{
								dimmer_brightness = 100;
    1924:	84 e6       	ldi	r24, 0x64	; 100
    1926:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	68 ec       	ldi	r22, 0xC8	; 200
    1930:	72 e4       	ldi	r23, 0x42	; 66
    1932:	88 ee       	ldi	r24, 0xE8	; 232
    1934:	93 e0       	ldi	r25, 0x03	; 3
    1936:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
    193a:	23 c0       	rjmp	.+70     	; 0x1982 <KPD_Interface_Localuser+0x558>
							}
						
							
						}
						else if (local_lightStatus == '2')
    193c:	82 33       	cpi	r24, 0x32	; 50
    193e:	e1 f4       	brne	.+56     	; 0x1978 <KPD_Interface_Localuser+0x54e>
						{
							dimmer_brightness -= 10;
    1940:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1944:	6a 50       	subi	r22, 0x0A	; 10
    1946:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    1954:	ab 01       	movw	r20, r22
    1956:	bc 01       	movw	r22, r24
    1958:	88 ee       	ldi	r24, 0xE8	; 232
    195a:	93 e0       	ldi	r25, 0x03	; 3
    195c:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1960:	6d e0       	ldi	r22, 0x0D	; 13
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    1968:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <KPD_Interface_Localuser+0x558>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    1978:	80 33       	cpi	r24, 0x30	; 48
    197a:	19 f4       	brne	.+6      	; 0x1982 <KPD_Interface_Localuser+0x558>
						{
							LCD_voidClear();
    197c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
							break;
    1980:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    1982:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1986:	8f 3f       	cpi	r24, 0xFF	; 255
    1988:	09 f4       	brne	.+2      	; 0x198c <KPD_Interface_Localuser+0x562>
    198a:	a5 cf       	rjmp	.-182    	; 0x18d6 <KPD_Interface_Localuser+0x4ac>
    198c:	08 95       	ret
						}						
						
					}
					
                }
                else if (led_status == 0)
    198e:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <led_status>
    1992:	81 11       	cpse	r24, r1
    1994:	b4 c0       	rjmp	.+360    	; 0x1afe <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
    1996:	8d ed       	ldi	r24, 0xDD	; 221
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
    199e:	2f ef       	ldi	r18, 0xFF	; 255
    19a0:	83 ed       	ldi	r24, 0xD3	; 211
    19a2:	90 e3       	ldi	r25, 0x30	; 48
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	80 40       	sbci	r24, 0x00	; 0
    19a8:	90 40       	sbci	r25, 0x00	; 0
    19aa:	e1 f7       	brne	.-8      	; 0x19a4 <KPD_Interface_Localuser+0x57a>
    19ac:	00 c0       	rjmp	.+0      	; 0x19ae <KPD_Interface_Localuser+0x584>
    19ae:	00 00       	nop
					_delay_ms(1000);
                    LCD_voidClear();
    19b0:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    19b4:	89 ea       	ldi	r24, 0xA9	; 169
    19b6:	94 e0       	ldi	r25, 0x04	; 4
    19b8:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    19bc:	6d e0       	ldi	r22, 0x0D	; 13
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    19c4:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    19d2:	80 ec       	ldi	r24, 0xC0	; 192
    19d4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    19d8:	8d ec       	ldi	r24, 0xCD	; 205
    19da:	93 e0       	ldi	r25, 0x03	; 3
    19dc:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    19e0:	56 c0       	rjmp	.+172    	; 0x1a8e <KPD_Interface_Localuser+0x664>
					{
						KPD_voidGetValue(&local_lightStatus);
    19e2:	82 e6       	ldi	r24, 0x62	; 98
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    19ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    19ee:	81 33       	cpi	r24, 0x31	; 49
    19f0:	59 f5       	brne	.+86     	; 0x1a48 <KPD_Interface_Localuser+0x61e>
						{
							dimmer_brightness += 10;
    19f2:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    19f6:	66 5f       	subi	r22, 0xF6	; 246
    19f8:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    1a06:	ab 01       	movw	r20, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	88 ee       	ldi	r24, 0xE8	; 232
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1a12:	6d e0       	ldi	r22, 0x0D	; 13
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    1a1a:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    1a28:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1a2c:	85 36       	cpi	r24, 0x65	; 101
    1a2e:	78 f1       	brcs	.+94     	; 0x1a8e <KPD_Interface_Localuser+0x664>
							{
								dimmer_brightness = 100;
    1a30:	84 e6       	ldi	r24, 0x64	; 100
    1a32:	80 93 c7 04 	sts	0x04C7, r24	; 0x8004c7 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	68 ec       	ldi	r22, 0xC8	; 200
    1a3c:	72 e4       	ldi	r23, 0x42	; 66
    1a3e:	88 ee       	ldi	r24, 0xE8	; 232
    1a40:	93 e0       	ldi	r25, 0x03	; 3
    1a42:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
    1a46:	23 c0       	rjmp	.+70     	; 0x1a8e <KPD_Interface_Localuser+0x664>
							}
						
							
						}
						else if (local_lightStatus == '2')
    1a48:	82 33       	cpi	r24, 0x32	; 50
    1a4a:	e1 f4       	brne	.+56     	; 0x1a84 <KPD_Interface_Localuser+0x65a>
						{
							dimmer_brightness -= 10;
    1a4c:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1a50:	6a 50       	subi	r22, 0x0A	; 10
    1a52:	60 93 c7 04 	sts	0x04C7, r22	; 0x8004c7 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    1a60:	ab 01       	movw	r20, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	88 ee       	ldi	r24, 0xE8	; 232
    1a66:	93 e0       	ldi	r25, 0x03	; 3
    1a68:	0e 94 03 13 	call	0x2606	; 0x2606 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1a6c:	6d e0       	ldi	r22, 0x0D	; 13
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    1a74:	60 91 c7 04 	lds	r22, 0x04C7	; 0x8004c7 <dimmer_brightness>
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
    1a82:	05 c0       	rjmp	.+10     	; 0x1a8e <KPD_Interface_Localuser+0x664>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    1a84:	80 33       	cpi	r24, 0x30	; 48
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <KPD_Interface_Localuser+0x664>
						{
							LCD_voidClear();
    1a88:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
							break;
    1a8c:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    1a8e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1a92:	8f 3f       	cpi	r24, 0xFF	; 255
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <KPD_Interface_Localuser+0x66e>
    1a96:	a5 cf       	rjmp	.-182    	; 0x19e2 <KPD_Interface_Localuser+0x5b8>
    1a98:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
    1a9a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1a9e:	66 ec       	ldi	r22, 0xC6	; 198
    1aa0:	74 e0       	ldi	r23, 0x04	; 4
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	0e 94 4b 11 	call	0x2296	; 0x2296 <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
    1aa8:	80 e8       	ldi	r24, 0x80	; 128
    1aaa:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
    1aae:	8b e9       	ldi	r24, 0x9B	; 155
    1ab0:	94 e0       	ldi	r25, 0x04	; 4
    1ab2:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    1ab6:	6b e0       	ldi	r22, 0x0B	; 11
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	0e 94 9d 10 	call	0x213a	; 0x213a <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    1abe:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <__data_end>
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	0e 94 19 10 	call	0x2032	; 0x2032 <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
    1acc:	83 e6       	ldi	r24, 0x63	; 99
    1ace:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
    1ad2:	80 ec       	ldi	r24, 0xC0	; 192
    1ad4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
    1ad8:	83 ed       	ldi	r24, 0xD3	; 211
    1ada:	92 e0       	ldi	r25, 0x02	; 2
    1adc:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
    1ae0:	06 c0       	rjmp	.+12     	; 0x1aee <KPD_Interface_Localuser+0x6c4>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
    1ae2:	81 e6       	ldi	r24, 0x61	; 97
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <KPD_voidGetValue>
					Display_temp();
    1aea:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
    1aee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1af2:	8f 3f       	cpi	r24, 0xFF	; 255
    1af4:	b1 f3       	breq	.-20     	; 0x1ae2 <KPD_Interface_Localuser+0x6b8>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
    1af6:	80 33       	cpi	r24, 0x30	; 48
    1af8:	11 f4       	brne	.+4      	; 0x1afe <KPD_Interface_Localuser+0x6d4>
				{
					LCD_voidClear();
    1afa:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_voidClear>
    1afe:	08 95       	ret

00001b00 <BL_voidInit>:
	
}

BL_voidRxCharWithTimeout(u8* copy_pu8BlRxData)
{
	 UART_voidRxCharWithTimeout(copy_pu8BlRxData);
    1b00:	0e 94 78 15 	call	0x2af0	; 0x2af0 <UART_voidInit>
    1b04:	08 95       	ret

00001b06 <BL_voidTxChar>:
    1b06:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_voidTxChar>
    1b0a:	08 95       	ret

00001b0c <BL_voidRxChar>:
    1b0c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <UART_voidRxChar>
    1b10:	08 95       	ret

00001b12 <BL_voidTxString>:
}

void BL_voidTxString(u8* copy_pu8BlTxString)
{
	UART_voidTxString(copy_pu8BlTxString);
    1b12:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <UART_voidTxString>
    1b16:	08 95       	ret

00001b18 <BUZZER_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void BUZZER_voidInit	(u8 copy_u8BuzzerPortId,u8 copy_u8BuzzerPinId)
{
	DIO_voidSetPinDirection(copy_u8BuzzerPortId,copy_u8BuzzerPinId,DIO_PIN_HIGH);
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1b1e:	08 95       	ret

00001b20 <EEPROM_voidInit>:
	{
		//error
	}
	
	
}
    1b20:	0e 94 ed 14 	call	0x29da	; 0x29da <TWI_voidInitMaster>
    1b24:	08 95       	ret

00001b26 <EEPROM_voidWritePage>:
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	61 15       	cp	r22, r1
    1b30:	71 05       	cpc	r23, r1
    1b32:	f9 f0       	breq	.+62     	; 0x1b72 <EEPROM_voidWritePage+0x4c>
    1b34:	8b 01       	movw	r16, r22
    1b36:	d8 2f       	mov	r29, r24
    1b38:	c9 2f       	mov	r28, r25
    1b3a:	c0 65       	ori	r28, 0x50	; 80
    1b3c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_voidSendStartCondition>
    1b40:	8c 2f       	mov	r24, r28
    1b42:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <TWI_voidSendSlaveAddWithWrite>
    1b46:	8d 2f       	mov	r24, r29
    1b48:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <TWI_voidTransmitMasterDataByte>
    1b4c:	c0 e0       	ldi	r28, 0x00	; 0
    1b4e:	07 c0       	rjmp	.+14     	; 0x1b5e <EEPROM_voidWritePage+0x38>
    1b50:	f8 01       	movw	r30, r16
    1b52:	ec 0f       	add	r30, r28
    1b54:	f1 1d       	adc	r31, r1
    1b56:	80 81       	ld	r24, Z
    1b58:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <TWI_voidTransmitMasterDataByte>
    1b5c:	cf 5f       	subi	r28, 0xFF	; 255
    1b5e:	c8 30       	cpi	r28, 0x08	; 8
    1b60:	b8 f3       	brcs	.-18     	; 0x1b50 <EEPROM_voidWritePage+0x2a>
    1b62:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <TWI_voidSendStopCondition>
    1b66:	8f e1       	ldi	r24, 0x1F	; 31
    1b68:	9e e4       	ldi	r25, 0x4E	; 78
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <EEPROM_voidWritePage+0x44>
    1b6e:	00 c0       	rjmp	.+0      	; 0x1b70 <EEPROM_voidWritePage+0x4a>
    1b70:	00 00       	nop
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	08 95       	ret

00001b7c <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
    1b88:	41 15       	cp	r20, r1
    1b8a:	51 05       	cpc	r21, r1
    1b8c:	81 f1       	breq	.+96     	; 0x1bee <EEPROM_voidSequentialRead+0x72>
    1b8e:	61 15       	cp	r22, r1
    1b90:	22 e0       	ldi	r18, 0x02	; 2
    1b92:	72 07       	cpc	r23, r18
    1b94:	60 f5       	brcc	.+88     	; 0x1bee <EEPROM_voidSequentialRead+0x72>
    1b96:	8a 01       	movw	r16, r20
    1b98:	7b 01       	movw	r14, r22
    1b9a:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    1b9c:	c9 2f       	mov	r28, r25
    1b9e:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
    1ba0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    1ba4:	8c 2f       	mov	r24, r28
    1ba6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    1baa:	8d 2f       	mov	r24, r29
    1bac:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
    1bb0:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
    1bb4:	8c 2f       	mov	r24, r28
    1bb6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    1bba:	c0 e0       	ldi	r28, 0x00	; 0
    1bbc:	d0 e0       	ldi	r29, 0x00	; 0
    1bbe:	06 c0       	rjmp	.+12     	; 0x1bcc <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	8c 0f       	add	r24, r28
    1bc4:	9d 1f       	adc	r25, r29
    1bc6:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    1bca:	21 96       	adiw	r28, 0x01	; 1
    1bcc:	c7 01       	movw	r24, r14
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	c8 17       	cp	r28, r24
    1bd2:	d9 07       	cpc	r29, r25
    1bd4:	a8 f3       	brcs	.-22     	; 0x1bc0 <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
    1bd6:	80 0f       	add	r24, r16
    1bd8:	91 1f       	adc	r25, r17
    1bda:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
    1bde:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <TWI_voidSendStopCondition>
    1be2:	8f e1       	ldi	r24, 0x1F	; 31
    1be4:	9e e4       	ldi	r25, 0x4E	; 78
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <EEPROM_voidSequentialRead+0x6a>
    1bea:	00 c0       	rjmp	.+0      	; 0x1bec <EEPROM_voidSequentialRead+0x70>
    1bec:	00 00       	nop
	{
		//error state
	}


    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	08 95       	ret

00001bfc <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	64 e0       	ldi	r22, 0x04	; 4
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	65 e0       	ldi	r22, 0x05	; 5
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	66 e0       	ldi	r22, 0x06	; 6
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	63 e0       	ldi	r22, 0x03	; 3
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
    1c24:	40 e0       	ldi	r20, 0x00	; 0
    1c26:	64 e0       	ldi	r22, 0x04	; 4
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	65 e0       	ldi	r22, 0x05	; 5
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	66 e0       	ldi	r22, 0x06	; 6
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
    1c42:	63 e0       	ldi	r22, 0x03	; 3
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
    1c4a:	64 e0       	ldi	r22, 0x04	; 4
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
    1c52:	65 e0       	ldi	r22, 0x05	; 5
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
    1c5a:	66 e0       	ldi	r22, 0x06	; 6
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	0e 94 a1 12 	call	0x2542	; 0x2542 <DIO_voidActivePinInPullUpResistance>
    1c62:	08 95       	ret

00001c64 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
    1c64:	6f 92       	push	r6
    1c66:	7f 92       	push	r7
    1c68:	8f 92       	push	r8
    1c6a:	9f 92       	push	r9
    1c6c:	af 92       	push	r10
    1c6e:	bf 92       	push	r11
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	6b 97       	sbiw	r28, 0x1b	; 27
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <KPD_voidGetValue+0x32>
    1c94:	7e c0       	rjmp	.+252    	; 0x1d92 <KPD_voidGetValue+0x12e>
    1c96:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	88 8f       	std	Y+24, r24	; 0x18
    1c9c:	89 8f       	std	Y+25, r24	; 0x19
    1c9e:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
    1ca0:	34 e0       	ldi	r19, 0x04	; 4
    1ca2:	3d 8b       	std	Y+21, r19	; 0x15
    1ca4:	25 e0       	ldi	r18, 0x05	; 5
    1ca6:	2e 8b       	std	Y+22, r18	; 0x16
    1ca8:	96 e0       	ldi	r25, 0x06	; 6
    1caa:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	89 8b       	std	Y+17, r24	; 0x11
    1cb0:	8a 8b       	std	Y+18, r24	; 0x12
    1cb2:	8b 8b       	std	Y+19, r24	; 0x13
    1cb4:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
    1cb6:	83 e0       	ldi	r24, 0x03	; 3
    1cb8:	8d 87       	std	Y+13, r24	; 0x0d
    1cba:	3e 87       	std	Y+14, r19	; 0x0e
    1cbc:	2f 87       	std	Y+15, r18	; 0x0f
    1cbe:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
    1cc0:	8c e0       	ldi	r24, 0x0C	; 12
    1cc2:	e6 e6       	ldi	r30, 0x66	; 102
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	de 01       	movw	r26, r28
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	01 90       	ld	r0, Z+
    1ccc:	0d 92       	st	X+, r0
    1cce:	8a 95       	dec	r24
    1cd0:	e1 f7       	brne	.-8      	; 0x1cca <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	f5 01       	movw	r30, r10
    1cd6:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    1cd8:	81 2c       	mov	r8, r1
    1cda:	57 c0       	rjmp	.+174    	; 0x1d8a <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
    1cdc:	c8 2c       	mov	r12, r8
    1cde:	d1 2c       	mov	r13, r1
    1ce0:	e5 e1       	ldi	r30, 0x15	; 21
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	ec 0f       	add	r30, r28
    1ce6:	fd 1f       	adc	r31, r29
    1ce8:	ec 0d       	add	r30, r12
    1cea:	fd 1d       	adc	r31, r13
    1cec:	60 80       	ld	r6, Z
    1cee:	e8 e1       	ldi	r30, 0x18	; 24
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	ec 0f       	add	r30, r28
    1cf4:	fd 1f       	adc	r31, r29
    1cf6:	ec 0d       	add	r30, r12
    1cf8:	fd 1d       	adc	r31, r13
    1cfa:	70 80       	ld	r7, Z
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	66 2d       	mov	r22, r6
    1d00:	87 2d       	mov	r24, r7
    1d02:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	38 c0       	rjmp	.+112    	; 0x1d7a <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    1d0a:	e1 2e       	mov	r14, r17
    1d0c:	f1 2c       	mov	r15, r1
    1d0e:	ed e0       	ldi	r30, 0x0D	; 13
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	ec 0f       	add	r30, r28
    1d14:	fd 1f       	adc	r31, r29
    1d16:	ee 0d       	add	r30, r14
    1d18:	ff 1d       	adc	r31, r15
    1d1a:	00 81       	ld	r16, Z
    1d1c:	e1 e1       	ldi	r30, 0x11	; 17
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	ec 0f       	add	r30, r28
    1d22:	fd 1f       	adc	r31, r29
    1d24:	ee 0d       	add	r30, r14
    1d26:	ff 1d       	adc	r31, r15
    1d28:	90 80       	ld	r9, Z
    1d2a:	ae 01       	movw	r20, r28
    1d2c:	45 5e       	subi	r20, 0xE5	; 229
    1d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d30:	60 2f       	mov	r22, r16
    1d32:	89 2d       	mov	r24, r9
    1d34:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
    1d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3a:	81 11       	cpse	r24, r1
    1d3c:	1d c0       	rjmp	.+58     	; 0x1d78 <KPD_voidGetValue+0x114>
    1d3e:	07 c0       	rjmp	.+14     	; 0x1d4e <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    1d40:	ae 01       	movw	r20, r28
    1d42:	45 5e       	subi	r20, 0xE5	; 229
    1d44:	5f 4f       	sbci	r21, 0xFF	; 255
    1d46:	60 2f       	mov	r22, r16
    1d48:	89 2d       	mov	r24, r9
    1d4a:	0e 94 66 12 	call	0x24cc	; 0x24cc <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
    1d4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d50:	88 23       	and	r24, r24
    1d52:	b1 f3       	breq	.-20     	; 0x1d40 <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1d54:	c7 01       	movw	r24, r14
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	e8 0e       	add	r14, r24
    1d5c:	f9 1e       	adc	r15, r25
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	8c 0f       	add	r24, r28
    1d64:	9d 1f       	adc	r25, r29
    1d66:	e8 0e       	add	r14, r24
    1d68:	f9 1e       	adc	r15, r25
    1d6a:	f7 01       	movw	r30, r14
    1d6c:	ec 0d       	add	r30, r12
    1d6e:	fd 1d       	adc	r31, r13
    1d70:	80 81       	ld	r24, Z
    1d72:	f5 01       	movw	r30, r10
    1d74:	80 83       	st	Z, r24
    1d76:	0d c0       	rjmp	.+26     	; 0x1d92 <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    1d78:	1f 5f       	subi	r17, 0xFF	; 255
    1d7a:	14 30       	cpi	r17, 0x04	; 4
    1d7c:	30 f2       	brcs	.-116    	; 0x1d0a <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	66 2d       	mov	r22, r6
    1d82:	87 2d       	mov	r24, r7
    1d84:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    1d88:	83 94       	inc	r8
    1d8a:	f2 e0       	ldi	r31, 0x02	; 2
    1d8c:	f8 15       	cp	r31, r8
    1d8e:	08 f0       	brcs	.+2      	; 0x1d92 <KPD_voidGetValue+0x12e>
    1d90:	a5 cf       	rjmp	.-182    	; 0x1cdc <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
    1d92:	6b 96       	adiw	r28, 0x1b	; 27
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	ff 90       	pop	r15
    1da8:	ef 90       	pop	r14
    1daa:	df 90       	pop	r13
    1dac:	cf 90       	pop	r12
    1dae:	bf 90       	pop	r11
    1db0:	af 90       	pop	r10
    1db2:	9f 90       	pop	r9
    1db4:	8f 90       	pop	r8
    1db6:	7f 90       	pop	r7
    1db8:	6f 90       	pop	r6
    1dba:	08 95       	ret

00001dbc <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
    1dbc:	cf 93       	push	r28
    1dbe:	c8 2f       	mov	r28, r24
    1dc0:	80 ff       	sbrs	r24, 0
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <PRV_voidWriteHalfPort+0x14>
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	64 e0       	ldi	r22, 0x04	; 4
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <PRV_voidWriteHalfPort+0x1e>
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	64 e0       	ldi	r22, 0x04	; 4
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1dda:	c1 ff       	sbrs	r28, 1
    1ddc:	06 c0       	rjmp	.+12     	; 0x1dea <PRV_voidWriteHalfPort+0x2e>
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	65 e0       	ldi	r22, 0x05	; 5
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1de8:	05 c0       	rjmp	.+10     	; 0x1df4 <PRV_voidWriteHalfPort+0x38>
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	65 e0       	ldi	r22, 0x05	; 5
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1df4:	c2 ff       	sbrs	r28, 2
    1df6:	06 c0       	rjmp	.+12     	; 0x1e04 <PRV_voidWriteHalfPort+0x48>
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	66 e0       	ldi	r22, 0x06	; 6
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e02:	05 c0       	rjmp	.+10     	; 0x1e0e <PRV_voidWriteHalfPort+0x52>
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	66 e0       	ldi	r22, 0x06	; 6
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e0e:	c3 ff       	sbrs	r28, 3
    1e10:	06 c0       	rjmp	.+12     	; 0x1e1e <PRV_voidWriteHalfPort+0x62>
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	67 e0       	ldi	r22, 0x07	; 7
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e1c:	05 c0       	rjmp	.+10     	; 0x1e28 <PRV_voidWriteHalfPort+0x6c>
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	67 e0       	ldi	r22, 0x07	; 7
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e28:	cf 91       	pop	r28
    1e2a:	08 95       	ret

00001e2c <LCD_voidSendCommand>:
    1e2c:	cf 93       	push	r28
    1e2e:	c8 2f       	mov	r28, r24
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e44:	8c 2f       	mov	r24, r28
    1e46:	82 95       	swap	r24
    1e48:	8f 70       	andi	r24, 0x0F	; 15
    1e4a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <PRV_voidWriteHalfPort>
    1e4e:	41 e0       	ldi	r20, 0x01	; 1
    1e50:	63 e0       	ldi	r22, 0x03	; 3
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e58:	8f e9       	ldi	r24, 0x9F	; 159
    1e5a:	9f e0       	ldi	r25, 0x0F	; 15
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_voidSendCommand+0x30>
    1e60:	00 c0       	rjmp	.+0      	; 0x1e62 <LCD_voidSendCommand+0x36>
    1e62:	00 00       	nop
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	63 e0       	ldi	r22, 0x03	; 3
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e6e:	8c 2f       	mov	r24, r28
    1e70:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <PRV_voidWriteHalfPort>
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e7e:	8f e9       	ldi	r24, 0x9F	; 159
    1e80:	9f e0       	ldi	r25, 0x0F	; 15
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	f1 f7       	brne	.-4      	; 0x1e82 <LCD_voidSendCommand+0x56>
    1e86:	00 c0       	rjmp	.+0      	; 0x1e88 <LCD_voidSendCommand+0x5c>
    1e88:	00 00       	nop
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	63 e0       	ldi	r22, 0x03	; 3
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <LCD_voidInit>:
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	62 e0       	ldi	r22, 0x02	; 2
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	63 e0       	ldi	r22, 0x03	; 3
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	64 e0       	ldi	r22, 0x04	; 4
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	65 e0       	ldi	r22, 0x05	; 5
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	66 e0       	ldi	r22, 0x06	; 6
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	67 e0       	ldi	r22, 0x07	; 7
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    1ede:	2f e7       	ldi	r18, 0x7F	; 127
    1ee0:	85 eb       	ldi	r24, 0xB5	; 181
    1ee2:	91 e0       	ldi	r25, 0x01	; 1
    1ee4:	21 50       	subi	r18, 0x01	; 1
    1ee6:	80 40       	sbci	r24, 0x00	; 0
    1ee8:	90 40       	sbci	r25, 0x00	; 0
    1eea:	e1 f7       	brne	.-8      	; 0x1ee4 <LCD_voidInit+0x4c>
    1eec:	00 c0       	rjmp	.+0      	; 0x1eee <LCD_voidInit+0x56>
    1eee:	00 00       	nop
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1f04:	82 e0       	ldi	r24, 0x02	; 2
    1f06:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <PRV_voidWriteHalfPort>
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	63 e0       	ldi	r22, 0x03	; 3
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1f14:	8f e9       	ldi	r24, 0x9F	; 159
    1f16:	9f e0       	ldi	r25, 0x0F	; 15
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <LCD_voidInit+0x80>
    1f1c:	00 c0       	rjmp	.+0      	; 0x1f1e <LCD_voidInit+0x86>
    1f1e:	00 00       	nop
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	63 e0       	ldi	r22, 0x03	; 3
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1f2a:	88 e2       	ldi	r24, 0x28	; 40
    1f2c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
    1f30:	90 ef       	ldi	r25, 0xF0	; 240
    1f32:	9a 95       	dec	r25
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_voidInit+0x9a>
    1f36:	8c e0       	ldi	r24, 0x0C	; 12
    1f38:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
    1f3c:	20 ef       	ldi	r18, 0xF0	; 240
    1f3e:	2a 95       	dec	r18
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_voidInit+0xa6>
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
    1f48:	8f e3       	ldi	r24, 0x3F	; 63
    1f4a:	9f e1       	ldi	r25, 0x1F	; 31
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_voidInit+0xb4>
    1f50:	00 c0       	rjmp	.+0      	; 0x1f52 <LCD_voidInit+0xba>
    1f52:	00 00       	nop
    1f54:	86 e0       	ldi	r24, 0x06	; 6
    1f56:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
    1f5a:	08 95       	ret

00001f5c <LCD_voidDisplayChar>:
    1f5c:	cf 93       	push	r28
    1f5e:	c8 2f       	mov	r28, r24
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	61 e0       	ldi	r22, 0x01	; 1
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	62 e0       	ldi	r22, 0x02	; 2
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1f74:	8c 2f       	mov	r24, r28
    1f76:	82 95       	swap	r24
    1f78:	8f 70       	andi	r24, 0x0F	; 15
    1f7a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <PRV_voidWriteHalfPort>
    1f7e:	41 e0       	ldi	r20, 0x01	; 1
    1f80:	63 e0       	ldi	r22, 0x03	; 3
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1f88:	8f e9       	ldi	r24, 0x9F	; 159
    1f8a:	9f e0       	ldi	r25, 0x0F	; 15
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_voidDisplayChar+0x30>
    1f90:	00 c0       	rjmp	.+0      	; 0x1f92 <LCD_voidDisplayChar+0x36>
    1f92:	00 00       	nop
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	63 e0       	ldi	r22, 0x03	; 3
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1f9e:	8c 2f       	mov	r24, r28
    1fa0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <PRV_voidWriteHalfPort>
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	63 e0       	ldi	r22, 0x03	; 3
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1fae:	8f e9       	ldi	r24, 0x9F	; 159
    1fb0:	9f e0       	ldi	r25, 0x0F	; 15
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_voidDisplayChar+0x56>
    1fb6:	00 c0       	rjmp	.+0      	; 0x1fb8 <LCD_voidDisplayChar+0x5c>
    1fb8:	00 00       	nop
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	63 e0       	ldi	r22, 0x03	; 3
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <LCD_voidDisplayString>:
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	29 f4       	brne	.+10     	; 0x1fdc <LCD_voidDisplayString+0x14>
    1fd2:	0c c0       	rjmp	.+24     	; 0x1fec <LCD_voidDisplayString+0x24>
    1fd4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidDisplayChar>
    1fd8:	cf 5f       	subi	r28, 0xFF	; 255
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <LCD_voidDisplayString+0x18>
    1fdc:	8c 01       	movw	r16, r24
    1fde:	c0 e0       	ldi	r28, 0x00	; 0
    1fe0:	f8 01       	movw	r30, r16
    1fe2:	ec 0f       	add	r30, r28
    1fe4:	f1 1d       	adc	r31, r1
    1fe6:	80 81       	ld	r24, Z
    1fe8:	81 11       	cpse	r24, r1
    1fea:	f4 cf       	rjmp	.-24     	; 0x1fd4 <LCD_voidDisplayString+0xc>
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <LCD_voidDisplayStringDelay>:
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	71 f4       	brne	.+28     	; 0x201a <LCD_voidDisplayStringDelay+0x26>
    1ffe:	15 c0       	rjmp	.+42     	; 0x202a <LCD_voidDisplayStringDelay+0x36>
    2000:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidDisplayChar>
    2004:	cf 5f       	subi	r28, 0xFF	; 255
    2006:	2f ef       	ldi	r18, 0xFF	; 255
    2008:	80 e7       	ldi	r24, 0x70	; 112
    200a:	92 e0       	ldi	r25, 0x02	; 2
    200c:	21 50       	subi	r18, 0x01	; 1
    200e:	80 40       	sbci	r24, 0x00	; 0
    2010:	90 40       	sbci	r25, 0x00	; 0
    2012:	e1 f7       	brne	.-8      	; 0x200c <LCD_voidDisplayStringDelay+0x18>
    2014:	00 c0       	rjmp	.+0      	; 0x2016 <LCD_voidDisplayStringDelay+0x22>
    2016:	00 00       	nop
    2018:	02 c0       	rjmp	.+4      	; 0x201e <LCD_voidDisplayStringDelay+0x2a>
    201a:	8c 01       	movw	r16, r24
    201c:	c0 e0       	ldi	r28, 0x00	; 0
    201e:	f8 01       	movw	r30, r16
    2020:	ec 0f       	add	r30, r28
    2022:	f1 1d       	adc	r31, r1
    2024:	80 81       	ld	r24, Z
    2026:	81 11       	cpse	r24, r1
    2028:	eb cf       	rjmp	.-42     	; 0x2000 <LCD_voidDisplayStringDelay+0xc>
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	08 95       	ret

00002032 <LCD_voidDisplayNumber>:
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	00 d0       	rcall	.+0      	; 0x203c <LCD_voidDisplayNumber+0xa>
    203c:	00 d0       	rcall	.+0      	; 0x203e <LCD_voidDisplayNumber+0xc>
    203e:	1f 92       	push	r1
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	26 2f       	mov	r18, r22
    2046:	10 e0       	ldi	r17, 0x00	; 0
    2048:	08 c0       	rjmp	.+16     	; 0x205a <LCD_voidDisplayNumber+0x28>
    204a:	1f 5f       	subi	r17, 0xFF	; 255
    204c:	ed ec       	ldi	r30, 0xCD	; 205
    204e:	6e 9f       	mul	r22, r30
    2050:	61 2d       	mov	r22, r1
    2052:	11 24       	eor	r1, r1
    2054:	66 95       	lsr	r22
    2056:	66 95       	lsr	r22
    2058:	66 95       	lsr	r22
    205a:	61 11       	cpse	r22, r1
    205c:	f6 cf       	rjmp	.-20     	; 0x204a <LCD_voidDisplayNumber+0x18>
    205e:	00 e0       	ldi	r16, 0x00	; 0
    2060:	1a c0       	rjmp	.+52     	; 0x2096 <LCD_voidDisplayNumber+0x64>
    2062:	62 2f       	mov	r22, r18
    2064:	2a e0       	ldi	r18, 0x0A	; 10
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodsi4>
    2070:	73 2f       	mov	r23, r19
    2072:	84 2f       	mov	r24, r20
    2074:	95 2f       	mov	r25, r21
    2076:	a0 2f       	mov	r26, r16
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	11 96       	adiw	r26, 0x01	; 1
    207c:	e1 2f       	mov	r30, r17
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	ea 1b       	sub	r30, r26
    2082:	fb 0b       	sbc	r31, r27
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	4c 0f       	add	r20, r28
    208a:	5d 1f       	adc	r21, r29
    208c:	e4 0f       	add	r30, r20
    208e:	f5 1f       	adc	r31, r21
    2090:	60 5d       	subi	r22, 0xD0	; 208
    2092:	60 83       	st	Z, r22
    2094:	0f 5f       	subi	r16, 0xFF	; 255
    2096:	01 17       	cp	r16, r17
    2098:	20 f3       	brcs	.-56     	; 0x2062 <LCD_voidDisplayNumber+0x30>
    209a:	e1 e0       	ldi	r30, 0x01	; 1
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	ec 0f       	add	r30, r28
    20a0:	fd 1f       	adc	r31, r29
    20a2:	e1 0f       	add	r30, r17
    20a4:	f1 1d       	adc	r31, r1
    20a6:	10 82       	st	Z, r1
    20a8:	10 e0       	ldi	r17, 0x00	; 0
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <LCD_voidDisplayNumber+0x80>
    20ac:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LCD_voidDisplayChar>
    20b0:	1f 5f       	subi	r17, 0xFF	; 255
    20b2:	e1 e0       	ldi	r30, 0x01	; 1
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	ec 0f       	add	r30, r28
    20b8:	fd 1f       	adc	r31, r29
    20ba:	e1 0f       	add	r30, r17
    20bc:	f1 1d       	adc	r31, r1
    20be:	80 81       	ld	r24, Z
    20c0:	81 11       	cpse	r24, r1
    20c2:	f4 cf       	rjmp	.-24     	; 0x20ac <LCD_voidDisplayNumber+0x7a>
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <LCD_voidClear>:
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	61 e0       	ldi	r22, 0x01	; 1
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	62 e0       	ldi	r22, 0x02	; 2
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <PRV_voidWriteHalfPort>
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	63 e0       	ldi	r22, 0x03	; 3
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    20fc:	8f e9       	ldi	r24, 0x9F	; 159
    20fe:	9f e0       	ldi	r25, 0x0F	; 15
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_voidClear+0x28>
    2104:	00 c0       	rjmp	.+0      	; 0x2106 <LCD_voidClear+0x2e>
    2106:	00 00       	nop
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	63 e0       	ldi	r22, 0x03	; 3
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <PRV_voidWriteHalfPort>
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	63 e0       	ldi	r22, 0x03	; 3
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    2122:	8f e9       	ldi	r24, 0x9F	; 159
    2124:	9f e0       	ldi	r25, 0x0F	; 15
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <LCD_voidClear+0x4e>
    212a:	00 c0       	rjmp	.+0      	; 0x212c <LCD_voidClear+0x54>
    212c:	00 00       	nop
    212e:	40 e0       	ldi	r20, 0x00	; 0
    2130:	63 e0       	ldi	r22, 0x03	; 3
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    2138:	08 95       	ret

0000213a <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
	if(copy_u8Position<40)
    213e:	68 32       	cpi	r22, 0x28	; 40
    2140:	a0 f4       	brcc	.+40     	; 0x216a <LCD_voidGoTOSpecificPosition+0x30>
    2142:	c6 2f       	mov	r28, r22
    2144:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
    2146:	82 e0       	ldi	r24, 0x02	; 2
    2148:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
    214c:	d1 30       	cpi	r29, 0x01	; 1
    214e:	19 f0       	breq	.+6      	; 0x2156 <LCD_voidGoTOSpecificPosition+0x1c>
    2150:	d2 30       	cpi	r29, 0x02	; 2
    2152:	31 f0       	breq	.+12     	; 0x2160 <LCD_voidGoTOSpecificPosition+0x26>
    2154:	0a c0       	rjmp	.+20     	; 0x216a <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
    2156:	8c 2f       	mov	r24, r28
    2158:	80 68       	ori	r24, 0x80	; 128
    215a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
		
			
			break;
    215e:	05 c0       	rjmp	.+10     	; 0x216a <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
    2160:	80 e4       	ldi	r24, 0x40	; 64
    2162:	8c 0f       	add	r24, r28
    2164:	80 68       	ori	r24, 0x80	; 128
    2166:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
    2176:	08 95       	ret

00002178 <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    2178:	41 30       	cpi	r20, 0x01	; 1
    217a:	19 f0       	breq	.+6      	; 0x2182 <LED_voidOn+0xa>
    217c:	42 30       	cpi	r20, 0x02	; 2
    217e:	29 f0       	breq	.+10     	; 0x218a <LED_voidOn+0x12>
    2180:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
		break;
    2188:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    2190:	08 95       	ret

00002192 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    2192:	41 30       	cpi	r20, 0x01	; 1
    2194:	19 f0       	breq	.+6      	; 0x219c <LED_voidOff+0xa>
    2196:	42 30       	cpi	r20, 0x02	; 2
    2198:	29 f0       	breq	.+10     	; 0x21a4 <LED_voidOff+0x12>
    219a:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
		break;
    21a2:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    21a4:	41 e0       	ldi	r20, 0x01	; 1
    21a6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <DIO_voidSetPinValue>
    21aa:	08 95       	ret

000021ac <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	0e 94 66 11 	call	0x22cc	; 0x22cc <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
    21b2:	0e 94 dd 12 	call	0x25ba	; 0x25ba <PWM_voidInitChannel_1A>
    21b6:	08 95       	ret

000021b8 <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e2       	ldi	r20, 0x20	; 32
    21be:	50 e4       	ldi	r21, 0x40	; 64
    21c0:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__mulsf3>
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 ec       	ldi	r19, 0xC0	; 192
    21c8:	48 e2       	ldi	r20, 0x28	; 40
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__addsf3>
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	44 eb       	ldi	r20, 0xB4	; 180
    21d6:	52 e4       	ldi	r21, 0x42	; 66
    21d8:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__divsf3>
    21dc:	ab 01       	movw	r20, r22
    21de:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1B(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
    21e0:	82 e3       	ldi	r24, 0x32	; 50
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 4f 13 	call	0x269e	; 0x269e <PWM_voidGenerateChannel_1B>
    21e8:	08 95       	ret

000021ea <main>:
	
	//check alarm
	// HOME_voidFireAnALarm(usertype);
	
	//init home  
	HOME_voidInit();
    21ea:	0e 94 60 00 	call	0xc0	; 0xc0 <HOME_voidInit>
	while(1)
	{
		

		// display the welcome screen
		WelcomeScreenLocal();
    21ee:	0e 94 87 09 	call	0x130e	; 0x130e <WelcomeScreenLocal>
		WelcomeScreenRemote();
    21f2:	0e 94 6f 09 	call	0x12de	; 0x12de <WelcomeScreenRemote>
		HOME_voidRemoteGetUserAndPass(HOME_REMOTE_ACCESS,&usertype);
    21f6:	65 e6       	ldi	r22, 0x65	; 101
    21f8:	70 e0       	ldi	r23, 0x00	; 0
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 b5 00 	call	0x16a	; 0x16a <HOME_voidRemoteGetUserAndPass>

		// GetUserType();
		
			if (usertype == HOME_REMOTE_ADMIN)
    2202:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usertype>
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	19 f4       	brne	.+6      	; 0x2210 <main+0x26>
			{
				KPD_Interface_RemoteAdmin();
    220a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <KPD_Interface_RemoteAdmin>
    220e:	ef cf       	rjmp	.-34     	; 0x21ee <main+0x4>
			}
			else if (usertype == HOME_REMOTE_USER)
    2210:	84 30       	cpi	r24, 0x04	; 4
    2212:	19 f4       	brne	.+6      	; 0x221a <main+0x30>
			{
				KPD_Interface_RemoteUser();
    2214:	0e 94 d5 05 	call	0xbaa	; 0xbaa <KPD_Interface_RemoteUser>
    2218:	ea cf       	rjmp	.-44     	; 0x21ee <main+0x4>
			}

			else if (usertype == HOME_LOCAL_USER)
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	19 f4       	brne	.+6      	; 0x2224 <main+0x3a>
			{
				KPD_Interface_Localuser();
    221e:	0e 94 15 0a 	call	0x142a	; 0x142a <KPD_Interface_Localuser>
    2222:	e5 cf       	rjmp	.-54     	; 0x21ee <main+0x4>
			}

	
		
			else if (usertype ==HOME_LOGIN_FAILED)
    2224:	85 30       	cpi	r24, 0x05	; 5
    2226:	19 f7       	brne	.-58     	; 0x21ee <main+0x4>
			{
			LCD_voidDisplayString((u8*)"Access Denied");
    2228:	88 eb       	ldi	r24, 0xB8	; 184
    222a:	94 e0       	ldi	r25, 0x04	; 4
    222c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_voidDisplayString>
			}
		
		
		
	}
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	08 95       	ret

00002236 <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
    2236:	82 30       	cpi	r24, 0x02	; 2
    2238:	59 f0       	breq	.+22     	; 0x2250 <ADC_voidInit+0x1a>
    223a:	83 30       	cpi	r24, 0x03	; 3
    223c:	81 f0       	breq	.+32     	; 0x225e <ADC_voidInit+0x28>
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	a1 f4       	brne	.+40     	; 0x226a <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
    2242:	87 b1       	in	r24, 0x07	; 7
    2244:	80 64       	ori	r24, 0x40	; 64
    2246:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    2248:	87 b1       	in	r24, 0x07	; 7
    224a:	8f 77       	andi	r24, 0x7F	; 127
    224c:	87 b9       	out	0x07, r24	; 7
		break;
    224e:	0d c0       	rjmp	.+26     	; 0x226a <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
    2250:	87 b1       	in	r24, 0x07	; 7
    2252:	8f 7b       	andi	r24, 0xBF	; 191
    2254:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    2256:	87 b1       	in	r24, 0x07	; 7
    2258:	8f 77       	andi	r24, 0x7F	; 127
    225a:	87 b9       	out	0x07, r24	; 7
		break;
    225c:	06 c0       	rjmp	.+12     	; 0x226a <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
    225e:	87 b1       	in	r24, 0x07	; 7
    2260:	80 64       	ori	r24, 0x40	; 64
    2262:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
    2264:	87 b1       	in	r24, 0x07	; 7
    2266:	80 68       	ori	r24, 0x80	; 128
    2268:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
    226a:	87 b1       	in	r24, 0x07	; 7
    226c:	8f 7d       	andi	r24, 0xDF	; 223
    226e:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
    2270:	86 b1       	in	r24, 0x06	; 6
    2272:	8f 7d       	andi	r24, 0xDF	; 223
    2274:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
    2276:	86 b1       	in	r24, 0x06	; 6
    2278:	87 7f       	andi	r24, 0xF7	; 247
    227a:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
    227c:	86 b1       	in	r24, 0x06	; 6
    227e:	84 60       	ori	r24, 0x04	; 4
    2280:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
    2282:	86 b1       	in	r24, 0x06	; 6
    2284:	82 60       	ori	r24, 0x02	; 2
    2286:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
    2288:	86 b1       	in	r24, 0x06	; 6
    228a:	81 60       	ori	r24, 0x01	; 1
    228c:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
    228e:	86 b1       	in	r24, 0x06	; 6
    2290:	80 68       	ori	r24, 0x80	; 128
    2292:	86 b9       	out	0x06, r24	; 6
    2294:	08 95       	ret

00002296 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
    2296:	61 15       	cp	r22, r1
    2298:	71 05       	cpc	r23, r1
    229a:	b9 f0       	breq	.+46     	; 0x22ca <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
    229c:	97 b1       	in	r25, 0x07	; 7
    229e:	90 7e       	andi	r25, 0xE0	; 224
    22a0:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
    22a2:	97 b1       	in	r25, 0x07	; 7
    22a4:	89 2b       	or	r24, r25
    22a6:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
    22a8:	86 b1       	in	r24, 0x06	; 6
    22aa:	80 64       	ori	r24, 0x40	; 64
    22ac:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
    22ae:	34 9b       	sbis	0x06, 4	; 6
    22b0:	fe cf       	rjmp	.-4      	; 0x22ae <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
    22b2:	84 b1       	in	r24, 0x04	; 4
    22b4:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
    22b6:	96 95       	lsr	r25
    22b8:	87 95       	ror	r24
    22ba:	96 95       	lsr	r25
    22bc:	87 95       	ror	r24
    22be:	fb 01       	movw	r30, r22
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
    22c4:	86 b1       	in	r24, 0x06	; 6
    22c6:	80 61       	ori	r24, 0x10	; 16
    22c8:	86 b9       	out	0x06, r24	; 6
    22ca:	08 95       	ret

000022cc <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    22cc:	84 30       	cpi	r24, 0x04	; 4
    22ce:	08 f0       	brcs	.+2      	; 0x22d2 <DIO_voidSetPinDirection+0x6>
    22d0:	7c c0       	rjmp	.+248    	; 0x23ca <DIO_voidSetPinDirection+0xfe>
    22d2:	68 30       	cpi	r22, 0x08	; 8
    22d4:	08 f0       	brcs	.+2      	; 0x22d8 <DIO_voidSetPinDirection+0xc>
    22d6:	79 c0       	rjmp	.+242    	; 0x23ca <DIO_voidSetPinDirection+0xfe>
    22d8:	42 30       	cpi	r20, 0x02	; 2
    22da:	08 f0       	brcs	.+2      	; 0x22de <DIO_voidSetPinDirection+0x12>
    22dc:	76 c0       	rjmp	.+236    	; 0x23ca <DIO_voidSetPinDirection+0xfe>
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	19 f1       	breq	.+70     	; 0x2328 <DIO_voidSetPinDirection+0x5c>
    22e2:	30 f0       	brcs	.+12     	; 0x22f0 <DIO_voidSetPinDirection+0x24>
    22e4:	82 30       	cpi	r24, 0x02	; 2
    22e6:	e1 f1       	breq	.+120    	; 0x2360 <DIO_voidSetPinDirection+0x94>
    22e8:	83 30       	cpi	r24, 0x03	; 3
    22ea:	09 f4       	brne	.+2      	; 0x22ee <DIO_voidSetPinDirection+0x22>
    22ec:	54 c0       	rjmp	.+168    	; 0x2396 <DIO_voidSetPinDirection+0xca>
    22ee:	08 95       	ret
    22f0:	44 23       	and	r20, r20
    22f2:	71 f0       	breq	.+28     	; 0x2310 <DIO_voidSetPinDirection+0x44>
    22f4:	41 30       	cpi	r20, 0x01	; 1
    22f6:	09 f0       	breq	.+2      	; 0x22fa <DIO_voidSetPinDirection+0x2e>
    22f8:	68 c0       	rjmp	.+208    	; 0x23ca <DIO_voidSetPinDirection+0xfe>
    22fa:	2a b3       	in	r18, 0x1a	; 26
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 c0       	rjmp	.+4      	; 0x2306 <DIO_voidSetPinDirection+0x3a>
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	6a 95       	dec	r22
    2308:	e2 f7       	brpl	.-8      	; 0x2302 <DIO_voidSetPinDirection+0x36>
    230a:	82 2b       	or	r24, r18
    230c:	8a bb       	out	0x1a, r24	; 26
    230e:	08 95       	ret
    2310:	2a b3       	in	r18, 0x1a	; 26
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_voidSetPinDirection+0x50>
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	6a 95       	dec	r22
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_voidSetPinDirection+0x4c>
    2320:	80 95       	com	r24
    2322:	82 23       	and	r24, r18
    2324:	8a bb       	out	0x1a, r24	; 26
    2326:	08 95       	ret
    2328:	44 23       	and	r20, r20
    232a:	71 f0       	breq	.+28     	; 0x2348 <DIO_voidSetPinDirection+0x7c>
    232c:	41 30       	cpi	r20, 0x01	; 1
    232e:	09 f0       	breq	.+2      	; 0x2332 <DIO_voidSetPinDirection+0x66>
    2330:	4c c0       	rjmp	.+152    	; 0x23ca <DIO_voidSetPinDirection+0xfe>
    2332:	27 b3       	in	r18, 0x17	; 23
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	02 c0       	rjmp	.+4      	; 0x233e <DIO_voidSetPinDirection+0x72>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	6a 95       	dec	r22
    2340:	e2 f7       	brpl	.-8      	; 0x233a <DIO_voidSetPinDirection+0x6e>
    2342:	82 2b       	or	r24, r18
    2344:	87 bb       	out	0x17, r24	; 23
    2346:	08 95       	ret
    2348:	27 b3       	in	r18, 0x17	; 23
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <DIO_voidSetPinDirection+0x88>
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	6a 95       	dec	r22
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <DIO_voidSetPinDirection+0x84>
    2358:	80 95       	com	r24
    235a:	82 23       	and	r24, r18
    235c:	87 bb       	out	0x17, r24	; 23
    235e:	08 95       	ret
    2360:	44 23       	and	r20, r20
    2362:	69 f0       	breq	.+26     	; 0x237e <DIO_voidSetPinDirection+0xb2>
    2364:	41 30       	cpi	r20, 0x01	; 1
    2366:	89 f5       	brne	.+98     	; 0x23ca <DIO_voidSetPinDirection+0xfe>
    2368:	24 b3       	in	r18, 0x14	; 20
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <DIO_voidSetPinDirection+0xa8>
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	6a 95       	dec	r22
    2376:	e2 f7       	brpl	.-8      	; 0x2370 <DIO_voidSetPinDirection+0xa4>
    2378:	82 2b       	or	r24, r18
    237a:	84 bb       	out	0x14, r24	; 20
    237c:	08 95       	ret
    237e:	24 b3       	in	r18, 0x14	; 20
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 c0       	rjmp	.+4      	; 0x238a <DIO_voidSetPinDirection+0xbe>
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	6a 95       	dec	r22
    238c:	e2 f7       	brpl	.-8      	; 0x2386 <DIO_voidSetPinDirection+0xba>
    238e:	80 95       	com	r24
    2390:	82 23       	and	r24, r18
    2392:	84 bb       	out	0x14, r24	; 20
    2394:	08 95       	ret
    2396:	44 23       	and	r20, r20
    2398:	69 f0       	breq	.+26     	; 0x23b4 <DIO_voidSetPinDirection+0xe8>
    239a:	41 30       	cpi	r20, 0x01	; 1
    239c:	b1 f4       	brne	.+44     	; 0x23ca <DIO_voidSetPinDirection+0xfe>
    239e:	21 b3       	in	r18, 0x11	; 17
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <DIO_voidSetPinDirection+0xde>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	6a 95       	dec	r22
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <DIO_voidSetPinDirection+0xda>
    23ae:	82 2b       	or	r24, r18
    23b0:	81 bb       	out	0x11, r24	; 17
    23b2:	08 95       	ret
    23b4:	21 b3       	in	r18, 0x11	; 17
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <DIO_voidSetPinDirection+0xf4>
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	6a 95       	dec	r22
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <DIO_voidSetPinDirection+0xf0>
    23c4:	80 95       	com	r24
    23c6:	82 23       	and	r24, r18
    23c8:	81 bb       	out	0x11, r24	; 17
    23ca:	08 95       	ret

000023cc <DIO_voidSetPinValue>:
    23cc:	84 30       	cpi	r24, 0x04	; 4
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <DIO_voidSetPinValue+0x6>
    23d0:	7c c0       	rjmp	.+248    	; 0x24ca <DIO_voidSetPinValue+0xfe>
    23d2:	68 30       	cpi	r22, 0x08	; 8
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <DIO_voidSetPinValue+0xc>
    23d6:	79 c0       	rjmp	.+242    	; 0x24ca <DIO_voidSetPinValue+0xfe>
    23d8:	42 30       	cpi	r20, 0x02	; 2
    23da:	08 f0       	brcs	.+2      	; 0x23de <DIO_voidSetPinValue+0x12>
    23dc:	76 c0       	rjmp	.+236    	; 0x24ca <DIO_voidSetPinValue+0xfe>
    23de:	81 30       	cpi	r24, 0x01	; 1
    23e0:	19 f1       	breq	.+70     	; 0x2428 <DIO_voidSetPinValue+0x5c>
    23e2:	30 f0       	brcs	.+12     	; 0x23f0 <DIO_voidSetPinValue+0x24>
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	e1 f1       	breq	.+120    	; 0x2460 <DIO_voidSetPinValue+0x94>
    23e8:	83 30       	cpi	r24, 0x03	; 3
    23ea:	09 f4       	brne	.+2      	; 0x23ee <DIO_voidSetPinValue+0x22>
    23ec:	54 c0       	rjmp	.+168    	; 0x2496 <DIO_voidSetPinValue+0xca>
    23ee:	08 95       	ret
    23f0:	44 23       	and	r20, r20
    23f2:	71 f0       	breq	.+28     	; 0x2410 <DIO_voidSetPinValue+0x44>
    23f4:	41 30       	cpi	r20, 0x01	; 1
    23f6:	09 f0       	breq	.+2      	; 0x23fa <DIO_voidSetPinValue+0x2e>
    23f8:	68 c0       	rjmp	.+208    	; 0x24ca <DIO_voidSetPinValue+0xfe>
    23fa:	2b b3       	in	r18, 0x1b	; 27
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <DIO_voidSetPinValue+0x3a>
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	6a 95       	dec	r22
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <DIO_voidSetPinValue+0x36>
    240a:	82 2b       	or	r24, r18
    240c:	8b bb       	out	0x1b, r24	; 27
    240e:	08 95       	ret
    2410:	2b b3       	in	r18, 0x1b	; 27
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	02 c0       	rjmp	.+4      	; 0x241c <DIO_voidSetPinValue+0x50>
    2418:	88 0f       	add	r24, r24
    241a:	99 1f       	adc	r25, r25
    241c:	6a 95       	dec	r22
    241e:	e2 f7       	brpl	.-8      	; 0x2418 <DIO_voidSetPinValue+0x4c>
    2420:	80 95       	com	r24
    2422:	82 23       	and	r24, r18
    2424:	8b bb       	out	0x1b, r24	; 27
    2426:	08 95       	ret
    2428:	44 23       	and	r20, r20
    242a:	71 f0       	breq	.+28     	; 0x2448 <DIO_voidSetPinValue+0x7c>
    242c:	41 30       	cpi	r20, 0x01	; 1
    242e:	09 f0       	breq	.+2      	; 0x2432 <DIO_voidSetPinValue+0x66>
    2430:	4c c0       	rjmp	.+152    	; 0x24ca <DIO_voidSetPinValue+0xfe>
    2432:	28 b3       	in	r18, 0x18	; 24
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	02 c0       	rjmp	.+4      	; 0x243e <DIO_voidSetPinValue+0x72>
    243a:	88 0f       	add	r24, r24
    243c:	99 1f       	adc	r25, r25
    243e:	6a 95       	dec	r22
    2440:	e2 f7       	brpl	.-8      	; 0x243a <DIO_voidSetPinValue+0x6e>
    2442:	82 2b       	or	r24, r18
    2444:	88 bb       	out	0x18, r24	; 24
    2446:	08 95       	ret
    2448:	28 b3       	in	r18, 0x18	; 24
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	02 c0       	rjmp	.+4      	; 0x2454 <DIO_voidSetPinValue+0x88>
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	6a 95       	dec	r22
    2456:	e2 f7       	brpl	.-8      	; 0x2450 <DIO_voidSetPinValue+0x84>
    2458:	80 95       	com	r24
    245a:	82 23       	and	r24, r18
    245c:	88 bb       	out	0x18, r24	; 24
    245e:	08 95       	ret
    2460:	44 23       	and	r20, r20
    2462:	69 f0       	breq	.+26     	; 0x247e <DIO_voidSetPinValue+0xb2>
    2464:	41 30       	cpi	r20, 0x01	; 1
    2466:	89 f5       	brne	.+98     	; 0x24ca <DIO_voidSetPinValue+0xfe>
    2468:	25 b3       	in	r18, 0x15	; 21
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <DIO_voidSetPinValue+0xa8>
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	6a 95       	dec	r22
    2476:	e2 f7       	brpl	.-8      	; 0x2470 <DIO_voidSetPinValue+0xa4>
    2478:	82 2b       	or	r24, r18
    247a:	85 bb       	out	0x15, r24	; 21
    247c:	08 95       	ret
    247e:	25 b3       	in	r18, 0x15	; 21
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_voidSetPinValue+0xbe>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	6a 95       	dec	r22
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_voidSetPinValue+0xba>
    248e:	80 95       	com	r24
    2490:	82 23       	and	r24, r18
    2492:	85 bb       	out	0x15, r24	; 21
    2494:	08 95       	ret
    2496:	44 23       	and	r20, r20
    2498:	69 f0       	breq	.+26     	; 0x24b4 <DIO_voidSetPinValue+0xe8>
    249a:	41 30       	cpi	r20, 0x01	; 1
    249c:	b1 f4       	brne	.+44     	; 0x24ca <DIO_voidSetPinValue+0xfe>
    249e:	22 b3       	in	r18, 0x12	; 18
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <DIO_voidSetPinValue+0xde>
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	6a 95       	dec	r22
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <DIO_voidSetPinValue+0xda>
    24ae:	82 2b       	or	r24, r18
    24b0:	82 bb       	out	0x12, r24	; 18
    24b2:	08 95       	ret
    24b4:	22 b3       	in	r18, 0x12	; 18
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <DIO_voidSetPinValue+0xf4>
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	6a 95       	dec	r22
    24c2:	e2 f7       	brpl	.-8      	; 0x24bc <DIO_voidSetPinValue+0xf0>
    24c4:	80 95       	com	r24
    24c6:	82 23       	and	r24, r18
    24c8:	82 bb       	out	0x12, r24	; 18
    24ca:	08 95       	ret

000024cc <DIO_voidGetPinValue>:
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	c0 f5       	brcc	.+112    	; 0x2540 <DIO_voidGetPinValue+0x74>
    24d0:	68 30       	cpi	r22, 0x08	; 8
    24d2:	b0 f5       	brcc	.+108    	; 0x2540 <DIO_voidGetPinValue+0x74>
    24d4:	41 15       	cp	r20, r1
    24d6:	51 05       	cpc	r21, r1
    24d8:	99 f1       	breq	.+102    	; 0x2540 <DIO_voidGetPinValue+0x74>
    24da:	81 30       	cpi	r24, 0x01	; 1
    24dc:	89 f0       	breq	.+34     	; 0x2500 <DIO_voidGetPinValue+0x34>
    24de:	28 f0       	brcs	.+10     	; 0x24ea <DIO_voidGetPinValue+0x1e>
    24e0:	82 30       	cpi	r24, 0x02	; 2
    24e2:	c9 f0       	breq	.+50     	; 0x2516 <DIO_voidGetPinValue+0x4a>
    24e4:	83 30       	cpi	r24, 0x03	; 3
    24e6:	11 f1       	breq	.+68     	; 0x252c <DIO_voidGetPinValue+0x60>
    24e8:	08 95       	ret
    24ea:	89 b3       	in	r24, 0x19	; 25
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <DIO_voidGetPinValue+0x28>
    24f0:	95 95       	asr	r25
    24f2:	87 95       	ror	r24
    24f4:	6a 95       	dec	r22
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <DIO_voidGetPinValue+0x24>
    24f8:	81 70       	andi	r24, 0x01	; 1
    24fa:	fa 01       	movw	r30, r20
    24fc:	80 83       	st	Z, r24
    24fe:	08 95       	ret
    2500:	86 b3       	in	r24, 0x16	; 22
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	02 c0       	rjmp	.+4      	; 0x250a <DIO_voidGetPinValue+0x3e>
    2506:	95 95       	asr	r25
    2508:	87 95       	ror	r24
    250a:	6a 95       	dec	r22
    250c:	e2 f7       	brpl	.-8      	; 0x2506 <DIO_voidGetPinValue+0x3a>
    250e:	81 70       	andi	r24, 0x01	; 1
    2510:	fa 01       	movw	r30, r20
    2512:	80 83       	st	Z, r24
    2514:	08 95       	ret
    2516:	83 b3       	in	r24, 0x13	; 19
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <DIO_voidGetPinValue+0x54>
    251c:	95 95       	asr	r25
    251e:	87 95       	ror	r24
    2520:	6a 95       	dec	r22
    2522:	e2 f7       	brpl	.-8      	; 0x251c <DIO_voidGetPinValue+0x50>
    2524:	81 70       	andi	r24, 0x01	; 1
    2526:	fa 01       	movw	r30, r20
    2528:	80 83       	st	Z, r24
    252a:	08 95       	ret
    252c:	80 b3       	in	r24, 0x10	; 16
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <DIO_voidGetPinValue+0x6a>
    2532:	95 95       	asr	r25
    2534:	87 95       	ror	r24
    2536:	6a 95       	dec	r22
    2538:	e2 f7       	brpl	.-8      	; 0x2532 <DIO_voidGetPinValue+0x66>
    253a:	81 70       	andi	r24, 0x01	; 1
    253c:	fa 01       	movw	r30, r20
    253e:	80 83       	st	Z, r24
    2540:	08 95       	ret

00002542 <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    2542:	84 30       	cpi	r24, 0x04	; 4
    2544:	a8 f5       	brcc	.+106    	; 0x25b0 <DIO_voidActivePinInPullUpResistance+0x6e>
    2546:	68 30       	cpi	r22, 0x08	; 8
    2548:	98 f5       	brcc	.+102    	; 0x25b0 <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    254a:	81 30       	cpi	r24, 0x01	; 1
    254c:	89 f0       	breq	.+34     	; 0x2570 <DIO_voidActivePinInPullUpResistance+0x2e>
    254e:	28 f0       	brcs	.+10     	; 0x255a <DIO_voidActivePinInPullUpResistance+0x18>
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	c9 f0       	breq	.+50     	; 0x2586 <DIO_voidActivePinInPullUpResistance+0x44>
    2554:	83 30       	cpi	r24, 0x03	; 3
    2556:	11 f1       	breq	.+68     	; 0x259c <DIO_voidActivePinInPullUpResistance+0x5a>
    2558:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    255a:	2b b3       	in	r18, 0x1b	; 27
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_voidActivePinInPullUpResistance+0x24>
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	6a 95       	dec	r22
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <DIO_voidActivePinInPullUpResistance+0x20>
    256a:	82 2b       	or	r24, r18
    256c:	8b bb       	out	0x1b, r24	; 27
			break;
    256e:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    2570:	28 b3       	in	r18, 0x18	; 24
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	02 c0       	rjmp	.+4      	; 0x257c <DIO_voidActivePinInPullUpResistance+0x3a>
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	6a 95       	dec	r22
    257e:	e2 f7       	brpl	.-8      	; 0x2578 <DIO_voidActivePinInPullUpResistance+0x36>
    2580:	82 2b       	or	r24, r18
    2582:	88 bb       	out	0x18, r24	; 24
			break;
    2584:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    2586:	25 b3       	in	r18, 0x15	; 21
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <DIO_voidActivePinInPullUpResistance+0x50>
    258e:	88 0f       	add	r24, r24
    2590:	99 1f       	adc	r25, r25
    2592:	6a 95       	dec	r22
    2594:	e2 f7       	brpl	.-8      	; 0x258e <DIO_voidActivePinInPullUpResistance+0x4c>
    2596:	82 2b       	or	r24, r18
    2598:	85 bb       	out	0x15, r24	; 21
			break;
    259a:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    259c:	22 b3       	in	r18, 0x12	; 18
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <DIO_voidActivePinInPullUpResistance+0x66>
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	6a 95       	dec	r22
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <DIO_voidActivePinInPullUpResistance+0x62>
    25ac:	82 2b       	or	r24, r18
    25ae:	82 bb       	out	0x12, r24	; 18
    25b0:	08 95       	ret

000025b2 <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    25b2:	8f b7       	in	r24, 0x3f	; 63
    25b4:	80 68       	ori	r24, 0x80	; 128
    25b6:	8f bf       	out	0x3f, r24	; 63
    25b8:	08 95       	ret

000025ba <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel A)*/
	SET_BIT(TCCR1B_REG, WGM13);
    25ba:	8e b5       	in	r24, 0x2e	; 46
    25bc:	80 61       	ori	r24, 0x10	; 16
    25be:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    25c0:	8e b5       	in	r24, 0x2e	; 46
    25c2:	88 60       	ori	r24, 0x08	; 8
    25c4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    25c6:	8f b5       	in	r24, 0x2f	; 47
    25c8:	82 60       	ori	r24, 0x02	; 2
    25ca:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    25cc:	8f b5       	in	r24, 0x2f	; 47
    25ce:	8e 7f       	andi	r24, 0xFE	; 254
    25d0:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1A1);
    25d2:	8f b5       	in	r24, 0x2f	; 47
    25d4:	80 68       	ori	r24, 0x80	; 128
    25d6:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0);
    25d8:	8f b5       	in	r24, 0x2f	; 47
    25da:	8f 7b       	andi	r24, 0xBF	; 191
    25dc:	8f bd       	out	0x2f, r24	; 47
    25de:	08 95       	ret

000025e0 <PWM_voidInitChannel_1B>:
}

void PWM_voidInitChannel_1B(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel B)*/
	SET_BIT(TCCR1B_REG, WGM13);
    25e0:	8e b5       	in	r24, 0x2e	; 46
    25e2:	80 61       	ori	r24, 0x10	; 16
    25e4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    25e6:	8e b5       	in	r24, 0x2e	; 46
    25e8:	88 60       	ori	r24, 0x08	; 8
    25ea:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    25ec:	8f b5       	in	r24, 0x2f	; 47
    25ee:	82 60       	ori	r24, 0x02	; 2
    25f0:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    25f2:	8f b5       	in	r24, 0x2f	; 47
    25f4:	8e 7f       	andi	r24, 0xFE	; 254
    25f6:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1B1);
    25f8:	8f b5       	in	r24, 0x2f	; 47
    25fa:	80 62       	ori	r24, 0x20	; 32
    25fc:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1B0);
    25fe:	8f b5       	in	r24, 0x2f	; 47
    2600:	8f 7e       	andi	r24, 0xEF	; 239
    2602:	8f bd       	out	0x2f, r24	; 47
    2604:	08 95       	ret

00002606 <PWM_voidGenerateChannel_1A>:
}


void PWM_voidGenerateChannel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	ec 01       	movw	r28, r24
    2614:	6a 01       	movw	r12, r20
    2616:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	48 ec       	ldi	r20, 0xC8	; 200
    261e:	52 e4       	ldi	r21, 0x42	; 66
    2620:	c7 01       	movw	r24, r14
    2622:	b6 01       	movw	r22, r12
    2624:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__cmpsf2>
    2628:	18 16       	cp	r1, r24
    262a:	94 f1       	brlt	.+100    	; 0x2690 <PWM_voidGenerateChannel_1A+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    262c:	9e 01       	movw	r18, r28
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	60 e9       	ldi	r22, 0x90	; 144
    2634:	70 ed       	ldi	r23, 0xD0	; 208
    2636:	83 e0       	ldi	r24, 0x03	; 3
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodsi4>
    263e:	21 50       	subi	r18, 0x01	; 1
    2640:	31 09       	sbc	r19, r1
    2642:	37 bd       	out	0x27, r19	; 39
    2644:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1A_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    2646:	66 b5       	in	r22, 0x26	; 38
    2648:	77 b5       	in	r23, 0x27	; 39
    264a:	6f 5f       	subi	r22, 0xFF	; 255
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    2656:	a7 01       	movw	r20, r14
    2658:	96 01       	movw	r18, r12
    265a:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__mulsf3>
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	48 ec       	ldi	r20, 0xC8	; 200
    2664:	52 e4       	ldi	r21, 0x42	; 66
    2666:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__divsf3>
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e8       	ldi	r20, 0x80	; 128
    2670:	5f e3       	ldi	r21, 0x3F	; 63
    2672:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <__subsf3>
    2676:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__fixunssfsi>
    267a:	7b bd       	out	0x2b, r23	; 43
    267c:	6a bd       	out	0x2a, r22	; 42
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    267e:	8e b5       	in	r24, 0x2e	; 46
    2680:	81 60       	ori	r24, 0x01	; 1
    2682:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    2684:	8e b5       	in	r24, 0x2e	; 46
    2686:	82 60       	ori	r24, 0x02	; 2
    2688:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    268a:	8e b5       	in	r24, 0x2e	; 46
    268c:	8b 7f       	andi	r24, 0xFB	; 251
    268e:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
}
    2690:	df 91       	pop	r29
    2692:	cf 91       	pop	r28
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	df 90       	pop	r13
    269a:	cf 90       	pop	r12
    269c:	08 95       	ret

0000269e <PWM_voidGenerateChannel_1B>:



void PWM_voidGenerateChannel_1B(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    269e:	cf 92       	push	r12
    26a0:	df 92       	push	r13
    26a2:	ef 92       	push	r14
    26a4:	ff 92       	push	r15
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	ec 01       	movw	r28, r24
    26ac:	6a 01       	movw	r12, r20
    26ae:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	48 ec       	ldi	r20, 0xC8	; 200
    26b6:	52 e4       	ldi	r21, 0x42	; 66
    26b8:	c7 01       	movw	r24, r14
    26ba:	b6 01       	movw	r22, r12
    26bc:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__cmpsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	94 f1       	brlt	.+100    	; 0x2728 <PWM_voidGenerateChannel_1B+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    26c4:	9e 01       	movw	r18, r28
    26c6:	40 e0       	ldi	r20, 0x00	; 0
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	60 e9       	ldi	r22, 0x90	; 144
    26cc:	70 ed       	ldi	r23, 0xD0	; 208
    26ce:	83 e0       	ldi	r24, 0x03	; 3
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__udivmodsi4>
    26d6:	21 50       	subi	r18, 0x01	; 1
    26d8:	31 09       	sbc	r19, r1
    26da:	37 bd       	out	0x27, r19	; 39
    26dc:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1B_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    26de:	66 b5       	in	r22, 0x26	; 38
    26e0:	77 b5       	in	r23, 0x27	; 39
    26e2:	6f 5f       	subi	r22, 0xFF	; 255
    26e4:	7f 4f       	sbci	r23, 0xFF	; 255
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <__floatunsisf>
    26ee:	a7 01       	movw	r20, r14
    26f0:	96 01       	movw	r18, r12
    26f2:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <__mulsf3>
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	48 ec       	ldi	r20, 0xC8	; 200
    26fc:	52 e4       	ldi	r21, 0x42	; 66
    26fe:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <__divsf3>
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	5f e3       	ldi	r21, 0x3F	; 63
    270a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <__subsf3>
    270e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__fixunssfsi>
    2712:	79 bd       	out	0x29, r23	; 41
    2714:	68 bd       	out	0x28, r22	; 40
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    2716:	8e b5       	in	r24, 0x2e	; 46
    2718:	81 60       	ori	r24, 0x01	; 1
    271a:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    271c:	8e b5       	in	r24, 0x2e	; 46
    271e:	82 60       	ori	r24, 0x02	; 2
    2720:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    2722:	8e b5       	in	r24, 0x2e	; 46
    2724:	8b 7f       	andi	r24, 0xFB	; 251
    2726:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	df 90       	pop	r13
    2732:	cf 90       	pop	r12
    2734:	08 95       	ret

00002736 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    2736:	83 b7       	in	r24, 0x33	; 51
    2738:	8f 7b       	andi	r24, 0xBF	; 191
    273a:	83 bf       	out	0x33, r24	; 51
    273c:	83 b7       	in	r24, 0x33	; 51
    273e:	88 60       	ori	r24, 0x08	; 8
    2740:	83 bf       	out	0x33, r24	; 51
    2742:	83 b7       	in	r24, 0x33	; 51
    2744:	8f 7e       	andi	r24, 0xEF	; 239
    2746:	83 bf       	out	0x33, r24	; 51
    2748:	83 b7       	in	r24, 0x33	; 51
    274a:	8f 7d       	andi	r24, 0xDF	; 223
    274c:	83 bf       	out	0x33, r24	; 51
    274e:	89 b7       	in	r24, 0x39	; 57
    2750:	82 60       	ori	r24, 0x02	; 2
    2752:	89 bf       	out	0x39, r24	; 57
    2754:	89 ef       	ldi	r24, 0xF9	; 249
    2756:	8c bf       	out	0x3c, r24	; 60
    2758:	08 95       	ret

0000275a <TMR0_voidStart>:
    275a:	83 b7       	in	r24, 0x33	; 51
    275c:	81 60       	ori	r24, 0x01	; 1
    275e:	83 bf       	out	0x33, r24	; 51
    2760:	83 b7       	in	r24, 0x33	; 51
    2762:	82 60       	ori	r24, 0x02	; 2
    2764:	83 bf       	out	0x33, r24	; 51
    2766:	83 b7       	in	r24, 0x33	; 51
    2768:	8b 7f       	andi	r24, 0xFB	; 251
    276a:	83 bf       	out	0x33, r24	; 51
    276c:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <local_u16Counter+0x1>
    2770:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <local_u16Counter>
    2774:	08 95       	ret

00002776 <TMR0_voidStop>:
    2776:	83 b7       	in	r24, 0x33	; 51
    2778:	8e 7f       	andi	r24, 0xFE	; 254
    277a:	83 bf       	out	0x33, r24	; 51
    277c:	83 b7       	in	r24, 0x33	; 51
    277e:	8d 7f       	andi	r24, 0xFD	; 253
    2780:	83 bf       	out	0x33, r24	; 51
    2782:	83 b7       	in	r24, 0x33	; 51
    2784:	8b 7f       	andi	r24, 0xFB	; 251
    2786:	83 bf       	out	0x33, r24	; 51
    2788:	08 95       	ret

0000278a <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	21 f0       	breq	.+8      	; 0x2796 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    278e:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <PRV_pFunCallBackCTC+0x1>
    2792:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <PRV_pFunCallBackCTC>
    2796:	08 95       	ret

00002798 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    2798:	88 b7       	in	r24, 0x38	; 56
    279a:	82 60       	ori	r24, 0x02	; 2
    279c:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    279e:	88 b7       	in	r24, 0x38	; 56
    27a0:	81 60       	ori	r24, 0x01	; 1
    27a2:	88 bf       	out	0x38, r24	; 56
    27a4:	08 95       	ret

000027a6 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    27a6:	1f 92       	push	r1
    27a8:	0f 92       	push	r0
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	0f 92       	push	r0
    27ae:	11 24       	eor	r1, r1
    27b0:	2f 93       	push	r18
    27b2:	3f 93       	push	r19
    27b4:	4f 93       	push	r20
    27b6:	5f 93       	push	r21
    27b8:	6f 93       	push	r22
    27ba:	7f 93       	push	r23
    27bc:	8f 93       	push	r24
    27be:	9f 93       	push	r25
    27c0:	af 93       	push	r26
    27c2:	bf 93       	push	r27
    27c4:	ef 93       	push	r30
    27c6:	ff 93       	push	r31
	
	
	local_u16Counter++;
    27c8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <local_u16Counter>
    27cc:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <local_u16Counter+0x1>
    27d0:	01 96       	adiw	r24, 0x01	; 1
    27d2:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <local_u16Counter+0x1>
    27d6:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    27da:	88 3e       	cpi	r24, 0xE8	; 232
    27dc:	93 40       	sbci	r25, 0x03	; 3
    27de:	69 f4       	brne	.+26     	; 0x27fa <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    27e0:	81 e7       	ldi	r24, 0x71	; 113
    27e2:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    27e4:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <local_u16Counter+0x1>
    27e8:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    27ec:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <PRV_pFunCallBackOVF>
    27f0:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <PRV_pFunCallBackOVF+0x1>
    27f4:	30 97       	sbiw	r30, 0x00	; 0
    27f6:	09 f0       	breq	.+2      	; 0x27fa <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    27f8:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    27fa:	ff 91       	pop	r31
    27fc:	ef 91       	pop	r30
    27fe:	bf 91       	pop	r27
    2800:	af 91       	pop	r26
    2802:	9f 91       	pop	r25
    2804:	8f 91       	pop	r24
    2806:	7f 91       	pop	r23
    2808:	6f 91       	pop	r22
    280a:	5f 91       	pop	r21
    280c:	4f 91       	pop	r20
    280e:	3f 91       	pop	r19
    2810:	2f 91       	pop	r18
    2812:	0f 90       	pop	r0
    2814:	0f be       	out	0x3f, r0	; 63
    2816:	0f 90       	pop	r0
    2818:	1f 90       	pop	r1
    281a:	18 95       	reti

0000281c <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    281c:	1f 92       	push	r1
    281e:	0f 92       	push	r0
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	0f 92       	push	r0
    2824:	11 24       	eor	r1, r1
    2826:	2f 93       	push	r18
    2828:	3f 93       	push	r19
    282a:	4f 93       	push	r20
    282c:	5f 93       	push	r21
    282e:	6f 93       	push	r22
    2830:	7f 93       	push	r23
    2832:	8f 93       	push	r24
    2834:	9f 93       	push	r25
    2836:	af 93       	push	r26
    2838:	bf 93       	push	r27
    283a:	ef 93       	push	r30
    283c:	ff 93       	push	r31
	

	
	local_u16Counter++;
    283e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <local_u16Counter>
    2842:	90 91 cc 04 	lds	r25, 0x04CC	; 0x8004cc <local_u16Counter+0x1>
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	90 93 cc 04 	sts	0x04CC, r25	; 0x8004cc <local_u16Counter+0x1>
    284c:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    2850:	88 38       	cpi	r24, 0x88	; 136
    2852:	93 41       	sbci	r25, 0x13	; 19
    2854:	69 f4       	brne	.+26     	; 0x2870 <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    2856:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <local_u16Counter+0x1>
    285a:	10 92 cb 04 	sts	0x04CB, r1	; 0x8004cb <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    285e:	e0 91 cd 04 	lds	r30, 0x04CD	; 0x8004cd <PRV_pFunCallBackCTC>
    2862:	f0 91 ce 04 	lds	r31, 0x04CE	; 0x8004ce <PRV_pFunCallBackCTC+0x1>
    2866:	30 97       	sbiw	r30, 0x00	; 0
    2868:	19 f0       	breq	.+6      	; 0x2870 <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    286a:	09 95       	icall
			TMR0clear_flag();
    286c:	0e 94 cc 13 	call	0x2798	; 0x2798 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	0f 90       	pop	r0
    288e:	1f 90       	pop	r1
    2890:	18 95       	reti

00002892 <TMR2_voidInit>:

void TMR2_SetCallBackOVF(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    {
        PRV_pFunCallBackOVF=copy_pFunAction;
    2892:	85 b5       	in	r24, 0x25	; 37
    2894:	8f 7b       	andi	r24, 0xBF	; 191
    2896:	85 bd       	out	0x25, r24	; 37
    2898:	85 b5       	in	r24, 0x25	; 37
    289a:	88 60       	ori	r24, 0x08	; 8
    289c:	85 bd       	out	0x25, r24	; 37
    289e:	85 b5       	in	r24, 0x25	; 37
    28a0:	8f 7e       	andi	r24, 0xEF	; 239
    28a2:	85 bd       	out	0x25, r24	; 37
    28a4:	85 b5       	in	r24, 0x25	; 37
    28a6:	8f 7d       	andi	r24, 0xDF	; 223
    28a8:	85 bd       	out	0x25, r24	; 37
    28aa:	89 b7       	in	r24, 0x39	; 57
    28ac:	80 68       	ori	r24, 0x80	; 128
    28ae:	89 bf       	out	0x39, r24	; 57
    28b0:	89 ef       	ldi	r24, 0xF9	; 249
    28b2:	83 bd       	out	0x23, r24	; 35
    28b4:	08 95       	ret

000028b6 <TMR2_voidStart>:
    28b6:	85 b5       	in	r24, 0x25	; 37
    28b8:	81 60       	ori	r24, 0x01	; 1
    28ba:	85 bd       	out	0x25, r24	; 37
    28bc:	85 b5       	in	r24, 0x25	; 37
    28be:	82 60       	ori	r24, 0x02	; 2
    28c0:	85 bd       	out	0x25, r24	; 37
    28c2:	85 b5       	in	r24, 0x25	; 37
    28c4:	8b 7f       	andi	r24, 0xFB	; 251
    28c6:	85 bd       	out	0x25, r24	; 37
    28c8:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <local_u16Counter+0x1>
    28cc:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <local_u16Counter>
    28d0:	08 95       	ret

000028d2 <TMR2_SetCallBackCTC>:
    }
}

void TMR2_SetCallBackCTC(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    28d2:	00 97       	sbiw	r24, 0x00	; 0
    28d4:	21 f0       	breq	.+8      	; 0x28de <TMR2_SetCallBackCTC+0xc>
    {
        PRV_pFunCallBackCTC=copy_pFunAction;
    28d6:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <PRV_pFunCallBackCTC+0x1>
    28da:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <PRV_pFunCallBackCTC>
    28de:	08 95       	ret

000028e0 <TMR2_clear_flag>:
    }
}

void TMR2_clear_flag(void)
{
    TIFR2_REG |= (1 << OCF2); 
    28e0:	88 b7       	in	r24, 0x38	; 56
    28e2:	80 68       	ori	r24, 0x80	; 128
    28e4:	88 bf       	out	0x38, r24	; 56
    SET_BIT(TIFR2_REG,TOV2);
    28e6:	88 b7       	in	r24, 0x38	; 56
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	88 bf       	out	0x38, r24	; 56
    28ec:	08 95       	ret

000028ee <__vector_5>:
}

void __vector_5(void)__attribute__((signal));
void __vector_5(void)
{
    28ee:	1f 92       	push	r1
    28f0:	0f 92       	push	r0
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	0f 92       	push	r0
    28f6:	11 24       	eor	r1, r1
    28f8:	2f 93       	push	r18
    28fa:	3f 93       	push	r19
    28fc:	4f 93       	push	r20
    28fe:	5f 93       	push	r21
    2900:	6f 93       	push	r22
    2902:	7f 93       	push	r23
    2904:	8f 93       	push	r24
    2906:	9f 93       	push	r25
    2908:	af 93       	push	r26
    290a:	bf 93       	push	r27
    290c:	ef 93       	push	r30
    290e:	ff 93       	push	r31
    local_u16Counter++;
    2910:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <local_u16Counter>
    2914:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <local_u16Counter+0x1>
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <local_u16Counter+0x1>
    291e:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <local_u16Counter>
    
    if(local_u16Counter==TMR2_OVERFLOW_COUNTER)
    2922:	88 3e       	cpi	r24, 0xE8	; 232
    2924:	93 40       	sbci	r25, 0x03	; 3
    2926:	69 f4       	brne	.+26     	; 0x2942 <__vector_5+0x54>
    {
        /*put preload value in timer register*/
        TCNT2_REG=TMR2_PRELOAD_VALUE;
    2928:	81 e7       	ldi	r24, 0x71	; 113
    292a:	84 bd       	out	0x24, r24	; 36
        
        /*CLR counter*/
        local_u16Counter=0;
    292c:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <local_u16Counter+0x1>
    2930:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <local_u16Counter>
        
        if(PRV_pFunCallBackOVF != NULL)
    2934:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <PRV_pFunCallBackOVF>
    2938:	f0 91 d6 04 	lds	r31, 0x04D6	; 0x8004d6 <PRV_pFunCallBackOVF+0x1>
    293c:	30 97       	sbiw	r30, 0x00	; 0
    293e:	09 f0       	breq	.+2      	; 0x2942 <__vector_5+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackOVF();
    2940:	09 95       	icall
        else
        {
            //error state
        }
    }
}
    2942:	ff 91       	pop	r31
    2944:	ef 91       	pop	r30
    2946:	bf 91       	pop	r27
    2948:	af 91       	pop	r26
    294a:	9f 91       	pop	r25
    294c:	8f 91       	pop	r24
    294e:	7f 91       	pop	r23
    2950:	6f 91       	pop	r22
    2952:	5f 91       	pop	r21
    2954:	4f 91       	pop	r20
    2956:	3f 91       	pop	r19
    2958:	2f 91       	pop	r18
    295a:	0f 90       	pop	r0
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	0f 90       	pop	r0
    2960:	1f 90       	pop	r1
    2962:	18 95       	reti

00002964 <__vector_4>:

void __vector_4(void)__attribute__((signal));
void __vector_4(void)
{
    2964:	1f 92       	push	r1
    2966:	0f 92       	push	r0
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	0f 92       	push	r0
    296c:	11 24       	eor	r1, r1
    296e:	2f 93       	push	r18
    2970:	3f 93       	push	r19
    2972:	4f 93       	push	r20
    2974:	5f 93       	push	r21
    2976:	6f 93       	push	r22
    2978:	7f 93       	push	r23
    297a:	8f 93       	push	r24
    297c:	9f 93       	push	r25
    297e:	af 93       	push	r26
    2980:	bf 93       	push	r27
    2982:	ef 93       	push	r30
    2984:	ff 93       	push	r31
    local_u16Counter++;
    2986:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <local_u16Counter>
    298a:	90 91 d2 04 	lds	r25, 0x04D2	; 0x8004d2 <local_u16Counter+0x1>
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	90 93 d2 04 	sts	0x04D2, r25	; 0x8004d2 <local_u16Counter+0x1>
    2994:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <local_u16Counter>
    
    if(local_u16Counter==TMR2_CTC_COUNTER)
    2998:	88 38       	cpi	r24, 0x88	; 136
    299a:	93 41       	sbci	r25, 0x13	; 19
    299c:	69 f4       	brne	.+26     	; 0x29b8 <__vector_4+0x54>
    {
        /*CLR counter*/
        local_u16Counter=0;
    299e:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <local_u16Counter+0x1>
    29a2:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <local_u16Counter>
        
        if(PRV_pFunCallBackCTC != NULL)
    29a6:	e0 91 d3 04 	lds	r30, 0x04D3	; 0x8004d3 <PRV_pFunCallBackCTC>
    29aa:	f0 91 d4 04 	lds	r31, 0x04D4	; 0x8004d4 <PRV_pFunCallBackCTC+0x1>
    29ae:	30 97       	sbiw	r30, 0x00	; 0
    29b0:	19 f0       	breq	.+6      	; 0x29b8 <__vector_4+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackCTC();
    29b2:	09 95       	icall
            TMR2_clear_flag();
    29b4:	0e 94 70 14 	call	0x28e0	; 0x28e0 <TMR2_clear_flag>
        else
        {
            //error state
        }
    }
}
    29b8:	ff 91       	pop	r31
    29ba:	ef 91       	pop	r30
    29bc:	bf 91       	pop	r27
    29be:	af 91       	pop	r26
    29c0:	9f 91       	pop	r25
    29c2:	8f 91       	pop	r24
    29c4:	7f 91       	pop	r23
    29c6:	6f 91       	pop	r22
    29c8:	5f 91       	pop	r21
    29ca:	4f 91       	pop	r20
    29cc:	3f 91       	pop	r19
    29ce:	2f 91       	pop	r18
    29d0:	0f 90       	pop	r0
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	0f 90       	pop	r0
    29d6:	1f 90       	pop	r1
    29d8:	18 95       	reti

000029da <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
    29da:	8c e0       	ldi	r24, 0x0C	; 12
    29dc:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
    29de:	81 b1       	in	r24, 0x01	; 1
    29e0:	8d 7f       	andi	r24, 0xFD	; 253
    29e2:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
    29e4:	81 b1       	in	r24, 0x01	; 1
    29e6:	8e 7f       	andi	r24, 0xFE	; 254
    29e8:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
    29ea:	86 b7       	in	r24, 0x36	; 54
    29ec:	84 60       	ori	r24, 0x04	; 4
    29ee:	86 bf       	out	0x36, r24	; 54
    29f0:	08 95       	ret

000029f2 <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    29f2:	86 b7       	in	r24, 0x36	; 54
    29f4:	80 62       	ori	r24, 0x20	; 32
    29f6:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    29f8:	86 b7       	in	r24, 0x36	; 54
    29fa:	80 68       	ori	r24, 0x80	; 128
    29fc:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    29fe:	06 b6       	in	r0, 0x36	; 54
    2a00:	07 fe       	sbrs	r0, 7
    2a02:	fd cf       	rjmp	.-6      	; 0x29fe <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
    2a04:	81 b1       	in	r24, 0x01	; 1
    2a06:	88 7f       	andi	r24, 0xF8	; 248
    2a08:	88 30       	cpi	r24, 0x08	; 8
    2a0a:	e1 f7       	brne	.-8      	; 0x2a04 <TWI_voidSendStartCondition+0x12>
}
    2a0c:	08 95       	ret

00002a0e <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    2a0e:	86 b7       	in	r24, 0x36	; 54
    2a10:	80 62       	ori	r24, 0x20	; 32
    2a12:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    2a14:	86 b7       	in	r24, 0x36	; 54
    2a16:	80 68       	ori	r24, 0x80	; 128
    2a18:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    2a1a:	06 b6       	in	r0, 0x36	; 54
    2a1c:	07 fe       	sbrs	r0, 7
    2a1e:	fd cf       	rjmp	.-6      	; 0x2a1a <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
    2a20:	81 b1       	in	r24, 0x01	; 1
    2a22:	88 7f       	andi	r24, 0xF8	; 248
    2a24:	80 31       	cpi	r24, 0x10	; 16
    2a26:	e1 f7       	brne	.-8      	; 0x2a20 <TWI_voidSendRepeatedStartCondition+0x12>
}
    2a28:	08 95       	ret

00002a2a <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
    2a2a:	86 b7       	in	r24, 0x36	; 54
    2a2c:	80 61       	ori	r24, 0x10	; 16
    2a2e:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    2a30:	86 b7       	in	r24, 0x36	; 54
    2a32:	80 68       	ori	r24, 0x80	; 128
    2a34:	86 bf       	out	0x36, r24	; 54
    2a36:	08 95       	ret

00002a38 <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    2a38:	88 23       	and	r24, r24
    2a3a:	94 f0       	brlt	.+36     	; 0x2a60 <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    2a3c:	88 0f       	add	r24, r24
    2a3e:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
    2a40:	83 b1       	in	r24, 0x03	; 3
    2a42:	8e 7f       	andi	r24, 0xFE	; 254
    2a44:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    2a46:	86 b7       	in	r24, 0x36	; 54
    2a48:	8f 7d       	andi	r24, 0xDF	; 223
    2a4a:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    2a4c:	86 b7       	in	r24, 0x36	; 54
    2a4e:	80 68       	ori	r24, 0x80	; 128
    2a50:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    2a52:	06 b6       	in	r0, 0x36	; 54
    2a54:	07 fe       	sbrs	r0, 7
    2a56:	fd cf       	rjmp	.-6      	; 0x2a52 <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    2a58:	81 b1       	in	r24, 0x01	; 1
    2a5a:	88 7f       	andi	r24, 0xF8	; 248
    2a5c:	88 31       	cpi	r24, 0x18	; 24
    2a5e:	e1 f7       	brne	.-8      	; 0x2a58 <TWI_voidSendSlaveAddWithWrite+0x20>
    2a60:	08 95       	ret

00002a62 <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    2a62:	88 23       	and	r24, r24
    2a64:	94 f0       	brlt	.+36     	; 0x2a8a <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    2a66:	88 0f       	add	r24, r24
    2a68:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
    2a6a:	83 b1       	in	r24, 0x03	; 3
    2a6c:	81 60       	ori	r24, 0x01	; 1
    2a6e:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    2a70:	86 b7       	in	r24, 0x36	; 54
    2a72:	8f 7d       	andi	r24, 0xDF	; 223
    2a74:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    2a76:	86 b7       	in	r24, 0x36	; 54
    2a78:	80 68       	ori	r24, 0x80	; 128
    2a7a:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    2a7c:	06 b6       	in	r0, 0x36	; 54
    2a7e:	07 fe       	sbrs	r0, 7
    2a80:	fd cf       	rjmp	.-6      	; 0x2a7c <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    2a82:	81 b1       	in	r24, 0x01	; 1
    2a84:	88 7f       	andi	r24, 0xF8	; 248
    2a86:	80 34       	cpi	r24, 0x40	; 64
    2a88:	e1 f7       	brne	.-8      	; 0x2a82 <TWI_voidSendSlaveAddWithRead+0x20>
    2a8a:	08 95       	ret

00002a8c <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    2a8c:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    2a8e:	86 b7       	in	r24, 0x36	; 54
    2a90:	80 68       	ori	r24, 0x80	; 128
    2a92:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    2a94:	06 b6       	in	r0, 0x36	; 54
    2a96:	07 fe       	sbrs	r0, 7
    2a98:	fd cf       	rjmp	.-6      	; 0x2a94 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    2a9a:	81 b1       	in	r24, 0x01	; 1
    2a9c:	88 7f       	andi	r24, 0xF8	; 248
    2a9e:	88 32       	cpi	r24, 0x28	; 40
    2aa0:	e1 f7       	brne	.-8      	; 0x2a9a <TWI_voidTransmitMasterDataByte+0xe>
}
    2aa2:	08 95       	ret

00002aa4 <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
    2aa4:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    2aa6:	89 2b       	or	r24, r25
    2aa8:	91 f0       	breq	.+36     	; 0x2ace <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
    2aaa:	96 b7       	in	r25, 0x36	; 54
    2aac:	90 64       	ori	r25, 0x40	; 64
    2aae:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    2ab0:	96 b7       	in	r25, 0x36	; 54
    2ab2:	90 68       	ori	r25, 0x80	; 128
    2ab4:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    2ab6:	06 b6       	in	r0, 0x36	; 54
    2ab8:	07 fe       	sbrs	r0, 7
    2aba:	fd cf       	rjmp	.-6      	; 0x2ab6 <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
    2abc:	91 b1       	in	r25, 0x01	; 1
    2abe:	98 7f       	andi	r25, 0xF8	; 248
    2ac0:	90 35       	cpi	r25, 0x50	; 80
    2ac2:	e1 f7       	brne	.-8      	; 0x2abc <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
    2ac4:	83 b1       	in	r24, 0x03	; 3
    2ac6:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
    2ac8:	86 b7       	in	r24, 0x36	; 54
    2aca:	8f 7b       	andi	r24, 0xBF	; 191
    2acc:	86 bf       	out	0x36, r24	; 54
    2ace:	08 95       	ret

00002ad0 <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
    2ad0:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    2ad2:	89 2b       	or	r24, r25
    2ad4:	61 f0       	breq	.+24     	; 0x2aee <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    2ad6:	96 b7       	in	r25, 0x36	; 54
    2ad8:	90 68       	ori	r25, 0x80	; 128
    2ada:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    2adc:	06 b6       	in	r0, 0x36	; 54
    2ade:	07 fe       	sbrs	r0, 7
    2ae0:	fd cf       	rjmp	.-6      	; 0x2adc <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
    2ae2:	91 b1       	in	r25, 0x01	; 1
    2ae4:	98 7f       	andi	r25, 0xF8	; 248
    2ae6:	98 35       	cpi	r25, 0x58	; 88
    2ae8:	e1 f7       	brne	.-8      	; 0x2ae2 <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
    2aea:	83 b1       	in	r24, 0x03	; 3
    2aec:	80 83       	st	Z, r24
    2aee:	08 95       	ret

00002af0 <UART_voidInit>:
			}
			_delay_ms(1);
			Local_u16TimeoutCounter++;
		}
		/*Read data to data register*/
		*copy_pu8RxData=UDR_REG;
    2af0:	8b b1       	in	r24, 0x0b	; 11
    2af2:	8d 7f       	andi	r24, 0xFD	; 253
    2af4:	8b b9       	out	0x0b, r24	; 11
    2af6:	87 e6       	ldi	r24, 0x67	; 103
    2af8:	89 b9       	out	0x09, r24	; 9
    2afa:	8a b1       	in	r24, 0x0a	; 10
    2afc:	8b 7f       	andi	r24, 0xFB	; 251
    2afe:	8a b9       	out	0x0a, r24	; 10
    2b00:	86 e8       	ldi	r24, 0x86	; 134
    2b02:	80 bd       	out	0x20, r24	; 32
    2b04:	8a b1       	in	r24, 0x0a	; 10
    2b06:	80 61       	ori	r24, 0x10	; 16
    2b08:	8a b9       	out	0x0a, r24	; 10
    2b0a:	8a b1       	in	r24, 0x0a	; 10
    2b0c:	88 60       	ori	r24, 0x08	; 8
    2b0e:	8a b9       	out	0x0a, r24	; 10
    2b10:	08 95       	ret

00002b12 <UART_voidTxChar>:
    2b12:	8c b9       	out	0x0c, r24	; 12
    2b14:	5d 9b       	sbis	0x0b, 5	; 11
    2b16:	fe cf       	rjmp	.-4      	; 0x2b14 <UART_voidTxChar+0x2>
    2b18:	08 95       	ret

00002b1a <UART_voidRxChar>:
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	29 f0       	breq	.+10     	; 0x2b28 <UART_voidRxChar+0xe>
    2b1e:	5f 9b       	sbis	0x0b, 7	; 11
    2b20:	fe cf       	rjmp	.-4      	; 0x2b1e <UART_voidRxChar+0x4>
    2b22:	2c b1       	in	r18, 0x0c	; 12
    2b24:	fc 01       	movw	r30, r24
    2b26:	20 83       	st	Z, r18
    2b28:	08 95       	ret

00002b2a <UART_voidTxString>:
	{
		
	}
}
void UART_voidTxString	(u8* copy_pu8TxString)
{
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	cf 93       	push	r28
	
	if(copy_pu8TxString!=NULL)
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	29 f4       	brne	.+10     	; 0x2b3e <UART_voidTxString+0x14>
    2b34:	0c c0       	rjmp	.+24     	; 0x2b4e <UART_voidTxString+0x24>
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
		{
			/*send data[i]*/
			UART_voidTxChar(copy_pu8TxString[Local_u8Counter]);
    2b36:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_voidTxChar>
			
			/*increase counter*/
			Local_u8Counter++;
    2b3a:	cf 5f       	subi	r28, 0xFF	; 255
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <UART_voidTxString+0x18>
    2b3e:	8c 01       	movw	r16, r24
    2b40:	c0 e0       	ldi	r28, 0x00	; 0
	{
		/*Init counter*/
		u8 Local_u8Counter=0;
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
    2b42:	f8 01       	movw	r30, r16
    2b44:	ec 0f       	add	r30, r28
    2b46:	f1 1d       	adc	r31, r1
    2b48:	80 81       	ld	r24, Z
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	f4 cf       	rjmp	.-24     	; 0x2b36 <UART_voidTxString+0xc>
	{
		//error state
	}
	
	
}
    2b4e:	cf 91       	pop	r28
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <__subsf3>:
    2b56:	50 58       	subi	r21, 0x80	; 128

00002b58 <__addsf3>:
    2b58:	bb 27       	eor	r27, r27
    2b5a:	aa 27       	eor	r26, r26
    2b5c:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <__addsf3x>
    2b60:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__fp_round>
    2b64:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__fp_pscA>
    2b68:	38 f0       	brcs	.+14     	; 0x2b78 <__addsf3+0x20>
    2b6a:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <__fp_pscB>
    2b6e:	20 f0       	brcs	.+8      	; 0x2b78 <__addsf3+0x20>
    2b70:	39 f4       	brne	.+14     	; 0x2b80 <__addsf3+0x28>
    2b72:	9f 3f       	cpi	r25, 0xFF	; 255
    2b74:	19 f4       	brne	.+6      	; 0x2b7c <__addsf3+0x24>
    2b76:	26 f4       	brtc	.+8      	; 0x2b80 <__addsf3+0x28>
    2b78:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__fp_nan>
    2b7c:	0e f4       	brtc	.+2      	; 0x2b80 <__addsf3+0x28>
    2b7e:	e0 95       	com	r30
    2b80:	e7 fb       	bst	r30, 7
    2b82:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_inf>

00002b86 <__addsf3x>:
    2b86:	e9 2f       	mov	r30, r25
    2b88:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__fp_split3>
    2b8c:	58 f3       	brcs	.-42     	; 0x2b64 <__addsf3+0xc>
    2b8e:	ba 17       	cp	r27, r26
    2b90:	62 07       	cpc	r22, r18
    2b92:	73 07       	cpc	r23, r19
    2b94:	84 07       	cpc	r24, r20
    2b96:	95 07       	cpc	r25, r21
    2b98:	20 f0       	brcs	.+8      	; 0x2ba2 <__addsf3x+0x1c>
    2b9a:	79 f4       	brne	.+30     	; 0x2bba <__addsf3x+0x34>
    2b9c:	a6 f5       	brtc	.+104    	; 0x2c06 <__addsf3x+0x80>
    2b9e:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__fp_zero>
    2ba2:	0e f4       	brtc	.+2      	; 0x2ba6 <__addsf3x+0x20>
    2ba4:	e0 95       	com	r30
    2ba6:	0b 2e       	mov	r0, r27
    2ba8:	ba 2f       	mov	r27, r26
    2baa:	a0 2d       	mov	r26, r0
    2bac:	0b 01       	movw	r0, r22
    2bae:	b9 01       	movw	r22, r18
    2bb0:	90 01       	movw	r18, r0
    2bb2:	0c 01       	movw	r0, r24
    2bb4:	ca 01       	movw	r24, r20
    2bb6:	a0 01       	movw	r20, r0
    2bb8:	11 24       	eor	r1, r1
    2bba:	ff 27       	eor	r31, r31
    2bbc:	59 1b       	sub	r21, r25
    2bbe:	99 f0       	breq	.+38     	; 0x2be6 <__addsf3x+0x60>
    2bc0:	59 3f       	cpi	r21, 0xF9	; 249
    2bc2:	50 f4       	brcc	.+20     	; 0x2bd8 <__addsf3x+0x52>
    2bc4:	50 3e       	cpi	r21, 0xE0	; 224
    2bc6:	68 f1       	brcs	.+90     	; 0x2c22 <__addsf3x+0x9c>
    2bc8:	1a 16       	cp	r1, r26
    2bca:	f0 40       	sbci	r31, 0x00	; 0
    2bcc:	a2 2f       	mov	r26, r18
    2bce:	23 2f       	mov	r18, r19
    2bd0:	34 2f       	mov	r19, r20
    2bd2:	44 27       	eor	r20, r20
    2bd4:	58 5f       	subi	r21, 0xF8	; 248
    2bd6:	f3 cf       	rjmp	.-26     	; 0x2bbe <__addsf3x+0x38>
    2bd8:	46 95       	lsr	r20
    2bda:	37 95       	ror	r19
    2bdc:	27 95       	ror	r18
    2bde:	a7 95       	ror	r26
    2be0:	f0 40       	sbci	r31, 0x00	; 0
    2be2:	53 95       	inc	r21
    2be4:	c9 f7       	brne	.-14     	; 0x2bd8 <__addsf3x+0x52>
    2be6:	7e f4       	brtc	.+30     	; 0x2c06 <__addsf3x+0x80>
    2be8:	1f 16       	cp	r1, r31
    2bea:	ba 0b       	sbc	r27, r26
    2bec:	62 0b       	sbc	r22, r18
    2bee:	73 0b       	sbc	r23, r19
    2bf0:	84 0b       	sbc	r24, r20
    2bf2:	ba f0       	brmi	.+46     	; 0x2c22 <__addsf3x+0x9c>
    2bf4:	91 50       	subi	r25, 0x01	; 1
    2bf6:	a1 f0       	breq	.+40     	; 0x2c20 <__addsf3x+0x9a>
    2bf8:	ff 0f       	add	r31, r31
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	66 1f       	adc	r22, r22
    2bfe:	77 1f       	adc	r23, r23
    2c00:	88 1f       	adc	r24, r24
    2c02:	c2 f7       	brpl	.-16     	; 0x2bf4 <__addsf3x+0x6e>
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <__addsf3x+0x9c>
    2c06:	ba 0f       	add	r27, r26
    2c08:	62 1f       	adc	r22, r18
    2c0a:	73 1f       	adc	r23, r19
    2c0c:	84 1f       	adc	r24, r20
    2c0e:	48 f4       	brcc	.+18     	; 0x2c22 <__addsf3x+0x9c>
    2c10:	87 95       	ror	r24
    2c12:	77 95       	ror	r23
    2c14:	67 95       	ror	r22
    2c16:	b7 95       	ror	r27
    2c18:	f7 95       	ror	r31
    2c1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2c1c:	08 f0       	brcs	.+2      	; 0x2c20 <__addsf3x+0x9a>
    2c1e:	b0 cf       	rjmp	.-160    	; 0x2b80 <__addsf3+0x28>
    2c20:	93 95       	inc	r25
    2c22:	88 0f       	add	r24, r24
    2c24:	08 f0       	brcs	.+2      	; 0x2c28 <__addsf3x+0xa2>
    2c26:	99 27       	eor	r25, r25
    2c28:	ee 0f       	add	r30, r30
    2c2a:	97 95       	ror	r25
    2c2c:	87 95       	ror	r24
    2c2e:	08 95       	ret

00002c30 <__cmpsf2>:
    2c30:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <__fp_cmp>
    2c34:	08 f4       	brcc	.+2      	; 0x2c38 <__cmpsf2+0x8>
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	08 95       	ret

00002c3a <__divsf3>:
    2c3a:	0e 94 31 16 	call	0x2c62	; 0x2c62 <__divsf3x>
    2c3e:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__fp_round>
    2c42:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <__fp_pscB>
    2c46:	58 f0       	brcs	.+22     	; 0x2c5e <__divsf3+0x24>
    2c48:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__fp_pscA>
    2c4c:	40 f0       	brcs	.+16     	; 0x2c5e <__divsf3+0x24>
    2c4e:	29 f4       	brne	.+10     	; 0x2c5a <__divsf3+0x20>
    2c50:	5f 3f       	cpi	r21, 0xFF	; 255
    2c52:	29 f0       	breq	.+10     	; 0x2c5e <__divsf3+0x24>
    2c54:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_inf>
    2c58:	51 11       	cpse	r21, r1
    2c5a:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__fp_szero>
    2c5e:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__fp_nan>

00002c62 <__divsf3x>:
    2c62:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__fp_split3>
    2c66:	68 f3       	brcs	.-38     	; 0x2c42 <__divsf3+0x8>

00002c68 <__divsf3_pse>:
    2c68:	99 23       	and	r25, r25
    2c6a:	b1 f3       	breq	.-20     	; 0x2c58 <__divsf3+0x1e>
    2c6c:	55 23       	and	r21, r21
    2c6e:	91 f3       	breq	.-28     	; 0x2c54 <__divsf3+0x1a>
    2c70:	95 1b       	sub	r25, r21
    2c72:	55 0b       	sbc	r21, r21
    2c74:	bb 27       	eor	r27, r27
    2c76:	aa 27       	eor	r26, r26
    2c78:	62 17       	cp	r22, r18
    2c7a:	73 07       	cpc	r23, r19
    2c7c:	84 07       	cpc	r24, r20
    2c7e:	38 f0       	brcs	.+14     	; 0x2c8e <__divsf3_pse+0x26>
    2c80:	9f 5f       	subi	r25, 0xFF	; 255
    2c82:	5f 4f       	sbci	r21, 0xFF	; 255
    2c84:	22 0f       	add	r18, r18
    2c86:	33 1f       	adc	r19, r19
    2c88:	44 1f       	adc	r20, r20
    2c8a:	aa 1f       	adc	r26, r26
    2c8c:	a9 f3       	breq	.-22     	; 0x2c78 <__divsf3_pse+0x10>
    2c8e:	35 d0       	rcall	.+106    	; 0x2cfa <__divsf3_pse+0x92>
    2c90:	0e 2e       	mov	r0, r30
    2c92:	3a f0       	brmi	.+14     	; 0x2ca2 <__divsf3_pse+0x3a>
    2c94:	e0 e8       	ldi	r30, 0x80	; 128
    2c96:	32 d0       	rcall	.+100    	; 0x2cfc <__divsf3_pse+0x94>
    2c98:	91 50       	subi	r25, 0x01	; 1
    2c9a:	50 40       	sbci	r21, 0x00	; 0
    2c9c:	e6 95       	lsr	r30
    2c9e:	00 1c       	adc	r0, r0
    2ca0:	ca f7       	brpl	.-14     	; 0x2c94 <__divsf3_pse+0x2c>
    2ca2:	2b d0       	rcall	.+86     	; 0x2cfa <__divsf3_pse+0x92>
    2ca4:	fe 2f       	mov	r31, r30
    2ca6:	29 d0       	rcall	.+82     	; 0x2cfa <__divsf3_pse+0x92>
    2ca8:	66 0f       	add	r22, r22
    2caa:	77 1f       	adc	r23, r23
    2cac:	88 1f       	adc	r24, r24
    2cae:	bb 1f       	adc	r27, r27
    2cb0:	26 17       	cp	r18, r22
    2cb2:	37 07       	cpc	r19, r23
    2cb4:	48 07       	cpc	r20, r24
    2cb6:	ab 07       	cpc	r26, r27
    2cb8:	b0 e8       	ldi	r27, 0x80	; 128
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <__divsf3_pse+0x56>
    2cbc:	bb 0b       	sbc	r27, r27
    2cbe:	80 2d       	mov	r24, r0
    2cc0:	bf 01       	movw	r22, r30
    2cc2:	ff 27       	eor	r31, r31
    2cc4:	93 58       	subi	r25, 0x83	; 131
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc8:	3a f0       	brmi	.+14     	; 0x2cd8 <__divsf3_pse+0x70>
    2cca:	9e 3f       	cpi	r25, 0xFE	; 254
    2ccc:	51 05       	cpc	r21, r1
    2cce:	78 f0       	brcs	.+30     	; 0x2cee <__divsf3_pse+0x86>
    2cd0:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_inf>
    2cd4:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__fp_szero>
    2cd8:	5f 3f       	cpi	r21, 0xFF	; 255
    2cda:	e4 f3       	brlt	.-8      	; 0x2cd4 <__divsf3_pse+0x6c>
    2cdc:	98 3e       	cpi	r25, 0xE8	; 232
    2cde:	d4 f3       	brlt	.-12     	; 0x2cd4 <__divsf3_pse+0x6c>
    2ce0:	86 95       	lsr	r24
    2ce2:	77 95       	ror	r23
    2ce4:	67 95       	ror	r22
    2ce6:	b7 95       	ror	r27
    2ce8:	f7 95       	ror	r31
    2cea:	9f 5f       	subi	r25, 0xFF	; 255
    2cec:	c9 f7       	brne	.-14     	; 0x2ce0 <__divsf3_pse+0x78>
    2cee:	88 0f       	add	r24, r24
    2cf0:	91 1d       	adc	r25, r1
    2cf2:	96 95       	lsr	r25
    2cf4:	87 95       	ror	r24
    2cf6:	97 f9       	bld	r25, 7
    2cf8:	08 95       	ret
    2cfa:	e1 e0       	ldi	r30, 0x01	; 1
    2cfc:	66 0f       	add	r22, r22
    2cfe:	77 1f       	adc	r23, r23
    2d00:	88 1f       	adc	r24, r24
    2d02:	bb 1f       	adc	r27, r27
    2d04:	62 17       	cp	r22, r18
    2d06:	73 07       	cpc	r23, r19
    2d08:	84 07       	cpc	r24, r20
    2d0a:	ba 07       	cpc	r27, r26
    2d0c:	20 f0       	brcs	.+8      	; 0x2d16 <__divsf3_pse+0xae>
    2d0e:	62 1b       	sub	r22, r18
    2d10:	73 0b       	sbc	r23, r19
    2d12:	84 0b       	sbc	r24, r20
    2d14:	ba 0b       	sbc	r27, r26
    2d16:	ee 1f       	adc	r30, r30
    2d18:	88 f7       	brcc	.-30     	; 0x2cfc <__divsf3_pse+0x94>
    2d1a:	e0 95       	com	r30
    2d1c:	08 95       	ret

00002d1e <__fixunssfsi>:
    2d1e:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <__fp_splitA>
    2d22:	88 f0       	brcs	.+34     	; 0x2d46 <__fixunssfsi+0x28>
    2d24:	9f 57       	subi	r25, 0x7F	; 127
    2d26:	98 f0       	brcs	.+38     	; 0x2d4e <__fixunssfsi+0x30>
    2d28:	b9 2f       	mov	r27, r25
    2d2a:	99 27       	eor	r25, r25
    2d2c:	b7 51       	subi	r27, 0x17	; 23
    2d2e:	b0 f0       	brcs	.+44     	; 0x2d5c <__fixunssfsi+0x3e>
    2d30:	e1 f0       	breq	.+56     	; 0x2d6a <__fixunssfsi+0x4c>
    2d32:	66 0f       	add	r22, r22
    2d34:	77 1f       	adc	r23, r23
    2d36:	88 1f       	adc	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	1a f0       	brmi	.+6      	; 0x2d42 <__fixunssfsi+0x24>
    2d3c:	ba 95       	dec	r27
    2d3e:	c9 f7       	brne	.-14     	; 0x2d32 <__fixunssfsi+0x14>
    2d40:	14 c0       	rjmp	.+40     	; 0x2d6a <__fixunssfsi+0x4c>
    2d42:	b1 30       	cpi	r27, 0x01	; 1
    2d44:	91 f0       	breq	.+36     	; 0x2d6a <__fixunssfsi+0x4c>
    2d46:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__fp_zero>
    2d4a:	b1 e0       	ldi	r27, 0x01	; 1
    2d4c:	08 95       	ret
    2d4e:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__fp_zero>
    2d52:	67 2f       	mov	r22, r23
    2d54:	78 2f       	mov	r23, r24
    2d56:	88 27       	eor	r24, r24
    2d58:	b8 5f       	subi	r27, 0xF8	; 248
    2d5a:	39 f0       	breq	.+14     	; 0x2d6a <__fixunssfsi+0x4c>
    2d5c:	b9 3f       	cpi	r27, 0xF9	; 249
    2d5e:	cc f3       	brlt	.-14     	; 0x2d52 <__fixunssfsi+0x34>
    2d60:	86 95       	lsr	r24
    2d62:	77 95       	ror	r23
    2d64:	67 95       	ror	r22
    2d66:	b3 95       	inc	r27
    2d68:	d9 f7       	brne	.-10     	; 0x2d60 <__fixunssfsi+0x42>
    2d6a:	3e f4       	brtc	.+14     	; 0x2d7a <__fixunssfsi+0x5c>
    2d6c:	90 95       	com	r25
    2d6e:	80 95       	com	r24
    2d70:	70 95       	com	r23
    2d72:	61 95       	neg	r22
    2d74:	7f 4f       	sbci	r23, 0xFF	; 255
    2d76:	8f 4f       	sbci	r24, 0xFF	; 255
    2d78:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7a:	08 95       	ret

00002d7c <__floatunsisf>:
    2d7c:	e8 94       	clt
    2d7e:	09 c0       	rjmp	.+18     	; 0x2d92 <__floatsisf+0x12>

00002d80 <__floatsisf>:
    2d80:	97 fb       	bst	r25, 7
    2d82:	3e f4       	brtc	.+14     	; 0x2d92 <__floatsisf+0x12>
    2d84:	90 95       	com	r25
    2d86:	80 95       	com	r24
    2d88:	70 95       	com	r23
    2d8a:	61 95       	neg	r22
    2d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	99 23       	and	r25, r25
    2d94:	a9 f0       	breq	.+42     	; 0x2dc0 <__floatsisf+0x40>
    2d96:	f9 2f       	mov	r31, r25
    2d98:	96 e9       	ldi	r25, 0x96	; 150
    2d9a:	bb 27       	eor	r27, r27
    2d9c:	93 95       	inc	r25
    2d9e:	f6 95       	lsr	r31
    2da0:	87 95       	ror	r24
    2da2:	77 95       	ror	r23
    2da4:	67 95       	ror	r22
    2da6:	b7 95       	ror	r27
    2da8:	f1 11       	cpse	r31, r1
    2daa:	f8 cf       	rjmp	.-16     	; 0x2d9c <__floatsisf+0x1c>
    2dac:	fa f4       	brpl	.+62     	; 0x2dec <__floatsisf+0x6c>
    2dae:	bb 0f       	add	r27, r27
    2db0:	11 f4       	brne	.+4      	; 0x2db6 <__floatsisf+0x36>
    2db2:	60 ff       	sbrs	r22, 0
    2db4:	1b c0       	rjmp	.+54     	; 0x2dec <__floatsisf+0x6c>
    2db6:	6f 5f       	subi	r22, 0xFF	; 255
    2db8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dba:	8f 4f       	sbci	r24, 0xFF	; 255
    2dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dbe:	16 c0       	rjmp	.+44     	; 0x2dec <__floatsisf+0x6c>
    2dc0:	88 23       	and	r24, r24
    2dc2:	11 f0       	breq	.+4      	; 0x2dc8 <__floatsisf+0x48>
    2dc4:	96 e9       	ldi	r25, 0x96	; 150
    2dc6:	11 c0       	rjmp	.+34     	; 0x2dea <__floatsisf+0x6a>
    2dc8:	77 23       	and	r23, r23
    2dca:	21 f0       	breq	.+8      	; 0x2dd4 <__floatsisf+0x54>
    2dcc:	9e e8       	ldi	r25, 0x8E	; 142
    2dce:	87 2f       	mov	r24, r23
    2dd0:	76 2f       	mov	r23, r22
    2dd2:	05 c0       	rjmp	.+10     	; 0x2dde <__floatsisf+0x5e>
    2dd4:	66 23       	and	r22, r22
    2dd6:	71 f0       	breq	.+28     	; 0x2df4 <__floatsisf+0x74>
    2dd8:	96 e8       	ldi	r25, 0x86	; 134
    2dda:	86 2f       	mov	r24, r22
    2ddc:	70 e0       	ldi	r23, 0x00	; 0
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	2a f0       	brmi	.+10     	; 0x2dec <__floatsisf+0x6c>
    2de2:	9a 95       	dec	r25
    2de4:	66 0f       	add	r22, r22
    2de6:	77 1f       	adc	r23, r23
    2de8:	88 1f       	adc	r24, r24
    2dea:	da f7       	brpl	.-10     	; 0x2de2 <__floatsisf+0x62>
    2dec:	88 0f       	add	r24, r24
    2dee:	96 95       	lsr	r25
    2df0:	87 95       	ror	r24
    2df2:	97 f9       	bld	r25, 7
    2df4:	08 95       	ret

00002df6 <__fp_cmp>:
    2df6:	99 0f       	add	r25, r25
    2df8:	00 08       	sbc	r0, r0
    2dfa:	55 0f       	add	r21, r21
    2dfc:	aa 0b       	sbc	r26, r26
    2dfe:	e0 e8       	ldi	r30, 0x80	; 128
    2e00:	fe ef       	ldi	r31, 0xFE	; 254
    2e02:	16 16       	cp	r1, r22
    2e04:	17 06       	cpc	r1, r23
    2e06:	e8 07       	cpc	r30, r24
    2e08:	f9 07       	cpc	r31, r25
    2e0a:	c0 f0       	brcs	.+48     	; 0x2e3c <__fp_cmp+0x46>
    2e0c:	12 16       	cp	r1, r18
    2e0e:	13 06       	cpc	r1, r19
    2e10:	e4 07       	cpc	r30, r20
    2e12:	f5 07       	cpc	r31, r21
    2e14:	98 f0       	brcs	.+38     	; 0x2e3c <__fp_cmp+0x46>
    2e16:	62 1b       	sub	r22, r18
    2e18:	73 0b       	sbc	r23, r19
    2e1a:	84 0b       	sbc	r24, r20
    2e1c:	95 0b       	sbc	r25, r21
    2e1e:	39 f4       	brne	.+14     	; 0x2e2e <__fp_cmp+0x38>
    2e20:	0a 26       	eor	r0, r26
    2e22:	61 f0       	breq	.+24     	; 0x2e3c <__fp_cmp+0x46>
    2e24:	23 2b       	or	r18, r19
    2e26:	24 2b       	or	r18, r20
    2e28:	25 2b       	or	r18, r21
    2e2a:	21 f4       	brne	.+8      	; 0x2e34 <__fp_cmp+0x3e>
    2e2c:	08 95       	ret
    2e2e:	0a 26       	eor	r0, r26
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <__fp_cmp+0x3e>
    2e32:	a1 40       	sbci	r26, 0x01	; 1
    2e34:	a6 95       	lsr	r26
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	81 1d       	adc	r24, r1
    2e3a:	81 1d       	adc	r24, r1
    2e3c:	08 95       	ret

00002e3e <__fp_inf>:
    2e3e:	97 f9       	bld	r25, 7
    2e40:	9f 67       	ori	r25, 0x7F	; 127
    2e42:	80 e8       	ldi	r24, 0x80	; 128
    2e44:	70 e0       	ldi	r23, 0x00	; 0
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	08 95       	ret

00002e4a <__fp_nan>:
    2e4a:	9f ef       	ldi	r25, 0xFF	; 255
    2e4c:	80 ec       	ldi	r24, 0xC0	; 192
    2e4e:	08 95       	ret

00002e50 <__fp_pscA>:
    2e50:	00 24       	eor	r0, r0
    2e52:	0a 94       	dec	r0
    2e54:	16 16       	cp	r1, r22
    2e56:	17 06       	cpc	r1, r23
    2e58:	18 06       	cpc	r1, r24
    2e5a:	09 06       	cpc	r0, r25
    2e5c:	08 95       	ret

00002e5e <__fp_pscB>:
    2e5e:	00 24       	eor	r0, r0
    2e60:	0a 94       	dec	r0
    2e62:	12 16       	cp	r1, r18
    2e64:	13 06       	cpc	r1, r19
    2e66:	14 06       	cpc	r1, r20
    2e68:	05 06       	cpc	r0, r21
    2e6a:	08 95       	ret

00002e6c <__fp_round>:
    2e6c:	09 2e       	mov	r0, r25
    2e6e:	03 94       	inc	r0
    2e70:	00 0c       	add	r0, r0
    2e72:	11 f4       	brne	.+4      	; 0x2e78 <__fp_round+0xc>
    2e74:	88 23       	and	r24, r24
    2e76:	52 f0       	brmi	.+20     	; 0x2e8c <__fp_round+0x20>
    2e78:	bb 0f       	add	r27, r27
    2e7a:	40 f4       	brcc	.+16     	; 0x2e8c <__fp_round+0x20>
    2e7c:	bf 2b       	or	r27, r31
    2e7e:	11 f4       	brne	.+4      	; 0x2e84 <__fp_round+0x18>
    2e80:	60 ff       	sbrs	r22, 0
    2e82:	04 c0       	rjmp	.+8      	; 0x2e8c <__fp_round+0x20>
    2e84:	6f 5f       	subi	r22, 0xFF	; 255
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8c:	08 95       	ret

00002e8e <__fp_split3>:
    2e8e:	57 fd       	sbrc	r21, 7
    2e90:	90 58       	subi	r25, 0x80	; 128
    2e92:	44 0f       	add	r20, r20
    2e94:	55 1f       	adc	r21, r21
    2e96:	59 f0       	breq	.+22     	; 0x2eae <__fp_splitA+0x10>
    2e98:	5f 3f       	cpi	r21, 0xFF	; 255
    2e9a:	71 f0       	breq	.+28     	; 0x2eb8 <__fp_splitA+0x1a>
    2e9c:	47 95       	ror	r20

00002e9e <__fp_splitA>:
    2e9e:	88 0f       	add	r24, r24
    2ea0:	97 fb       	bst	r25, 7
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	61 f0       	breq	.+24     	; 0x2ebe <__fp_splitA+0x20>
    2ea6:	9f 3f       	cpi	r25, 0xFF	; 255
    2ea8:	79 f0       	breq	.+30     	; 0x2ec8 <__fp_splitA+0x2a>
    2eaa:	87 95       	ror	r24
    2eac:	08 95       	ret
    2eae:	12 16       	cp	r1, r18
    2eb0:	13 06       	cpc	r1, r19
    2eb2:	14 06       	cpc	r1, r20
    2eb4:	55 1f       	adc	r21, r21
    2eb6:	f2 cf       	rjmp	.-28     	; 0x2e9c <__fp_split3+0xe>
    2eb8:	46 95       	lsr	r20
    2eba:	f1 df       	rcall	.-30     	; 0x2e9e <__fp_splitA>
    2ebc:	08 c0       	rjmp	.+16     	; 0x2ece <__fp_splitA+0x30>
    2ebe:	16 16       	cp	r1, r22
    2ec0:	17 06       	cpc	r1, r23
    2ec2:	18 06       	cpc	r1, r24
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	f1 cf       	rjmp	.-30     	; 0x2eaa <__fp_splitA+0xc>
    2ec8:	86 95       	lsr	r24
    2eca:	71 05       	cpc	r23, r1
    2ecc:	61 05       	cpc	r22, r1
    2ece:	08 94       	sec
    2ed0:	08 95       	ret

00002ed2 <__fp_zero>:
    2ed2:	e8 94       	clt

00002ed4 <__fp_szero>:
    2ed4:	bb 27       	eor	r27, r27
    2ed6:	66 27       	eor	r22, r22
    2ed8:	77 27       	eor	r23, r23
    2eda:	cb 01       	movw	r24, r22
    2edc:	97 f9       	bld	r25, 7
    2ede:	08 95       	ret

00002ee0 <__mulsf3>:
    2ee0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__mulsf3x>
    2ee4:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <__fp_round>
    2ee8:	0e 94 28 17 	call	0x2e50	; 0x2e50 <__fp_pscA>
    2eec:	38 f0       	brcs	.+14     	; 0x2efc <__mulsf3+0x1c>
    2eee:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <__fp_pscB>
    2ef2:	20 f0       	brcs	.+8      	; 0x2efc <__mulsf3+0x1c>
    2ef4:	95 23       	and	r25, r21
    2ef6:	11 f0       	breq	.+4      	; 0x2efc <__mulsf3+0x1c>
    2ef8:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_inf>
    2efc:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__fp_nan>
    2f00:	11 24       	eor	r1, r1
    2f02:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__fp_szero>

00002f06 <__mulsf3x>:
    2f06:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <__fp_split3>
    2f0a:	70 f3       	brcs	.-36     	; 0x2ee8 <__mulsf3+0x8>

00002f0c <__mulsf3_pse>:
    2f0c:	95 9f       	mul	r25, r21
    2f0e:	c1 f3       	breq	.-16     	; 0x2f00 <__mulsf3+0x20>
    2f10:	95 0f       	add	r25, r21
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	55 1f       	adc	r21, r21
    2f16:	62 9f       	mul	r22, r18
    2f18:	f0 01       	movw	r30, r0
    2f1a:	72 9f       	mul	r23, r18
    2f1c:	bb 27       	eor	r27, r27
    2f1e:	f0 0d       	add	r31, r0
    2f20:	b1 1d       	adc	r27, r1
    2f22:	63 9f       	mul	r22, r19
    2f24:	aa 27       	eor	r26, r26
    2f26:	f0 0d       	add	r31, r0
    2f28:	b1 1d       	adc	r27, r1
    2f2a:	aa 1f       	adc	r26, r26
    2f2c:	64 9f       	mul	r22, r20
    2f2e:	66 27       	eor	r22, r22
    2f30:	b0 0d       	add	r27, r0
    2f32:	a1 1d       	adc	r26, r1
    2f34:	66 1f       	adc	r22, r22
    2f36:	82 9f       	mul	r24, r18
    2f38:	22 27       	eor	r18, r18
    2f3a:	b0 0d       	add	r27, r0
    2f3c:	a1 1d       	adc	r26, r1
    2f3e:	62 1f       	adc	r22, r18
    2f40:	73 9f       	mul	r23, r19
    2f42:	b0 0d       	add	r27, r0
    2f44:	a1 1d       	adc	r26, r1
    2f46:	62 1f       	adc	r22, r18
    2f48:	83 9f       	mul	r24, r19
    2f4a:	a0 0d       	add	r26, r0
    2f4c:	61 1d       	adc	r22, r1
    2f4e:	22 1f       	adc	r18, r18
    2f50:	74 9f       	mul	r23, r20
    2f52:	33 27       	eor	r19, r19
    2f54:	a0 0d       	add	r26, r0
    2f56:	61 1d       	adc	r22, r1
    2f58:	23 1f       	adc	r18, r19
    2f5a:	84 9f       	mul	r24, r20
    2f5c:	60 0d       	add	r22, r0
    2f5e:	21 1d       	adc	r18, r1
    2f60:	82 2f       	mov	r24, r18
    2f62:	76 2f       	mov	r23, r22
    2f64:	6a 2f       	mov	r22, r26
    2f66:	11 24       	eor	r1, r1
    2f68:	9f 57       	subi	r25, 0x7F	; 127
    2f6a:	50 40       	sbci	r21, 0x00	; 0
    2f6c:	9a f0       	brmi	.+38     	; 0x2f94 <__mulsf3_pse+0x88>
    2f6e:	f1 f0       	breq	.+60     	; 0x2fac <__mulsf3_pse+0xa0>
    2f70:	88 23       	and	r24, r24
    2f72:	4a f0       	brmi	.+18     	; 0x2f86 <__mulsf3_pse+0x7a>
    2f74:	ee 0f       	add	r30, r30
    2f76:	ff 1f       	adc	r31, r31
    2f78:	bb 1f       	adc	r27, r27
    2f7a:	66 1f       	adc	r22, r22
    2f7c:	77 1f       	adc	r23, r23
    2f7e:	88 1f       	adc	r24, r24
    2f80:	91 50       	subi	r25, 0x01	; 1
    2f82:	50 40       	sbci	r21, 0x00	; 0
    2f84:	a9 f7       	brne	.-22     	; 0x2f70 <__mulsf3_pse+0x64>
    2f86:	9e 3f       	cpi	r25, 0xFE	; 254
    2f88:	51 05       	cpc	r21, r1
    2f8a:	80 f0       	brcs	.+32     	; 0x2fac <__mulsf3_pse+0xa0>
    2f8c:	0c 94 1f 17 	jmp	0x2e3e	; 0x2e3e <__fp_inf>
    2f90:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__fp_szero>
    2f94:	5f 3f       	cpi	r21, 0xFF	; 255
    2f96:	e4 f3       	brlt	.-8      	; 0x2f90 <__mulsf3_pse+0x84>
    2f98:	98 3e       	cpi	r25, 0xE8	; 232
    2f9a:	d4 f3       	brlt	.-12     	; 0x2f90 <__mulsf3_pse+0x84>
    2f9c:	86 95       	lsr	r24
    2f9e:	77 95       	ror	r23
    2fa0:	67 95       	ror	r22
    2fa2:	b7 95       	ror	r27
    2fa4:	f7 95       	ror	r31
    2fa6:	e7 95       	ror	r30
    2fa8:	9f 5f       	subi	r25, 0xFF	; 255
    2faa:	c1 f7       	brne	.-16     	; 0x2f9c <__mulsf3_pse+0x90>
    2fac:	fe 2b       	or	r31, r30
    2fae:	88 0f       	add	r24, r24
    2fb0:	91 1d       	adc	r25, r1
    2fb2:	96 95       	lsr	r25
    2fb4:	87 95       	ror	r24
    2fb6:	97 f9       	bld	r25, 7
    2fb8:	08 95       	ret

00002fba <__udivmodsi4>:
    2fba:	a1 e2       	ldi	r26, 0x21	; 33
    2fbc:	1a 2e       	mov	r1, r26
    2fbe:	aa 1b       	sub	r26, r26
    2fc0:	bb 1b       	sub	r27, r27
    2fc2:	fd 01       	movw	r30, r26
    2fc4:	0d c0       	rjmp	.+26     	; 0x2fe0 <__udivmodsi4_ep>

00002fc6 <__udivmodsi4_loop>:
    2fc6:	aa 1f       	adc	r26, r26
    2fc8:	bb 1f       	adc	r27, r27
    2fca:	ee 1f       	adc	r30, r30
    2fcc:	ff 1f       	adc	r31, r31
    2fce:	a2 17       	cp	r26, r18
    2fd0:	b3 07       	cpc	r27, r19
    2fd2:	e4 07       	cpc	r30, r20
    2fd4:	f5 07       	cpc	r31, r21
    2fd6:	20 f0       	brcs	.+8      	; 0x2fe0 <__udivmodsi4_ep>
    2fd8:	a2 1b       	sub	r26, r18
    2fda:	b3 0b       	sbc	r27, r19
    2fdc:	e4 0b       	sbc	r30, r20
    2fde:	f5 0b       	sbc	r31, r21

00002fe0 <__udivmodsi4_ep>:
    2fe0:	66 1f       	adc	r22, r22
    2fe2:	77 1f       	adc	r23, r23
    2fe4:	88 1f       	adc	r24, r24
    2fe6:	99 1f       	adc	r25, r25
    2fe8:	1a 94       	dec	r1
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <__udivmodsi4_loop>
    2fec:	60 95       	com	r22
    2fee:	70 95       	com	r23
    2ff0:	80 95       	com	r24
    2ff2:	90 95       	com	r25
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	bd 01       	movw	r22, r26
    2ffa:	cf 01       	movw	r24, r30
    2ffc:	08 95       	ret

00002ffe <sprintf>:
    2ffe:	ae e0       	ldi	r26, 0x0E	; 14
    3000:	b0 e0       	ldi	r27, 0x00	; 0
    3002:	e5 e0       	ldi	r30, 0x05	; 5
    3004:	f8 e1       	ldi	r31, 0x18	; 24
    3006:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__prologue_saves__+0x1c>
    300a:	0d 89       	ldd	r16, Y+21	; 0x15
    300c:	1e 89       	ldd	r17, Y+22	; 0x16
    300e:	86 e0       	ldi	r24, 0x06	; 6
    3010:	8c 83       	std	Y+4, r24	; 0x04
    3012:	1a 83       	std	Y+2, r17	; 0x02
    3014:	09 83       	std	Y+1, r16	; 0x01
    3016:	8f ef       	ldi	r24, 0xFF	; 255
    3018:	9f e7       	ldi	r25, 0x7F	; 127
    301a:	9e 83       	std	Y+6, r25	; 0x06
    301c:	8d 83       	std	Y+5, r24	; 0x05
    301e:	ae 01       	movw	r20, r28
    3020:	47 5e       	subi	r20, 0xE7	; 231
    3022:	5f 4f       	sbci	r21, 0xFF	; 255
    3024:	6f 89       	ldd	r22, Y+23	; 0x17
    3026:	78 8d       	ldd	r23, Y+24	; 0x18
    3028:	ce 01       	movw	r24, r28
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	0e 94 21 18 	call	0x3042	; 0x3042 <vfprintf>
    3030:	ef 81       	ldd	r30, Y+7	; 0x07
    3032:	f8 85       	ldd	r31, Y+8	; 0x08
    3034:	e0 0f       	add	r30, r16
    3036:	f1 1f       	adc	r31, r17
    3038:	10 82       	st	Z, r1
    303a:	2e 96       	adiw	r28, 0x0e	; 14
    303c:	e4 e0       	ldi	r30, 0x04	; 4
    303e:	0c 94 dc 1a 	jmp	0x35b8	; 0x35b8 <__epilogue_restores__+0x1c>

00003042 <vfprintf>:
    3042:	ab e0       	ldi	r26, 0x0B	; 11
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e7 e2       	ldi	r30, 0x27	; 39
    3048:	f8 e1       	ldi	r31, 0x18	; 24
    304a:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__>
    304e:	6c 01       	movw	r12, r24
    3050:	7b 01       	movw	r14, r22
    3052:	8a 01       	movw	r16, r20
    3054:	fc 01       	movw	r30, r24
    3056:	17 82       	std	Z+7, r1	; 0x07
    3058:	16 82       	std	Z+6, r1	; 0x06
    305a:	83 81       	ldd	r24, Z+3	; 0x03
    305c:	81 ff       	sbrs	r24, 1
    305e:	cc c1       	rjmp	.+920    	; 0x33f8 <vfprintf+0x3b6>
    3060:	ce 01       	movw	r24, r28
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	3c 01       	movw	r6, r24
    3066:	f6 01       	movw	r30, r12
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	f7 01       	movw	r30, r14
    306c:	93 fd       	sbrc	r25, 3
    306e:	85 91       	lpm	r24, Z+
    3070:	93 ff       	sbrs	r25, 3
    3072:	81 91       	ld	r24, Z+
    3074:	7f 01       	movw	r14, r30
    3076:	88 23       	and	r24, r24
    3078:	09 f4       	brne	.+2      	; 0x307c <vfprintf+0x3a>
    307a:	ba c1       	rjmp	.+884    	; 0x33f0 <vfprintf+0x3ae>
    307c:	85 32       	cpi	r24, 0x25	; 37
    307e:	39 f4       	brne	.+14     	; 0x308e <vfprintf+0x4c>
    3080:	93 fd       	sbrc	r25, 3
    3082:	85 91       	lpm	r24, Z+
    3084:	93 ff       	sbrs	r25, 3
    3086:	81 91       	ld	r24, Z+
    3088:	7f 01       	movw	r14, r30
    308a:	85 32       	cpi	r24, 0x25	; 37
    308c:	29 f4       	brne	.+10     	; 0x3098 <vfprintf+0x56>
    308e:	b6 01       	movw	r22, r12
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    3096:	e7 cf       	rjmp	.-50     	; 0x3066 <vfprintf+0x24>
    3098:	91 2c       	mov	r9, r1
    309a:	21 2c       	mov	r2, r1
    309c:	31 2c       	mov	r3, r1
    309e:	ff e1       	ldi	r31, 0x1F	; 31
    30a0:	f3 15       	cp	r31, r3
    30a2:	d8 f0       	brcs	.+54     	; 0x30da <vfprintf+0x98>
    30a4:	8b 32       	cpi	r24, 0x2B	; 43
    30a6:	79 f0       	breq	.+30     	; 0x30c6 <vfprintf+0x84>
    30a8:	38 f4       	brcc	.+14     	; 0x30b8 <vfprintf+0x76>
    30aa:	80 32       	cpi	r24, 0x20	; 32
    30ac:	79 f0       	breq	.+30     	; 0x30cc <vfprintf+0x8a>
    30ae:	83 32       	cpi	r24, 0x23	; 35
    30b0:	a1 f4       	brne	.+40     	; 0x30da <vfprintf+0x98>
    30b2:	23 2d       	mov	r18, r3
    30b4:	20 61       	ori	r18, 0x10	; 16
    30b6:	1d c0       	rjmp	.+58     	; 0x30f2 <vfprintf+0xb0>
    30b8:	8d 32       	cpi	r24, 0x2D	; 45
    30ba:	61 f0       	breq	.+24     	; 0x30d4 <vfprintf+0x92>
    30bc:	80 33       	cpi	r24, 0x30	; 48
    30be:	69 f4       	brne	.+26     	; 0x30da <vfprintf+0x98>
    30c0:	23 2d       	mov	r18, r3
    30c2:	21 60       	ori	r18, 0x01	; 1
    30c4:	16 c0       	rjmp	.+44     	; 0x30f2 <vfprintf+0xb0>
    30c6:	83 2d       	mov	r24, r3
    30c8:	82 60       	ori	r24, 0x02	; 2
    30ca:	38 2e       	mov	r3, r24
    30cc:	e3 2d       	mov	r30, r3
    30ce:	e4 60       	ori	r30, 0x04	; 4
    30d0:	3e 2e       	mov	r3, r30
    30d2:	2a c0       	rjmp	.+84     	; 0x3128 <vfprintf+0xe6>
    30d4:	f3 2d       	mov	r31, r3
    30d6:	f8 60       	ori	r31, 0x08	; 8
    30d8:	1d c0       	rjmp	.+58     	; 0x3114 <vfprintf+0xd2>
    30da:	37 fc       	sbrc	r3, 7
    30dc:	2d c0       	rjmp	.+90     	; 0x3138 <vfprintf+0xf6>
    30de:	20 ed       	ldi	r18, 0xD0	; 208
    30e0:	28 0f       	add	r18, r24
    30e2:	2a 30       	cpi	r18, 0x0A	; 10
    30e4:	40 f0       	brcs	.+16     	; 0x30f6 <vfprintf+0xb4>
    30e6:	8e 32       	cpi	r24, 0x2E	; 46
    30e8:	b9 f4       	brne	.+46     	; 0x3118 <vfprintf+0xd6>
    30ea:	36 fc       	sbrc	r3, 6
    30ec:	81 c1       	rjmp	.+770    	; 0x33f0 <vfprintf+0x3ae>
    30ee:	23 2d       	mov	r18, r3
    30f0:	20 64       	ori	r18, 0x40	; 64
    30f2:	32 2e       	mov	r3, r18
    30f4:	19 c0       	rjmp	.+50     	; 0x3128 <vfprintf+0xe6>
    30f6:	36 fe       	sbrs	r3, 6
    30f8:	06 c0       	rjmp	.+12     	; 0x3106 <vfprintf+0xc4>
    30fa:	8a e0       	ldi	r24, 0x0A	; 10
    30fc:	98 9e       	mul	r9, r24
    30fe:	20 0d       	add	r18, r0
    3100:	11 24       	eor	r1, r1
    3102:	92 2e       	mov	r9, r18
    3104:	11 c0       	rjmp	.+34     	; 0x3128 <vfprintf+0xe6>
    3106:	ea e0       	ldi	r30, 0x0A	; 10
    3108:	2e 9e       	mul	r2, r30
    310a:	20 0d       	add	r18, r0
    310c:	11 24       	eor	r1, r1
    310e:	22 2e       	mov	r2, r18
    3110:	f3 2d       	mov	r31, r3
    3112:	f0 62       	ori	r31, 0x20	; 32
    3114:	3f 2e       	mov	r3, r31
    3116:	08 c0       	rjmp	.+16     	; 0x3128 <vfprintf+0xe6>
    3118:	8c 36       	cpi	r24, 0x6C	; 108
    311a:	21 f4       	brne	.+8      	; 0x3124 <vfprintf+0xe2>
    311c:	83 2d       	mov	r24, r3
    311e:	80 68       	ori	r24, 0x80	; 128
    3120:	38 2e       	mov	r3, r24
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <vfprintf+0xe6>
    3124:	88 36       	cpi	r24, 0x68	; 104
    3126:	41 f4       	brne	.+16     	; 0x3138 <vfprintf+0xf6>
    3128:	f7 01       	movw	r30, r14
    312a:	93 fd       	sbrc	r25, 3
    312c:	85 91       	lpm	r24, Z+
    312e:	93 ff       	sbrs	r25, 3
    3130:	81 91       	ld	r24, Z+
    3132:	7f 01       	movw	r14, r30
    3134:	81 11       	cpse	r24, r1
    3136:	b3 cf       	rjmp	.-154    	; 0x309e <vfprintf+0x5c>
    3138:	98 2f       	mov	r25, r24
    313a:	9f 7d       	andi	r25, 0xDF	; 223
    313c:	95 54       	subi	r25, 0x45	; 69
    313e:	93 30       	cpi	r25, 0x03	; 3
    3140:	28 f4       	brcc	.+10     	; 0x314c <vfprintf+0x10a>
    3142:	0c 5f       	subi	r16, 0xFC	; 252
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	9f e3       	ldi	r25, 0x3F	; 63
    3148:	99 83       	std	Y+1, r25	; 0x01
    314a:	0d c0       	rjmp	.+26     	; 0x3166 <vfprintf+0x124>
    314c:	83 36       	cpi	r24, 0x63	; 99
    314e:	31 f0       	breq	.+12     	; 0x315c <vfprintf+0x11a>
    3150:	83 37       	cpi	r24, 0x73	; 115
    3152:	71 f0       	breq	.+28     	; 0x3170 <vfprintf+0x12e>
    3154:	83 35       	cpi	r24, 0x53	; 83
    3156:	09 f0       	breq	.+2      	; 0x315a <vfprintf+0x118>
    3158:	59 c0       	rjmp	.+178    	; 0x320c <vfprintf+0x1ca>
    315a:	21 c0       	rjmp	.+66     	; 0x319e <vfprintf+0x15c>
    315c:	f8 01       	movw	r30, r16
    315e:	80 81       	ld	r24, Z
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	0e 5f       	subi	r16, 0xFE	; 254
    3164:	1f 4f       	sbci	r17, 0xFF	; 255
    3166:	88 24       	eor	r8, r8
    3168:	83 94       	inc	r8
    316a:	91 2c       	mov	r9, r1
    316c:	53 01       	movw	r10, r6
    316e:	13 c0       	rjmp	.+38     	; 0x3196 <vfprintf+0x154>
    3170:	28 01       	movw	r4, r16
    3172:	f2 e0       	ldi	r31, 0x02	; 2
    3174:	4f 0e       	add	r4, r31
    3176:	51 1c       	adc	r5, r1
    3178:	f8 01       	movw	r30, r16
    317a:	a0 80       	ld	r10, Z
    317c:	b1 80       	ldd	r11, Z+1	; 0x01
    317e:	36 fe       	sbrs	r3, 6
    3180:	03 c0       	rjmp	.+6      	; 0x3188 <vfprintf+0x146>
    3182:	69 2d       	mov	r22, r9
    3184:	70 e0       	ldi	r23, 0x00	; 0
    3186:	02 c0       	rjmp	.+4      	; 0x318c <vfprintf+0x14a>
    3188:	6f ef       	ldi	r22, 0xFF	; 255
    318a:	7f ef       	ldi	r23, 0xFF	; 255
    318c:	c5 01       	movw	r24, r10
    318e:	0e 94 0d 1a 	call	0x341a	; 0x341a <strnlen>
    3192:	4c 01       	movw	r8, r24
    3194:	82 01       	movw	r16, r4
    3196:	f3 2d       	mov	r31, r3
    3198:	ff 77       	andi	r31, 0x7F	; 127
    319a:	3f 2e       	mov	r3, r31
    319c:	16 c0       	rjmp	.+44     	; 0x31ca <vfprintf+0x188>
    319e:	28 01       	movw	r4, r16
    31a0:	22 e0       	ldi	r18, 0x02	; 2
    31a2:	42 0e       	add	r4, r18
    31a4:	51 1c       	adc	r5, r1
    31a6:	f8 01       	movw	r30, r16
    31a8:	a0 80       	ld	r10, Z
    31aa:	b1 80       	ldd	r11, Z+1	; 0x01
    31ac:	36 fe       	sbrs	r3, 6
    31ae:	03 c0       	rjmp	.+6      	; 0x31b6 <vfprintf+0x174>
    31b0:	69 2d       	mov	r22, r9
    31b2:	70 e0       	ldi	r23, 0x00	; 0
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <vfprintf+0x178>
    31b6:	6f ef       	ldi	r22, 0xFF	; 255
    31b8:	7f ef       	ldi	r23, 0xFF	; 255
    31ba:	c5 01       	movw	r24, r10
    31bc:	0e 94 02 1a 	call	0x3404	; 0x3404 <strnlen_P>
    31c0:	4c 01       	movw	r8, r24
    31c2:	f3 2d       	mov	r31, r3
    31c4:	f0 68       	ori	r31, 0x80	; 128
    31c6:	3f 2e       	mov	r3, r31
    31c8:	82 01       	movw	r16, r4
    31ca:	33 fc       	sbrc	r3, 3
    31cc:	1b c0       	rjmp	.+54     	; 0x3204 <vfprintf+0x1c2>
    31ce:	82 2d       	mov	r24, r2
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	88 16       	cp	r8, r24
    31d4:	99 06       	cpc	r9, r25
    31d6:	b0 f4       	brcc	.+44     	; 0x3204 <vfprintf+0x1c2>
    31d8:	b6 01       	movw	r22, r12
    31da:	80 e2       	ldi	r24, 0x20	; 32
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    31e2:	2a 94       	dec	r2
    31e4:	f4 cf       	rjmp	.-24     	; 0x31ce <vfprintf+0x18c>
    31e6:	f5 01       	movw	r30, r10
    31e8:	37 fc       	sbrc	r3, 7
    31ea:	85 91       	lpm	r24, Z+
    31ec:	37 fe       	sbrs	r3, 7
    31ee:	81 91       	ld	r24, Z+
    31f0:	5f 01       	movw	r10, r30
    31f2:	b6 01       	movw	r22, r12
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    31fa:	21 10       	cpse	r2, r1
    31fc:	2a 94       	dec	r2
    31fe:	21 e0       	ldi	r18, 0x01	; 1
    3200:	82 1a       	sub	r8, r18
    3202:	91 08       	sbc	r9, r1
    3204:	81 14       	cp	r8, r1
    3206:	91 04       	cpc	r9, r1
    3208:	71 f7       	brne	.-36     	; 0x31e6 <vfprintf+0x1a4>
    320a:	e8 c0       	rjmp	.+464    	; 0x33dc <vfprintf+0x39a>
    320c:	84 36       	cpi	r24, 0x64	; 100
    320e:	11 f0       	breq	.+4      	; 0x3214 <vfprintf+0x1d2>
    3210:	89 36       	cpi	r24, 0x69	; 105
    3212:	41 f5       	brne	.+80     	; 0x3264 <vfprintf+0x222>
    3214:	f8 01       	movw	r30, r16
    3216:	37 fe       	sbrs	r3, 7
    3218:	07 c0       	rjmp	.+14     	; 0x3228 <vfprintf+0x1e6>
    321a:	60 81       	ld	r22, Z
    321c:	71 81       	ldd	r23, Z+1	; 0x01
    321e:	82 81       	ldd	r24, Z+2	; 0x02
    3220:	93 81       	ldd	r25, Z+3	; 0x03
    3222:	0c 5f       	subi	r16, 0xFC	; 252
    3224:	1f 4f       	sbci	r17, 0xFF	; 255
    3226:	08 c0       	rjmp	.+16     	; 0x3238 <vfprintf+0x1f6>
    3228:	60 81       	ld	r22, Z
    322a:	71 81       	ldd	r23, Z+1	; 0x01
    322c:	07 2e       	mov	r0, r23
    322e:	00 0c       	add	r0, r0
    3230:	88 0b       	sbc	r24, r24
    3232:	99 0b       	sbc	r25, r25
    3234:	0e 5f       	subi	r16, 0xFE	; 254
    3236:	1f 4f       	sbci	r17, 0xFF	; 255
    3238:	f3 2d       	mov	r31, r3
    323a:	ff 76       	andi	r31, 0x6F	; 111
    323c:	3f 2e       	mov	r3, r31
    323e:	97 ff       	sbrs	r25, 7
    3240:	09 c0       	rjmp	.+18     	; 0x3254 <vfprintf+0x212>
    3242:	90 95       	com	r25
    3244:	80 95       	com	r24
    3246:	70 95       	com	r23
    3248:	61 95       	neg	r22
    324a:	7f 4f       	sbci	r23, 0xFF	; 255
    324c:	8f 4f       	sbci	r24, 0xFF	; 255
    324e:	9f 4f       	sbci	r25, 0xFF	; 255
    3250:	f0 68       	ori	r31, 0x80	; 128
    3252:	3f 2e       	mov	r3, r31
    3254:	2a e0       	ldi	r18, 0x0A	; 10
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	a3 01       	movw	r20, r6
    325a:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__ultoa_invert>
    325e:	88 2e       	mov	r8, r24
    3260:	86 18       	sub	r8, r6
    3262:	45 c0       	rjmp	.+138    	; 0x32ee <vfprintf+0x2ac>
    3264:	85 37       	cpi	r24, 0x75	; 117
    3266:	31 f4       	brne	.+12     	; 0x3274 <vfprintf+0x232>
    3268:	23 2d       	mov	r18, r3
    326a:	2f 7e       	andi	r18, 0xEF	; 239
    326c:	b2 2e       	mov	r11, r18
    326e:	2a e0       	ldi	r18, 0x0A	; 10
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	25 c0       	rjmp	.+74     	; 0x32be <vfprintf+0x27c>
    3274:	93 2d       	mov	r25, r3
    3276:	99 7f       	andi	r25, 0xF9	; 249
    3278:	b9 2e       	mov	r11, r25
    327a:	8f 36       	cpi	r24, 0x6F	; 111
    327c:	c1 f0       	breq	.+48     	; 0x32ae <vfprintf+0x26c>
    327e:	18 f4       	brcc	.+6      	; 0x3286 <vfprintf+0x244>
    3280:	88 35       	cpi	r24, 0x58	; 88
    3282:	79 f0       	breq	.+30     	; 0x32a2 <vfprintf+0x260>
    3284:	b5 c0       	rjmp	.+362    	; 0x33f0 <vfprintf+0x3ae>
    3286:	80 37       	cpi	r24, 0x70	; 112
    3288:	19 f0       	breq	.+6      	; 0x3290 <vfprintf+0x24e>
    328a:	88 37       	cpi	r24, 0x78	; 120
    328c:	21 f0       	breq	.+8      	; 0x3296 <vfprintf+0x254>
    328e:	b0 c0       	rjmp	.+352    	; 0x33f0 <vfprintf+0x3ae>
    3290:	e9 2f       	mov	r30, r25
    3292:	e0 61       	ori	r30, 0x10	; 16
    3294:	be 2e       	mov	r11, r30
    3296:	b4 fe       	sbrs	r11, 4
    3298:	0d c0       	rjmp	.+26     	; 0x32b4 <vfprintf+0x272>
    329a:	fb 2d       	mov	r31, r11
    329c:	f4 60       	ori	r31, 0x04	; 4
    329e:	bf 2e       	mov	r11, r31
    32a0:	09 c0       	rjmp	.+18     	; 0x32b4 <vfprintf+0x272>
    32a2:	34 fe       	sbrs	r3, 4
    32a4:	0a c0       	rjmp	.+20     	; 0x32ba <vfprintf+0x278>
    32a6:	29 2f       	mov	r18, r25
    32a8:	26 60       	ori	r18, 0x06	; 6
    32aa:	b2 2e       	mov	r11, r18
    32ac:	06 c0       	rjmp	.+12     	; 0x32ba <vfprintf+0x278>
    32ae:	28 e0       	ldi	r18, 0x08	; 8
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	05 c0       	rjmp	.+10     	; 0x32be <vfprintf+0x27c>
    32b4:	20 e1       	ldi	r18, 0x10	; 16
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <vfprintf+0x27c>
    32ba:	20 e1       	ldi	r18, 0x10	; 16
    32bc:	32 e0       	ldi	r19, 0x02	; 2
    32be:	f8 01       	movw	r30, r16
    32c0:	b7 fe       	sbrs	r11, 7
    32c2:	07 c0       	rjmp	.+14     	; 0x32d2 <vfprintf+0x290>
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	0c 5f       	subi	r16, 0xFC	; 252
    32ce:	1f 4f       	sbci	r17, 0xFF	; 255
    32d0:	06 c0       	rjmp	.+12     	; 0x32de <vfprintf+0x29c>
    32d2:	60 81       	ld	r22, Z
    32d4:	71 81       	ldd	r23, Z+1	; 0x01
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	0e 5f       	subi	r16, 0xFE	; 254
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	a3 01       	movw	r20, r6
    32e0:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__ultoa_invert>
    32e4:	88 2e       	mov	r8, r24
    32e6:	86 18       	sub	r8, r6
    32e8:	fb 2d       	mov	r31, r11
    32ea:	ff 77       	andi	r31, 0x7F	; 127
    32ec:	3f 2e       	mov	r3, r31
    32ee:	36 fe       	sbrs	r3, 6
    32f0:	0d c0       	rjmp	.+26     	; 0x330c <vfprintf+0x2ca>
    32f2:	23 2d       	mov	r18, r3
    32f4:	2e 7f       	andi	r18, 0xFE	; 254
    32f6:	a2 2e       	mov	r10, r18
    32f8:	89 14       	cp	r8, r9
    32fa:	58 f4       	brcc	.+22     	; 0x3312 <vfprintf+0x2d0>
    32fc:	34 fe       	sbrs	r3, 4
    32fe:	0b c0       	rjmp	.+22     	; 0x3316 <vfprintf+0x2d4>
    3300:	32 fc       	sbrc	r3, 2
    3302:	09 c0       	rjmp	.+18     	; 0x3316 <vfprintf+0x2d4>
    3304:	83 2d       	mov	r24, r3
    3306:	8e 7e       	andi	r24, 0xEE	; 238
    3308:	a8 2e       	mov	r10, r24
    330a:	05 c0       	rjmp	.+10     	; 0x3316 <vfprintf+0x2d4>
    330c:	b8 2c       	mov	r11, r8
    330e:	a3 2c       	mov	r10, r3
    3310:	03 c0       	rjmp	.+6      	; 0x3318 <vfprintf+0x2d6>
    3312:	b8 2c       	mov	r11, r8
    3314:	01 c0       	rjmp	.+2      	; 0x3318 <vfprintf+0x2d6>
    3316:	b9 2c       	mov	r11, r9
    3318:	a4 fe       	sbrs	r10, 4
    331a:	0f c0       	rjmp	.+30     	; 0x333a <vfprintf+0x2f8>
    331c:	fe 01       	movw	r30, r28
    331e:	e8 0d       	add	r30, r8
    3320:	f1 1d       	adc	r31, r1
    3322:	80 81       	ld	r24, Z
    3324:	80 33       	cpi	r24, 0x30	; 48
    3326:	21 f4       	brne	.+8      	; 0x3330 <vfprintf+0x2ee>
    3328:	9a 2d       	mov	r25, r10
    332a:	99 7e       	andi	r25, 0xE9	; 233
    332c:	a9 2e       	mov	r10, r25
    332e:	09 c0       	rjmp	.+18     	; 0x3342 <vfprintf+0x300>
    3330:	a2 fe       	sbrs	r10, 2
    3332:	06 c0       	rjmp	.+12     	; 0x3340 <vfprintf+0x2fe>
    3334:	b3 94       	inc	r11
    3336:	b3 94       	inc	r11
    3338:	04 c0       	rjmp	.+8      	; 0x3342 <vfprintf+0x300>
    333a:	8a 2d       	mov	r24, r10
    333c:	86 78       	andi	r24, 0x86	; 134
    333e:	09 f0       	breq	.+2      	; 0x3342 <vfprintf+0x300>
    3340:	b3 94       	inc	r11
    3342:	a3 fc       	sbrc	r10, 3
    3344:	11 c0       	rjmp	.+34     	; 0x3368 <vfprintf+0x326>
    3346:	a0 fe       	sbrs	r10, 0
    3348:	06 c0       	rjmp	.+12     	; 0x3356 <vfprintf+0x314>
    334a:	b2 14       	cp	r11, r2
    334c:	88 f4       	brcc	.+34     	; 0x3370 <vfprintf+0x32e>
    334e:	28 0c       	add	r2, r8
    3350:	92 2c       	mov	r9, r2
    3352:	9b 18       	sub	r9, r11
    3354:	0e c0       	rjmp	.+28     	; 0x3372 <vfprintf+0x330>
    3356:	b2 14       	cp	r11, r2
    3358:	60 f4       	brcc	.+24     	; 0x3372 <vfprintf+0x330>
    335a:	b6 01       	movw	r22, r12
    335c:	80 e2       	ldi	r24, 0x20	; 32
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    3364:	b3 94       	inc	r11
    3366:	f7 cf       	rjmp	.-18     	; 0x3356 <vfprintf+0x314>
    3368:	b2 14       	cp	r11, r2
    336a:	18 f4       	brcc	.+6      	; 0x3372 <vfprintf+0x330>
    336c:	2b 18       	sub	r2, r11
    336e:	02 c0       	rjmp	.+4      	; 0x3374 <vfprintf+0x332>
    3370:	98 2c       	mov	r9, r8
    3372:	21 2c       	mov	r2, r1
    3374:	a4 fe       	sbrs	r10, 4
    3376:	10 c0       	rjmp	.+32     	; 0x3398 <vfprintf+0x356>
    3378:	b6 01       	movw	r22, r12
    337a:	80 e3       	ldi	r24, 0x30	; 48
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    3382:	a2 fe       	sbrs	r10, 2
    3384:	17 c0       	rjmp	.+46     	; 0x33b4 <vfprintf+0x372>
    3386:	a1 fc       	sbrc	r10, 1
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <vfprintf+0x34e>
    338a:	88 e7       	ldi	r24, 0x78	; 120
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <vfprintf+0x352>
    3390:	88 e5       	ldi	r24, 0x58	; 88
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	b6 01       	movw	r22, r12
    3396:	0c c0       	rjmp	.+24     	; 0x33b0 <vfprintf+0x36e>
    3398:	8a 2d       	mov	r24, r10
    339a:	86 78       	andi	r24, 0x86	; 134
    339c:	59 f0       	breq	.+22     	; 0x33b4 <vfprintf+0x372>
    339e:	a1 fe       	sbrs	r10, 1
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <vfprintf+0x364>
    33a2:	8b e2       	ldi	r24, 0x2B	; 43
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <vfprintf+0x366>
    33a6:	80 e2       	ldi	r24, 0x20	; 32
    33a8:	a7 fc       	sbrc	r10, 7
    33aa:	8d e2       	ldi	r24, 0x2D	; 45
    33ac:	b6 01       	movw	r22, r12
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    33b4:	89 14       	cp	r8, r9
    33b6:	38 f4       	brcc	.+14     	; 0x33c6 <vfprintf+0x384>
    33b8:	b6 01       	movw	r22, r12
    33ba:	80 e3       	ldi	r24, 0x30	; 48
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    33c2:	9a 94       	dec	r9
    33c4:	f7 cf       	rjmp	.-18     	; 0x33b4 <vfprintf+0x372>
    33c6:	8a 94       	dec	r8
    33c8:	f3 01       	movw	r30, r6
    33ca:	e8 0d       	add	r30, r8
    33cc:	f1 1d       	adc	r31, r1
    33ce:	80 81       	ld	r24, Z
    33d0:	b6 01       	movw	r22, r12
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    33d8:	81 10       	cpse	r8, r1
    33da:	f5 cf       	rjmp	.-22     	; 0x33c6 <vfprintf+0x384>
    33dc:	22 20       	and	r2, r2
    33de:	09 f4       	brne	.+2      	; 0x33e2 <vfprintf+0x3a0>
    33e0:	42 ce       	rjmp	.-892    	; 0x3066 <vfprintf+0x24>
    33e2:	b6 01       	movw	r22, r12
    33e4:	80 e2       	ldi	r24, 0x20	; 32
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	0e 94 18 1a 	call	0x3430	; 0x3430 <fputc>
    33ec:	2a 94       	dec	r2
    33ee:	f6 cf       	rjmp	.-20     	; 0x33dc <vfprintf+0x39a>
    33f0:	f6 01       	movw	r30, r12
    33f2:	86 81       	ldd	r24, Z+6	; 0x06
    33f4:	97 81       	ldd	r25, Z+7	; 0x07
    33f6:	02 c0       	rjmp	.+4      	; 0x33fc <vfprintf+0x3ba>
    33f8:	8f ef       	ldi	r24, 0xFF	; 255
    33fa:	9f ef       	ldi	r25, 0xFF	; 255
    33fc:	2b 96       	adiw	r28, 0x0b	; 11
    33fe:	e2 e1       	ldi	r30, 0x12	; 18
    3400:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__>

00003404 <strnlen_P>:
    3404:	fc 01       	movw	r30, r24
    3406:	05 90       	lpm	r0, Z+
    3408:	61 50       	subi	r22, 0x01	; 1
    340a:	70 40       	sbci	r23, 0x00	; 0
    340c:	01 10       	cpse	r0, r1
    340e:	d8 f7       	brcc	.-10     	; 0x3406 <strnlen_P+0x2>
    3410:	80 95       	com	r24
    3412:	90 95       	com	r25
    3414:	8e 0f       	add	r24, r30
    3416:	9f 1f       	adc	r25, r31
    3418:	08 95       	ret

0000341a <strnlen>:
    341a:	fc 01       	movw	r30, r24
    341c:	61 50       	subi	r22, 0x01	; 1
    341e:	70 40       	sbci	r23, 0x00	; 0
    3420:	01 90       	ld	r0, Z+
    3422:	01 10       	cpse	r0, r1
    3424:	d8 f7       	brcc	.-10     	; 0x341c <strnlen+0x2>
    3426:	80 95       	com	r24
    3428:	90 95       	com	r25
    342a:	8e 0f       	add	r24, r30
    342c:	9f 1f       	adc	r25, r31
    342e:	08 95       	ret

00003430 <fputc>:
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	fb 01       	movw	r30, r22
    343a:	23 81       	ldd	r18, Z+3	; 0x03
    343c:	21 fd       	sbrc	r18, 1
    343e:	03 c0       	rjmp	.+6      	; 0x3446 <fputc+0x16>
    3440:	8f ef       	ldi	r24, 0xFF	; 255
    3442:	9f ef       	ldi	r25, 0xFF	; 255
    3444:	2c c0       	rjmp	.+88     	; 0x349e <fputc+0x6e>
    3446:	22 ff       	sbrs	r18, 2
    3448:	16 c0       	rjmp	.+44     	; 0x3476 <fputc+0x46>
    344a:	46 81       	ldd	r20, Z+6	; 0x06
    344c:	57 81       	ldd	r21, Z+7	; 0x07
    344e:	24 81       	ldd	r18, Z+4	; 0x04
    3450:	35 81       	ldd	r19, Z+5	; 0x05
    3452:	42 17       	cp	r20, r18
    3454:	53 07       	cpc	r21, r19
    3456:	44 f4       	brge	.+16     	; 0x3468 <fputc+0x38>
    3458:	a0 81       	ld	r26, Z
    345a:	b1 81       	ldd	r27, Z+1	; 0x01
    345c:	9d 01       	movw	r18, r26
    345e:	2f 5f       	subi	r18, 0xFF	; 255
    3460:	3f 4f       	sbci	r19, 0xFF	; 255
    3462:	31 83       	std	Z+1, r19	; 0x01
    3464:	20 83       	st	Z, r18
    3466:	8c 93       	st	X, r24
    3468:	26 81       	ldd	r18, Z+6	; 0x06
    346a:	37 81       	ldd	r19, Z+7	; 0x07
    346c:	2f 5f       	subi	r18, 0xFF	; 255
    346e:	3f 4f       	sbci	r19, 0xFF	; 255
    3470:	37 83       	std	Z+7, r19	; 0x07
    3472:	26 83       	std	Z+6, r18	; 0x06
    3474:	14 c0       	rjmp	.+40     	; 0x349e <fputc+0x6e>
    3476:	8b 01       	movw	r16, r22
    3478:	ec 01       	movw	r28, r24
    347a:	fb 01       	movw	r30, r22
    347c:	00 84       	ldd	r0, Z+8	; 0x08
    347e:	f1 85       	ldd	r31, Z+9	; 0x09
    3480:	e0 2d       	mov	r30, r0
    3482:	09 95       	icall
    3484:	89 2b       	or	r24, r25
    3486:	e1 f6       	brne	.-72     	; 0x3440 <fputc+0x10>
    3488:	d8 01       	movw	r26, r16
    348a:	16 96       	adiw	r26, 0x06	; 6
    348c:	8d 91       	ld	r24, X+
    348e:	9c 91       	ld	r25, X
    3490:	17 97       	sbiw	r26, 0x07	; 7
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	17 96       	adiw	r26, 0x07	; 7
    3496:	9c 93       	st	X, r25
    3498:	8e 93       	st	-X, r24
    349a:	16 97       	sbiw	r26, 0x06	; 6
    349c:	ce 01       	movw	r24, r28
    349e:	df 91       	pop	r29
    34a0:	cf 91       	pop	r28
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	08 95       	ret

000034a8 <__ultoa_invert>:
    34a8:	fa 01       	movw	r30, r20
    34aa:	aa 27       	eor	r26, r26
    34ac:	28 30       	cpi	r18, 0x08	; 8
    34ae:	51 f1       	breq	.+84     	; 0x3504 <__ultoa_invert+0x5c>
    34b0:	20 31       	cpi	r18, 0x10	; 16
    34b2:	81 f1       	breq	.+96     	; 0x3514 <__ultoa_invert+0x6c>
    34b4:	e8 94       	clt
    34b6:	6f 93       	push	r22
    34b8:	6e 7f       	andi	r22, 0xFE	; 254
    34ba:	6e 5f       	subi	r22, 0xFE	; 254
    34bc:	7f 4f       	sbci	r23, 0xFF	; 255
    34be:	8f 4f       	sbci	r24, 0xFF	; 255
    34c0:	9f 4f       	sbci	r25, 0xFF	; 255
    34c2:	af 4f       	sbci	r26, 0xFF	; 255
    34c4:	b1 e0       	ldi	r27, 0x01	; 1
    34c6:	3e d0       	rcall	.+124    	; 0x3544 <__ultoa_invert+0x9c>
    34c8:	b4 e0       	ldi	r27, 0x04	; 4
    34ca:	3c d0       	rcall	.+120    	; 0x3544 <__ultoa_invert+0x9c>
    34cc:	67 0f       	add	r22, r23
    34ce:	78 1f       	adc	r23, r24
    34d0:	89 1f       	adc	r24, r25
    34d2:	9a 1f       	adc	r25, r26
    34d4:	a1 1d       	adc	r26, r1
    34d6:	68 0f       	add	r22, r24
    34d8:	79 1f       	adc	r23, r25
    34da:	8a 1f       	adc	r24, r26
    34dc:	91 1d       	adc	r25, r1
    34de:	a1 1d       	adc	r26, r1
    34e0:	6a 0f       	add	r22, r26
    34e2:	71 1d       	adc	r23, r1
    34e4:	81 1d       	adc	r24, r1
    34e6:	91 1d       	adc	r25, r1
    34e8:	a1 1d       	adc	r26, r1
    34ea:	20 d0       	rcall	.+64     	; 0x352c <__ultoa_invert+0x84>
    34ec:	09 f4       	brne	.+2      	; 0x34f0 <__ultoa_invert+0x48>
    34ee:	68 94       	set
    34f0:	3f 91       	pop	r19
    34f2:	2a e0       	ldi	r18, 0x0A	; 10
    34f4:	26 9f       	mul	r18, r22
    34f6:	11 24       	eor	r1, r1
    34f8:	30 19       	sub	r19, r0
    34fa:	30 5d       	subi	r19, 0xD0	; 208
    34fc:	31 93       	st	Z+, r19
    34fe:	de f6       	brtc	.-74     	; 0x34b6 <__ultoa_invert+0xe>
    3500:	cf 01       	movw	r24, r30
    3502:	08 95       	ret
    3504:	46 2f       	mov	r20, r22
    3506:	47 70       	andi	r20, 0x07	; 7
    3508:	40 5d       	subi	r20, 0xD0	; 208
    350a:	41 93       	st	Z+, r20
    350c:	b3 e0       	ldi	r27, 0x03	; 3
    350e:	0f d0       	rcall	.+30     	; 0x352e <__ultoa_invert+0x86>
    3510:	c9 f7       	brne	.-14     	; 0x3504 <__ultoa_invert+0x5c>
    3512:	f6 cf       	rjmp	.-20     	; 0x3500 <__ultoa_invert+0x58>
    3514:	46 2f       	mov	r20, r22
    3516:	4f 70       	andi	r20, 0x0F	; 15
    3518:	40 5d       	subi	r20, 0xD0	; 208
    351a:	4a 33       	cpi	r20, 0x3A	; 58
    351c:	18 f0       	brcs	.+6      	; 0x3524 <__ultoa_invert+0x7c>
    351e:	49 5d       	subi	r20, 0xD9	; 217
    3520:	31 fd       	sbrc	r19, 1
    3522:	40 52       	subi	r20, 0x20	; 32
    3524:	41 93       	st	Z+, r20
    3526:	02 d0       	rcall	.+4      	; 0x352c <__ultoa_invert+0x84>
    3528:	a9 f7       	brne	.-22     	; 0x3514 <__ultoa_invert+0x6c>
    352a:	ea cf       	rjmp	.-44     	; 0x3500 <__ultoa_invert+0x58>
    352c:	b4 e0       	ldi	r27, 0x04	; 4
    352e:	a6 95       	lsr	r26
    3530:	97 95       	ror	r25
    3532:	87 95       	ror	r24
    3534:	77 95       	ror	r23
    3536:	67 95       	ror	r22
    3538:	ba 95       	dec	r27
    353a:	c9 f7       	brne	.-14     	; 0x352e <__ultoa_invert+0x86>
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	61 05       	cpc	r22, r1
    3540:	71 05       	cpc	r23, r1
    3542:	08 95       	ret
    3544:	9b 01       	movw	r18, r22
    3546:	ac 01       	movw	r20, r24
    3548:	0a 2e       	mov	r0, r26
    354a:	06 94       	lsr	r0
    354c:	57 95       	ror	r21
    354e:	47 95       	ror	r20
    3550:	37 95       	ror	r19
    3552:	27 95       	ror	r18
    3554:	ba 95       	dec	r27
    3556:	c9 f7       	brne	.-14     	; 0x354a <__ultoa_invert+0xa2>
    3558:	62 0f       	add	r22, r18
    355a:	73 1f       	adc	r23, r19
    355c:	84 1f       	adc	r24, r20
    355e:	95 1f       	adc	r25, r21
    3560:	a0 1d       	adc	r26, r0
    3562:	08 95       	ret

00003564 <__prologue_saves__>:
    3564:	2f 92       	push	r2
    3566:	3f 92       	push	r3
    3568:	4f 92       	push	r4
    356a:	5f 92       	push	r5
    356c:	6f 92       	push	r6
    356e:	7f 92       	push	r7
    3570:	8f 92       	push	r8
    3572:	9f 92       	push	r9
    3574:	af 92       	push	r10
    3576:	bf 92       	push	r11
    3578:	cf 92       	push	r12
    357a:	df 92       	push	r13
    357c:	ef 92       	push	r14
    357e:	ff 92       	push	r15
    3580:	0f 93       	push	r16
    3582:	1f 93       	push	r17
    3584:	cf 93       	push	r28
    3586:	df 93       	push	r29
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	ca 1b       	sub	r28, r26
    358e:	db 0b       	sbc	r29, r27
    3590:	0f b6       	in	r0, 0x3f	; 63
    3592:	f8 94       	cli
    3594:	de bf       	out	0x3e, r29	; 62
    3596:	0f be       	out	0x3f, r0	; 63
    3598:	cd bf       	out	0x3d, r28	; 61
    359a:	09 94       	ijmp

0000359c <__epilogue_restores__>:
    359c:	2a 88       	ldd	r2, Y+18	; 0x12
    359e:	39 88       	ldd	r3, Y+17	; 0x11
    35a0:	48 88       	ldd	r4, Y+16	; 0x10
    35a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    35a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    35a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    35a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    35aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    35ae:	b9 84       	ldd	r11, Y+9	; 0x09
    35b0:	c8 84       	ldd	r12, Y+8	; 0x08
    35b2:	df 80       	ldd	r13, Y+7	; 0x07
    35b4:	ee 80       	ldd	r14, Y+6	; 0x06
    35b6:	fd 80       	ldd	r15, Y+5	; 0x05
    35b8:	0c 81       	ldd	r16, Y+4	; 0x04
    35ba:	1b 81       	ldd	r17, Y+3	; 0x03
    35bc:	aa 81       	ldd	r26, Y+2	; 0x02
    35be:	b9 81       	ldd	r27, Y+1	; 0x01
    35c0:	ce 0f       	add	r28, r30
    35c2:	d1 1d       	adc	r29, r1
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	ed 01       	movw	r28, r26
    35d0:	08 95       	ret

000035d2 <_exit>:
    35d2:	f8 94       	cli

000035d4 <__stop_program>:
    35d4:	ff cf       	rjmp	.-2      	; 0x35d4 <__stop_program>
