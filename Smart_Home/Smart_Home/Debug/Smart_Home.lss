
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000042a  00800060  00003d70  00003e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  0080048a  0080048a  0000422e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000428c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007644  00000000  00000000  00004778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e9  00000000  00000000  0000bdbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003940  00000000  00000000  0000d1a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c64  00000000  00000000  00010ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015d8  00000000  00000000  0001174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000321f  00000000  00000000  00012d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00015f43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <__vector_4>
      14:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__vector_10>
      2c:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 14 	call	0x295e	; 0x295e <main>
      8a:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CheckTempForAc>:

void CheckTempForAc()
//this function is for cheking the temperature and turn on the AC if the temperature is above 28 and turn it off if the temperature is below 21
// this is the function that get called for tmr2 interrupt
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
      92:	6a e8       	ldi	r22, 0x8A	; 138
      94:	74 e0       	ldi	r23, 0x04	; 4
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
	if (local_temp > 28)
      9c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__data_end>
      a0:	8d 31       	cpi	r24, 0x1D	; 29
      a2:	30 f0       	brcs	.+12     	; 0xb0 <CheckTempForAc+0x1e>
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
      a4:	40 e0       	ldi	r20, 0x00	; 0
      a6:	62 e0       	ldi	r22, 0x02	; 2
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
      ae:	08 95       	ret
		
	}
	else if (local_temp <21)
      b0:	85 31       	cpi	r24, 0x15	; 21
      b2:	28 f4       	brcc	.+10     	; 0xbe <CheckTempForAc+0x2c>
	
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
      be:	08 95       	ret

000000c0 <HOME_voidInit>:

void HOME_voidInit(void)
{
	//Home initialization function is for the hardware initialization of the smart home system
	    // initialize the LCD
    LCD_voidInit();
      c0:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidInit>
	// initialize the PWM
	PWM_voidInitChannel_1A();
      c4:	0e 94 93 16 	call	0x2d26	; 0x2d26 <PWM_voidInitChannel_1A>
	PWM_voidInitChannel_1B();
      c8:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <PWM_voidInitChannel_1B>

	// initialize the EEPROM
	EEPROM_voidInit();
      cc:	0e 94 04 11 	call	0x2208	; 0x2208 <EEPROM_voidInit>
	
	// initialize the Door_Servo
	SERVO_voidInit(DIO_PORTD,DIO_PIN4);
      d0:	64 e0       	ldi	r22, 0x04	; 4
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 90 14 	call	0x2920	; 0x2920 <SERVO_voidInit>
	// reset door angle to 0
	SERVO_voidStartByAngle(0);
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 96 14 	call	0x292c	; 0x292c <SERVO_voidStartByAngle>

	// initialize the KPD
    KPD_voidInit();
      e2:	0e 94 b8 11 	call	0x2370	; 0x2370 <KPD_voidInit>

	// initialize the ADC
	ADC_voidInit(ADC_REFERENCE_INTRNAL);
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>

	// AC PIN
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
      f6:	41 e0       	ldi	r20, 0x01	; 1
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>

	// initialize the Buzzer
	BUZZER_voidInit(DIO_PORTD,DIO_PIN6);
     100:	66 e0       	ldi	r22, 0x06	; 6
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <BUZZER_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
     108:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
     10c:	41 e0       	ldi	r20, 0x01	; 1
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
     120:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
     124:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <TMR0_voidInit>
    // initialize the LEDs(1-5)
	//LED 1
    LED_voidInit(DIO_PORTD, DIO_PIN3);
     128:	63 e0       	ldi	r22, 0x03	; 3
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LED_voidInit>
	//LED 2
    LED_voidInit(DIO_PORTB, DIO_PIN0);
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LED_voidInit>
	//LED 3
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     138:	62 e0       	ldi	r22, 0x02	; 2
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LED_voidInit>
	//LED 4
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     140:	63 e0       	ldi	r22, 0x03	; 3
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LED_voidInit>
	//LED 5
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LED_voidInit>
	// Dimmer LED 6
	LED_voidInit(DIO_PORTD, DIO_PIN5);
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LED_voidInit>

	// initialize tmr2
	TMR2_voidInit();
     158:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <TMR2_voidInit>
	TMR2_SetCallBackCTC(CheckTempForAc);
     15c:	89 e4       	ldi	r24, 0x49	; 73
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 1f 18 	call	0x303e	; 0x303e <TMR2_SetCallBackCTC>
	TMR2_voidStart();
     164:	0e 94 11 18 	call	0x3022	; 0x3022 <TMR2_voidStart>
     168:	08 95       	ret

0000016a <HOME_voidLocalGetUserAndPass>:

}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     178:	00 97       	sbiw	r24, 0x00	; 0
     17a:	09 f4       	brne	.+2      	; 0x17e <HOME_voidLocalGetUserAndPass+0x14>
     17c:	67 c0       	rjmp	.+206    	; 0x24c <HOME_voidLocalGetUserAndPass+0xe2>
     17e:	61 15       	cp	r22, r1
     180:	71 05       	cpc	r23, r1
     182:	09 f4       	brne	.+2      	; 0x186 <HOME_voidLocalGetUserAndPass+0x1c>
     184:	63 c0       	rjmp	.+198    	; 0x24c <HOME_voidLocalGetUserAndPass+0xe2>
     186:	7b 01       	movw	r14, r22
     188:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     18a:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     196:	81 e7       	ldi	r24, 0x71	; 113
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	82 e0       	ldi	r24, 0x02	; 2
     1a2:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     1a6:	83 e8       	ldi	r24, 0x83	; 131
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	83 ed       	ldi	r24, 0xD3	; 211
     1b2:	90 e3       	ldi	r25, 0x30	; 48
     1b4:	21 50       	subi	r18, 0x01	; 1
     1b6:	80 40       	sbci	r24, 0x00	; 0
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <HOME_voidLocalGetUserAndPass+0x4a>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <HOME_voidLocalGetUserAndPass+0x54>
     1be:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     1c0:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     1cc:	83 ea       	ldi	r24, 0xA3	; 163
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     1d4:	10 e0       	ldi	r17, 0x00	; 0
     1d6:	11 c0       	rjmp	.+34     	; 0x1fa <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1d8:	e6 01       	movw	r28, r12
     1da:	c1 0f       	add	r28, r17
     1dc:	d1 1d       	adc	r29, r1
     1de:	ce 01       	movw	r24, r28
     1e0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     1e4:	98 81       	ld	r25, Y
     1e6:	9f 3f       	cpi	r25, 0xFF	; 255
     1e8:	b9 f3       	breq	.-18     	; 0x1d8 <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     1ea:	61 2f       	mov	r22, r17
     1ec:	82 e0       	ldi	r24, 0x02	; 2
     1ee:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1f2:	88 81       	ld	r24, Y
     1f4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     1f8:	1f 5f       	subi	r17, 0xFF	; 255
     1fa:	17 30       	cpi	r17, 0x07	; 7
     1fc:	68 f3       	brcs	.-38     	; 0x1d8 <HOME_voidLocalGetUserAndPass+0x6e>
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
		copy_pu8LocalUserName[Local_u8UserNameLengthCounter]='\0';
     1fe:	f6 01       	movw	r30, r12
     200:	e1 0f       	add	r30, r17
     202:	f1 1d       	adc	r31, r1
     204:	10 82       	st	Z, r1
		//display request for pass
		LCD_voidClear();
     206:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     212:	81 e9       	ldi	r24, 0x91	; 145
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	11 c0       	rjmp	.+34     	; 0x240 <HOME_voidLocalGetUserAndPass+0xd6>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     21e:	e7 01       	movw	r28, r14
     220:	c1 0f       	add	r28, r17
     222:	d1 1d       	adc	r29, r1
     224:	ce 01       	movw	r24, r28
     226:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     22a:	88 81       	ld	r24, Y
     22c:	8f 3f       	cpi	r24, 0xFF	; 255
     22e:	b9 f3       	breq	.-18     	; 0x21e <HOME_voidLocalGetUserAndPass+0xb4>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     230:	61 2f       	mov	r22, r17
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     238:	88 81       	ld	r24, Y
     23a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     23e:	1f 5f       	subi	r17, 0xFF	; 255
     240:	17 30       	cpi	r17, 0x07	; 7
     242:	68 f3       	brcs	.-38     	; 0x21e <HOME_voidLocalGetUserAndPass+0xb4>
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
			}
			copy_pu8LocalUserPass[Local_u8UserPassCounter]='\0';
     244:	f7 01       	movw	r30, r14
     246:	e1 0f       	add	r30, r17
     248:	f1 1d       	adc	r31, r1
     24a:	10 82       	st	Z, r1
		//error massage
	}
			
	
		
}
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	1f 91       	pop	r17
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	08 95       	ret

0000025c <HOME_voidRemoteGetUserAndPass>:



void HOME_voidRemoteGetUserAndPass(u8* copy_pu8RemoteUserName,u8* copy_pu8RemoteUserPass)
{
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
	if((copy_pu8RemoteUserName!=NULL)&&(copy_pu8RemoteUserPass!=NULL))
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	09 f4       	brne	.+2      	; 0x270 <HOME_voidRemoteGetUserAndPass+0x14>
     26e:	64 c0       	rjmp	.+200    	; 0x338 <HOME_voidRemoteGetUserAndPass+0xdc>
     270:	61 15       	cp	r22, r1
     272:	71 05       	cpc	r23, r1
     274:	09 f4       	brne	.+2      	; 0x278 <HOME_voidRemoteGetUserAndPass+0x1c>
     276:	60 c0       	rjmp	.+192    	; 0x338 <HOME_voidRemoteGetUserAndPass+0xdc>
     278:	8b 01       	movw	r16, r22
     27a:	7c 01       	movw	r14, r24
		u8 Local_u8UserNameLengthCounter=0,Local_u8UserPassCounter=0;
	
		
	
		//dis request for user name
		BL_voidTxString	("User Name:");
     27c:	83 ea       	ldi	r24, 0xA3	; 163
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		BL_voidTxChar('\r');
     284:	8d e0       	ldi	r24, 0x0D	; 13
     286:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     28a:	c0 e0       	ldi	r28, 0x00	; 0
     28c:	0b c0       	rjmp	.+22     	; 0x2a4 <HOME_voidRemoteGetUserAndPass+0x48>
		{
			
			
			BL_voidRxChar(&copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     28e:	67 01       	movw	r12, r14
     290:	cc 0e       	add	r12, r28
     292:	d1 1c       	adc	r13, r1
     294:	c6 01       	movw	r24, r12
     296:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
			if(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]=='#')
     29a:	f6 01       	movw	r30, r12
     29c:	80 81       	ld	r24, Z
     29e:	83 32       	cpi	r24, 0x23	; 35
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <HOME_voidRemoteGetUserAndPass+0x4c>
		//dis request for user name
		BL_voidTxString	("User Name:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     2a2:	cf 5f       	subi	r28, 0xFF	; 255
     2a4:	c8 30       	cpi	r28, 0x08	; 8
     2a6:	98 f3       	brcs	.-26     	; 0x28e <HOME_voidRemoteGetUserAndPass+0x32>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
     2a8:	f7 01       	movw	r30, r14
     2aa:	ec 0f       	add	r30, r28
     2ac:	f1 1d       	adc	r31, r1
     2ae:	10 82       	st	Z, r1
		BL_voidTxString("Entered User Name:");
     2b0:	8b e9       	ldi	r24, 0x9B	; 155
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		BL_voidTxChar('\r');
     2b8:	8d e0       	ldi	r24, 0x0D	; 13
     2ba:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     2be:	c0 e0       	ldi	r28, 0x00	; 0
     2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <HOME_voidRemoteGetUserAndPass+0x74>
		{
			
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     2c2:	f7 01       	movw	r30, r14
     2c4:	ec 0f       	add	r30, r28
     2c6:	f1 1d       	adc	r31, r1
     2c8:	80 81       	ld	r24, Z
     2ca:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
		BL_voidTxString("Entered User Name:");
		BL_voidTxChar('\r');
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     2ce:	cf 5f       	subi	r28, 0xFF	; 255
     2d0:	c8 30       	cpi	r28, 0x08	; 8
     2d2:	b8 f3       	brcs	.-18     	; 0x2c2 <HOME_voidRemoteGetUserAndPass+0x66>
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
			
		}
		
		BL_voidTxChar('\r');
     2d4:	8d e0       	ldi	r24, 0x0D	; 13
     2d6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		
		
		//display request for pass
		BL_voidTxString	("Password:");
     2da:	8e ea       	ldi	r24, 0xAE	; 174
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		BL_voidTxChar('\r');
     2e2:	8d e0       	ldi	r24, 0x0D	; 13
     2e4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	0b c0       	rjmp	.+22     	; 0x302 <HOME_voidRemoteGetUserAndPass+0xa6>
		{
			
			BL_voidRxChar(&copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     2ec:	78 01       	movw	r14, r16
     2ee:	ec 0e       	add	r14, r28
     2f0:	f1 1c       	adc	r15, r1
     2f2:	c7 01       	movw	r24, r14
     2f4:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
			if(copy_pu8RemoteUserPass[Local_u8UserPassCounter]=='#')
     2f8:	f7 01       	movw	r30, r14
     2fa:	80 81       	ld	r24, Z
     2fc:	83 32       	cpi	r24, 0x23	; 35
     2fe:	19 f0       	breq	.+6      	; 0x306 <HOME_voidRemoteGetUserAndPass+0xaa>
		//display request for pass
		BL_voidTxString	("Password:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     300:	cf 5f       	subi	r28, 0xFF	; 255
     302:	c9 30       	cpi	r28, 0x09	; 9
     304:	98 f3       	brcs	.-26     	; 0x2ec <HOME_voidRemoteGetUserAndPass+0x90>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
     306:	f8 01       	movw	r30, r16
     308:	ec 0f       	add	r30, r28
     30a:	f1 1d       	adc	r31, r1
     30c:	10 82       	st	Z, r1
		BL_voidTxString("Entered Pass:");
     30e:	88 eb       	ldi	r24, 0xB8	; 184
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		BL_voidTxChar('\r');
     316:	8d e0       	ldi	r24, 0x0D	; 13
     318:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     31c:	c0 e0       	ldi	r28, 0x00	; 0
     31e:	07 c0       	rjmp	.+14     	; 0x32e <HOME_voidRemoteGetUserAndPass+0xd2>
		{
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     320:	f8 01       	movw	r30, r16
     322:	ec 0f       	add	r30, r28
     324:	f1 1d       	adc	r31, r1
     326:	80 81       	ld	r24, Z
     328:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
		BL_voidTxString("Entered Pass:");
		BL_voidTxChar('\r');
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     32c:	cf 5f       	subi	r28, 0xFF	; 255
     32e:	c8 30       	cpi	r28, 0x08	; 8
     330:	b8 f3       	brcs	.-18     	; 0x320 <HOME_voidRemoteGetUserAndPass+0xc4>
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
		
		}

		BL_voidTxChar('\r');
     332:	8d e0       	ldi	r24, 0x0D	; 13
     334:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		//error massage
	}
			
	
		
}
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	cf 90       	pop	r12
     346:	08 95       	ret

00000348 <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserStatus)
{
     348:	8f 92       	push	r8
     34a:	9f 92       	push	r9
     34c:	af 92       	push	r10
     34e:	bf 92       	push	r11
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
     364:	a0 97       	sbiw	r28, 0x20	; 32
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
	//page 12 to 21 for remote user name and password the first page for user name the followed by password
	//word 180 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserStatus!=NULL)
     370:	61 15       	cp	r22, r1
     372:	71 05       	cpc	r23, r1
     374:	09 f4       	brne	.+2      	; 0x378 <HOME_voidCheckUserAndPass+0x30>
     376:	c0 c1       	rjmp	.+896    	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     378:	4b 01       	movw	r8, r22
		u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,
		Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,Local_u8FireAnAlarm=0,Local_u8PagesCounter,
		Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,LocaL_u8RightEntery=0;
		
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     37a:	81 30       	cpi	r24, 0x01	; 1
     37c:	09 f0       	breq	.+2      	; 0x380 <HOME_voidCheckUserAndPass+0x38>
     37e:	ed c0       	rjmp	.+474    	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
     380:	db c0       	rjmp	.+438    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     382:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     384:	be 01       	movw	r22, r28
     386:	6f 5e       	subi	r22, 0xEF	; 239
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	ce 01       	movw	r24, r28
     38c:	49 96       	adiw	r24, 0x19	; 25
     38e:	0e 94 b5 00 	call	0x16a	; 0x16a <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     392:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     394:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     396:	00 e0       	ldi	r16, 0x00	; 0
     398:	60 c0       	rjmp	.+192    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     39a:	e0 2e       	mov	r14, r16
     39c:	ee 0c       	add	r14, r14
     39e:	ee 0c       	add	r14, r14
     3a0:	ee 0c       	add	r14, r14
     3a2:	ee 0c       	add	r14, r14
     3a4:	f1 2c       	mov	r15, r1
     3a6:	ae 01       	movw	r20, r28
     3a8:	47 5f       	subi	r20, 0xF7	; 247
     3aa:	5f 4f       	sbci	r21, 0xFF	; 255
     3ac:	68 e0       	ldi	r22, 0x08	; 8
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	c7 01       	movw	r24, r14
     3b2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     3b6:	ae 01       	movw	r20, r28
     3b8:	4f 5f       	subi	r20, 0xFF	; 255
     3ba:	5f 4f       	sbci	r21, 0xFF	; 255
     3bc:	68 e0       	ldi	r22, 0x08	; 8
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	c7 01       	movw	r24, r14
     3c2:	08 96       	adiw	r24, 0x08	; 8
     3c4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     3c8:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <HOME_voidCheckUserAndPass+0xae>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     3ce:	82 2f       	mov	r24, r18
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	e9 e1       	ldi	r30, 0x19	; 25
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	ec 0f       	add	r30, r28
     3d8:	fd 1f       	adc	r31, r29
     3da:	e8 0f       	add	r30, r24
     3dc:	f9 1f       	adc	r31, r25
     3de:	30 81       	ld	r19, Z
     3e0:	e9 e0       	ldi	r30, 0x09	; 9
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	ec 0f       	add	r30, r28
     3e6:	fd 1f       	adc	r31, r29
     3e8:	e8 0f       	add	r30, r24
     3ea:	f9 1f       	adc	r31, r25
     3ec:	80 81       	ld	r24, Z
     3ee:	38 13       	cpse	r19, r24
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <HOME_voidCheckUserAndPass+0xac>
						{
							Local_u8NameByteCheck++;
     3f2:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	28 30       	cpi	r18, 0x08	; 8
     3f8:	50 f3       	brcs	.-44     	; 0x3ce <HOME_voidCheckUserAndPass+0x86>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     3fa:	48 30       	cpi	r20, 0x08	; 8
     3fc:	61 f5       	brne	.+88     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     3fe:	15 c0       	rjmp	.+42     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     400:	82 2f       	mov	r24, r18
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	e1 e1       	ldi	r30, 0x11	; 17
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	ec 0f       	add	r30, r28
     40a:	fd 1f       	adc	r31, r29
     40c:	e8 0f       	add	r30, r24
     40e:	f9 1f       	adc	r31, r25
     410:	30 81       	ld	r19, Z
     412:	e1 e0       	ldi	r30, 0x01	; 1
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	ec 0f       	add	r30, r28
     418:	fd 1f       	adc	r31, r29
     41a:	e8 0f       	add	r30, r24
     41c:	f9 1f       	adc	r31, r25
     41e:	80 81       	ld	r24, Z
     420:	38 13       	cpse	r19, r24
     422:	01 c0       	rjmp	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
							{
								Local_u8PassByteCheck++;
     424:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     426:	2f 5f       	subi	r18, 0xFF	; 255
     428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	28 30       	cpi	r18, 0x08	; 8
     430:	38 f3       	brcs	.-50     	; 0x400 <__EEPROM_REGION_LENGTH__>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     432:	48 30       	cpi	r20, 0x08	; 8
     434:	71 f4       	brne	.+28     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     436:	05 30       	cpi	r16, 0x05	; 5
     438:	31 f4       	brne	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	f4 01       	movw	r30, r8
     43e:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     440:	dd 24       	eor	r13, r13
     442:	d3 94       	inc	r13
     444:	0d c0       	rjmp	.+26     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_LOCAL_USER;
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	f4 01       	movw	r30, r8
     44a:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     44c:	dd 24       	eor	r13, r13
     44e:	d3 94       	inc	r13
     450:	07 c0       	rjmp	.+14     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     452:	b3 94       	inc	r11
     454:	01 c0       	rjmp	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     456:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     458:	0f 5f       	subi	r16, 0xFF	; 255
     45a:	06 30       	cpi	r16, 0x06	; 6
     45c:	08 f4       	brcc	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     45e:	9d cf       	rjmp	.-198    	; 0x39a <HOME_voidCheckUserAndPass+0x52>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	df 12       	cpse	r13, r31
     464:	17 c0       	rjmp	.+46     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
				{
					LCD_voidClear();
     466:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS PERMITED");
     472:	86 ec       	ldi	r24, 0xC6	; 198
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
					 global_accessType = accessPermited;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <global_accessType>
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	89 e6       	ldi	r24, 0x69	; 105
     484:	98 e1       	ldi	r25, 0x18	; 24
     486:	21 50       	subi	r18, 0x01	; 1
     488:	80 40       	sbci	r24, 0x00	; 0
     48a:	90 40       	sbci	r25, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     490:	00 00       	nop
     492:	58 c0       	rjmp	.+176    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
					_delay_ms(500);
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     494:	e6 e0       	ldi	r30, 0x06	; 6
     496:	ce 12       	cpse	r12, r30
     498:	26 c0       	rjmp	.+76     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
				{
					LCD_voidClear();
     49a:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     4a6:	86 ed       	ldi	r24, 0xD6	; 214
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong User Name");
     4b6:	84 ee       	ldi	r24, 0xE4	; 228
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     4be:	12 30       	cpi	r17, 0x02	; 2
     4c0:	c9 f1       	breq	.+114    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
     4c2:	ff ef       	ldi	r31, 0xFF	; 255
     4c4:	23 ed       	ldi	r18, 0xD3	; 211
     4c6:	80 e3       	ldi	r24, 0x30	; 48
     4c8:	f1 50       	subi	r31, 0x01	; 1
     4ca:	20 40       	sbci	r18, 0x00	; 0
     4cc:	80 40       	sbci	r24, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4d2:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     4dc:	84 ef       	ldi	r24, 0xF4	; 244
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
     4e4:	27 c0       	rjmp	.+78     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     4e6:	bb 20       	and	r11, r11
     4e8:	29 f1       	breq	.+74     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
				{
					LCD_voidClear();
     4ea:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     4f6:	86 ed       	ldi	r24, 0xD6	; 214
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong Password");
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     50e:	12 30       	cpi	r17, 0x02	; 2
     510:	89 f0       	breq	.+34     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	e3 ed       	ldi	r30, 0xD3	; 211
     516:	f0 e3       	ldi	r31, 0x30	; 48
     518:	91 50       	subi	r25, 0x01	; 1
     51a:	e0 40       	sbci	r30, 0x00	; 0
     51c:	f0 40       	sbci	r31, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     520:	00 c0       	rjmp	.+0      	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
     522:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     52c:	84 ef       	ldi	r24, 0xF4	; 244
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
			u8 local_u8EnteredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     534:	1f 5f       	subi	r17, 0xFF	; 255
     536:	03 c0       	rjmp	.+6      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     538:	d1 2c       	mov	r13, r1
     53a:	a1 2c       	mov	r10, r1
     53c:	10 e0       	ldi	r17, 0x00	; 0
     53e:	13 30       	cpi	r17, 0x03	; 3
     540:	08 f4       	brcc	.+2      	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
     542:	1f cf       	rjmp	.-450    	; 0x382 <HOME_voidCheckUserAndPass+0x3a>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     544:	23 e0       	ldi	r18, 0x03	; 3
     546:	a2 12       	cpse	r10, r18
     548:	d7 c0       	rjmp	.+430    	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     54a:	d1 10       	cpse	r13, r1
     54c:	d5 c0       	rjmp	.+426    	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
			{
				global_accessType = accessDenied;
     54e:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <global_accessType>
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     552:	85 e0       	ldi	r24, 0x05	; 5
     554:	f4 01       	movw	r30, r8
     556:	80 83       	st	Z, r24
     558:	cf c0       	rjmp	.+414    	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
			}
		}
		
		else if(copy_u8AccessType==HOME_REMOTE_ACCESS)
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	09 f0       	breq	.+2      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     55e:	cc c0       	rjmp	.+408    	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     560:	bb c0       	rjmp	.+374    	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
     562:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				
				//dis request for use name and pass
				BL_voidTxString	("Please Enter User Name & Password ");
     564:	84 e1       	ldi	r24, 0x14	; 20
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxString("\n");
     56c:	87 e3       	ldi	r24, 0x37	; 55
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
     574:	be 01       	movw	r22, r28
     576:	6f 5e       	subi	r22, 0xEF	; 239
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	ce 01       	movw	r24, r28
     57c:	49 96       	adiw	r24, 0x19	; 25
     57e:	0e 94 2e 01 	call	0x25c	; 0x25c <HOME_voidRemoteGetUserAndPass>
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     582:	b1 2c       	mov	r11, r1
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     584:	c1 2c       	mov	r12, r1
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     586:	05 e0       	ldi	r16, 0x05	; 5
     588:	60 c0       	rjmp	.+192    	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from EEPROM
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
     58a:	e0 2e       	mov	r14, r16
     58c:	ee 0c       	add	r14, r14
     58e:	ee 0c       	add	r14, r14
     590:	ee 0c       	add	r14, r14
     592:	ee 0c       	add	r14, r14
     594:	f1 2c       	mov	r15, r1
     596:	ae 01       	movw	r20, r28
     598:	47 5f       	subi	r20, 0xF7	; 247
     59a:	5f 4f       	sbci	r21, 0xFF	; 255
     59c:	68 e0       	ldi	r22, 0x08	; 8
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	c7 01       	movw	r24, r14
     5a2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
     5a6:	ae 01       	movw	r20, r28
     5a8:	4f 5f       	subi	r20, 0xFF	; 255
     5aa:	5f 4f       	sbci	r21, 0xFF	; 255
     5ac:	68 e0       	ldi	r22, 0x08	; 8
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	c7 01       	movw	r24, r14
     5b2:	08 96       	adiw	r24, 0x08	; 8
     5b4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <EEPROM_voidSequentialRead>
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
				{
					Local_u8NameByteCheck=0;
     5b8:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
					{
						
						//check the byte stored with the entered	
						if(local_u8EnteredRemoteUserName[Local_u8NameByteCheckCounter]==local_u8StoredRemoteUserName[Local_u8NameByteCheckCounter])
     5be:	82 2f       	mov	r24, r18
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	e9 e1       	ldi	r30, 0x19	; 25
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	ec 0f       	add	r30, r28
     5c8:	fd 1f       	adc	r31, r29
     5ca:	e8 0f       	add	r30, r24
     5cc:	f9 1f       	adc	r31, r25
     5ce:	30 81       	ld	r19, Z
     5d0:	e9 e0       	ldi	r30, 0x09	; 9
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	ec 0f       	add	r30, r28
     5d6:	fd 1f       	adc	r31, r29
     5d8:	e8 0f       	add	r30, r24
     5da:	f9 1f       	adc	r31, r25
     5dc:	80 81       	ld	r24, Z
     5de:	38 13       	cpse	r19, r24
     5e0:	01 c0       	rjmp	.+2      	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
						{
							
							Local_u8NameByteCheck++;
     5e2:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     5e4:	2f 5f       	subi	r18, 0xFF	; 255
     5e6:	28 30       	cpi	r18, 0x08	; 8
     5e8:	50 f3       	brcs	.-44     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
							
							
						}
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     5ea:	48 30       	cpi	r20, 0x08	; 8
     5ec:	61 f5       	brne	.+88     	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
     5ee:	15 c0       	rjmp	.+42     	; 0x61a <__EEPROM_REGION_LENGTH__+0x21a>
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							//check the byte stored with the entered
							if(local_u8EnteredRemoteUserPass[Local_u8PassByteCheckCounter]==local_u8StoredRemoteUserPass[Local_u8PassByteCheckCounter])
     5f0:	82 2f       	mov	r24, r18
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	e1 e1       	ldi	r30, 0x11	; 17
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	ec 0f       	add	r30, r28
     5fa:	fd 1f       	adc	r31, r29
     5fc:	e8 0f       	add	r30, r24
     5fe:	f9 1f       	adc	r31, r25
     600:	30 81       	ld	r19, Z
     602:	e1 e0       	ldi	r30, 0x01	; 1
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	ec 0f       	add	r30, r28
     608:	fd 1f       	adc	r31, r29
     60a:	e8 0f       	add	r30, r24
     60c:	f9 1f       	adc	r31, r25
     60e:	80 81       	ld	r24, Z
     610:	38 13       	cpse	r19, r24
     612:	01 c0       	rjmp	.+2      	; 0x616 <__EEPROM_REGION_LENGTH__+0x216>
							{
								Local_u8PassByteCheck++;
     614:	4f 5f       	subi	r20, 0xFF	; 255
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	02 c0       	rjmp	.+4      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	28 30       	cpi	r18, 0x08	; 8
     620:	38 f3       	brcs	.-50     	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
								
							}
									
						}
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     622:	48 30       	cpi	r20, 0x08	; 8
     624:	71 f4       	brne	.+28     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     626:	05 30       	cpi	r16, 0x05	; 5
     628:	31 f4       	brne	.+12     	; 0x636 <__EEPROM_REGION_LENGTH__+0x236>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	f4 01       	movw	r30, r8
     62e:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     630:	dd 24       	eor	r13, r13
     632:	d3 94       	inc	r13
     634:	0d c0       	rjmp	.+26     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_REMOTE_USER;
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	f4 01       	movw	r30, r8
     63a:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     63c:	dd 24       	eor	r13, r13
     63e:	d3 94       	inc	r13
     640:	07 c0       	rjmp	.+14     	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     642:	b3 94       	inc	r11
     644:	01 c0       	rjmp	.+2      	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
						
						
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     646:	c3 94       	inc	r12
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     648:	0f 5f       	subi	r16, 0xFF	; 255
     64a:	0b 30       	cpi	r16, 0x0B	; 11
     64c:	08 f4       	brcc	.+2      	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
     64e:	9d cf       	rjmp	.-198    	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
						
					}
						
				}
				//case of wright entry
				if(LocaL_u8RightEntery==1)
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	df 12       	cpse	r13, r31
     654:	0b c0       	rjmp	.+22     	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
				{
					
					BL_voidTxString	("ACCESS PERMITED");
     656:	86 ec       	ldi	r24, 0xC6	; 198
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     65e:	8d e0       	ldi	r24, 0x0D	; 13
     660:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					global_accessType = accessPermited;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 c4 04 	sts	0x04C4, r24	; 0x8004c4 <global_accessType>
					break;
     66a:	3c c0       	rjmp	.+120    	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
				}
				//is the entery was wrong 
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     66c:	26 e0       	ldi	r18, 0x06	; 6
     66e:	c2 12       	cpse	r12, r18
     670:	18 c0       	rjmp	.+48     	; 0x6a2 <__EEPROM_REGION_LENGTH__+0x2a2>
				{
					BL_voidTxString	("ACCESS DENIED");
     672:	86 ed       	ldi	r24, 0xD6	; 214
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     67a:	8d e0       	ldi	r24, 0x0D	; 13
     67c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidTxString	("Wrong User Name");
     680:	84 ee       	ldi	r24, 0xE4	; 228
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     688:	8d e0       	ldi	r24, 0x0D	; 13
     68a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     68e:	12 30       	cpi	r17, 0x02	; 2
     690:	09 f1       	breq	.+66     	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
					{	
						
						BL_voidTxString	("Please Try Again");
     692:	84 ef       	ldi	r24, 0xF4	; 244
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
						BL_voidTxChar('\r');
     69a:	8d e0       	ldi	r24, 0x0D	; 13
     69c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
     6a0:	19 c0       	rjmp	.+50     	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
						
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     6a2:	bb 20       	and	r11, r11
     6a4:	b9 f0       	breq	.+46     	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
				{
					BL_voidTxString	("ACCESS DENIED");
     6a6:	86 ed       	ldi	r24, 0xD6	; 214
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     6ae:	8d e0       	ldi	r24, 0x0D	; 13
     6b0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidTxString	("Wrong Password");
     6b4:	85 e0       	ldi	r24, 0x05	; 5
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     6bc:	8d e0       	ldi	r24, 0x0D	; 13
     6be:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
										
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     6c2:	12 30       	cpi	r17, 0x02	; 2
     6c4:	39 f0       	breq	.+14     	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
					{
						BL_voidTxString	("Please Try Again");
     6c6:	84 ef       	ldi	r24, 0xF4	; 244
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
						BL_voidTxChar('\r');
     6ce:	8d e0       	ldi	r24, 0x0D	; 13
     6d0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
			u8 local_u8EnteredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8RemoteUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     6d4:	1f 5f       	subi	r17, 0xFF	; 255
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
     6d8:	d1 2c       	mov	r13, r1
     6da:	a1 2c       	mov	r10, r1
     6dc:	10 e0       	ldi	r17, 0x00	; 0
     6de:	13 30       	cpi	r17, 0x03	; 3
     6e0:	08 f4       	brcc	.+2      	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
     6e2:	3f cf       	rjmp	.-386    	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
					}
				}
				
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	a8 12       	cpse	r10, r24
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     6ea:	d1 10       	cpse	r13, r1
     6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
			{
				global_accessType = accessDenied;
     6ee:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <global_accessType>
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	f4 01       	movw	r30, r8
     6f6:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
}
     6f8:	a0 96       	adiw	r28, 0x20	; 32
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	bf 90       	pop	r11
     716:	af 90       	pop	r10
     718:	9f 90       	pop	r9
     71a:	8f 90       	pop	r8
     71c:	08 95       	ret

0000071e <HOME_voidChangeUserNameAndPass>:

void HOME_voidChangeUserNameAndPass(void)
{
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
     72e:	e0 97       	sbiw	r28, 0x30	; 48
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
	
	
	//dis request for use name and pass
	BL_voidTxString	("Please Enter User Name & Password u want to change");
     73a:	89 e3       	ldi	r24, 0x39	; 57
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxString("\r");
     742:	8c e6       	ldi	r24, 0x6C	; 108
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
     74a:	be 01       	movw	r22, r28
     74c:	67 5f       	subi	r22, 0xF7	; 247
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	ce 01       	movw	r24, r28
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	0e 94 2e 01 	call	0x25c	; 0x25c <HOME_voidRemoteGetUserAndPass>
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     758:	10 e0       	ldi	r17, 0x00	; 0
     75a:	51 c0       	rjmp	.+162    	; 0x7fe <HOME_voidChangeUserNameAndPass+0xe0>
	{
		Local_u8NameByteCheck=0;
		Local_u8PassByteCheck=0;
		
		//skip admin page
		if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     75c:	15 30       	cpi	r17, 0x05	; 5
     75e:	09 f4       	brne	.+2      	; 0x762 <HOME_voidChangeUserNameAndPass+0x44>
     760:	4d c0       	rjmp	.+154    	; 0x7fc <HOME_voidChangeUserNameAndPass+0xde>
		{
			continue;
		}
		
		//get user name and pass from EEPROM
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
     762:	01 2f       	mov	r16, r17
     764:	02 95       	swap	r16
     766:	00 7f       	andi	r16, 0xF0	; 240
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
     768:	e0 2e       	mov	r14, r16
     76a:	f1 2c       	mov	r15, r1
     76c:	ae 01       	movw	r20, r28
     76e:	4f 5d       	subi	r20, 0xDF	; 223
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	68 e0       	ldi	r22, 0x08	; 8
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	c7 01       	movw	r24, r14
     778:	0e 94 78 11 	call	0x22f0	; 0x22f0 <EEPROM_voidSequentialRead>
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
     77c:	ae 01       	movw	r20, r28
     77e:	47 5d       	subi	r20, 0xD7	; 215
     780:	5f 4f       	sbci	r21, 0xFF	; 255
     782:	68 e0       	ldi	r22, 0x08	; 8
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	c7 01       	movw	r24, r14
     788:	08 96       	adiw	r24, 0x08	; 8
     78a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <EEPROM_voidSequentialRead>
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
	{
		Local_u8NameByteCheck=0;
     78e:	40 e0       	ldi	r20, 0x00	; 0
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	14 c0       	rjmp	.+40     	; 0x7bc <HOME_voidChangeUserNameAndPass+0x9e>
		{
			
			//check the byte stored with the entered	
			if(local_u8OldUserName[Local_u8NameByteCheckCounter]==local_u8SavedUserName[Local_u8NameByteCheckCounter])
     794:	82 2f       	mov	r24, r18
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	e1 e0       	ldi	r30, 0x01	; 1
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	ec 0f       	add	r30, r28
     79e:	fd 1f       	adc	r31, r29
     7a0:	e8 0f       	add	r30, r24
     7a2:	f9 1f       	adc	r31, r25
     7a4:	30 81       	ld	r19, Z
     7a6:	e1 e2       	ldi	r30, 0x21	; 33
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	ec 0f       	add	r30, r28
     7ac:	fd 1f       	adc	r31, r29
     7ae:	e8 0f       	add	r30, r24
     7b0:	f9 1f       	adc	r31, r25
     7b2:	80 81       	ld	r24, Z
     7b4:	38 13       	cpse	r19, r24
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <HOME_voidChangeUserNameAndPass+0x9c>
			{
				
				Local_u8NameByteCheck++;
     7b8:	4f 5f       	subi	r20, 0xFF	; 255
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     7ba:	2f 5f       	subi	r18, 0xFF	; 255
     7bc:	28 30       	cpi	r18, 0x08	; 8
     7be:	50 f3       	brcs	.-44     	; 0x794 <HOME_voidChangeUserNameAndPass+0x76>
				
			}
			
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     7c0:	48 30       	cpi	r20, 0x08	; 8
     7c2:	e1 f4       	brne	.+56     	; 0x7fc <HOME_voidChangeUserNameAndPass+0xde>
     7c4:	15 c0       	rjmp	.+42     	; 0x7f0 <HOME_voidChangeUserNameAndPass+0xd2>
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
			{
				//check the byte stored with the entered
				if(local_u8OldUserPass[Local_u8PassByteCheckCounter]==local_u8SavedUserPass[Local_u8PassByteCheckCounter])
     7c6:	82 2f       	mov	r24, r18
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	e9 e0       	ldi	r30, 0x09	; 9
     7cc:	f0 e0       	ldi	r31, 0x00	; 0
     7ce:	ec 0f       	add	r30, r28
     7d0:	fd 1f       	adc	r31, r29
     7d2:	e8 0f       	add	r30, r24
     7d4:	f9 1f       	adc	r31, r25
     7d6:	30 81       	ld	r19, Z
     7d8:	e9 e2       	ldi	r30, 0x29	; 41
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	ec 0f       	add	r30, r28
     7de:	fd 1f       	adc	r31, r29
     7e0:	e8 0f       	add	r30, r24
     7e2:	f9 1f       	adc	r31, r25
     7e4:	80 81       	ld	r24, Z
     7e6:	38 13       	cpse	r19, r24
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <HOME_voidChangeUserNameAndPass+0xce>
				{
					Local_u8PassByteCheck++;
     7ea:	4f 5f       	subi	r20, 0xFF	; 255
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     7ec:	2f 5f       	subi	r18, 0xFF	; 255
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <HOME_voidChangeUserNameAndPass+0xd6>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	28 30       	cpi	r18, 0x08	; 8
     7f6:	38 f3       	brcs	.-50     	; 0x7c6 <HOME_voidChangeUserNameAndPass+0xa8>
				}
						
			}
			
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     7f8:	48 30       	cpi	r20, 0x08	; 8
     7fa:	31 f0       	breq	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     7fc:	1f 5f       	subi	r17, 0xFF	; 255
     7fe:	1b 30       	cpi	r17, 0x0B	; 11
     800:	08 f4       	brcc	.+2      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     802:	ac cf       	rjmp	.-168    	; 0x75c <HOME_voidChangeUserNameAndPass+0x3e>
{
	u8 local_u8OldUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8OldUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8TempUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8TempUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8SavedUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8SavedUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	01 c0       	rjmp	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
			{
				
			
				LocaL_u8RightEntery=1;
     808:	81 e0       	ldi	r24, 0x01	; 1
		}
			
	}
	
	//case of wright entry
	if(LocaL_u8RightEntery==1)
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	21 f5       	brne	.+72     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
	{
		
		BL_voidTxString	("Please Enter The new User And Pass");
     80e:	8e e6       	ldi	r24, 0x6E	; 110
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		BL_voidTxChar('\r');
     816:	8d e0       	ldi	r24, 0x0D	; 13
     818:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		//get New user name and pass from BL
		HOME_voidRemoteGetUserAndPass(&local_u8TempUserName,&local_u8TempUserPass);
     81c:	be 01       	movw	r22, r28
     81e:	67 5e       	subi	r22, 0xE7	; 231
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	ce 01       	movw	r24, r28
     824:	41 96       	adiw	r24, 0x11	; 17
     826:	0e 94 2e 01 	call	0x25c	; 0x25c <HOME_voidRemoteGetUserAndPass>
		//write the new user name & pass in EEPROM
		EEPROM_voidWritePage(Local_u8UserNameLocation,&local_u8TempUserName);
     82a:	10 e0       	ldi	r17, 0x00	; 0
     82c:	be 01       	movw	r22, r28
     82e:	6f 5e       	subi	r22, 0xEF	; 239
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	c8 01       	movw	r24, r16
     834:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>
		EEPROM_voidWritePage((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),&local_u8TempUserPass);
     838:	be 01       	movw	r22, r28
     83a:	67 5e       	subi	r22, 0xE7	; 231
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	c8 01       	movw	r24, r16
     840:	08 96       	adiw	r24, 0x08	; 8
     842:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>
		BL_voidTxString	("User Data Changed Successfully");
     846:	81 e9       	ldi	r24, 0x91	; 145
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		BL_voidTxChar('\r');
     84e:	8d e0       	ldi	r24, 0x0D	; 13
     850:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
     854:	07 c0       	rjmp	.+14     	; 0x864 <__stack+0x5>
	}
	//is the entery was wrong 
	else 
	{

		BL_voidTxString	("Wrong User Name or password");
     856:	80 eb       	ldi	r24, 0xB0	; 176
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		BL_voidTxChar('\r');
     85e:	8d e0       	ldi	r24, 0x0D	; 13
     860:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>

	}

	
	
}
     864:	e0 96       	adiw	r28, 0x30	; 48
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	08 95       	ret

0000087e <HOME_voidFireAnALarm>:


void HOME_voidFireAnALarm(u8 copy_pu8UserStatus)
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	00 d0       	rcall	.+0      	; 0x884 <HOME_voidFireAnALarm+0x6>
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CheckAlarm,Local_u8ResetValue;
	
	// fire alarm if the user entry failed
	if(copy_pu8UserStatus==HOME_LOGIN_FAILED)
     888:	85 30       	cpi	r24, 0x05	; 5
     88a:	29 f4       	brne	.+10     	; 0x896 <HOME_voidFireAnALarm+0x18>
	{
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_VALUE);
     88c:	6f ef       	ldi	r22, 0xFF	; 255
     88e:	84 eb       	ldi	r24, 0xB4	; 180
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 07 11 	call	0x220e	; 0x220e <EEPROM_voidWriteByte>
	}
	
	//check alarm status
	EEPROM_voidReadByte(HOME_ALARM_LOCATION,&Local_u8CheckAlarm);
     896:	be 01       	movw	r22, r28
     898:	6f 5f       	subi	r22, 0xFF	; 255
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	84 eb       	ldi	r24, 0xB4	; 180
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 50 11 	call	0x22a0	; 0x22a0 <EEPROM_voidReadByte>
	
	//block system if there is an alarm
	if(Local_u8CheckAlarm==HOME_ALARM_VALUE)
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8f 3f       	cpi	r24, 0xFF	; 255
     8a8:	29 f5       	brne	.+74     	; 0x8f4 <HOME_voidFireAnALarm+0x76>
	{
		while(1)
		{
			BL_voidTxString	("ACCESS DENIED");
     8aa:	86 ed       	ldi	r24, 0xD6	; 214
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
			BL_voidTxChar('\r');
     8b2:	8d e0       	ldi	r24, 0x0D	; 13
     8b4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>

			BUZZER_voidOn(DIO_PORTD,DIO_PIN6);
     8b8:	66 e0       	ldi	r22, 0x06	; 6
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <BUZZER_voidOn>
			
			LCD_voidClear();
     8c0:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
			LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayString("ACCESS DENIED");
     8cc:	86 ed       	ldi	r24, 0xD6	; 214
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
			
			//if the user enter # end alarm
			BL_voidRxChar(&Local_u8ResetValue);
     8d4:	ce 01       	movw	r24, r28
     8d6:	02 96       	adiw	r24, 0x02	; 2
     8d8:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
			if(Local_u8ResetValue=='#')
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	83 32       	cpi	r24, 0x23	; 35
     8e0:	21 f7       	brne	.-56     	; 0x8aa <HOME_voidFireAnALarm+0x2c>
			{
				BUZZER_voidOff(DIO_PORTD,DIO_PIN6);
     8e2:	66 e0       	ldi	r22, 0x06	; 6
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	0e 94 00 11 	call	0x2200	; 0x2200 <BUZZER_voidOff>
				break;
			}
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	84 eb       	ldi	r24, 0xB4	; 180
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 07 11 	call	0x220e	; 0x220e <EEPROM_voidWriteByte>
	}
}
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <GetUserType>:
}

void GetUserType(void)
//this function is to check if user is connecting remotly or local 
{
	LCD_voidDisplayStringDelay((u8*)"Press # to login");
     8fe:	8c ec       	ldi	r24, 0xCC	; 204
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
	BL_voidTxString("Press # to login");
     906:	8c ec       	ldi	r24, 0xCC	; 204
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	while (Local_copyKPDValue == KPD_Not_Pressed && bluetooh_value != '#')
     90e:	08 c0       	rjmp	.+16     	; 0x920 <GetUserType+0x22>
	{
		BL_voidRxCharWithTimeout(&bluetooh_value);
     910:	8d e8       	ldi	r24, 0x8D	; 141
     912:	94 e0       	ldi	r25, 0x04	; 4
     914:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <BL_voidRxCharWithTimeout>
		KPD_voidGetValue(&Local_copyKPDValue);
     918:	84 e6       	ldi	r24, 0x64	; 100
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
void GetUserType(void)
//this function is to check if user is connecting remotly or local 
{
	LCD_voidDisplayStringDelay((u8*)"Press # to login");
	BL_voidTxString("Press # to login");
	while (Local_copyKPDValue == KPD_Not_Pressed && bluetooh_value != '#')
     920:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     924:	8f 3f       	cpi	r24, 0xFF	; 255
     926:	21 f4       	brne	.+8      	; 0x930 <GetUserType+0x32>
     928:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <bluetooh_value>
     92c:	93 32       	cpi	r25, 0x23	; 35
     92e:	81 f7       	brne	.-32     	; 0x910 <GetUserType+0x12>
	{
		BL_voidRxCharWithTimeout(&bluetooh_value);
		KPD_voidGetValue(&Local_copyKPDValue);
	}
	if (Local_copyKPDValue == "#")
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	8d 5d       	subi	r24, 0xDD	; 221
     934:	91 40       	sbci	r25, 0x01	; 1
     936:	71 f4       	brne	.+28     	; 0x954 <GetUserType+0x56>
	{
		BL_voidTxString("system is being used by loacl user");
     938:	8f ed       	ldi	r24, 0xDF	; 223
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
		HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
     940:	6b e9       	ldi	r22, 0x9B	; 155
     942:	74 e0       	ldi	r23, 0x04	; 4
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 a4 01 	call	0x348	; 0x348 <HOME_voidCheckUserAndPass>
		HOME_voidFireAnALarm(usertype);
     94a:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <usertype>
     94e:	0e 94 3f 04 	call	0x87e	; 0x87e <HOME_voidFireAnALarm>
     952:	08 95       	ret
	}
	else if (bluetooh_value == '#')
     954:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     958:	83 32       	cpi	r24, 0x23	; 35
     95a:	a1 f4       	brne	.+40     	; 0x984 <GetUserType+0x86>
	{
		HOME_voidCheckUserAndPass(HOME_REMOTE_ACCESS,&usertype);
     95c:	6b e9       	ldi	r22, 0x9B	; 155
     95e:	74 e0       	ldi	r23, 0x04	; 4
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	0e 94 a4 01 	call	0x348	; 0x348 <HOME_voidCheckUserAndPass>
		LCD_voidDisplayString("system is being used");
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	92 e0       	ldi	r25, 0x02	; 2
     96a:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
		LCD_voidSendCommand(Write_SecondLine);
     96e:	80 ec       	ldi	r24, 0xC0	; 192
     970:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
		LCD_voidDisplayString("by remote user");
     974:	87 e1       	ldi	r24, 0x17	; 23
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
		HOME_voidFireAnALarm(usertype);
     97c:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <usertype>
     980:	0e 94 3f 04 	call	0x87e	; 0x87e <HOME_voidFireAnALarm>
     984:	08 95       	ret

00000986 <KPD_Interface_RemoteAdmin>:
void KPD_Interface_RemoteAdmin(void)
{
	// This function is for admin usertype for accessing the smart home remotely showing all options available for the admin//

	//setting the TRM0 ctc interrupt function
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
     986:	86 e2       	ldi	r24, 0x26	; 38
     988:	9d e0       	ldi	r25, 0x0D	; 13
     98a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
     98e:	8d e0       	ldi	r24, 0x0D	; 13
     990:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
     994:	86 e2       	ldi	r24, 0x26	; 38
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxChar('\r');
     99c:	8d e0       	ldi	r24, 0x0D	; 13
     99e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
     9a2:	83 e3       	ldi	r24, 0x33	; 51
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxChar('\r');
     9aa:	8d e0       	ldi	r24, 0x0D	; 13
     9ac:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	BL_voidTxString("5- change username and password");
     9b0:	81 e4       	ldi	r24, 0x41	; 65
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxChar('\r');
     9b8:	8d e0       	ldi	r24, 0x0D	; 13
     9ba:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	TMR0_voidStart();
     9be:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
	//reciving user selection from BL
	BL_voidRxChar(&bluetooh_value);
     9c2:	8d e8       	ldi	r24, 0x8D	; 141
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
	TMR0_voidStop();
     9ca:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
	switch (bluetooh_value)
     9ce:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     9d2:	83 33       	cpi	r24, 0x33	; 51
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <KPD_Interface_RemoteAdmin+0x52>
     9d6:	56 c3       	rjmp	.+1708   	; 0x1084 <KPD_Interface_RemoteAdmin+0x6fe>
     9d8:	30 f4       	brcc	.+12     	; 0x9e6 <KPD_Interface_RemoteAdmin+0x60>
     9da:	81 33       	cpi	r24, 0x31	; 49
     9dc:	59 f0       	breq	.+22     	; 0x9f4 <KPD_Interface_RemoteAdmin+0x6e>
     9de:	82 33       	cpi	r24, 0x32	; 50
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <KPD_Interface_RemoteAdmin+0x5e>
     9e2:	3f c0       	rjmp	.+126    	; 0xa62 <KPD_Interface_RemoteAdmin+0xdc>
     9e4:	08 95       	ret
     9e6:	84 33       	cpi	r24, 0x34	; 52
     9e8:	09 f4       	brne	.+2      	; 0x9ec <KPD_Interface_RemoteAdmin+0x66>
     9ea:	78 c3       	rjmp	.+1776   	; 0x10dc <KPD_Interface_RemoteAdmin+0x756>
     9ec:	85 33       	cpi	r24, 0x35	; 53
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <KPD_Interface_RemoteAdmin+0x6c>
     9f0:	c7 c3       	rjmp	.+1934   	; 0x1180 <KPD_Interface_RemoteAdmin+0x7fa>
     9f2:	08 95       	ret
	{
	case ('1'):
		BL_voidTxString("AC Is On/off");
     9f4:	81 e6       	ldi	r24, 0x61	; 97
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
        BL_voidTxChar('\r');
     9fc:	8d e0       	ldi	r24, 0x0D	; 13
     9fe:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
		//getting temp from ADC
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     a02:	6a e8       	ldi	r22, 0x8A	; 138
     a04:	74 e0       	ldi	r23, 0x04	; 4
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
				//sprintf is used to format and store a string in a buffer
				sprintf(tempString, "Room Temp: %d c", local_temp);
     a0c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__data_end>
     a10:	1f 92       	push	r1
     a12:	8f 93       	push	r24
     a14:	8e e6       	ldi	r24, 0x6E	; 110
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	80 eb       	ldi	r24, 0xB0	; 176
     a1e:	94 e0       	ldi	r25, 0x04	; 4
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
				BL_voidTxString(tempString);
     a28:	80 eb       	ldi	r24, 0xB0	; 176
     a2a:	94 e0       	ldi	r25, 0x04	; 4
     a2c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
     a30:	8d e0       	ldi	r24, 0x0D	; 13
     a32:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
     a36:	8e e7       	ldi	r24, 0x7E	; 126
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
     a3e:	8d e0       	ldi	r24, 0x0D	; 13
     a40:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				TMR0_voidStart();
     a44:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
				BL_voidRxChar(&bluetooh_value);
     a48:	8d e8       	ldi	r24, 0x8D	; 141
     a4a:	94 e0       	ldi	r25, 0x04	; 4
     a4c:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
				TMR0_voidStop();
     a50:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
				if (bluetooh_value=='0')
				{
					
				}
		break;
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	08 95       	ret
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
     a62:	8d e0       	ldi	r24, 0x0D	; 13
     a64:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
            BL_voidTxString("Choose light to");
     a68:	8b e8       	ldi	r24, 0x8B	; 139
     a6a:	92 e0       	ldi	r25, 0x02	; 2
     a6c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
            BL_voidTxChar('\r');
     a70:	8d e0       	ldi	r24, 0x0D	; 13
     a72:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
     a76:	8b e9       	ldi	r24, 0x9B	; 155
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
			BL_voidTxChar('\r');
     a7e:	8d e0       	ldi	r24, 0x0D	; 13
     a80:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
			BL_voidTxChar('\r');
     a84:	8d e0       	ldi	r24, 0x0D	; 13
     a86:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
            TMR0_voidStart();
     a8a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     a8e:	8d e8       	ldi	r24, 0x8D	; 141
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
            TMR0_voidStop();
     a96:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
            switch (bluetooh_value)
     a9a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     a9e:	83 33       	cpi	r24, 0x33	; 51
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <KPD_Interface_RemoteAdmin+0x11e>
     aa2:	a0 c0       	rjmp	.+320    	; 0xbe4 <KPD_Interface_RemoteAdmin+0x25e>
     aa4:	30 f4       	brcc	.+12     	; 0xab2 <KPD_Interface_RemoteAdmin+0x12c>
     aa6:	81 33       	cpi	r24, 0x31	; 49
     aa8:	69 f0       	breq	.+26     	; 0xac4 <KPD_Interface_RemoteAdmin+0x13e>
     aaa:	82 33       	cpi	r24, 0x32	; 50
     aac:	09 f4       	brne	.+2      	; 0xab0 <KPD_Interface_RemoteAdmin+0x12a>
     aae:	50 c0       	rjmp	.+160    	; 0xb50 <KPD_Interface_RemoteAdmin+0x1ca>
     ab0:	08 95       	ret
     ab2:	85 33       	cpi	r24, 0x35	; 53
     ab4:	09 f4       	brne	.+2      	; 0xab8 <KPD_Interface_RemoteAdmin+0x132>
     ab6:	2a c1       	rjmp	.+596    	; 0xd0c <KPD_Interface_RemoteAdmin+0x386>
     ab8:	08 f4       	brcc	.+2      	; 0xabc <KPD_Interface_RemoteAdmin+0x136>
     aba:	de c0       	rjmp	.+444    	; 0xc78 <KPD_Interface_RemoteAdmin+0x2f2>
     abc:	86 33       	cpi	r24, 0x36	; 54
     abe:	09 f4       	brne	.+2      	; 0xac2 <KPD_Interface_RemoteAdmin+0x13c>
     ac0:	6f c1       	rjmp	.+734    	; 0xda0 <KPD_Interface_RemoteAdmin+0x41a>
     ac2:	08 95       	ret
            {
            case ('1'):
			//DIO_voidGetPinValue is used to check if the led is on or off before changing its state

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     ac4:	4c e8       	ldi	r20, 0x8C	; 140
     ac6:	54 e0       	ldi	r21, 0x04	; 4
     ac8:	63 e0       	ldi	r22, 0x03	; 3
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     ad0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
     ad4:	81 30       	cpi	r24, 0x01	; 1
     ad6:	e9 f4       	brne	.+58     	; 0xb12 <KPD_Interface_RemoteAdmin+0x18c>
                {
                    BL_voidTxString("Light 1 is On");
     ad8:	88 ea       	ldi	r24, 0xA8	; 168
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     ae0:	8d e0       	ldi	r24, 0x0D	; 13
     ae2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     ae6:	86 eb       	ldi	r24, 0xB6	; 182
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     aee:	8d e0       	ldi	r24, 0x0D	; 13
     af0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     af4:	8d e8       	ldi	r24, 0x8D	; 141
     af6:	94 e0       	ldi	r25, 0x04	; 4
     af8:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
     afc:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     b00:	81 33       	cpi	r24, 0x31	; 49
     b02:	09 f0       	breq	.+2      	; 0xb06 <KPD_Interface_RemoteAdmin+0x180>
     b04:	3f c3       	rjmp	.+1662   	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	63 e0       	ldi	r22, 0x03	; 3
     b0a:	83 e0       	ldi	r24, 0x03	; 3
     b0c:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
     b10:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
     b12:	81 11       	cpse	r24, r1
     b14:	37 c3       	rjmp	.+1646   	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 1 is OFF");
     b16:	87 ec       	ldi	r24, 0xC7	; 199
     b18:	92 e0       	ldi	r25, 0x02	; 2
     b1a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     b1e:	8d e0       	ldi	r24, 0x0D	; 13
     b20:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     b24:	86 ed       	ldi	r24, 0xD6	; 214
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     b2c:	8d e0       	ldi	r24, 0x0D	; 13
     b2e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     b32:	8d e8       	ldi	r24, 0x8D	; 141
     b34:	94 e0       	ldi	r25, 0x04	; 4
     b36:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
     b3a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     b3e:	81 33       	cpi	r24, 0x31	; 49
     b40:	09 f0       	breq	.+2      	; 0xb44 <KPD_Interface_RemoteAdmin+0x1be>
     b42:	20 c3       	rjmp	.+1600   	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	63 e0       	ldi	r22, 0x03	; 3
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
     b4e:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
     b50:	4c e8       	ldi	r20, 0x8C	; 140
     b52:	54 e0       	ldi	r21, 0x04	; 4
     b54:	60 e0       	ldi	r22, 0x00	; 0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     b5c:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	f9 f4       	brne	.+62     	; 0xba2 <KPD_Interface_RemoteAdmin+0x21c>
                {
                    BL_voidTxString("Light 2 is On");
     b64:	86 ee       	ldi	r24, 0xE6	; 230
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     b6c:	8d e0       	ldi	r24, 0x0D	; 13
     b6e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     b72:	86 eb       	ldi	r24, 0xB6	; 182
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     b7a:	8d e0       	ldi	r24, 0x0D	; 13
     b7c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     b80:	8d e8       	ldi	r24, 0x8D	; 141
     b82:	94 e0       	ldi	r25, 0x04	; 4
     b84:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
     b88:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     b8c:	81 33       	cpi	r24, 0x31	; 49
     b8e:	29 f4       	brne	.+10     	; 0xb9a <KPD_Interface_RemoteAdmin+0x214>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     b90:	41 e0       	ldi	r20, 0x01	; 1
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     ba0:	08 95       	ret
                }
                else if (led_status == 0)
     ba2:	81 11       	cpse	r24, r1
     ba4:	ef c2       	rjmp	.+1502   	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 2 is OFF");
     ba6:	84 ef       	ldi	r24, 0xF4	; 244
     ba8:	92 e0       	ldi	r25, 0x02	; 2
     baa:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     bae:	8d e0       	ldi	r24, 0x0D	; 13
     bb0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     bb4:	86 ed       	ldi	r24, 0xD6	; 214
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     bbc:	8d e0       	ldi	r24, 0x0D	; 13
     bbe:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     bc2:	8d e8       	ldi	r24, 0x8D	; 141
     bc4:	94 e0       	ldi	r25, 0x04	; 4
     bc6:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
     bca:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     bce:	81 33       	cpi	r24, 0x31	; 49
     bd0:	29 f4       	brne	.+10     	; 0xbdc <KPD_Interface_RemoteAdmin+0x256>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     be2:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     be4:	4c e8       	ldi	r20, 0x8C	; 140
     be6:	54 e0       	ldi	r21, 0x04	; 4
     be8:	62 e0       	ldi	r22, 0x02	; 2
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     bf0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	f9 f4       	brne	.+62     	; 0xc36 <KPD_Interface_RemoteAdmin+0x2b0>
                {
                    BL_voidTxString("Light 3 is On");
     bf8:	83 e0       	ldi	r24, 0x03	; 3
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     c00:	8d e0       	ldi	r24, 0x0D	; 13
     c02:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     c06:	86 eb       	ldi	r24, 0xB6	; 182
     c08:	92 e0       	ldi	r25, 0x02	; 2
     c0a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     c0e:	8d e0       	ldi	r24, 0x0D	; 13
     c10:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     c14:	8d e8       	ldi	r24, 0x8D	; 141
     c16:	94 e0       	ldi	r25, 0x04	; 4
     c18:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
     c1c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     c20:	81 33       	cpi	r24, 0x31	; 49
     c22:	29 f4       	brne	.+10     	; 0xc2e <KPD_Interface_RemoteAdmin+0x2a8>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     c24:	41 e0       	ldi	r20, 0x01	; 1
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     c34:	08 95       	ret
                }
                else if (led_status == 0)
     c36:	81 11       	cpse	r24, r1
     c38:	a5 c2       	rjmp	.+1354   	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 3 is OFF");
     c3a:	81 e1       	ldi	r24, 0x11	; 17
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     c42:	8d e0       	ldi	r24, 0x0D	; 13
     c44:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     c48:	86 ed       	ldi	r24, 0xD6	; 214
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     c50:	8d e0       	ldi	r24, 0x0D	; 13
     c52:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     c56:	8d e8       	ldi	r24, 0x8D	; 141
     c58:	94 e0       	ldi	r25, 0x04	; 4
     c5a:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
     c5e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     c62:	81 33       	cpi	r24, 0x31	; 49
     c64:	29 f4       	brne	.+10     	; 0xc70 <KPD_Interface_RemoteAdmin+0x2ea>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     c76:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     c78:	4c e8       	ldi	r20, 0x8C	; 140
     c7a:	54 e0       	ldi	r21, 0x04	; 4
     c7c:	63 e0       	ldi	r22, 0x03	; 3
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     c84:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	f9 f4       	brne	.+62     	; 0xcca <KPD_Interface_RemoteAdmin+0x344>
                {
                    BL_voidTxString("Light 4 is On");
     c8c:	80 e2       	ldi	r24, 0x20	; 32
     c8e:	93 e0       	ldi	r25, 0x03	; 3
     c90:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     c94:	8d e0       	ldi	r24, 0x0D	; 13
     c96:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     c9a:	86 eb       	ldi	r24, 0xB6	; 182
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     ca2:	8d e0       	ldi	r24, 0x0D	; 13
     ca4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     ca8:	8d e8       	ldi	r24, 0x8D	; 141
     caa:	94 e0       	ldi	r25, 0x04	; 4
     cac:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
     cb0:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     cb4:	81 33       	cpi	r24, 0x31	; 49
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <KPD_Interface_RemoteAdmin+0x33c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	63 e0       	ldi	r22, 0x03	; 3
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     cc8:	08 95       	ret
                }
                else if (led_status == 0)
     cca:	81 11       	cpse	r24, r1
     ccc:	5b c2       	rjmp	.+1206   	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 4 is OFF");
     cce:	8e e2       	ldi	r24, 0x2E	; 46
     cd0:	93 e0       	ldi	r25, 0x03	; 3
     cd2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     cd6:	8d e0       	ldi	r24, 0x0D	; 13
     cd8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     cdc:	86 ed       	ldi	r24, 0xD6	; 214
     cde:	92 e0       	ldi	r25, 0x02	; 2
     ce0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     ce4:	8d e0       	ldi	r24, 0x0D	; 13
     ce6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     cea:	8d e8       	ldi	r24, 0x8D	; 141
     cec:	94 e0       	ldi	r25, 0x04	; 4
     cee:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
     cf2:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     cf6:	81 33       	cpi	r24, 0x31	; 49
     cf8:	29 f4       	brne	.+10     	; 0xd04 <KPD_Interface_RemoteAdmin+0x37e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	63 e0       	ldi	r22, 0x03	; 3
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     d0a:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     d0c:	4c e8       	ldi	r20, 0x8C	; 140
     d0e:	54 e0       	ldi	r21, 0x04	; 4
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     d18:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	f9 f4       	brne	.+62     	; 0xd5e <KPD_Interface_RemoteAdmin+0x3d8>
                {
                    BL_voidTxString("Light 5 is On");
     d20:	8d e3       	ldi	r24, 0x3D	; 61
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     d28:	8d e0       	ldi	r24, 0x0D	; 13
     d2a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     d2e:	86 eb       	ldi	r24, 0xB6	; 182
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     d36:	8d e0       	ldi	r24, 0x0D	; 13
     d38:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d3c:	8d e8       	ldi	r24, 0x8D	; 141
     d3e:	94 e0       	ldi	r25, 0x04	; 4
     d40:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
     d44:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     d48:	81 33       	cpi	r24, 0x31	; 49
     d4a:	29 f4       	brne	.+10     	; 0xd56 <KPD_Interface_RemoteAdmin+0x3d0>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     d4c:	41 e0       	ldi	r20, 0x01	; 1
     d4e:	62 e0       	ldi	r22, 0x02	; 2
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     d5c:	08 95       	ret
                }
                else if (led_status == 0)
     d5e:	81 11       	cpse	r24, r1
     d60:	11 c2       	rjmp	.+1058   	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 5 is OFF");
     d62:	8b e4       	ldi	r24, 0x4B	; 75
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     d6a:	8d e0       	ldi	r24, 0x0D	; 13
     d6c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     d70:	86 ed       	ldi	r24, 0xD6	; 214
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     d78:	8d e0       	ldi	r24, 0x0D	; 13
     d7a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d7e:	8d e8       	ldi	r24, 0x8D	; 141
     d80:	94 e0       	ldi	r25, 0x04	; 4
     d82:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
     d86:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     d8a:	81 33       	cpi	r24, 0x31	; 49
     d8c:	29 f4       	brne	.+10     	; 0xd98 <KPD_Interface_RemoteAdmin+0x412>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	62 e0       	ldi	r22, 0x02	; 2
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
     d9e:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):
				// Dimmer can be controlled using TMR1 PWM mode range from 0 to 100 with -+10% step
                if (dimmer_brightness > 0)
     da0:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     da4:	88 23       	and	r24, r24
     da6:	09 f4       	brne	.+2      	; 0xdaa <KPD_Interface_RemoteAdmin+0x424>
     da8:	b1 c0       	rjmp	.+354    	; 0xf0c <KPD_Interface_RemoteAdmin+0x586>
                {
					 BL_voidTxChar('\r');
     daa:	8d e0       	ldi	r24, 0x0D	; 13
     dac:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
     db0:	8a e5       	ldi	r24, 0x5A	; 90
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     db8:	8d e0       	ldi	r24, 0x0D	; 13
     dba:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     dbe:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     dc2:	1f 92       	push	r1
     dc4:	8f 93       	push	r24
     dc6:	88 e6       	ldi	r24, 0x68	; 104
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	8c e9       	ldi	r24, 0x9C	; 156
     dd0:	94 e0       	ldi	r25, 0x04	; 4
     dd2:	9f 93       	push	r25
     dd4:	8f 93       	push	r24
     dd6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
					BL_voidTxString(DimmerString);
     dda:	8c e9       	ldi	r24, 0x9C	; 156
     ddc:	94 e0       	ldi	r25, 0x04	; 4
     dde:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     de2:	8d e0       	ldi	r24, 0x0D	; 13
     de4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     de8:	88 e7       	ldi	r24, 0x78	; 120
     dea:	93 e0       	ldi	r25, 0x03	; 3
     dec:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     df0:	8d e0       	ldi	r24, 0x0D	; 13
     df2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     df6:	8d e8       	ldi	r24, 0x8D	; 141
     df8:	94 e0       	ldi	r25, 0x04	; 4
     dfa:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
					while (bluetooh_value != 0)
     dfe:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	88 23       	and	r24, r24
     e10:	09 f4       	brne	.+2      	; 0xe14 <KPD_Interface_RemoteAdmin+0x48e>
     e12:	b8 c1       	rjmp	.+880    	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
					{
						if (bluetooh_value == '1')
     e14:	81 33       	cpi	r24, 0x31	; 49
     e16:	09 f0       	breq	.+2      	; 0xe1a <KPD_Interface_RemoteAdmin+0x494>
     e18:	43 c0       	rjmp	.+134    	; 0xea0 <KPD_Interface_RemoteAdmin+0x51a>
						{
							dimmer_brightness += 10;
     e1a:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
     e1e:	66 5f       	subi	r22, 0xF6	; 246
     e20:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
     e2e:	ab 01       	movw	r20, r22
     e30:	bc 01       	movw	r22, r24
     e32:	88 ee       	ldi	r24, 0xE8	; 232
     e34:	93 e0       	ldi	r25, 0x03	; 3
     e36:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     e3a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     e3e:	1f 92       	push	r1
     e40:	8f 93       	push	r24
     e42:	88 e6       	ldi	r24, 0x68	; 104
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	8c e9       	ldi	r24, 0x9C	; 156
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	9f 93       	push	r25
     e50:	8f 93       	push	r24
     e52:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
     e56:	8c e9       	ldi	r24, 0x9C	; 156
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
     e5e:	8d e0       	ldi	r24, 0x0D	; 13
     e60:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     e64:	88 e7       	ldi	r24, 0x78	; 120
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
     e6c:	8d e0       	ldi	r24, 0x0D	; 13
     e6e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							// check if is the brightness is more than 100
							if (dimmer_brightness > 100)
     e72:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	85 36       	cpi	r24, 0x65	; 101
     e84:	08 f4       	brcc	.+2      	; 0xe88 <KPD_Interface_RemoteAdmin+0x502>
     e86:	7e c1       	rjmp	.+764    	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
							{
								//block increasing the brightness above 100
								dimmer_brightness = 100;
     e88:	84 e6       	ldi	r24, 0x64	; 100
     e8a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	68 ec       	ldi	r22, 0xC8	; 200
     e94:	72 e4       	ldi	r23, 0x42	; 66
     e96:	88 ee       	ldi	r24, 0xE8	; 232
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
     e9e:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
     ea0:	82 33       	cpi	r24, 0x32	; 50
     ea2:	09 f0       	breq	.+2      	; 0xea6 <KPD_Interface_RemoteAdmin+0x520>
     ea4:	6f c1       	rjmp	.+734    	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
						{
							dimmer_brightness -= 10;
     ea6:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
     eaa:	6a 50       	subi	r22, 0x0A	; 10
     eac:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
     eba:	ab 01       	movw	r20, r22
     ebc:	bc 01       	movw	r22, r24
     ebe:	88 ee       	ldi	r24, 0xE8	; 232
     ec0:	93 e0       	ldi	r25, 0x03	; 3
     ec2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     ec6:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     eca:	1f 92       	push	r1
     ecc:	8f 93       	push	r24
     ece:	88 e6       	ldi	r24, 0x68	; 104
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	9f 93       	push	r25
     ed4:	8f 93       	push	r24
     ed6:	8c e9       	ldi	r24, 0x9C	; 156
     ed8:	94 e0       	ldi	r25, 0x04	; 4
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
     ee2:	8c e9       	ldi	r24, 0x9C	; 156
     ee4:	94 e0       	ldi	r25, 0x04	; 4
     ee6:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
     eea:	8d e0       	ldi	r24, 0x0D	; 13
     eec:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     ef0:	88 e7       	ldi	r24, 0x78	; 120
     ef2:	93 e0       	ldi	r25, 0x03	; 3
     ef4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
     ef8:	8d e0       	ldi	r24, 0x0D	; 13
     efa:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							{
								//block decreasing the brightness below 0
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
     f0c:	81 11       	cpse	r24, r1
     f0e:	3a c1       	rjmp	.+628    	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 6 is OFF");
     f10:	88 e8       	ldi	r24, 0x88	; 136
     f12:	93 e0       	ldi	r25, 0x03	; 3
     f14:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
     f18:	2f ef       	ldi	r18, 0xFF	; 255
     f1a:	83 ed       	ldi	r24, 0xD3	; 211
     f1c:	90 e3       	ldi	r25, 0x30	; 48
     f1e:	21 50       	subi	r18, 0x01	; 1
     f20:	80 40       	sbci	r24, 0x00	; 0
     f22:	90 40       	sbci	r25, 0x00	; 0
     f24:	e1 f7       	brne	.-8      	; 0xf1e <KPD_Interface_RemoteAdmin+0x598>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <KPD_Interface_RemoteAdmin+0x5a2>
     f28:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
     f2a:	8d e0       	ldi	r24, 0x0D	; 13
     f2c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     f30:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     f34:	1f 92       	push	r1
     f36:	8f 93       	push	r24
     f38:	88 e6       	ldi	r24, 0x68	; 104
     f3a:	93 e0       	ldi	r25, 0x03	; 3
     f3c:	9f 93       	push	r25
     f3e:	8f 93       	push	r24
     f40:	8c e9       	ldi	r24, 0x9C	; 156
     f42:	94 e0       	ldi	r25, 0x04	; 4
     f44:	9f 93       	push	r25
     f46:	8f 93       	push	r24
     f48:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
					BL_voidTxString(DimmerString);
     f4c:	8c e9       	ldi	r24, 0x9C	; 156
     f4e:	94 e0       	ldi	r25, 0x04	; 4
     f50:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
     f54:	8d e0       	ldi	r24, 0x0D	; 13
     f56:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     f5a:	88 e7       	ldi	r24, 0x78	; 120
     f5c:	93 e0       	ldi	r25, 0x03	; 3
     f5e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
     f62:	8d e0       	ldi	r24, 0x0D	; 13
     f64:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     f68:	8d e8       	ldi	r24, 0x8D	; 141
     f6a:	94 e0       	ldi	r25, 0x04	; 4
     f6c:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
					while (bluetooh_value != 0)
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	7e c0       	rjmp	.+252    	; 0x107a <KPD_Interface_RemoteAdmin+0x6f4>
					{
						if (bluetooh_value == '1')
     f7e:	81 33       	cpi	r24, 0x31	; 49
     f80:	09 f0       	breq	.+2      	; 0xf84 <KPD_Interface_RemoteAdmin+0x5fe>
     f82:	43 c0       	rjmp	.+134    	; 0x100a <KPD_Interface_RemoteAdmin+0x684>
						{
							dimmer_brightness += 10;
     f84:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
     f88:	66 5f       	subi	r22, 0xF6	; 246
     f8a:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
     f98:	ab 01       	movw	r20, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	88 ee       	ldi	r24, 0xE8	; 232
     f9e:	93 e0       	ldi	r25, 0x03	; 3
     fa0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     fa4:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     fa8:	1f 92       	push	r1
     faa:	8f 93       	push	r24
     fac:	88 e6       	ldi	r24, 0x68	; 104
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	9f 93       	push	r25
     fb2:	8f 93       	push	r24
     fb4:	8c e9       	ldi	r24, 0x9C	; 156
     fb6:	94 e0       	ldi	r25, 0x04	; 4
     fb8:	9f 93       	push	r25
     fba:	8f 93       	push	r24
     fbc:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
     fc0:	8c e9       	ldi	r24, 0x9C	; 156
     fc2:	94 e0       	ldi	r25, 0x04	; 4
     fc4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
     fc8:	8d e0       	ldi	r24, 0x0D	; 13
     fca:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     fce:	88 e7       	ldi	r24, 0x78	; 120
     fd0:	93 e0       	ldi	r25, 0x03	; 3
     fd2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
     fd6:	8d e0       	ldi	r24, 0x0D	; 13
     fd8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							if (dimmer_brightness > 100)
     fdc:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	85 36       	cpi	r24, 0x65	; 101
     fee:	08 f4       	brcc	.+2      	; 0xff2 <KPD_Interface_RemoteAdmin+0x66c>
     ff0:	c9 c0       	rjmp	.+402    	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
							{
								dimmer_brightness = 100;
     ff2:	84 e6       	ldi	r24, 0x64	; 100
     ff4:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	68 ec       	ldi	r22, 0xC8	; 200
     ffe:	72 e4       	ldi	r23, 0x42	; 66
    1000:	88 ee       	ldi	r24, 0xE8	; 232
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
    1008:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    100a:	82 33       	cpi	r24, 0x32	; 50
    100c:	99 f5       	brne	.+102    	; 0x1074 <KPD_Interface_RemoteAdmin+0x6ee>
						{
							dimmer_brightness -= 10;
    100e:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    1012:	6a 50       	subi	r22, 0x0A	; 10
    1014:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    1022:	ab 01       	movw	r20, r22
    1024:	bc 01       	movw	r22, r24
    1026:	88 ee       	ldi	r24, 0xE8	; 232
    1028:	93 e0       	ldi	r25, 0x03	; 3
    102a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    102e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1032:	1f 92       	push	r1
    1034:	8f 93       	push	r24
    1036:	88 e6       	ldi	r24, 0x68	; 104
    1038:	93 e0       	ldi	r25, 0x03	; 3
    103a:	9f 93       	push	r25
    103c:	8f 93       	push	r24
    103e:	8c e9       	ldi	r24, 0x9C	; 156
    1040:	94 e0       	ldi	r25, 0x04	; 4
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
    104a:	8c e9       	ldi	r24, 0x9C	; 156
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1052:	8d e0       	ldi	r24, 0x0D	; 13
    1054:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1058:	88 e7       	ldi	r24, 0x78	; 120
    105a:	93 e0       	ldi	r25, 0x03	; 3
    105c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
    1060:	8d e0       	ldi	r24, 0x0D	; 13
    1062:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    1074:	80 33       	cpi	r24, 0x30	; 48
    1076:	09 f4       	brne	.+2      	; 0x107a <KPD_Interface_RemoteAdmin+0x6f4>
    1078:	85 c0       	rjmp	.+266    	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    107a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    107e:	81 11       	cpse	r24, r1
    1080:	7e cf       	rjmp	.-260    	; 0xf7e <KPD_Interface_RemoteAdmin+0x5f8>
    1082:	08 95       	ret
			break;

			case ('3'):
			
				// checking the temperature from the ADC before displaying it
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1084:	6a e8       	ldi	r22, 0x8A	; 138
    1086:	74 e0       	ldi	r23, 0x04	; 4
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    108e:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__data_end>
    1092:	1f 92       	push	r1
    1094:	8f 93       	push	r24
    1096:	8e e6       	ldi	r24, 0x6E	; 110
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	9f 93       	push	r25
    109c:	8f 93       	push	r24
    109e:	80 eb       	ldi	r24, 0xB0	; 176
    10a0:	94 e0       	ldi	r25, 0x04	; 4
    10a2:	9f 93       	push	r25
    10a4:	8f 93       	push	r24
    10a6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
				BL_voidTxString(tempString);
    10aa:	80 eb       	ldi	r24, 0xB0	; 176
    10ac:	94 e0       	ldi	r25, 0x04	; 4
    10ae:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
    10b2:	8d e0       	ldi	r24, 0x0D	; 13
    10b4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    10b8:	8e e7       	ldi	r24, 0x7E	; 126
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
    10c0:	8d e0       	ldi	r24, 0x0D	; 13
    10c2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    10c6:	8d e8       	ldi	r24, 0x8D	; 141
    10c8:	94 e0       	ldi	r25, 0x04	; 4
    10ca:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
				if (bluetooh_value=='0')
				{
					
				}
				break;
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	08 95       	ret

			case ('4'):
				// checking the door status before displaying it
				if (door_angle==0)
    10dc:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <door_angle>
    10e0:	81 11       	cpse	r24, r1
    10e2:	27 c0       	rjmp	.+78     	; 0x1132 <KPD_Interface_RemoteAdmin+0x7ac>
				{
					BL_voidTxString("Door is closed");
    10e4:	87 e9       	ldi	r24, 0x97	; 151
    10e6:	93 e0       	ldi	r25, 0x03	; 3
    10e8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    10ec:	8d e0       	ldi	r24, 0x0D	; 13
    10ee:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidTxString("1-Open Door 0-Home");
    10f2:	86 ea       	ldi	r24, 0xA6	; 166
    10f4:	93 e0       	ldi	r25, 0x03	; 3
    10f6:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1100:	8d e8       	ldi	r24, 0x8D	; 141
    1102:	94 e0       	ldi	r25, 0x04	; 4
    1104:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
					BL_voidTxChar('\r');
    1108:	8d e0       	ldi	r24, 0x0D	; 13
    110a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					if (bluetooh_value=='1')
    110e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    1112:	81 33       	cpi	r24, 0x31	; 49
    1114:	b9 f5       	brne	.+110    	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
					{
						BL_voidTxString("Door is opening");
    1116:	89 eb       	ldi	r24, 0xB9	; 185
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
						SERVO_voidStartByAngle(90);
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	84 eb       	ldi	r24, 0xB4	; 180
    1124:	92 e4       	ldi	r25, 0x42	; 66
    1126:	0e 94 96 14 	call	0x292c	; 0x292c <SERVO_voidStartByAngle>
						door_angle=90;
    112a:	8a e5       	ldi	r24, 0x5A	; 90
    112c:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <door_angle>
    1130:	08 95       	ret
						break;
					}
					break;

				}
				else if (door_angle==90)
    1132:	8a 35       	cpi	r24, 0x5A	; 90
    1134:	39 f5       	brne	.+78     	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
				{
					BL_voidTxString("Door is open");
    1136:	89 ec       	ldi	r24, 0xC9	; 201
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    113e:	8d e0       	ldi	r24, 0x0D	; 13
    1140:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidTxString("1-Close Door 0-Home");
    1144:	86 ed       	ldi	r24, 0xD6	; 214
    1146:	93 e0       	ldi	r25, 0x03	; 3
    1148:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    114c:	8d e0       	ldi	r24, 0x0D	; 13
    114e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1152:	8d e8       	ldi	r24, 0x8D	; 141
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
					BL_voidTxChar('\r');
    115a:	8d e0       	ldi	r24, 0x0D	; 13
    115c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					if (bluetooh_value=='1')
    1160:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    1164:	81 33       	cpi	r24, 0x31	; 49
    1166:	71 f4       	brne	.+28     	; 0x1184 <KPD_Interface_RemoteAdmin+0x7fe>
					{
						BL_voidTxString("Door is closing");
    1168:	8a ee       	ldi	r24, 0xEA	; 234
    116a:	93 e0       	ldi	r25, 0x03	; 3
    116c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
						SERVO_voidStartByAngle(0);
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	cb 01       	movw	r24, r22
    1176:	0e 94 96 14 	call	0x292c	; 0x292c <SERVO_voidStartByAngle>
						door_angle=0;
    117a:	10 92 8e 04 	sts	0x048E, r1	; 0x80048e <door_angle>
    117e:	08 95       	ret
			break;


			case ('5'):
			// this case is only for admin to change the username and password (Admin is only remote typeuser)
			HOME_voidChangeUserNameAndPass();
    1180:	0e 94 8f 03 	call	0x71e	; 0x71e <HOME_voidChangeUserNameAndPass>
    1184:	08 95       	ret

00001186 <KPD_Interface_RemoteUser>:


void KPD_Interface_RemoteUser(void)
{
	//this is the remote user interface to control the smart home (same as the admin but with less options without(door control,changing username and password))
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
    1186:	86 e2       	ldi	r24, 0x26	; 38
    1188:	9d e0       	ldi	r25, 0x0D	; 13
    118a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
    118e:	8d e0       	ldi	r24, 0x0D	; 13
    1190:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
    1194:	86 e2       	ldi	r24, 0x26	; 38
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxChar('\r');
    119c:	8d e0       	ldi	r24, 0x0D	; 13
    119e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
    11a2:	83 e3       	ldi	r24, 0x33	; 51
    11a4:	92 e0       	ldi	r25, 0x02	; 2
    11a6:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxChar('\r');
    11aa:	8d e0       	ldi	r24, 0x0D	; 13
    11ac:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	TMR0_voidStart();
    11b0:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
	BL_voidRxChar(&bluetooh_value);
    11b4:	8d e8       	ldi	r24, 0x8D	; 141
    11b6:	94 e0       	ldi	r25, 0x04	; 4
    11b8:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
	TMR0_voidStop();
    11bc:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
	switch (bluetooh_value)
    11c0:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    11c4:	82 33       	cpi	r24, 0x32	; 50
    11c6:	e9 f1       	breq	.+122    	; 0x1242 <KPD_Interface_RemoteUser+0xbc>
    11c8:	83 33       	cpi	r24, 0x33	; 51
    11ca:	09 f4       	brne	.+2      	; 0x11ce <KPD_Interface_RemoteUser+0x48>
    11cc:	4a c3       	rjmp	.+1684   	; 0x1862 <KPD_Interface_RemoteUser+0x6dc>
    11ce:	81 33       	cpi	r24, 0x31	; 49
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <KPD_Interface_RemoteUser+0x4e>
    11d2:	72 c3       	rjmp	.+1764   	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
	{
	case ('1'):
		BL_voidTxString("AC Is On/off");
    11d4:	81 e6       	ldi	r24, 0x61	; 97
    11d6:	92 e0       	ldi	r25, 0x02	; 2
    11d8:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
        BL_voidTxChar('\r');
    11dc:	8d e0       	ldi	r24, 0x0D	; 13
    11de:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    11e2:	6a e8       	ldi	r22, 0x8A	; 138
    11e4:	74 e0       	ldi	r23, 0x04	; 4
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    11ec:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__data_end>
    11f0:	1f 92       	push	r1
    11f2:	8f 93       	push	r24
    11f4:	8e e6       	ldi	r24, 0x6E	; 110
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	80 eb       	ldi	r24, 0xB0	; 176
    11fe:	94 e0       	ldi	r25, 0x04	; 4
    1200:	9f 93       	push	r25
    1202:	8f 93       	push	r24
    1204:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
				BL_voidTxString(tempString);
    1208:	80 eb       	ldi	r24, 0xB0	; 176
    120a:	94 e0       	ldi	r25, 0x04	; 4
    120c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
    1210:	8d e0       	ldi	r24, 0x0D	; 13
    1212:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    1216:	8e e7       	ldi	r24, 0x7E	; 126
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
    121e:	8d e0       	ldi	r24, 0x0D	; 13
    1220:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				TMR0_voidStart();
    1224:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
				BL_voidRxChar(&bluetooh_value);
    1228:	8d e8       	ldi	r24, 0x8D	; 141
    122a:	94 e0       	ldi	r25, 0x04	; 4
    122c:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
				TMR0_voidStop();
    1230:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
				if (bluetooh_value=='0')
				{
					
				}
		break;
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	08 95       	ret
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
    1242:	8d e0       	ldi	r24, 0x0D	; 13
    1244:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
            BL_voidTxString("Choose light to");
    1248:	8b e8       	ldi	r24, 0x8B	; 139
    124a:	92 e0       	ldi	r25, 0x02	; 2
    124c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
            BL_voidTxChar('\r');
    1250:	8d e0       	ldi	r24, 0x0D	; 13
    1252:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
    1256:	8b e9       	ldi	r24, 0x9B	; 155
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
			BL_voidTxChar('\r');
    125e:	8d e0       	ldi	r24, 0x0D	; 13
    1260:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
			BL_voidTxChar('\r');
    1264:	8d e0       	ldi	r24, 0x0D	; 13
    1266:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
            TMR0_voidStart();
    126a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
    126e:	8d e8       	ldi	r24, 0x8D	; 141
    1270:	94 e0       	ldi	r25, 0x04	; 4
    1272:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
            TMR0_voidStop();
    1276:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
            switch (bluetooh_value)
    127a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    127e:	83 33       	cpi	r24, 0x33	; 51
    1280:	09 f4       	brne	.+2      	; 0x1284 <KPD_Interface_RemoteUser+0xfe>
    1282:	a0 c0       	rjmp	.+320    	; 0x13c4 <KPD_Interface_RemoteUser+0x23e>
    1284:	30 f4       	brcc	.+12     	; 0x1292 <KPD_Interface_RemoteUser+0x10c>
    1286:	81 33       	cpi	r24, 0x31	; 49
    1288:	69 f0       	breq	.+26     	; 0x12a4 <KPD_Interface_RemoteUser+0x11e>
    128a:	82 33       	cpi	r24, 0x32	; 50
    128c:	09 f4       	brne	.+2      	; 0x1290 <KPD_Interface_RemoteUser+0x10a>
    128e:	50 c0       	rjmp	.+160    	; 0x1330 <KPD_Interface_RemoteUser+0x1aa>
    1290:	08 95       	ret
    1292:	85 33       	cpi	r24, 0x35	; 53
    1294:	09 f4       	brne	.+2      	; 0x1298 <KPD_Interface_RemoteUser+0x112>
    1296:	2a c1       	rjmp	.+596    	; 0x14ec <KPD_Interface_RemoteUser+0x366>
    1298:	08 f4       	brcc	.+2      	; 0x129c <KPD_Interface_RemoteUser+0x116>
    129a:	de c0       	rjmp	.+444    	; 0x1458 <KPD_Interface_RemoteUser+0x2d2>
    129c:	86 33       	cpi	r24, 0x36	; 54
    129e:	09 f4       	brne	.+2      	; 0x12a2 <KPD_Interface_RemoteUser+0x11c>
    12a0:	6f c1       	rjmp	.+734    	; 0x1580 <KPD_Interface_RemoteUser+0x3fa>
    12a2:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    12a4:	4c e8       	ldi	r20, 0x8C	; 140
    12a6:	54 e0       	ldi	r21, 0x04	; 4
    12a8:	63 e0       	ldi	r22, 0x03	; 3
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    12b0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	e9 f4       	brne	.+58     	; 0x12f2 <KPD_Interface_RemoteUser+0x16c>
                {
                    BL_voidTxString("Light 1 is On");
    12b8:	88 ea       	ldi	r24, 0xA8	; 168
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    12c0:	8d e0       	ldi	r24, 0x0D	; 13
    12c2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    12c6:	86 eb       	ldi	r24, 0xB6	; 182
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    12ce:	8d e0       	ldi	r24, 0x0D	; 13
    12d0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    12d4:	8d e8       	ldi	r24, 0x8D	; 141
    12d6:	94 e0       	ldi	r25, 0x04	; 4
    12d8:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
    12dc:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    12e0:	81 33       	cpi	r24, 0x31	; 49
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <KPD_Interface_RemoteUser+0x160>
    12e4:	e9 c2       	rjmp	.+1490   	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	63 e0       	ldi	r22, 0x03	; 3
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
    12f0:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
    12f2:	81 11       	cpse	r24, r1
    12f4:	e1 c2       	rjmp	.+1474   	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 1 is OFF");
    12f6:	87 ec       	ldi	r24, 0xC7	; 199
    12f8:	92 e0       	ldi	r25, 0x02	; 2
    12fa:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    12fe:	8d e0       	ldi	r24, 0x0D	; 13
    1300:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1304:	86 ed       	ldi	r24, 0xD6	; 214
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    130c:	8d e0       	ldi	r24, 0x0D	; 13
    130e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1312:	8d e8       	ldi	r24, 0x8D	; 141
    1314:	94 e0       	ldi	r25, 0x04	; 4
    1316:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
    131a:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    131e:	81 33       	cpi	r24, 0x31	; 49
    1320:	09 f0       	breq	.+2      	; 0x1324 <KPD_Interface_RemoteUser+0x19e>
    1322:	ca c2       	rjmp	.+1428   	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	63 e0       	ldi	r22, 0x03	; 3
    1328:	83 e0       	ldi	r24, 0x03	; 3
    132a:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
    132e:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
    1330:	4c e8       	ldi	r20, 0x8C	; 140
    1332:	54 e0       	ldi	r21, 0x04	; 4
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    133c:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	f9 f4       	brne	.+62     	; 0x1382 <KPD_Interface_RemoteUser+0x1fc>
                {
                    BL_voidTxString("Light 2 is On");
    1344:	86 ee       	ldi	r24, 0xE6	; 230
    1346:	92 e0       	ldi	r25, 0x02	; 2
    1348:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    134c:	8d e0       	ldi	r24, 0x0D	; 13
    134e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1352:	86 eb       	ldi	r24, 0xB6	; 182
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    135a:	8d e0       	ldi	r24, 0x0D	; 13
    135c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1360:	8d e8       	ldi	r24, 0x8D	; 141
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
    1368:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    136c:	81 33       	cpi	r24, 0x31	; 49
    136e:	29 f4       	brne	.+10     	; 0x137a <KPD_Interface_RemoteUser+0x1f4>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    1370:	41 e0       	ldi	r20, 0x01	; 1
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    1380:	08 95       	ret
                }
                else if (led_status == 0)
    1382:	81 11       	cpse	r24, r1
    1384:	99 c2       	rjmp	.+1330   	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 2 is OFF");
    1386:	84 ef       	ldi	r24, 0xF4	; 244
    1388:	92 e0       	ldi	r25, 0x02	; 2
    138a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    138e:	8d e0       	ldi	r24, 0x0D	; 13
    1390:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1394:	86 ed       	ldi	r24, 0xD6	; 214
    1396:	92 e0       	ldi	r25, 0x02	; 2
    1398:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    139c:	8d e0       	ldi	r24, 0x0D	; 13
    139e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    13a2:	8d e8       	ldi	r24, 0x8D	; 141
    13a4:	94 e0       	ldi	r25, 0x04	; 4
    13a6:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
                    if (bluetooh_value == '1')
    13aa:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    13ae:	81 33       	cpi	r24, 0x31	; 49
    13b0:	29 f4       	brne	.+10     	; 0x13bc <KPD_Interface_RemoteUser+0x236>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    13c2:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    13c4:	4c e8       	ldi	r20, 0x8C	; 140
    13c6:	54 e0       	ldi	r21, 0x04	; 4
    13c8:	62 e0       	ldi	r22, 0x02	; 2
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    13d0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	f9 f4       	brne	.+62     	; 0x1416 <KPD_Interface_RemoteUser+0x290>
                {
                    BL_voidTxString("Light 3 is On");
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    13e0:	8d e0       	ldi	r24, 0x0D	; 13
    13e2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    13e6:	86 eb       	ldi	r24, 0xB6	; 182
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    13ee:	8d e0       	ldi	r24, 0x0D	; 13
    13f0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    13f4:	8d e8       	ldi	r24, 0x8D	; 141
    13f6:	94 e0       	ldi	r25, 0x04	; 4
    13f8:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
    13fc:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    1400:	81 33       	cpi	r24, 0x31	; 49
    1402:	29 f4       	brne	.+10     	; 0x140e <KPD_Interface_RemoteUser+0x288>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	62 e0       	ldi	r22, 0x02	; 2
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    1414:	08 95       	ret
                }
                else if (led_status == 0)
    1416:	81 11       	cpse	r24, r1
    1418:	4f c2       	rjmp	.+1182   	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 3 is OFF");
    141a:	81 e1       	ldi	r24, 0x11	; 17
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    1422:	8d e0       	ldi	r24, 0x0D	; 13
    1424:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1428:	86 ed       	ldi	r24, 0xD6	; 214
    142a:	92 e0       	ldi	r25, 0x02	; 2
    142c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    1430:	8d e0       	ldi	r24, 0x0D	; 13
    1432:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1436:	8d e8       	ldi	r24, 0x8D	; 141
    1438:	94 e0       	ldi	r25, 0x04	; 4
    143a:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
    143e:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    1442:	81 33       	cpi	r24, 0x31	; 49
    1444:	29 f4       	brne	.+10     	; 0x1450 <KPD_Interface_RemoteUser+0x2ca>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    1456:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    1458:	4c e8       	ldi	r20, 0x8C	; 140
    145a:	54 e0       	ldi	r21, 0x04	; 4
    145c:	63 e0       	ldi	r22, 0x03	; 3
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    1464:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	f9 f4       	brne	.+62     	; 0x14aa <KPD_Interface_RemoteUser+0x324>
                {
                    BL_voidTxString("Light 4 is On");
    146c:	80 e2       	ldi	r24, 0x20	; 32
    146e:	93 e0       	ldi	r25, 0x03	; 3
    1470:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    1474:	8d e0       	ldi	r24, 0x0D	; 13
    1476:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    147a:	86 eb       	ldi	r24, 0xB6	; 182
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    1482:	8d e0       	ldi	r24, 0x0D	; 13
    1484:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1488:	8d e8       	ldi	r24, 0x8D	; 141
    148a:	94 e0       	ldi	r25, 0x04	; 4
    148c:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1490:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    1494:	81 33       	cpi	r24, 0x31	; 49
    1496:	29 f4       	brne	.+10     	; 0x14a2 <KPD_Interface_RemoteUser+0x31c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1498:	41 e0       	ldi	r20, 0x01	; 1
    149a:	63 e0       	ldi	r22, 0x03	; 3
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    14a8:	08 95       	ret
                }
                else if (led_status == 0)
    14aa:	81 11       	cpse	r24, r1
    14ac:	05 c2       	rjmp	.+1034   	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 4 is OFF");
    14ae:	8e e2       	ldi	r24, 0x2E	; 46
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    14b6:	8d e0       	ldi	r24, 0x0D	; 13
    14b8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    14bc:	86 ed       	ldi	r24, 0xD6	; 214
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    14c4:	8d e0       	ldi	r24, 0x0D	; 13
    14c6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    14ca:	8d e8       	ldi	r24, 0x8D	; 141
    14cc:	94 e0       	ldi	r25, 0x04	; 4
    14ce:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
    14d2:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    14d6:	81 33       	cpi	r24, 0x31	; 49
    14d8:	29 f4       	brne	.+10     	; 0x14e4 <KPD_Interface_RemoteUser+0x35e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	63 e0       	ldi	r22, 0x03	; 3
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    14ea:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    14ec:	4c e8       	ldi	r20, 0x8C	; 140
    14ee:	54 e0       	ldi	r21, 0x04	; 4
    14f0:	62 e0       	ldi	r22, 0x02	; 2
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    14f8:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	f9 f4       	brne	.+62     	; 0x153e <KPD_Interface_RemoteUser+0x3b8>
                {
                    BL_voidTxString("Light 5 is On");
    1500:	8d e3       	ldi	r24, 0x3D	; 61
    1502:	93 e0       	ldi	r25, 0x03	; 3
    1504:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    1508:	8d e0       	ldi	r24, 0x0D	; 13
    150a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    150e:	86 eb       	ldi	r24, 0xB6	; 182
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    1516:	8d e0       	ldi	r24, 0x0D	; 13
    1518:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    151c:	8d e8       	ldi	r24, 0x8D	; 141
    151e:	94 e0       	ldi	r25, 0x04	; 4
    1520:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1524:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    1528:	81 33       	cpi	r24, 0x31	; 49
    152a:	29 f4       	brne	.+10     	; 0x1536 <KPD_Interface_RemoteUser+0x3b0>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    152c:	41 e0       	ldi	r20, 0x01	; 1
    152e:	62 e0       	ldi	r22, 0x02	; 2
    1530:	83 e0       	ldi	r24, 0x03	; 3
    1532:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    153c:	08 95       	ret
                }
                else if (led_status == 0)
    153e:	81 11       	cpse	r24, r1
    1540:	bb c1       	rjmp	.+886    	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 5 is OFF");
    1542:	8b e4       	ldi	r24, 0x4B	; 75
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    154a:	8d e0       	ldi	r24, 0x0D	; 13
    154c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1550:	86 ed       	ldi	r24, 0xD6	; 214
    1552:	92 e0       	ldi	r25, 0x02	; 2
    1554:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    1558:	8d e0       	ldi	r24, 0x0D	; 13
    155a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    155e:	8d e8       	ldi	r24, 0x8D	; 141
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1566:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    156a:	81 33       	cpi	r24, 0x31	; 49
    156c:	29 f4       	brne	.+10     	; 0x1578 <KPD_Interface_RemoteUser+0x3f2>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1578:	8f ef       	ldi	r24, 0xFF	; 255
    157a:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <bluetooh_value>
    157e:	08 95       	ret

            case ('6'):
				
                
				
                if (dimmer_brightness > 0)
    1580:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1584:	88 23       	and	r24, r24
    1586:	09 f4       	brne	.+2      	; 0x158a <KPD_Interface_RemoteUser+0x404>
    1588:	b1 c0       	rjmp	.+354    	; 0x16ec <KPD_Interface_RemoteUser+0x566>
                {
					 BL_voidTxChar('\r');
    158a:	8d e0       	ldi	r24, 0x0D	; 13
    158c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
    1590:	8a e5       	ldi	r24, 0x5A	; 90
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    1598:	8d e0       	ldi	r24, 0x0D	; 13
    159a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    159e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    15a2:	1f 92       	push	r1
    15a4:	8f 93       	push	r24
    15a6:	88 e6       	ldi	r24, 0x68	; 104
    15a8:	93 e0       	ldi	r25, 0x03	; 3
    15aa:	9f 93       	push	r25
    15ac:	8f 93       	push	r24
    15ae:	8c e9       	ldi	r24, 0x9C	; 156
    15b0:	94 e0       	ldi	r25, 0x04	; 4
    15b2:	9f 93       	push	r25
    15b4:	8f 93       	push	r24
    15b6:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
					BL_voidTxString(DimmerString);
    15ba:	8c e9       	ldi	r24, 0x9C	; 156
    15bc:	94 e0       	ldi	r25, 0x04	; 4
    15be:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    15c2:	8d e0       	ldi	r24, 0x0D	; 13
    15c4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    15c8:	88 e7       	ldi	r24, 0x78	; 120
    15ca:	93 e0       	ldi	r25, 0x03	; 3
    15cc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    15d0:	8d e0       	ldi	r24, 0x0D	; 13
    15d2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    15d6:	8d e8       	ldi	r24, 0x8D	; 141
    15d8:	94 e0       	ldi	r25, 0x04	; 4
    15da:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
					while (bluetooh_value != 0)
    15de:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	88 23       	and	r24, r24
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <KPD_Interface_RemoteUser+0x46e>
    15f2:	62 c1       	rjmp	.+708    	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
					{
						if (bluetooh_value == '1')
    15f4:	81 33       	cpi	r24, 0x31	; 49
    15f6:	09 f0       	breq	.+2      	; 0x15fa <KPD_Interface_RemoteUser+0x474>
    15f8:	43 c0       	rjmp	.+134    	; 0x1680 <KPD_Interface_RemoteUser+0x4fa>
						{
							dimmer_brightness += 10;
    15fa:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    15fe:	66 5f       	subi	r22, 0xF6	; 246
    1600:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    160e:	ab 01       	movw	r20, r22
    1610:	bc 01       	movw	r22, r24
    1612:	88 ee       	ldi	r24, 0xE8	; 232
    1614:	93 e0       	ldi	r25, 0x03	; 3
    1616:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    161a:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    161e:	1f 92       	push	r1
    1620:	8f 93       	push	r24
    1622:	88 e6       	ldi	r24, 0x68	; 104
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	9f 93       	push	r25
    1628:	8f 93       	push	r24
    162a:	8c e9       	ldi	r24, 0x9C	; 156
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	9f 93       	push	r25
    1630:	8f 93       	push	r24
    1632:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
    1636:	8c e9       	ldi	r24, 0x9C	; 156
    1638:	94 e0       	ldi	r25, 0x04	; 4
    163a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
    163e:	8d e0       	ldi	r24, 0x0D	; 13
    1640:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1644:	88 e7       	ldi	r24, 0x78	; 120
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
    164c:	8d e0       	ldi	r24, 0x0D	; 13
    164e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1652:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	85 36       	cpi	r24, 0x65	; 101
    1664:	08 f4       	brcc	.+2      	; 0x1668 <KPD_Interface_RemoteUser+0x4e2>
    1666:	28 c1       	rjmp	.+592    	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
							{
								dimmer_brightness = 100;
    1668:	84 e6       	ldi	r24, 0x64	; 100
    166a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	68 ec       	ldi	r22, 0xC8	; 200
    1674:	72 e4       	ldi	r23, 0x42	; 66
    1676:	88 ee       	ldi	r24, 0xE8	; 232
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
    167e:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
    1680:	82 33       	cpi	r24, 0x32	; 50
    1682:	09 f0       	breq	.+2      	; 0x1686 <KPD_Interface_RemoteUser+0x500>
    1684:	19 c1       	rjmp	.+562    	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
						{
							dimmer_brightness -= 10;
    1686:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    168a:	6a 50       	subi	r22, 0x0A	; 10
    168c:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    169a:	ab 01       	movw	r20, r22
    169c:	bc 01       	movw	r22, r24
    169e:	88 ee       	ldi	r24, 0xE8	; 232
    16a0:	93 e0       	ldi	r25, 0x03	; 3
    16a2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    16a6:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    16aa:	1f 92       	push	r1
    16ac:	8f 93       	push	r24
    16ae:	88 e6       	ldi	r24, 0x68	; 104
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	9f 93       	push	r25
    16b4:	8f 93       	push	r24
    16b6:	8c e9       	ldi	r24, 0x9C	; 156
    16b8:	94 e0       	ldi	r25, 0x04	; 4
    16ba:	9f 93       	push	r25
    16bc:	8f 93       	push	r24
    16be:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
    16c2:	8c e9       	ldi	r24, 0x9C	; 156
    16c4:	94 e0       	ldi	r25, 0x04	; 4
    16c6:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
    16ca:	8d e0       	ldi	r24, 0x0D	; 13
    16cc:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    16d0:	88 e7       	ldi	r24, 0x78	; 120
    16d2:	93 e0       	ldi	r25, 0x03	; 3
    16d4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
    16d8:	8d e0       	ldi	r24, 0x0D	; 13
    16da:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
    16ec:	81 11       	cpse	r24, r1
    16ee:	e4 c0       	rjmp	.+456    	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 6 is OFF");
    16f0:	88 e8       	ldi	r24, 0x88	; 136
    16f2:	93 e0       	ldi	r25, 0x03	; 3
    16f4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
    16f8:	2f ef       	ldi	r18, 0xFF	; 255
    16fa:	83 ed       	ldi	r24, 0xD3	; 211
    16fc:	90 e3       	ldi	r25, 0x30	; 48
    16fe:	21 50       	subi	r18, 0x01	; 1
    1700:	80 40       	sbci	r24, 0x00	; 0
    1702:	90 40       	sbci	r25, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <KPD_Interface_RemoteUser+0x578>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <KPD_Interface_RemoteUser+0x582>
    1708:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
    170a:	8d e0       	ldi	r24, 0x0D	; 13
    170c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1710:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1714:	1f 92       	push	r1
    1716:	8f 93       	push	r24
    1718:	88 e6       	ldi	r24, 0x68	; 104
    171a:	93 e0       	ldi	r25, 0x03	; 3
    171c:	9f 93       	push	r25
    171e:	8f 93       	push	r24
    1720:	8c e9       	ldi	r24, 0x9C	; 156
    1722:	94 e0       	ldi	r25, 0x04	; 4
    1724:	9f 93       	push	r25
    1726:	8f 93       	push	r24
    1728:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
					BL_voidTxString(DimmerString);
    172c:	8c e9       	ldi	r24, 0x9C	; 156
    172e:	94 e0       	ldi	r25, 0x04	; 4
    1730:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    BL_voidTxChar('\r');
    1734:	8d e0       	ldi	r24, 0x0D	; 13
    1736:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    173a:	88 e7       	ldi	r24, 0x78	; 120
    173c:	93 e0       	ldi	r25, 0x03	; 3
    173e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
					BL_voidTxChar('\r');
    1742:	8d e0       	ldi	r24, 0x0D	; 13
    1744:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1748:	8d e8       	ldi	r24, 0x8D	; 141
    174a:	94 e0       	ldi	r25, 0x04	; 4
    174c:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
					while (bluetooh_value != 0)
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	7d c0       	rjmp	.+250    	; 0x1858 <KPD_Interface_RemoteUser+0x6d2>
					{
						if (bluetooh_value == '1')
    175e:	81 33       	cpi	r24, 0x31	; 49
    1760:	09 f0       	breq	.+2      	; 0x1764 <KPD_Interface_RemoteUser+0x5de>
    1762:	43 c0       	rjmp	.+134    	; 0x17ea <KPD_Interface_RemoteUser+0x664>
						{
							dimmer_brightness += 10;
    1764:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    1768:	66 5f       	subi	r22, 0xF6	; 246
    176a:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    1778:	ab 01       	movw	r20, r22
    177a:	bc 01       	movw	r22, r24
    177c:	88 ee       	ldi	r24, 0xE8	; 232
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1784:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1788:	1f 92       	push	r1
    178a:	8f 93       	push	r24
    178c:	88 e6       	ldi	r24, 0x68	; 104
    178e:	93 e0       	ldi	r25, 0x03	; 3
    1790:	9f 93       	push	r25
    1792:	8f 93       	push	r24
    1794:	8c e9       	ldi	r24, 0x9C	; 156
    1796:	94 e0       	ldi	r25, 0x04	; 4
    1798:	9f 93       	push	r25
    179a:	8f 93       	push	r24
    179c:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
    17a0:	8c e9       	ldi	r24, 0x9C	; 156
    17a2:	94 e0       	ldi	r25, 0x04	; 4
    17a4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
    17a8:	8d e0       	ldi	r24, 0x0D	; 13
    17aa:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    17ae:	88 e7       	ldi	r24, 0x78	; 120
    17b0:	93 e0       	ldi	r25, 0x03	; 3
    17b2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
    17b6:	8d e0       	ldi	r24, 0x0D	; 13
    17b8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							if (dimmer_brightness > 100)
    17bc:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	85 36       	cpi	r24, 0x65	; 101
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <KPD_Interface_RemoteUser+0x64c>
    17d0:	73 c0       	rjmp	.+230    	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
							{
								dimmer_brightness = 100;
    17d2:	84 e6       	ldi	r24, 0x64	; 100
    17d4:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	68 ec       	ldi	r22, 0xC8	; 200
    17de:	72 e4       	ldi	r23, 0x42	; 66
    17e0:	88 ee       	ldi	r24, 0xE8	; 232
    17e2:	93 e0       	ldi	r25, 0x03	; 3
    17e4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
    17e8:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    17ea:	82 33       	cpi	r24, 0x32	; 50
    17ec:	99 f5       	brne	.+102    	; 0x1854 <KPD_Interface_RemoteUser+0x6ce>
						{
							dimmer_brightness -= 10;
    17ee:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    17f2:	6a 50       	subi	r22, 0x0A	; 10
    17f4:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    1802:	ab 01       	movw	r20, r22
    1804:	bc 01       	movw	r22, r24
    1806:	88 ee       	ldi	r24, 0xE8	; 232
    1808:	93 e0       	ldi	r25, 0x03	; 3
    180a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    180e:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1812:	1f 92       	push	r1
    1814:	8f 93       	push	r24
    1816:	88 e6       	ldi	r24, 0x68	; 104
    1818:	93 e0       	ldi	r25, 0x03	; 3
    181a:	9f 93       	push	r25
    181c:	8f 93       	push	r24
    181e:	8c e9       	ldi	r24, 0x9C	; 156
    1820:	94 e0       	ldi	r25, 0x04	; 4
    1822:	9f 93       	push	r25
    1824:	8f 93       	push	r24
    1826:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
							BL_voidTxString(DimmerString);
    182a:	8c e9       	ldi	r24, 0x9C	; 156
    182c:	94 e0       	ldi	r25, 0x04	; 4
    182e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1832:	8d e0       	ldi	r24, 0x0D	; 13
    1834:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1838:	88 e7       	ldi	r24, 0x78	; 120
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
							BL_voidTxChar('\r');
    1840:	8d e0       	ldi	r24, 0x0D	; 13
    1842:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    1854:	80 33       	cpi	r24, 0x30	; 48
    1856:	81 f1       	breq	.+96     	; 0x18b8 <KPD_Interface_RemoteUser+0x732>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    1858:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    185c:	81 11       	cpse	r24, r1
    185e:	7f cf       	rjmp	.-258    	; 0x175e <KPD_Interface_RemoteUser+0x5d8>
    1860:	08 95       	ret
			break;

			case ('3'):
			
				
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1862:	6a e8       	ldi	r22, 0x8A	; 138
    1864:	74 e0       	ldi	r23, 0x04	; 4
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    186c:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__data_end>
    1870:	1f 92       	push	r1
    1872:	8f 93       	push	r24
    1874:	8e e6       	ldi	r24, 0x6E	; 110
    1876:	92 e0       	ldi	r25, 0x02	; 2
    1878:	9f 93       	push	r25
    187a:	8f 93       	push	r24
    187c:	80 eb       	ldi	r24, 0xB0	; 176
    187e:	94 e0       	ldi	r25, 0x04	; 4
    1880:	9f 93       	push	r25
    1882:	8f 93       	push	r24
    1884:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
				BL_voidTxString(tempString);
    1888:	80 eb       	ldi	r24, 0xB0	; 176
    188a:	94 e0       	ldi	r25, 0x04	; 4
    188c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
    1890:	8d e0       	ldi	r24, 0x0D	; 13
    1892:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    1896:	8e e7       	ldi	r24, 0x7E	; 126
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
				BL_voidTxChar('\r');
    189e:	8d e0       	ldi	r24, 0x0D	; 13
    18a0:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    18a4:	8d e8       	ldi	r24, 0x8D	; 141
    18a6:	94 e0       	ldi	r25, 0x04	; 4
    18a8:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
				{
					
				}

					
        break;
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	08 95       	ret

000018ba <WelcomeScreenRemote>:
}

void WelcomeScreenRemote()
// this function is for greeting the user in remote user interface
{
    BL_voidTxString(" Welcome to your");
    18ba:	8a ef       	ldi	r24, 0xFA	; 250
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
    BL_voidTxChar('\r');
    18c2:	8d e0       	ldi	r24, 0x0D	; 13
    18c4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
    BL_voidTxString("Smart Home");
    18c8:	8e e0       	ldi	r24, 0x0E	; 14
    18ca:	94 e0       	ldi	r25, 0x04	; 4
    18cc:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
    BL_voidTxChar('\r');
    18d0:	8d e0       	ldi	r24, 0x0D	; 13
    18d2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
    18d6:	2f ef       	ldi	r18, 0xFF	; 255
    18d8:	83 ed       	ldi	r24, 0xD3	; 211
    18da:	90 e3       	ldi	r25, 0x30	; 48
    18dc:	21 50       	subi	r18, 0x01	; 1
    18de:	80 40       	sbci	r24, 0x00	; 0
    18e0:	90 40       	sbci	r25, 0x00	; 0
    18e2:	e1 f7       	brne	.-8      	; 0x18dc <WelcomeScreenRemote+0x22>
    18e4:	00 c0       	rjmp	.+0      	; 0x18e6 <WelcomeScreenRemote+0x2c>
    18e6:	00 00       	nop
    18e8:	08 95       	ret

000018ea <WelcomeScreenLocal>:
}

void WelcomeScreenLocal()
// this function is for greeting the user in local user interface
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
    18ea:	8a ef       	ldi	r24, 0xFA	; 250
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
    18f2:	80 ec       	ldi	r24, 0xC0	; 192
    18f4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    18f8:	8b e0       	ldi	r24, 0x0B	; 11
    18fa:	94 e0       	ldi	r25, 0x04	; 4
    18fc:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
    1900:	2f ef       	ldi	r18, 0xFF	; 255
    1902:	83 ed       	ldi	r24, 0xD3	; 211
    1904:	90 e3       	ldi	r25, 0x30	; 48
    1906:	21 50       	subi	r18, 0x01	; 1
    1908:	80 40       	sbci	r24, 0x00	; 0
    190a:	90 40       	sbci	r25, 0x00	; 0
    190c:	e1 f7       	brne	.-8      	; 0x1906 <WelcomeScreenLocal+0x1c>
    190e:	00 c0       	rjmp	.+0      	; 0x1910 <WelcomeScreenLocal+0x26>
    1910:	00 00       	nop
    1912:	08 95       	ret

00001914 <APP_init>:




void APP_init(void)
{
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	e0 97       	sbiw	r28, 0x30	; 48
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
	/*APP_init function is for the logic initialization of the smart home system setting initial 
	values for the users and epprom locations for saving */


    HOME_voidInit();
    1928:	0e 94 60 00 	call	0xc0	; 0xc0 <HOME_voidInit>

	// display the welcome screen
	WelcomeScreenLocal();
    192c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <WelcomeScreenLocal>
	WelcomeScreenRemote();
    1930:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <WelcomeScreenRemote>
	LCD_voidClear();
    1934:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>

	
	
	u8 testusername[8]="7654321";
    1938:	88 e0       	ldi	r24, 0x08	; 8
    193a:	e9 e1       	ldi	r30, 0x19	; 25
    193c:	f4 e0       	ldi	r31, 0x04	; 4
    193e:	de 01       	movw	r26, r28
    1940:	11 96       	adiw	r26, 0x01	; 1
    1942:	01 90       	ld	r0, Z+
    1944:	0d 92       	st	X+, r0
    1946:	8a 95       	dec	r24
    1948:	e1 f7       	brne	.-8      	; 0x1942 <APP_init+0x2e>
	u8 testuserpass[8]="7654321";
    194a:	88 e0       	ldi	r24, 0x08	; 8
    194c:	e9 e1       	ldi	r30, 0x19	; 25
    194e:	f4 e0       	ldi	r31, 0x04	; 4
    1950:	de 01       	movw	r26, r28
    1952:	19 96       	adiw	r26, 0x09	; 9
    1954:	01 90       	ld	r0, Z+
    1956:	0d 92       	st	X+, r0
    1958:	8a 95       	dec	r24
    195a:	e1 f7       	brne	.-8      	; 0x1954 <APP_init+0x40>
	u8 testadminname[8]="1122334";
    195c:	88 e0       	ldi	r24, 0x08	; 8
    195e:	e1 e2       	ldi	r30, 0x21	; 33
    1960:	f4 e0       	ldi	r31, 0x04	; 4
    1962:	de 01       	movw	r26, r28
    1964:	51 96       	adiw	r26, 0x11	; 17
    1966:	01 90       	ld	r0, Z+
    1968:	0d 92       	st	X+, r0
    196a:	8a 95       	dec	r24
    196c:	e1 f7       	brne	.-8      	; 0x1966 <APP_init+0x52>
	u8 testadminpass[8]="1122334";
    196e:	88 e0       	ldi	r24, 0x08	; 8
    1970:	e1 e2       	ldi	r30, 0x21	; 33
    1972:	f4 e0       	ldi	r31, 0x04	; 4
    1974:	de 01       	movw	r26, r28
    1976:	59 96       	adiw	r26, 0x19	; 25
    1978:	01 90       	ld	r0, Z+
    197a:	0d 92       	st	X+, r0
    197c:	8a 95       	dec	r24
    197e:	e1 f7       	brne	.-8      	; 0x1978 <APP_init+0x64>
	u8 testusername1[8]="1002003";
    1980:	88 e0       	ldi	r24, 0x08	; 8
    1982:	e9 e2       	ldi	r30, 0x29	; 41
    1984:	f4 e0       	ldi	r31, 0x04	; 4
    1986:	de 01       	movw	r26, r28
    1988:	91 96       	adiw	r26, 0x21	; 33
    198a:	01 90       	ld	r0, Z+
    198c:	0d 92       	st	X+, r0
    198e:	8a 95       	dec	r24
    1990:	e1 f7       	brne	.-8      	; 0x198a <APP_init+0x76>
	u8 testuserpass1[8]="1002003";
    1992:	88 e0       	ldi	r24, 0x08	; 8
    1994:	e9 e2       	ldi	r30, 0x29	; 41
    1996:	f4 e0       	ldi	r31, 0x04	; 4
    1998:	de 01       	movw	r26, r28
    199a:	99 96       	adiw	r26, 0x29	; 41
    199c:	01 90       	ld	r0, Z+
    199e:	0d 92       	st	X+, r0
    19a0:	8a 95       	dec	r24
    19a2:	e1 f7       	brne	.-8      	; 0x199c <APP_init+0x88>
		
	
	EEPROM_voidWritePage(16,&testusername[0]);
    19a4:	be 01       	movw	r22, r28
    19a6:	6f 5f       	subi	r22, 0xFF	; 255
    19a8:	7f 4f       	sbci	r23, 0xFF	; 255
    19aa:	80 e1       	ldi	r24, 0x10	; 16
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
    19b2:	be 01       	movw	r22, r28
    19b4:	67 5f       	subi	r22, 0xF7	; 247
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	88 e1       	ldi	r24, 0x18	; 24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(80,&testadminname[0]);
    19c0:	be 01       	movw	r22, r28
    19c2:	6f 5e       	subi	r22, 0xEF	; 239
    19c4:	7f 4f       	sbci	r23, 0xFF	; 255
    19c6:	80 e5       	ldi	r24, 0x50	; 80
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(88,&testadminpass[0]);
    19ce:	be 01       	movw	r22, r28
    19d0:	67 5e       	subi	r22, 0xE7	; 231
    19d2:	7f 4f       	sbci	r23, 0xFF	; 255
    19d4:	88 e5       	ldi	r24, 0x58	; 88
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(96,&testusername1[0]);
    19dc:	be 01       	movw	r22, r28
    19de:	6f 5d       	subi	r22, 0xDF	; 223
    19e0:	7f 4f       	sbci	r23, 0xFF	; 255
    19e2:	80 e6       	ldi	r24, 0x60	; 96
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(104,&testuserpass1[0]);
    19ea:	be 01       	movw	r22, r28
    19ec:	67 5d       	subi	r22, 0xD7	; 215
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	88 e6       	ldi	r24, 0x68	; 104
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 25 11 	call	0x224a	; 0x224a <EEPROM_voidWritePage>





}
    19f8:	e0 96       	adiw	r28, 0x30	; 48
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	08 95       	ret

00001a0a <Display_Remotetemp>:
}

void Display_Remotetemp(void)
//function for getting temp value from temp sensor and displaying it for remote user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1a0a:	6a e8       	ldi	r22, 0x8A	; 138
    1a0c:	74 e0       	ldi	r23, 0x04	; 4
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
	sprintf(tempString, "Room Temp: %d c", local_temp);
    1a14:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <__data_end>
    1a18:	1f 92       	push	r1
    1a1a:	8f 93       	push	r24
    1a1c:	8e e6       	ldi	r24, 0x6E	; 110
    1a1e:	92 e0       	ldi	r25, 0x02	; 2
    1a20:	9f 93       	push	r25
    1a22:	8f 93       	push	r24
    1a24:	80 eb       	ldi	r24, 0xB0	; 176
    1a26:	94 e0       	ldi	r25, 0x04	; 4
    1a28:	9f 93       	push	r25
    1a2a:	8f 93       	push	r24
    1a2c:	0e 94 cc 1b 	call	0x3798	; 0x3798 <sprintf>
	BL_voidTxString(tempString);
    1a30:	80 eb       	ldi	r24, 0xB0	; 176
    1a32:	94 e0       	ldi	r25, 0x04	; 4
    1a34:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxChar('\r');
    1a38:	8d e0       	ldi	r24, 0x0D	; 13
    1a3a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	08 95       	ret

00001a4c <Idle_RemoteAction>:

void Idle_RemoteAction()
//this function is for the remote user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the remote user 
{ 
    BL_voidTxChar('\r');
    1a4c:	8d e0       	ldi	r24, 0x0D	; 13
    1a4e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	Display_Remotetemp();
    1a52:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <Display_Remotetemp>
	BL_voidTxString("0-Go to Home");
    1a56:	81 e3       	ldi	r24, 0x31	; 49
    1a58:	94 e0       	ldi	r25, 0x04	; 4
    1a5a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <BL_voidTxString>
	BL_voidTxChar('\r');
    1a5e:	8d e0       	ldi	r24, 0x0D	; 13
    1a60:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <BL_voidTxChar>
	BL_voidRxChar(&bluetooh_value);
    1a64:	8d e8       	ldi	r24, 0x8D	; 141
    1a66:	94 e0       	ldi	r25, 0x04	; 4
    1a68:	0e 94 ef 10 	call	0x21de	; 0x21de <BL_voidRxChar>
    if (bluetooh_value == '0')
    1a6c:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <bluetooh_value>
    1a70:	80 33       	cpi	r24, 0x30	; 48
    1a72:	11 f4       	brne	.+4      	; 0x1a78 <Idle_RemoteAction+0x2c>
    {
        TMR0clear_flag();
    1a74:	0e 94 82 17 	call	0x2f04	; 0x2f04 <TMR0clear_flag>
    1a78:	08 95       	ret

00001a7a <Display_temp>:
}

void Display_temp(void)
//function for getting temp value from temp sensor and displaying it for local user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1a7a:	6a e8       	ldi	r22, 0x8A	; 138
    1a7c:	74 e0       	ldi	r23, 0x04	; 4
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    1a84:	6b e0       	ldi	r22, 0x0B	; 11
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
    1a8c:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <__data_end>
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
    1a9a:	08 95       	ret

00001a9c <Idle_Action>:

void Idle_Action()
//this function is for the local user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the local user
{ 
    LCD_voidClear();
    1a9c:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
    1aa0:	80 e8       	ldi	r24, 0x80	; 128
    1aa2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
    1aa6:	8e e3       	ldi	r24, 0x3E	; 62
    1aa8:	94 e0       	ldi	r25, 0x04	; 4
    1aaa:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
	Display_temp();
    1aae:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
    1ab2:	80 ec       	ldi	r24, 0xC0	; 192
    1ab4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
    1ab8:	81 e3       	ldi	r24, 0x31	; 49
    1aba:	94 e0       	ldi	r25, 0x04	; 4
    1abc:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
    1ac2:	81 e6       	ldi	r24, 0x61	; 97
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
		Display_temp();
    1aca:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1ace:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1ad2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad4:	b1 f3       	breq	.-20     	; 0x1ac2 <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
    1ad6:	80 33       	cpi	r24, 0x30	; 48
    1ad8:	11 f4       	brne	.+4      	; 0x1ade <Idle_Action+0x42>
    {
        LCD_voidClear();
    1ada:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
    }
    TMR0clear_flag();
    1ade:	0e 94 82 17 	call	0x2f04	; 0x2f04 <TMR0clear_flag>
    LCD_voidClear();
    1ae2:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
    1ae6:	08 95       	ret

00001ae8 <Reset_AllKPDValues>:
}

void Reset_AllKPDValues()
//function for reseting all KPD values for new values to be entered
{
    Local_copyKPDValue = KPD_Not_Pressed;
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
    1aee:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
    1af2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
    1af6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
    1afa:	08 95       	ret

00001afc <KPD_Interface_Localuser>:

void KPD_Interface_Localuser(void)
{
	//this is the local user interface to control the smart home all user allowed functions using lcd to display options and KPD for interaction
		//reseting all KPD variables for new values to be entered
        Reset_AllKPDValues();
    1afc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Reset_AllKPDValues>
		2-start tmr0 before busy wait for KPD to avoid starting the tmr0 counter when the lcd didnt finish printing the options
		3-after the wihle loop is finished make sure to stop the tmr0 to avoid going to the idle function
		*/
	
		//setting the TRM0 ctc interrupt function
        TMR0_SetCallBackCTC(&Idle_Action);
    1b00:	8e e4       	ldi	r24, 0x4E	; 78
    1b02:	9d e0       	ldi	r25, 0x0D	; 13
    1b04:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <TMR0_SetCallBackCTC>
		//starting the timer0
        TMR0_voidStart();
    1b08:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
        LCD_voidClear();
    1b0c:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
    1b10:	86 e2       	ldi	r24, 0x26	; 38
    1b12:	92 e0       	ldi	r25, 0x02	; 2
    1b14:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
    1b18:	80 ec       	ldi	r24, 0xC0	; 192
    1b1a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
    1b1e:	83 e3       	ldi	r24, 0x33	; 51
    1b20:	92 e0       	ldi	r25, 0x02	; 2
    1b22:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
        Reset_AllKPDValues();
    1b26:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Reset_AllKPDValues>

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1b2a:	0c c0       	rjmp	.+24     	; 0x1b44 <KPD_Interface_Localuser+0x48>
        {
            if (local_KPDIdleValue == '0')
    1b2c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1b30:	80 33       	cpi	r24, 0x30	; 48
    1b32:	21 f4       	brne	.+8      	; 0x1b3c <KPD_Interface_Localuser+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
    1b34:	8f ef       	ldi	r24, 0xFF	; 255
    1b36:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
    1b3a:	08 c0       	rjmp	.+16     	; 0x1b4c <KPD_Interface_Localuser+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
    1b3c:	84 e6       	ldi	r24, 0x64	; 100
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
        Reset_AllKPDValues();

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1b44:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1b48:	8f 3f       	cpi	r24, 0xFF	; 255
    1b4a:	81 f3       	breq	.-32     	; 0x1b2c <KPD_Interface_Localuser+0x30>
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
		//stopping timer after reciving the value to avoid tmr0 from going to idle function
        TMR0_voidStop();
    1b4c:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
        switch (Local_copyKPDValue)
    1b50:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1b54:	82 33       	cpi	r24, 0x32	; 50
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <KPD_Interface_Localuser+0x5e>
    1b58:	45 c0       	rjmp	.+138    	; 0x1be4 <KPD_Interface_Localuser+0xe8>
    1b5a:	83 33       	cpi	r24, 0x33	; 51
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <KPD_Interface_Localuser+0x64>
    1b5e:	06 c3       	rjmp	.+1548   	; 0x216c <KPD_Interface_Localuser+0x670>
    1b60:	81 33       	cpi	r24, 0x31	; 49
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <KPD_Interface_Localuser+0x6a>
    1b64:	35 c3       	rjmp	.+1642   	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
        {
        case ('1'):

            LCD_voidClear();
    1b66:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off 0-H");
    1b6a:	8d e4       	ldi	r24, 0x4D	; 77
    1b6c:	94 e0       	ldi	r25, 0x04	; 4
    1b6e:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1b72:	80 ec       	ldi	r24, 0xC0	; 192
    1b74:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1b78:	6a e8       	ldi	r22, 0x8A	; 138
    1b7a:	74 e0       	ldi	r23, 0x04	; 4
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
    1b82:	8e e5       	ldi	r24, 0x5E	; 94
    1b84:	94 e0       	ldi	r25, 0x04	; 4
    1b86:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1b8a:	6c e0       	ldi	r22, 0x0C	; 12
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayNumber(local_temp);
    1b92:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <__data_end>
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1ba0:	1c c0       	rjmp	.+56     	; 0x1bda <KPD_Interface_Localuser+0xde>
			{
				KPD_voidGetValue(&local_KPDSelectValue);
    1ba2:	80 e6       	ldi	r24, 0x60	; 96
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1baa:	6a e8       	ldi	r22, 0x8A	; 138
    1bac:	74 e0       	ldi	r23, 0x04	; 4
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1bb4:	6c e0       	ldi	r22, 0x0C	; 12
    1bb6:	82 e0       	ldi	r24, 0x02	; 2
    1bb8:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    1bbc:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <__data_end>
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
				if (local_KPDSelectValue == '0')
    1bca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1bce:	80 33       	cpi	r24, 0x30	; 48
    1bd0:	21 f4       	brne	.+8      	; 0x1bda <KPD_Interface_Localuser+0xde>
				{
					local_KPDSelectValue = KPD_Not_Pressed;
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
    1bd8:	08 95       	ret
            LCD_voidSendCommand(Write_SecondLine);
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
			LCD_voidDisplayNumber(local_temp);
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1bda:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1bde:	8f 3f       	cpi	r24, 0xFF	; 255
    1be0:	01 f3       	breq	.-64     	; 0x1ba2 <KPD_Interface_Localuser+0xa6>
    1be2:	08 95       	ret
            break;
			

        case ('2'):

            LCD_voidClear();
    1be4:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
    1be8:	8b e8       	ldi	r24, 0x8B	; 139
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1bf0:	80 ec       	ldi	r24, 0xC0	; 192
    1bf2:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
    1bf6:	8b e9       	ldi	r24, 0x9B	; 155
    1bf8:	92 e0       	ldi	r25, 0x02	; 2
    1bfa:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
    1bfe:	8e e4       	ldi	r24, 0x4E	; 78
    1c00:	9d e0       	ldi	r25, 0x0D	; 13
    1c02:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
    1c06:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1c0a:	0c c0       	rjmp	.+24     	; 0x1c24 <KPD_Interface_Localuser+0x128>
            {
                KPD_voidGetValue(&local_lightNum);
    1c0c:	83 e6       	ldi	r24, 0x63	; 99
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
    1c14:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1c18:	80 33       	cpi	r24, 0x30	; 48
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <KPD_Interface_Localuser+0x128>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <KPD_Interface_Localuser+0x130>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1c24:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1c28:	8f 3f       	cpi	r24, 0xFF	; 255
    1c2a:	81 f3       	breq	.-32     	; 0x1c0c <KPD_Interface_Localuser+0x110>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
    1c2c:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <TMR0_voidStop>
            switch (local_lightNum)
    1c30:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1c34:	83 33       	cpi	r24, 0x33	; 51
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <KPD_Interface_Localuser+0x13e>
    1c38:	a6 c0       	rjmp	.+332    	; 0x1d86 <KPD_Interface_Localuser+0x28a>
    1c3a:	30 f4       	brcc	.+12     	; 0x1c48 <KPD_Interface_Localuser+0x14c>
    1c3c:	81 33       	cpi	r24, 0x31	; 49
    1c3e:	69 f0       	breq	.+26     	; 0x1c5a <KPD_Interface_Localuser+0x15e>
    1c40:	82 33       	cpi	r24, 0x32	; 50
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <KPD_Interface_Localuser+0x14a>
    1c44:	54 c0       	rjmp	.+168    	; 0x1cee <KPD_Interface_Localuser+0x1f2>
    1c46:	08 95       	ret
    1c48:	85 33       	cpi	r24, 0x35	; 53
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <KPD_Interface_Localuser+0x152>
    1c4c:	34 c1       	rjmp	.+616    	; 0x1eb6 <KPD_Interface_Localuser+0x3ba>
    1c4e:	08 f4       	brcc	.+2      	; 0x1c52 <KPD_Interface_Localuser+0x156>
    1c50:	e6 c0       	rjmp	.+460    	; 0x1e1e <KPD_Interface_Localuser+0x322>
    1c52:	86 33       	cpi	r24, 0x36	; 54
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <KPD_Interface_Localuser+0x15c>
    1c56:	7b c1       	rjmp	.+758    	; 0x1f4e <KPD_Interface_Localuser+0x452>
    1c58:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    1c5a:	4c e8       	ldi	r20, 0x8C	; 140
    1c5c:	54 e0       	ldi	r21, 0x04	; 4
    1c5e:	63 e0       	ldi	r22, 0x03	; 3
    1c60:	83 e0       	ldi	r24, 0x03	; 3
    1c62:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                LCD_voidClear();
    1c66:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
                if (led_status == 1)
    1c6a:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	f1 f4       	brne	.+60     	; 0x1cae <KPD_Interface_Localuser+0x1b2>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
    1c72:	88 ea       	ldi	r24, 0xA8	; 168
    1c74:	92 e0       	ldi	r25, 0x02	; 2
    1c76:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1c7a:	80 ec       	ldi	r24, 0xC0	; 192
    1c7c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1c80:	86 eb       	ldi	r24, 0xB6	; 182
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <KPD_Interface_Localuser+0x196>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1c8a:	82 e6       	ldi	r24, 0x62	; 98
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1c92:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1c96:	8f 3f       	cpi	r24, 0xFF	; 255
    1c98:	c1 f3       	breq	.-16     	; 0x1c8a <KPD_Interface_Localuser+0x18e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1c9a:	81 33       	cpi	r24, 0x31	; 49
    1c9c:	29 f4       	brne	.+10     	; 0x1ca8 <KPD_Interface_Localuser+0x1ac>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1c9e:	41 e0       	ldi	r20, 0x01	; 1
    1ca0:	63 e0       	ldi	r22, 0x03	; 3
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
    1ca8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Reset_AllKPDValues>
					break;
    1cac:	08 95       	ret
                }
                else if (led_status == 0)
    1cae:	81 11       	cpse	r24, r1
    1cb0:	8f c2       	rjmp	.+1310   	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
    1cb2:	87 ec       	ldi	r24, 0xC7	; 199
    1cb4:	92 e0       	ldi	r25, 0x02	; 2
    1cb6:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1cba:	80 ec       	ldi	r24, 0xC0	; 192
    1cbc:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1cc0:	86 ed       	ldi	r24, 0xD6	; 214
    1cc2:	92 e0       	ldi	r25, 0x02	; 2
    1cc4:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <KPD_Interface_Localuser+0x1d6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1cca:	82 e6       	ldi	r24, 0x62	; 98
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1cd2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1cd6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cd8:	c1 f3       	breq	.-16     	; 0x1cca <KPD_Interface_Localuser+0x1ce>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1cda:	81 33       	cpi	r24, 0x31	; 49
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <KPD_Interface_Localuser+0x1ec>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	63 e0       	ldi	r22, 0x03	; 3
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    Reset_AllKPDValues();
    1ce8:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Reset_AllKPDValues>
    1cec:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
    1cee:	4c e8       	ldi	r20, 0x8C	; 140
    1cf0:	54 e0       	ldi	r21, 0x04	; 4
    1cf2:	64 e0       	ldi	r22, 0x04	; 4
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                LCD_voidClear();
    1cfa:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
                if (led_status == 1)
    1cfe:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	f9 f4       	brne	.+62     	; 0x1d44 <KPD_Interface_Localuser+0x248>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
    1d06:	86 ee       	ldi	r24, 0xE6	; 230
    1d08:	92 e0       	ldi	r25, 0x02	; 2
    1d0a:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1d0e:	80 ec       	ldi	r24, 0xC0	; 192
    1d10:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1d14:	86 eb       	ldi	r24, 0xB6	; 182
    1d16:	92 e0       	ldi	r25, 0x02	; 2
    1d18:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1d1c:	04 c0       	rjmp	.+8      	; 0x1d26 <KPD_Interface_Localuser+0x22a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1d1e:	82 e6       	ldi	r24, 0x62	; 98
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1d26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1d2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d2c:	c1 f3       	breq	.-16     	; 0x1d1e <KPD_Interface_Localuser+0x222>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1d2e:	81 33       	cpi	r24, 0x31	; 49
    1d30:	29 f4       	brne	.+10     	; 0x1d3c <KPD_Interface_Localuser+0x240>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	64 e0       	ldi	r22, 0x04	; 4
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1d42:	08 95       	ret
                }
                else if (led_status == 0)
    1d44:	81 11       	cpse	r24, r1
    1d46:	44 c2       	rjmp	.+1160   	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
    1d48:	84 ef       	ldi	r24, 0xF4	; 244
    1d4a:	92 e0       	ldi	r25, 0x02	; 2
    1d4c:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1d50:	80 ec       	ldi	r24, 0xC0	; 192
    1d52:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1d56:	86 ed       	ldi	r24, 0xD6	; 214
    1d58:	92 e0       	ldi	r25, 0x02	; 2
    1d5a:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1d5e:	04 c0       	rjmp	.+8      	; 0x1d68 <KPD_Interface_Localuser+0x26c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1d60:	82 e6       	ldi	r24, 0x62	; 98
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1d68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1d6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d6e:	c1 f3       	breq	.-16     	; 0x1d60 <KPD_Interface_Localuser+0x264>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1d70:	81 33       	cpi	r24, 0x31	; 49
    1d72:	29 f4       	brne	.+10     	; 0x1d7e <KPD_Interface_Localuser+0x282>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	64 e0       	ldi	r22, 0x04	; 4
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1d7e:	8f ef       	ldi	r24, 0xFF	; 255
    1d80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1d84:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    1d86:	4c e8       	ldi	r20, 0x8C	; 140
    1d88:	54 e0       	ldi	r21, 0x04	; 4
    1d8a:	62 e0       	ldi	r22, 0x02	; 2
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                LCD_voidClear();
    1d92:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
                if (led_status == 1)
    1d96:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	f9 f4       	brne	.+62     	; 0x1ddc <KPD_Interface_Localuser+0x2e0>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1da6:	80 ec       	ldi	r24, 0xC0	; 192
    1da8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1dac:	86 eb       	ldi	r24, 0xB6	; 182
    1dae:	92 e0       	ldi	r25, 0x02	; 2
    1db0:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <KPD_Interface_Localuser+0x2c2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1db6:	82 e6       	ldi	r24, 0x62	; 98
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1dbe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1dc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc4:	c1 f3       	breq	.-16     	; 0x1db6 <KPD_Interface_Localuser+0x2ba>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1dc6:	81 33       	cpi	r24, 0x31	; 49
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <KPD_Interface_Localuser+0x2d8>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1dca:	41 e0       	ldi	r20, 0x01	; 1
    1dcc:	62 e0       	ldi	r22, 0x02	; 2
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1dda:	08 95       	ret
                }
                else if (led_status == 0)
    1ddc:	81 11       	cpse	r24, r1
    1dde:	f8 c1       	rjmp	.+1008   	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
    1de0:	81 e1       	ldi	r24, 0x11	; 17
    1de2:	93 e0       	ldi	r25, 0x03	; 3
    1de4:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1de8:	80 ec       	ldi	r24, 0xC0	; 192
    1dea:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1dee:	86 ed       	ldi	r24, 0xD6	; 214
    1df0:	92 e0       	ldi	r25, 0x02	; 2
    1df2:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <KPD_Interface_Localuser+0x304>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1df8:	82 e6       	ldi	r24, 0x62	; 98
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e04:	8f 3f       	cpi	r24, 0xFF	; 255
    1e06:	c1 f3       	breq	.-16     	; 0x1df8 <KPD_Interface_Localuser+0x2fc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1e08:	81 33       	cpi	r24, 0x31	; 49
    1e0a:	29 f4       	brne	.+10     	; 0x1e16 <KPD_Interface_Localuser+0x31a>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1e1c:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    1e1e:	4c e8       	ldi	r20, 0x8C	; 140
    1e20:	54 e0       	ldi	r21, 0x04	; 4
    1e22:	63 e0       	ldi	r22, 0x03	; 3
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                LCD_voidClear();
    1e2a:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
                if (led_status == 1)
    1e2e:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	f9 f4       	brne	.+62     	; 0x1e74 <KPD_Interface_Localuser+0x378>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
    1e36:	80 e2       	ldi	r24, 0x20	; 32
    1e38:	93 e0       	ldi	r25, 0x03	; 3
    1e3a:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e3e:	80 ec       	ldi	r24, 0xC0	; 192
    1e40:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1e44:	86 eb       	ldi	r24, 0xB6	; 182
    1e46:	92 e0       	ldi	r25, 0x02	; 2
    1e48:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <KPD_Interface_Localuser+0x35a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e4e:	82 e6       	ldi	r24, 0x62	; 98
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5c:	c1 f3       	breq	.-16     	; 0x1e4e <KPD_Interface_Localuser+0x352>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1e5e:	81 33       	cpi	r24, 0x31	; 49
    1e60:	29 f4       	brne	.+10     	; 0x1e6c <KPD_Interface_Localuser+0x370>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1e62:	41 e0       	ldi	r20, 0x01	; 1
    1e64:	63 e0       	ldi	r22, 0x03	; 3
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1e72:	08 95       	ret
                }
                else if (led_status == 0)
    1e74:	81 11       	cpse	r24, r1
    1e76:	ac c1       	rjmp	.+856    	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
    1e78:	8e e2       	ldi	r24, 0x2E	; 46
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e80:	80 ec       	ldi	r24, 0xC0	; 192
    1e82:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1e86:	86 ed       	ldi	r24, 0xD6	; 214
    1e88:	92 e0       	ldi	r25, 0x02	; 2
    1e8a:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <KPD_Interface_Localuser+0x39c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e90:	82 e6       	ldi	r24, 0x62	; 98
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e9e:	c1 f3       	breq	.-16     	; 0x1e90 <KPD_Interface_Localuser+0x394>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1ea0:	81 33       	cpi	r24, 0x31	; 49
    1ea2:	29 f4       	brne	.+10     	; 0x1eae <KPD_Interface_Localuser+0x3b2>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	63 e0       	ldi	r22, 0x03	; 3
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1eb4:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    1eb6:	4c e8       	ldi	r20, 0x8C	; 140
    1eb8:	54 e0       	ldi	r21, 0x04	; 4
    1eba:	62 e0       	ldi	r22, 0x02	; 2
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
                LCD_voidClear();
    1ec2:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
                if (led_status == 1)
    1ec6:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	f9 f4       	brne	.+62     	; 0x1f0c <KPD_Interface_Localuser+0x410>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
    1ece:	8d e3       	ldi	r24, 0x3D	; 61
    1ed0:	93 e0       	ldi	r25, 0x03	; 3
    1ed2:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1ed6:	80 ec       	ldi	r24, 0xC0	; 192
    1ed8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1edc:	86 eb       	ldi	r24, 0xB6	; 182
    1ede:	92 e0       	ldi	r25, 0x02	; 2
    1ee0:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <KPD_Interface_Localuser+0x3f2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1ee6:	82 e6       	ldi	r24, 0x62	; 98
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1eee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1ef2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef4:	c1 f3       	breq	.-16     	; 0x1ee6 <KPD_Interface_Localuser+0x3ea>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1ef6:	81 33       	cpi	r24, 0x31	; 49
    1ef8:	29 f4       	brne	.+10     	; 0x1f04 <KPD_Interface_Localuser+0x408>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	62 e0       	ldi	r22, 0x02	; 2
    1efe:	83 e0       	ldi	r24, 0x03	; 3
    1f00:	0e 94 83 14 	call	0x2906	; 0x2906 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1f0a:	08 95       	ret
                }
                else if (led_status == 0)
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	60 c1       	rjmp	.+704    	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
    1f10:	8b e4       	ldi	r24, 0x4B	; 75
    1f12:	93 e0       	ldi	r25, 0x03	; 3
    1f14:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1f18:	80 ec       	ldi	r24, 0xC0	; 192
    1f1a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1f1e:	86 ed       	ldi	r24, 0xD6	; 214
    1f20:	92 e0       	ldi	r25, 0x02	; 2
    1f22:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <KPD_Interface_Localuser+0x434>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1f28:	82 e6       	ldi	r24, 0x62	; 98
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1f30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1f34:	8f 3f       	cpi	r24, 0xFF	; 255
    1f36:	c1 f3       	breq	.-16     	; 0x1f28 <KPD_Interface_Localuser+0x42c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1f38:	81 33       	cpi	r24, 0x31	; 49
    1f3a:	29 f4       	brne	.+10     	; 0x1f46 <KPD_Interface_Localuser+0x44a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    1f3c:	41 e0       	ldi	r20, 0x01	; 1
    1f3e:	62 e0       	ldi	r22, 0x02	; 2
    1f40:	83 e0       	ldi	r24, 0x03	; 3
    1f42:	0e 94 76 14 	call	0x28ec	; 0x28ec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1f46:	8f ef       	ldi	r24, 0xFF	; 255
    1f48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1f4c:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
    1f4e:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
				
                if (dimmer_brightness > 0)
    1f52:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <KPD_Interface_Localuser+0x460>
    1f5a:	82 c0       	rjmp	.+260    	; 0x2060 <KPD_Interface_Localuser+0x564>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
    1f5c:	8a e5       	ldi	r24, 0x5A	; 90
    1f5e:	93 e0       	ldi	r25, 0x03	; 3
    1f60:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
    1f64:	2f ef       	ldi	r18, 0xFF	; 255
    1f66:	83 ed       	ldi	r24, 0xD3	; 211
    1f68:	90 e3       	ldi	r25, 0x30	; 48
    1f6a:	21 50       	subi	r18, 0x01	; 1
    1f6c:	80 40       	sbci	r24, 0x00	; 0
    1f6e:	90 40       	sbci	r25, 0x00	; 0
    1f70:	e1 f7       	brne	.-8      	; 0x1f6a <KPD_Interface_Localuser+0x46e>
    1f72:	00 c0       	rjmp	.+0      	; 0x1f74 <KPD_Interface_Localuser+0x478>
    1f74:	00 00       	nop
					_delay_ms(1000);
					LCD_voidClear();
    1f76:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    1f7a:	8c e6       	ldi	r24, 0x6C	; 108
    1f7c:	94 e0       	ldi	r25, 0x04	; 4
    1f7e:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1f82:	6d e0       	ldi	r22, 0x0D	; 13
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    1f8a:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    1f8e:	70 e0       	ldi	r23, 0x00	; 0
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    1f98:	80 ec       	ldi	r24, 0xC0	; 192
    1f9a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    1f9e:	88 e7       	ldi	r24, 0x78	; 120
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    1fa6:	56 c0       	rjmp	.+172    	; 0x2054 <KPD_Interface_Localuser+0x558>
					{
						KPD_voidGetValue(&local_lightStatus);
    1fa8:	82 e6       	ldi	r24, 0x62	; 98
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    1fb0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1fb4:	81 33       	cpi	r24, 0x31	; 49
    1fb6:	59 f5       	brne	.+86     	; 0x200e <KPD_Interface_Localuser+0x512>
						{
							dimmer_brightness += 10;
    1fb8:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    1fbc:	66 5f       	subi	r22, 0xF6	; 246
    1fbe:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    1fcc:	ab 01       	movw	r20, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	88 ee       	ldi	r24, 0xE8	; 232
    1fd2:	93 e0       	ldi	r25, 0x03	; 3
    1fd4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1fd8:	6d e0       	ldi	r22, 0x0D	; 13
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    1fe0:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    1fee:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    1ff2:	85 36       	cpi	r24, 0x65	; 101
    1ff4:	78 f1       	brcs	.+94     	; 0x2054 <KPD_Interface_Localuser+0x558>
							{
								dimmer_brightness = 100;
    1ff6:	84 e6       	ldi	r24, 0x64	; 100
    1ff8:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	50 e0       	ldi	r21, 0x00	; 0
    2000:	68 ec       	ldi	r22, 0xC8	; 200
    2002:	72 e4       	ldi	r23, 0x42	; 66
    2004:	88 ee       	ldi	r24, 0xE8	; 232
    2006:	93 e0       	ldi	r25, 0x03	; 3
    2008:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
    200c:	23 c0       	rjmp	.+70     	; 0x2054 <KPD_Interface_Localuser+0x558>
							}
						
							
						}
						else if (local_lightStatus == '2')
    200e:	82 33       	cpi	r24, 0x32	; 50
    2010:	e1 f4       	brne	.+56     	; 0x204a <KPD_Interface_Localuser+0x54e>
						{
							dimmer_brightness -= 10;
    2012:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    2016:	6a 50       	subi	r22, 0x0A	; 10
    2018:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    2026:	ab 01       	movw	r20, r22
    2028:	bc 01       	movw	r22, r24
    202a:	88 ee       	ldi	r24, 0xE8	; 232
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    2032:	6d e0       	ldi	r22, 0x0D	; 13
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    203a:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <KPD_Interface_Localuser+0x558>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    204a:	80 33       	cpi	r24, 0x30	; 48
    204c:	19 f4       	brne	.+6      	; 0x2054 <KPD_Interface_Localuser+0x558>
						{
							LCD_voidClear();
    204e:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
							break;
    2052:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    2054:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2058:	8f 3f       	cpi	r24, 0xFF	; 255
    205a:	09 f4       	brne	.+2      	; 0x205e <KPD_Interface_Localuser+0x562>
    205c:	a5 cf       	rjmp	.-182    	; 0x1fa8 <KPD_Interface_Localuser+0x4ac>
    205e:	08 95       	ret
						}						
						
					}
					
                }
                else if (led_status == 0)
    2060:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <led_status>
    2064:	81 11       	cpse	r24, r1
    2066:	b4 c0       	rjmp	.+360    	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
    2068:	88 e8       	ldi	r24, 0x88	; 136
    206a:	93 e0       	ldi	r25, 0x03	; 3
    206c:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
    2070:	2f ef       	ldi	r18, 0xFF	; 255
    2072:	83 ed       	ldi	r24, 0xD3	; 211
    2074:	90 e3       	ldi	r25, 0x30	; 48
    2076:	21 50       	subi	r18, 0x01	; 1
    2078:	80 40       	sbci	r24, 0x00	; 0
    207a:	90 40       	sbci	r25, 0x00	; 0
    207c:	e1 f7       	brne	.-8      	; 0x2076 <KPD_Interface_Localuser+0x57a>
    207e:	00 c0       	rjmp	.+0      	; 0x2080 <KPD_Interface_Localuser+0x584>
    2080:	00 00       	nop
					_delay_ms(1000);
                    LCD_voidClear();
    2082:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    2086:	8c e6       	ldi	r24, 0x6C	; 108
    2088:	94 e0       	ldi	r25, 0x04	; 4
    208a:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    208e:	6d e0       	ldi	r22, 0x0D	; 13
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    2096:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    20a4:	80 ec       	ldi	r24, 0xC0	; 192
    20a6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    20aa:	88 e7       	ldi	r24, 0x78	; 120
    20ac:	93 e0       	ldi	r25, 0x03	; 3
    20ae:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    20b2:	56 c0       	rjmp	.+172    	; 0x2160 <KPD_Interface_Localuser+0x664>
					{
						KPD_voidGetValue(&local_lightStatus);
    20b4:	82 e6       	ldi	r24, 0x62	; 98
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    20bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    20c0:	81 33       	cpi	r24, 0x31	; 49
    20c2:	59 f5       	brne	.+86     	; 0x211a <KPD_Interface_Localuser+0x61e>
						{
							dimmer_brightness += 10;
    20c4:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    20c8:	66 5f       	subi	r22, 0xF6	; 246
    20ca:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    20d8:	ab 01       	movw	r20, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	88 ee       	ldi	r24, 0xE8	; 232
    20de:	93 e0       	ldi	r25, 0x03	; 3
    20e0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    20e4:	6d e0       	ldi	r22, 0x0D	; 13
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    20ec:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    20fa:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <dimmer_brightness>
    20fe:	85 36       	cpi	r24, 0x65	; 101
    2100:	78 f1       	brcs	.+94     	; 0x2160 <KPD_Interface_Localuser+0x664>
							{
								dimmer_brightness = 100;
    2102:	84 e6       	ldi	r24, 0x64	; 100
    2104:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	68 ec       	ldi	r22, 0xC8	; 200
    210e:	72 e4       	ldi	r23, 0x42	; 66
    2110:	88 ee       	ldi	r24, 0xE8	; 232
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
    2118:	23 c0       	rjmp	.+70     	; 0x2160 <KPD_Interface_Localuser+0x664>
							}
						
							
						}
						else if (local_lightStatus == '2')
    211a:	82 33       	cpi	r24, 0x32	; 50
    211c:	e1 f4       	brne	.+56     	; 0x2156 <KPD_Interface_Localuser+0x65a>
						{
							dimmer_brightness -= 10;
    211e:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    2122:	6a 50       	subi	r22, 0x0A	; 10
    2124:	60 93 8b 04 	sts	0x048B, r22	; 0x80048b <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    2128:	70 e0       	ldi	r23, 0x00	; 0
    212a:	80 e0       	ldi	r24, 0x00	; 0
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    2132:	ab 01       	movw	r20, r22
    2134:	bc 01       	movw	r22, r24
    2136:	88 ee       	ldi	r24, 0xE8	; 232
    2138:	93 e0       	ldi	r25, 0x03	; 3
    213a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    213e:	6d e0       	ldi	r22, 0x0D	; 13
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    2146:	60 91 8b 04 	lds	r22, 0x048B	; 0x80048b <dimmer_brightness>
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <KPD_Interface_Localuser+0x664>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    2156:	80 33       	cpi	r24, 0x30	; 48
    2158:	19 f4       	brne	.+6      	; 0x2160 <KPD_Interface_Localuser+0x664>
						{
							LCD_voidClear();
    215a:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
							break;
    215e:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    2160:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2164:	8f 3f       	cpi	r24, 0xFF	; 255
    2166:	09 f4       	brne	.+2      	; 0x216a <KPD_Interface_Localuser+0x66e>
    2168:	a5 cf       	rjmp	.-182    	; 0x20b4 <KPD_Interface_Localuser+0x5b8>
    216a:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
    216c:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    2170:	6a e8       	ldi	r22, 0x8A	; 138
    2172:	74 e0       	ldi	r23, 0x04	; 4
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	0e 94 01 15 	call	0x2a02	; 0x2a02 <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
    217a:	80 e8       	ldi	r24, 0x80	; 128
    217c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
    2180:	8e e5       	ldi	r24, 0x5E	; 94
    2182:	94 e0       	ldi	r25, 0x04	; 4
    2184:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    2188:	6b e0       	ldi	r22, 0x0B	; 11
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	0e 94 57 14 	call	0x28ae	; 0x28ae <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    2190:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <__data_end>
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
    219e:	83 e6       	ldi	r24, 0x63	; 99
    21a0:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
    21a4:	80 ec       	ldi	r24, 0xC0	; 192
    21a6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
    21aa:	8e e7       	ldi	r24, 0x7E	; 126
    21ac:	92 e0       	ldi	r25, 0x02	; 2
    21ae:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
    21b2:	06 c0       	rjmp	.+12     	; 0x21c0 <KPD_Interface_Localuser+0x6c4>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
    21b4:	81 e6       	ldi	r24, 0x61	; 97
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <KPD_voidGetValue>
					Display_temp();
    21bc:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
    21c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    21c4:	8f 3f       	cpi	r24, 0xFF	; 255
    21c6:	b1 f3       	breq	.-20     	; 0x21b4 <KPD_Interface_Localuser+0x6b8>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
    21c8:	80 33       	cpi	r24, 0x30	; 48
    21ca:	11 f4       	brne	.+4      	; 0x21d0 <KPD_Interface_Localuser+0x6d4>
				{
					LCD_voidClear();
    21cc:	0e 94 26 14 	call	0x284c	; 0x284c <LCD_voidClear>
    21d0:	08 95       	ret

000021d2 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
    21d2:	0e 94 2e 19 	call	0x325c	; 0x325c <UART_voidInit>
    21d6:	08 95       	ret

000021d8 <BL_voidTxChar>:
}


void BL_voidTxChar(u8 copy_u8BlTxData)
{
	UART_voidTxChar(copy_u8BlTxData);
    21d8:	0e 94 3f 19 	call	0x327e	; 0x327e <UART_voidTxChar>
    21dc:	08 95       	ret

000021de <BL_voidRxChar>:



void BL_voidRxChar(u8* copy_pu8BlRxData)
{
	UART_voidRxChar(copy_pu8BlRxData);
    21de:	0e 94 43 19 	call	0x3286	; 0x3286 <UART_voidRxChar>
    21e2:	08 95       	ret

000021e4 <BL_voidRxCharWithTimeout>:
	
}

BL_voidRxCharWithTimeout(u8* copy_pu8BlRxData)
{
	 UART_voidRxCharWithTimeout(copy_pu8BlRxData);
    21e4:	0e 94 4b 19 	call	0x3296	; 0x3296 <UART_voidRxCharWithTimeout>
    21e8:	08 95       	ret

000021ea <BL_voidTxString>:
}

void BL_voidTxString(u8* copy_pu8BlTxString)
{
	UART_voidTxString(copy_pu8BlTxString);
    21ea:	0e 94 62 19 	call	0x32c4	; 0x32c4 <UART_voidTxString>
    21ee:	08 95       	ret

000021f0 <BUZZER_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void BUZZER_voidInit	(u8 copy_u8BuzzerPortId,u8 copy_u8BuzzerPinId)
{
	DIO_voidSetPinDirection(copy_u8BuzzerPortId,copy_u8BuzzerPinId,DIO_PIN_HIGH);
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    21f6:	08 95       	ret

000021f8 <BUZZER_voidOn>:
}
void BUZZER_voidOn		(u8 copy_u8LBuzzerPortId,u8 copy_u8BuzzerPinId)
{

		DIO_voidSetPinValue    (copy_u8LBuzzerPortId,copy_u8BuzzerPinId, DIO_PIN_HIGH);
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    21fe:	08 95       	ret

00002200 <BUZZER_voidOff>:
}
void BUZZER_voidOff		(u8 copy_u8BuzzerPortId,u8 copy_u8BuzzerPinId)
{
		DIO_voidSetPinValue    (copy_u8BuzzerPortId,copy_u8BuzzerPinId, DIO_PIN_LOW);
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2206:	08 95       	ret

00002208 <EEPROM_voidInit>:
#include"EEPROM_interface.h"
#include"EEPROM_private.h"

void EEPROM_voidInit(void)
{
	TWI_voidInitMaster();
    2208:	0e 94 a3 18 	call	0x3146	; 0x3146 <TWI_voidInitMaster>
    220c:	08 95       	ret

0000220e <EEPROM_voidWriteByte>:
}
void EEPROM_voidWriteByte(u16 copy_u16WordAdress,u8 copy_u8Data)
{
    220e:	1f 93       	push	r17
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	d8 2f       	mov	r29, r24
    2216:	c6 2f       	mov	r28, r22
	u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    2218:	19 2f       	mov	r17, r25
    221a:	10 65       	ori	r17, 0x50	; 80
	TWI_voidSendStartCondition();
    221c:	0e 94 af 18 	call	0x315e	; 0x315e <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    2220:	81 2f       	mov	r24, r17
    2222:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <TWI_voidSendSlaveAddWithWrite>
	TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    2226:	8d 2f       	mov	r24, r29
    2228:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <TWI_voidTransmitMasterDataByte>
	TWI_voidTransmitMasterDataByte(copy_u8Data);
    222c:	8c 2f       	mov	r24, r28
    222e:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <TWI_voidTransmitMasterDataByte>
	TWI_voidSendStopCondition();
    2232:	0e 94 cb 18 	call	0x3196	; 0x3196 <TWI_voidSendStopCondition>
    2236:	8f e1       	ldi	r24, 0x1F	; 31
    2238:	9e e4       	ldi	r25, 0x4E	; 78
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <EEPROM_voidWriteByte+0x2c>
    223e:	00 c0       	rjmp	.+0      	; 0x2240 <EEPROM_voidWriteByte+0x32>
    2240:	00 00       	nop
	_delay_ms(5);
	
	
	
}
    2242:	df 91       	pop	r29
    2244:	cf 91       	pop	r28
    2246:	1f 91       	pop	r17
    2248:	08 95       	ret

0000224a <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
    2252:	61 15       	cp	r22, r1
    2254:	71 05       	cpc	r23, r1
    2256:	f9 f0       	breq	.+62     	; 0x2296 <EEPROM_voidWritePage+0x4c>
    2258:	8b 01       	movw	r16, r22
    225a:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    225c:	c9 2f       	mov	r28, r25
    225e:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
    2260:	0e 94 af 18 	call	0x315e	; 0x315e <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    2264:	8c 2f       	mov	r24, r28
    2266:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    226a:	8d 2f       	mov	r24, r29
    226c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
    2270:	c0 e0       	ldi	r28, 0x00	; 0
    2272:	07 c0       	rjmp	.+14     	; 0x2282 <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
    2274:	f8 01       	movw	r30, r16
    2276:	ec 0f       	add	r30, r28
    2278:	f1 1d       	adc	r31, r1
    227a:	80 81       	ld	r24, Z
    227c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
    2280:	cf 5f       	subi	r28, 0xFF	; 255
    2282:	c8 30       	cpi	r28, 0x08	; 8
    2284:	b8 f3       	brcs	.-18     	; 0x2274 <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
    2286:	0e 94 cb 18 	call	0x3196	; 0x3196 <TWI_voidSendStopCondition>
    228a:	8f e1       	ldi	r24, 0x1F	; 31
    228c:	9e e4       	ldi	r25, 0x4E	; 78
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <EEPROM_voidWritePage+0x44>
    2292:	00 c0       	rjmp	.+0      	; 0x2294 <EEPROM_voidWritePage+0x4a>
    2294:	00 00       	nop
		{
			//error state
		}
		
		
	}
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	08 95       	ret

000022a0 <EEPROM_voidReadByte>:

void EEPROM_voidReadByte(u16 copy_u16WordAdress,u8* copy_pu8Data)
{
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
	if(copy_pu8Data!=NULL)
    22a8:	61 15       	cp	r22, r1
    22aa:	71 05       	cpc	r23, r1
    22ac:	e1 f0       	breq	.+56     	; 0x22e6 <EEPROM_voidReadByte+0x46>
    22ae:	8b 01       	movw	r16, r22
    22b0:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    22b2:	c9 2f       	mov	r28, r25
    22b4:	c0 65       	ori	r28, 0x50	; 80
		TWI_voidSendStartCondition();
    22b6:	0e 94 af 18 	call	0x315e	; 0x315e <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    22ba:	8c 2f       	mov	r24, r28
    22bc:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    22c0:	8d 2f       	mov	r24, r29
    22c2:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
    22c6:	0e 94 bd 18 	call	0x317a	; 0x317a <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
    22ca:	8c 2f       	mov	r24, r28
    22cc:	0e 94 e7 18 	call	0x31ce	; 0x31ce <TWI_voidSendSlaveAddWithRead>
		TWI_voidRecieveMasterDataByteWithNAch(copy_pu8Data);
    22d0:	c8 01       	movw	r24, r16
    22d2:	0e 94 1e 19 	call	0x323c	; 0x323c <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
    22d6:	0e 94 cb 18 	call	0x3196	; 0x3196 <TWI_voidSendStopCondition>
    22da:	8f e1       	ldi	r24, 0x1F	; 31
    22dc:	9e e4       	ldi	r25, 0x4E	; 78
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <EEPROM_voidReadByte+0x3e>
    22e2:	00 c0       	rjmp	.+0      	; 0x22e4 <EEPROM_voidReadByte+0x44>
    22e4:	00 00       	nop
	{
		//error
	}
	
	
}
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	08 95       	ret

000022f0 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
    22fc:	41 15       	cp	r20, r1
    22fe:	51 05       	cpc	r21, r1
    2300:	81 f1       	breq	.+96     	; 0x2362 <EEPROM_voidSequentialRead+0x72>
    2302:	61 15       	cp	r22, r1
    2304:	22 e0       	ldi	r18, 0x02	; 2
    2306:	72 07       	cpc	r23, r18
    2308:	60 f5       	brcc	.+88     	; 0x2362 <EEPROM_voidSequentialRead+0x72>
    230a:	8a 01       	movw	r16, r20
    230c:	7b 01       	movw	r14, r22
    230e:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    2310:	c9 2f       	mov	r28, r25
    2312:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
    2314:	0e 94 af 18 	call	0x315e	; 0x315e <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    2318:	8c 2f       	mov	r24, r28
    231a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    231e:	8d 2f       	mov	r24, r29
    2320:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
    2324:	0e 94 bd 18 	call	0x317a	; 0x317a <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
    2328:	8c 2f       	mov	r24, r28
    232a:	0e 94 e7 18 	call	0x31ce	; 0x31ce <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    232e:	c0 e0       	ldi	r28, 0x00	; 0
    2330:	d0 e0       	ldi	r29, 0x00	; 0
    2332:	06 c0       	rjmp	.+12     	; 0x2340 <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
    2334:	c8 01       	movw	r24, r16
    2336:	8c 0f       	add	r24, r28
    2338:	9d 1f       	adc	r25, r29
    233a:	0e 94 08 19 	call	0x3210	; 0x3210 <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    233e:	21 96       	adiw	r28, 0x01	; 1
    2340:	c7 01       	movw	r24, r14
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	c8 17       	cp	r28, r24
    2346:	d9 07       	cpc	r29, r25
    2348:	a8 f3       	brcs	.-22     	; 0x2334 <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
    234a:	80 0f       	add	r24, r16
    234c:	91 1f       	adc	r25, r17
    234e:	0e 94 1e 19 	call	0x323c	; 0x323c <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
    2352:	0e 94 cb 18 	call	0x3196	; 0x3196 <TWI_voidSendStopCondition>
    2356:	8f e1       	ldi	r24, 0x1F	; 31
    2358:	9e e4       	ldi	r25, 0x4E	; 78
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <EEPROM_voidSequentialRead+0x6a>
    235e:	00 c0       	rjmp	.+0      	; 0x2360 <EEPROM_voidSequentialRead+0x70>
    2360:	00 00       	nop
	{
		//error state
	}


    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	1f 91       	pop	r17
    2368:	0f 91       	pop	r16
    236a:	ff 90       	pop	r15
    236c:	ef 90       	pop	r14
    236e:	08 95       	ret

00002370 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	64 e0       	ldi	r22, 0x04	; 4
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	65 e0       	ldi	r22, 0x05	; 5
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	66 e0       	ldi	r22, 0x06	; 6
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
    238e:	40 e0       	ldi	r20, 0x00	; 0
    2390:	63 e0       	ldi	r22, 0x03	; 3
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
    2398:	40 e0       	ldi	r20, 0x00	; 0
    239a:	64 e0       	ldi	r22, 0x04	; 4
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	65 e0       	ldi	r22, 0x05	; 5
    23a6:	82 e0       	ldi	r24, 0x02	; 2
    23a8:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	66 e0       	ldi	r22, 0x06	; 6
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
    23b6:	63 e0       	ldi	r22, 0x03	; 3
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	0e 94 57 16 	call	0x2cae	; 0x2cae <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
    23be:	64 e0       	ldi	r22, 0x04	; 4
    23c0:	82 e0       	ldi	r24, 0x02	; 2
    23c2:	0e 94 57 16 	call	0x2cae	; 0x2cae <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
    23c6:	65 e0       	ldi	r22, 0x05	; 5
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	0e 94 57 16 	call	0x2cae	; 0x2cae <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
    23ce:	66 e0       	ldi	r22, 0x06	; 6
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	0e 94 57 16 	call	0x2cae	; 0x2cae <DIO_voidActivePinInPullUpResistance>
    23d6:	08 95       	ret

000023d8 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
    23d8:	6f 92       	push	r6
    23da:	7f 92       	push	r7
    23dc:	8f 92       	push	r8
    23de:	9f 92       	push	r9
    23e0:	af 92       	push	r10
    23e2:	bf 92       	push	r11
    23e4:	cf 92       	push	r12
    23e6:	df 92       	push	r13
    23e8:	ef 92       	push	r14
    23ea:	ff 92       	push	r15
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	6b 97       	sbiw	r28, 0x1b	; 27
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	09 f4       	brne	.+2      	; 0x240a <KPD_voidGetValue+0x32>
    2408:	7e c0       	rjmp	.+252    	; 0x2506 <KPD_voidGetValue+0x12e>
    240a:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	88 8f       	std	Y+24, r24	; 0x18
    2410:	89 8f       	std	Y+25, r24	; 0x19
    2412:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
    2414:	34 e0       	ldi	r19, 0x04	; 4
    2416:	3d 8b       	std	Y+21, r19	; 0x15
    2418:	25 e0       	ldi	r18, 0x05	; 5
    241a:	2e 8b       	std	Y+22, r18	; 0x16
    241c:	96 e0       	ldi	r25, 0x06	; 6
    241e:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	89 8b       	std	Y+17, r24	; 0x11
    2424:	8a 8b       	std	Y+18, r24	; 0x12
    2426:	8b 8b       	std	Y+19, r24	; 0x13
    2428:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	8d 87       	std	Y+13, r24	; 0x0d
    242e:	3e 87       	std	Y+14, r19	; 0x0e
    2430:	2f 87       	std	Y+15, r18	; 0x0f
    2432:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
    2434:	8c e0       	ldi	r24, 0x0C	; 12
    2436:	e5 e6       	ldi	r30, 0x65	; 101
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	de 01       	movw	r26, r28
    243c:	11 96       	adiw	r26, 0x01	; 1
    243e:	01 90       	ld	r0, Z+
    2440:	0d 92       	st	X+, r0
    2442:	8a 95       	dec	r24
    2444:	e1 f7       	brne	.-8      	; 0x243e <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	f5 01       	movw	r30, r10
    244a:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    244c:	81 2c       	mov	r8, r1
    244e:	57 c0       	rjmp	.+174    	; 0x24fe <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
    2450:	c8 2c       	mov	r12, r8
    2452:	d1 2c       	mov	r13, r1
    2454:	e5 e1       	ldi	r30, 0x15	; 21
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	ec 0f       	add	r30, r28
    245a:	fd 1f       	adc	r31, r29
    245c:	ec 0d       	add	r30, r12
    245e:	fd 1d       	adc	r31, r13
    2460:	60 80       	ld	r6, Z
    2462:	e8 e1       	ldi	r30, 0x18	; 24
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	ec 0f       	add	r30, r28
    2468:	fd 1f       	adc	r31, r29
    246a:	ec 0d       	add	r30, r12
    246c:	fd 1d       	adc	r31, r13
    246e:	70 80       	ld	r7, Z
    2470:	40 e0       	ldi	r20, 0x00	; 0
    2472:	66 2d       	mov	r22, r6
    2474:	87 2d       	mov	r24, r7
    2476:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    247a:	10 e0       	ldi	r17, 0x00	; 0
    247c:	38 c0       	rjmp	.+112    	; 0x24ee <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    247e:	e1 2e       	mov	r14, r17
    2480:	f1 2c       	mov	r15, r1
    2482:	ed e0       	ldi	r30, 0x0D	; 13
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	ec 0f       	add	r30, r28
    2488:	fd 1f       	adc	r31, r29
    248a:	ee 0d       	add	r30, r14
    248c:	ff 1d       	adc	r31, r15
    248e:	00 81       	ld	r16, Z
    2490:	e1 e1       	ldi	r30, 0x11	; 17
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	ec 0f       	add	r30, r28
    2496:	fd 1f       	adc	r31, r29
    2498:	ee 0d       	add	r30, r14
    249a:	ff 1d       	adc	r31, r15
    249c:	90 80       	ld	r9, Z
    249e:	ae 01       	movw	r20, r28
    24a0:	45 5e       	subi	r20, 0xE5	; 229
    24a2:	5f 4f       	sbci	r21, 0xFF	; 255
    24a4:	60 2f       	mov	r22, r16
    24a6:	89 2d       	mov	r24, r9
    24a8:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
    24ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ae:	81 11       	cpse	r24, r1
    24b0:	1d c0       	rjmp	.+58     	; 0x24ec <KPD_voidGetValue+0x114>
    24b2:	07 c0       	rjmp	.+14     	; 0x24c2 <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    24b4:	ae 01       	movw	r20, r28
    24b6:	45 5e       	subi	r20, 0xE5	; 229
    24b8:	5f 4f       	sbci	r21, 0xFF	; 255
    24ba:	60 2f       	mov	r22, r16
    24bc:	89 2d       	mov	r24, r9
    24be:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
    24c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c4:	88 23       	and	r24, r24
    24c6:	b1 f3       	breq	.-20     	; 0x24b4 <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    24c8:	c7 01       	movw	r24, r14
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	e8 0e       	add	r14, r24
    24d0:	f9 1e       	adc	r15, r25
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	8c 0f       	add	r24, r28
    24d8:	9d 1f       	adc	r25, r29
    24da:	e8 0e       	add	r14, r24
    24dc:	f9 1e       	adc	r15, r25
    24de:	f7 01       	movw	r30, r14
    24e0:	ec 0d       	add	r30, r12
    24e2:	fd 1d       	adc	r31, r13
    24e4:	80 81       	ld	r24, Z
    24e6:	f5 01       	movw	r30, r10
    24e8:	80 83       	st	Z, r24
    24ea:	0d c0       	rjmp	.+26     	; 0x2506 <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    24ec:	1f 5f       	subi	r17, 0xFF	; 255
    24ee:	14 30       	cpi	r17, 0x04	; 4
    24f0:	30 f2       	brcs	.-116    	; 0x247e <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	66 2d       	mov	r22, r6
    24f6:	87 2d       	mov	r24, r7
    24f8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    24fc:	83 94       	inc	r8
    24fe:	f2 e0       	ldi	r31, 0x02	; 2
    2500:	f8 15       	cp	r31, r8
    2502:	08 f0       	brcs	.+2      	; 0x2506 <KPD_voidGetValue+0x12e>
    2504:	a5 cf       	rjmp	.-182    	; 0x2450 <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
    2506:	6b 96       	adiw	r28, 0x1b	; 27
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	ff 90       	pop	r15
    251c:	ef 90       	pop	r14
    251e:	df 90       	pop	r13
    2520:	cf 90       	pop	r12
    2522:	bf 90       	pop	r11
    2524:	af 90       	pop	r10
    2526:	9f 90       	pop	r9
    2528:	8f 90       	pop	r8
    252a:	7f 90       	pop	r7
    252c:	6f 90       	pop	r6
    252e:	08 95       	ret

00002530 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
    2530:	cf 93       	push	r28
    2532:	c8 2f       	mov	r28, r24
    2534:	80 ff       	sbrs	r24, 0
    2536:	06 c0       	rjmp	.+12     	; 0x2544 <PRV_voidWriteHalfPort+0x14>
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	64 e0       	ldi	r22, 0x04	; 4
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2542:	05 c0       	rjmp	.+10     	; 0x254e <PRV_voidWriteHalfPort+0x1e>
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	64 e0       	ldi	r22, 0x04	; 4
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    254e:	c1 ff       	sbrs	r28, 1
    2550:	06 c0       	rjmp	.+12     	; 0x255e <PRV_voidWriteHalfPort+0x2e>
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	65 e0       	ldi	r22, 0x05	; 5
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    255c:	05 c0       	rjmp	.+10     	; 0x2568 <PRV_voidWriteHalfPort+0x38>
    255e:	40 e0       	ldi	r20, 0x00	; 0
    2560:	65 e0       	ldi	r22, 0x05	; 5
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2568:	c2 ff       	sbrs	r28, 2
    256a:	06 c0       	rjmp	.+12     	; 0x2578 <PRV_voidWriteHalfPort+0x48>
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	66 e0       	ldi	r22, 0x06	; 6
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2576:	05 c0       	rjmp	.+10     	; 0x2582 <PRV_voidWriteHalfPort+0x52>
    2578:	40 e0       	ldi	r20, 0x00	; 0
    257a:	66 e0       	ldi	r22, 0x06	; 6
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2582:	c3 ff       	sbrs	r28, 3
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <PRV_voidWriteHalfPort+0x62>
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	67 e0       	ldi	r22, 0x07	; 7
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2590:	05 c0       	rjmp	.+10     	; 0x259c <PRV_voidWriteHalfPort+0x6c>
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	67 e0       	ldi	r22, 0x07	; 7
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    259c:	cf 91       	pop	r28
    259e:	08 95       	ret

000025a0 <LCD_voidSendCommand>:
    25a0:	cf 93       	push	r28
    25a2:	c8 2f       	mov	r28, r24
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	61 e0       	ldi	r22, 0x01	; 1
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	62 e0       	ldi	r22, 0x02	; 2
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    25b8:	8c 2f       	mov	r24, r28
    25ba:	82 95       	swap	r24
    25bc:	8f 70       	andi	r24, 0x0F	; 15
    25be:	0e 94 98 12 	call	0x2530	; 0x2530 <PRV_voidWriteHalfPort>
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	63 e0       	ldi	r22, 0x03	; 3
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    25cc:	8f e9       	ldi	r24, 0x9F	; 159
    25ce:	9f e0       	ldi	r25, 0x0F	; 15
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_voidSendCommand+0x30>
    25d4:	00 c0       	rjmp	.+0      	; 0x25d6 <LCD_voidSendCommand+0x36>
    25d6:	00 00       	nop
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	63 e0       	ldi	r22, 0x03	; 3
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    25e2:	8c 2f       	mov	r24, r28
    25e4:	0e 94 98 12 	call	0x2530	; 0x2530 <PRV_voidWriteHalfPort>
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	63 e0       	ldi	r22, 0x03	; 3
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    25f2:	8f e9       	ldi	r24, 0x9F	; 159
    25f4:	9f e0       	ldi	r25, 0x0F	; 15
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_voidSendCommand+0x56>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <LCD_voidSendCommand+0x5c>
    25fc:	00 00       	nop
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	63 e0       	ldi	r22, 0x03	; 3
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <LCD_voidInit>:
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	62 e0       	ldi	r22, 0x02	; 2
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	63 e0       	ldi	r22, 0x03	; 3
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    262a:	41 e0       	ldi	r20, 0x01	; 1
    262c:	64 e0       	ldi	r22, 0x04	; 4
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	65 e0       	ldi	r22, 0x05	; 5
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	66 e0       	ldi	r22, 0x06	; 6
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	67 e0       	ldi	r22, 0x07	; 7
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    2652:	2f e7       	ldi	r18, 0x7F	; 127
    2654:	85 eb       	ldi	r24, 0xB5	; 181
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	21 50       	subi	r18, 0x01	; 1
    265a:	80 40       	sbci	r24, 0x00	; 0
    265c:	90 40       	sbci	r25, 0x00	; 0
    265e:	e1 f7       	brne	.-8      	; 0x2658 <LCD_voidInit+0x4c>
    2660:	00 c0       	rjmp	.+0      	; 0x2662 <LCD_voidInit+0x56>
    2662:	00 00       	nop
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	61 e0       	ldi	r22, 0x01	; 1
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	62 e0       	ldi	r22, 0x02	; 2
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	0e 94 98 12 	call	0x2530	; 0x2530 <PRV_voidWriteHalfPort>
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	63 e0       	ldi	r22, 0x03	; 3
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2688:	8f e9       	ldi	r24, 0x9F	; 159
    268a:	9f e0       	ldi	r25, 0x0F	; 15
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_voidInit+0x80>
    2690:	00 c0       	rjmp	.+0      	; 0x2692 <LCD_voidInit+0x86>
    2692:	00 00       	nop
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	63 e0       	ldi	r22, 0x03	; 3
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    269e:	88 e2       	ldi	r24, 0x28	; 40
    26a0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
    26a4:	90 ef       	ldi	r25, 0xF0	; 240
    26a6:	9a 95       	dec	r25
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_voidInit+0x9a>
    26aa:	8c e0       	ldi	r24, 0x0C	; 12
    26ac:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
    26b0:	20 ef       	ldi	r18, 0xF0	; 240
    26b2:	2a 95       	dec	r18
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_voidInit+0xa6>
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
    26bc:	8f e3       	ldi	r24, 0x3F	; 63
    26be:	9f e1       	ldi	r25, 0x1F	; 31
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_voidInit+0xb4>
    26c4:	00 c0       	rjmp	.+0      	; 0x26c6 <LCD_voidInit+0xba>
    26c6:	00 00       	nop
    26c8:	86 e0       	ldi	r24, 0x06	; 6
    26ca:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
    26ce:	08 95       	ret

000026d0 <LCD_voidDisplayChar>:
    26d0:	cf 93       	push	r28
    26d2:	c8 2f       	mov	r28, r24
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	81 e0       	ldi	r24, 0x01	; 1
    26da:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    26e8:	8c 2f       	mov	r24, r28
    26ea:	82 95       	swap	r24
    26ec:	8f 70       	andi	r24, 0x0F	; 15
    26ee:	0e 94 98 12 	call	0x2530	; 0x2530 <PRV_voidWriteHalfPort>
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	63 e0       	ldi	r22, 0x03	; 3
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    26fc:	8f e9       	ldi	r24, 0x9F	; 159
    26fe:	9f e0       	ldi	r25, 0x0F	; 15
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_voidDisplayChar+0x30>
    2704:	00 c0       	rjmp	.+0      	; 0x2706 <LCD_voidDisplayChar+0x36>
    2706:	00 00       	nop
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	63 e0       	ldi	r22, 0x03	; 3
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2712:	8c 2f       	mov	r24, r28
    2714:	0e 94 98 12 	call	0x2530	; 0x2530 <PRV_voidWriteHalfPort>
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	63 e0       	ldi	r22, 0x03	; 3
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2722:	8f e9       	ldi	r24, 0x9F	; 159
    2724:	9f e0       	ldi	r25, 0x0F	; 15
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_voidDisplayChar+0x56>
    272a:	00 c0       	rjmp	.+0      	; 0x272c <LCD_voidDisplayChar+0x5c>
    272c:	00 00       	nop
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	63 e0       	ldi	r22, 0x03	; 3
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2738:	cf 91       	pop	r28
    273a:	08 95       	ret

0000273c <LCD_voidDisplayString>:
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	29 f4       	brne	.+10     	; 0x2750 <LCD_voidDisplayString+0x14>
    2746:	0c c0       	rjmp	.+24     	; 0x2760 <LCD_voidDisplayString+0x24>
    2748:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_voidDisplayChar>
    274c:	cf 5f       	subi	r28, 0xFF	; 255
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <LCD_voidDisplayString+0x18>
    2750:	8c 01       	movw	r16, r24
    2752:	c0 e0       	ldi	r28, 0x00	; 0
    2754:	f8 01       	movw	r30, r16
    2756:	ec 0f       	add	r30, r28
    2758:	f1 1d       	adc	r31, r1
    275a:	80 81       	ld	r24, Z
    275c:	81 11       	cpse	r24, r1
    275e:	f4 cf       	rjmp	.-24     	; 0x2748 <LCD_voidDisplayString+0xc>
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	08 95       	ret

00002768 <LCD_voidDisplayStringDelay>:
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	71 f4       	brne	.+28     	; 0x278e <LCD_voidDisplayStringDelay+0x26>
    2772:	15 c0       	rjmp	.+42     	; 0x279e <LCD_voidDisplayStringDelay+0x36>
    2774:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_voidDisplayChar>
    2778:	cf 5f       	subi	r28, 0xFF	; 255
    277a:	2f ef       	ldi	r18, 0xFF	; 255
    277c:	80 e7       	ldi	r24, 0x70	; 112
    277e:	92 e0       	ldi	r25, 0x02	; 2
    2780:	21 50       	subi	r18, 0x01	; 1
    2782:	80 40       	sbci	r24, 0x00	; 0
    2784:	90 40       	sbci	r25, 0x00	; 0
    2786:	e1 f7       	brne	.-8      	; 0x2780 <LCD_voidDisplayStringDelay+0x18>
    2788:	00 c0       	rjmp	.+0      	; 0x278a <LCD_voidDisplayStringDelay+0x22>
    278a:	00 00       	nop
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <LCD_voidDisplayStringDelay+0x2a>
    278e:	8c 01       	movw	r16, r24
    2790:	c0 e0       	ldi	r28, 0x00	; 0
    2792:	f8 01       	movw	r30, r16
    2794:	ec 0f       	add	r30, r28
    2796:	f1 1d       	adc	r31, r1
    2798:	80 81       	ld	r24, Z
    279a:	81 11       	cpse	r24, r1
    279c:	eb cf       	rjmp	.-42     	; 0x2774 <LCD_voidDisplayStringDelay+0xc>
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <LCD_voidDisplayNumber>:
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <LCD_voidDisplayNumber+0xa>
    27b0:	00 d0       	rcall	.+0      	; 0x27b2 <LCD_voidDisplayNumber+0xc>
    27b2:	1f 92       	push	r1
    27b4:	cd b7       	in	r28, 0x3d	; 61
    27b6:	de b7       	in	r29, 0x3e	; 62
    27b8:	26 2f       	mov	r18, r22
    27ba:	10 e0       	ldi	r17, 0x00	; 0
    27bc:	08 c0       	rjmp	.+16     	; 0x27ce <LCD_voidDisplayNumber+0x28>
    27be:	1f 5f       	subi	r17, 0xFF	; 255
    27c0:	ed ec       	ldi	r30, 0xCD	; 205
    27c2:	6e 9f       	mul	r22, r30
    27c4:	61 2d       	mov	r22, r1
    27c6:	11 24       	eor	r1, r1
    27c8:	66 95       	lsr	r22
    27ca:	66 95       	lsr	r22
    27cc:	66 95       	lsr	r22
    27ce:	61 11       	cpse	r22, r1
    27d0:	f6 cf       	rjmp	.-20     	; 0x27be <LCD_voidDisplayNumber+0x18>
    27d2:	00 e0       	ldi	r16, 0x00	; 0
    27d4:	1a c0       	rjmp	.+52     	; 0x280a <LCD_voidDisplayNumber+0x64>
    27d6:	62 2f       	mov	r22, r18
    27d8:	2a e0       	ldi	r18, 0x0A	; 10
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	40 e0       	ldi	r20, 0x00	; 0
    27de:	50 e0       	ldi	r21, 0x00	; 0
    27e0:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
    27e4:	73 2f       	mov	r23, r19
    27e6:	84 2f       	mov	r24, r20
    27e8:	95 2f       	mov	r25, r21
    27ea:	a0 2f       	mov	r26, r16
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	11 96       	adiw	r26, 0x01	; 1
    27f0:	e1 2f       	mov	r30, r17
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	ea 1b       	sub	r30, r26
    27f6:	fb 0b       	sbc	r31, r27
    27f8:	41 e0       	ldi	r20, 0x01	; 1
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	4c 0f       	add	r20, r28
    27fe:	5d 1f       	adc	r21, r29
    2800:	e4 0f       	add	r30, r20
    2802:	f5 1f       	adc	r31, r21
    2804:	60 5d       	subi	r22, 0xD0	; 208
    2806:	60 83       	st	Z, r22
    2808:	0f 5f       	subi	r16, 0xFF	; 255
    280a:	01 17       	cp	r16, r17
    280c:	20 f3       	brcs	.-56     	; 0x27d6 <LCD_voidDisplayNumber+0x30>
    280e:	e1 e0       	ldi	r30, 0x01	; 1
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	ec 0f       	add	r30, r28
    2814:	fd 1f       	adc	r31, r29
    2816:	e1 0f       	add	r30, r17
    2818:	f1 1d       	adc	r31, r1
    281a:	10 82       	st	Z, r1
    281c:	10 e0       	ldi	r17, 0x00	; 0
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <LCD_voidDisplayNumber+0x80>
    2820:	0e 94 68 13 	call	0x26d0	; 0x26d0 <LCD_voidDisplayChar>
    2824:	1f 5f       	subi	r17, 0xFF	; 255
    2826:	e1 e0       	ldi	r30, 0x01	; 1
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	ec 0f       	add	r30, r28
    282c:	fd 1f       	adc	r31, r29
    282e:	e1 0f       	add	r30, r17
    2830:	f1 1d       	adc	r31, r1
    2832:	80 81       	ld	r24, Z
    2834:	81 11       	cpse	r24, r1
    2836:	f4 cf       	rjmp	.-24     	; 0x2820 <LCD_voidDisplayNumber+0x7a>
    2838:	0f 90       	pop	r0
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	08 95       	ret

0000284c <LCD_voidClear>:
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	62 e0       	ldi	r22, 0x02	; 2
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	0e 94 98 12 	call	0x2530	; 0x2530 <PRV_voidWriteHalfPort>
    2866:	41 e0       	ldi	r20, 0x01	; 1
    2868:	63 e0       	ldi	r22, 0x03	; 3
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2870:	8f e9       	ldi	r24, 0x9F	; 159
    2872:	9f e0       	ldi	r25, 0x0F	; 15
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <LCD_voidClear+0x28>
    2878:	00 c0       	rjmp	.+0      	; 0x287a <LCD_voidClear+0x2e>
    287a:	00 00       	nop
    287c:	40 e0       	ldi	r20, 0x00	; 0
    287e:	63 e0       	ldi	r22, 0x03	; 3
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	0e 94 98 12 	call	0x2530	; 0x2530 <PRV_voidWriteHalfPort>
    288c:	41 e0       	ldi	r20, 0x01	; 1
    288e:	63 e0       	ldi	r22, 0x03	; 3
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2896:	8f e9       	ldi	r24, 0x9F	; 159
    2898:	9f e0       	ldi	r25, 0x0F	; 15
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	f1 f7       	brne	.-4      	; 0x289a <LCD_voidClear+0x4e>
    289e:	00 c0       	rjmp	.+0      	; 0x28a0 <LCD_voidClear+0x54>
    28a0:	00 00       	nop
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	63 e0       	ldi	r22, 0x03	; 3
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    28ac:	08 95       	ret

000028ae <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
	if(copy_u8Position<40)
    28b2:	68 32       	cpi	r22, 0x28	; 40
    28b4:	a0 f4       	brcc	.+40     	; 0x28de <LCD_voidGoTOSpecificPosition+0x30>
    28b6:	c6 2f       	mov	r28, r22
    28b8:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
    28ba:	82 e0       	ldi	r24, 0x02	; 2
    28bc:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
    28c0:	d1 30       	cpi	r29, 0x01	; 1
    28c2:	19 f0       	breq	.+6      	; 0x28ca <LCD_voidGoTOSpecificPosition+0x1c>
    28c4:	d2 30       	cpi	r29, 0x02	; 2
    28c6:	31 f0       	breq	.+12     	; 0x28d4 <LCD_voidGoTOSpecificPosition+0x26>
    28c8:	0a c0       	rjmp	.+20     	; 0x28de <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
    28ca:	8c 2f       	mov	r24, r28
    28cc:	80 68       	ori	r24, 0x80	; 128
    28ce:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
		
			
			break;
    28d2:	05 c0       	rjmp	.+10     	; 0x28de <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
    28d4:	80 e4       	ldi	r24, 0x40	; 64
    28d6:	8c 0f       	add	r24, r28
    28d8:	80 68       	ori	r24, 0x80	; 128
    28da:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
    28de:	df 91       	pop	r29
    28e0:	cf 91       	pop	r28
    28e2:	08 95       	ret

000028e4 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
    28ea:	08 95       	ret

000028ec <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    28ec:	41 30       	cpi	r20, 0x01	; 1
    28ee:	19 f0       	breq	.+6      	; 0x28f6 <LED_voidOn+0xa>
    28f0:	42 30       	cpi	r20, 0x02	; 2
    28f2:	29 f0       	breq	.+10     	; 0x28fe <LED_voidOn+0x12>
    28f4:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
		break;
    28fc:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    2904:	08 95       	ret

00002906 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    2906:	41 30       	cpi	r20, 0x01	; 1
    2908:	19 f0       	breq	.+6      	; 0x2910 <LED_voidOff+0xa>
    290a:	42 30       	cpi	r20, 0x02	; 2
    290c:	29 f0       	breq	.+10     	; 0x2918 <LED_voidOff+0x12>
    290e:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
		break;
    2916:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    2918:	41 e0       	ldi	r20, 0x01	; 1
    291a:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <DIO_voidSetPinValue>
    291e:	08 95       	ret

00002920 <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
    2926:	0e 94 93 16 	call	0x2d26	; 0x2d26 <PWM_voidInitChannel_1A>
    292a:	08 95       	ret

0000292c <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e2       	ldi	r20, 0x20	; 32
    2932:	50 e4       	ldi	r21, 0x40	; 64
    2934:	0e 94 3d 1b 	call	0x367a	; 0x367a <__mulsf3>
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 ec       	ldi	r19, 0xC0	; 192
    293c:	48 e2       	ldi	r20, 0x28	; 40
    293e:	54 e4       	ldi	r21, 0x44	; 68
    2940:	0e 94 79 19 	call	0x32f2	; 0x32f2 <__addsf3>
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	44 eb       	ldi	r20, 0xB4	; 180
    294a:	52 e4       	ldi	r21, 0x42	; 66
    294c:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__divsf3>
    2950:	ab 01       	movw	r20, r22
    2952:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1B(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
    2954:	82 e3       	ldi	r24, 0x32	; 50
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <PWM_voidGenerateChannel_1B>
    295c:	08 95       	ret

0000295e <main>:
extern u8 usertype;

int main()
{
	
	APP_init();
    295e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <APP_init>
	

	while(1)
	{
		GetUserType();
    2962:	0e 94 7f 04 	call	0x8fe	; 0x8fe <GetUserType>

		// HOME_voidChangeUserNameAndPass();
		if (global_accessType ==accessPermited)
    2966:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <global_accessType>
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	89 f4       	brne	.+34     	; 0x2990 <main+0x32>
		{
			if (usertype == HOME_REMOTE_ADMIN)
    296e:	80 91 9b 04 	lds	r24, 0x049B	; 0x80049b <usertype>
    2972:	83 30       	cpi	r24, 0x03	; 3
    2974:	19 f4       	brne	.+6      	; 0x297c <main+0x1e>
			{
				KPD_Interface_RemoteAdmin();
    2976:	0e 94 c3 04 	call	0x986	; 0x986 <KPD_Interface_RemoteAdmin>
    297a:	f3 cf       	rjmp	.-26     	; 0x2962 <main+0x4>
			}
			else if (usertype == HOME_REMOTE_USER)
    297c:	84 30       	cpi	r24, 0x04	; 4
    297e:	19 f4       	brne	.+6      	; 0x2986 <main+0x28>
			{
				KPD_Interface_RemoteUser();
    2980:	0e 94 c3 08 	call	0x1186	; 0x1186 <KPD_Interface_RemoteUser>
    2984:	ee cf       	rjmp	.-36     	; 0x2962 <main+0x4>
			}

			else if (usertype == HOME_LOCAL_USER)
    2986:	82 30       	cpi	r24, 0x02	; 2
    2988:	61 f7       	brne	.-40     	; 0x2962 <main+0x4>
			{
				KPD_Interface_Localuser();
    298a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <KPD_Interface_Localuser>
    298e:	e9 cf       	rjmp	.-46     	; 0x2962 <main+0x4>
			}

			
		}
		else if (global_accessType ==accessDenied)
    2990:	81 11       	cpse	r24, r1
    2992:	e7 cf       	rjmp	.-50     	; 0x2962 <main+0x4>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
    2994:	8b e7       	ldi	r24, 0x7B	; 123
    2996:	94 e0       	ldi	r25, 0x04	; 4
    2998:	0e 94 9e 13 	call	0x273c	; 0x273c <LCD_voidDisplayString>
		}
		
		
		
	}
}
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	08 95       	ret

000029a2 <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
    29a2:	82 30       	cpi	r24, 0x02	; 2
    29a4:	59 f0       	breq	.+22     	; 0x29bc <ADC_voidInit+0x1a>
    29a6:	83 30       	cpi	r24, 0x03	; 3
    29a8:	81 f0       	breq	.+32     	; 0x29ca <ADC_voidInit+0x28>
    29aa:	81 30       	cpi	r24, 0x01	; 1
    29ac:	a1 f4       	brne	.+40     	; 0x29d6 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
    29ae:	87 b1       	in	r24, 0x07	; 7
    29b0:	80 64       	ori	r24, 0x40	; 64
    29b2:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    29b4:	87 b1       	in	r24, 0x07	; 7
    29b6:	8f 77       	andi	r24, 0x7F	; 127
    29b8:	87 b9       	out	0x07, r24	; 7
		break;
    29ba:	0d c0       	rjmp	.+26     	; 0x29d6 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
    29bc:	87 b1       	in	r24, 0x07	; 7
    29be:	8f 7b       	andi	r24, 0xBF	; 191
    29c0:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    29c2:	87 b1       	in	r24, 0x07	; 7
    29c4:	8f 77       	andi	r24, 0x7F	; 127
    29c6:	87 b9       	out	0x07, r24	; 7
		break;
    29c8:	06 c0       	rjmp	.+12     	; 0x29d6 <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
    29ca:	87 b1       	in	r24, 0x07	; 7
    29cc:	80 64       	ori	r24, 0x40	; 64
    29ce:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
    29d0:	87 b1       	in	r24, 0x07	; 7
    29d2:	80 68       	ori	r24, 0x80	; 128
    29d4:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
    29d6:	87 b1       	in	r24, 0x07	; 7
    29d8:	8f 7d       	andi	r24, 0xDF	; 223
    29da:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
    29dc:	86 b1       	in	r24, 0x06	; 6
    29de:	8f 7d       	andi	r24, 0xDF	; 223
    29e0:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
    29e2:	86 b1       	in	r24, 0x06	; 6
    29e4:	87 7f       	andi	r24, 0xF7	; 247
    29e6:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
    29e8:	86 b1       	in	r24, 0x06	; 6
    29ea:	84 60       	ori	r24, 0x04	; 4
    29ec:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
    29ee:	86 b1       	in	r24, 0x06	; 6
    29f0:	82 60       	ori	r24, 0x02	; 2
    29f2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
    29f4:	86 b1       	in	r24, 0x06	; 6
    29f6:	81 60       	ori	r24, 0x01	; 1
    29f8:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
    29fa:	86 b1       	in	r24, 0x06	; 6
    29fc:	80 68       	ori	r24, 0x80	; 128
    29fe:	86 b9       	out	0x06, r24	; 6
    2a00:	08 95       	ret

00002a02 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
    2a02:	61 15       	cp	r22, r1
    2a04:	71 05       	cpc	r23, r1
    2a06:	b9 f0       	breq	.+46     	; 0x2a36 <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
    2a08:	97 b1       	in	r25, 0x07	; 7
    2a0a:	90 7e       	andi	r25, 0xE0	; 224
    2a0c:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
    2a0e:	97 b1       	in	r25, 0x07	; 7
    2a10:	89 2b       	or	r24, r25
    2a12:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
    2a14:	86 b1       	in	r24, 0x06	; 6
    2a16:	80 64       	ori	r24, 0x40	; 64
    2a18:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
    2a1a:	34 9b       	sbis	0x06, 4	; 6
    2a1c:	fe cf       	rjmp	.-4      	; 0x2a1a <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
    2a1e:	84 b1       	in	r24, 0x04	; 4
    2a20:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
    2a22:	96 95       	lsr	r25
    2a24:	87 95       	ror	r24
    2a26:	96 95       	lsr	r25
    2a28:	87 95       	ror	r24
    2a2a:	fb 01       	movw	r30, r22
    2a2c:	91 83       	std	Z+1, r25	; 0x01
    2a2e:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
    2a30:	86 b1       	in	r24, 0x06	; 6
    2a32:	80 61       	ori	r24, 0x10	; 16
    2a34:	86 b9       	out	0x06, r24	; 6
    2a36:	08 95       	ret

00002a38 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    2a38:	84 30       	cpi	r24, 0x04	; 4
    2a3a:	08 f0       	brcs	.+2      	; 0x2a3e <DIO_voidSetPinDirection+0x6>
    2a3c:	7c c0       	rjmp	.+248    	; 0x2b36 <DIO_voidSetPinDirection+0xfe>
    2a3e:	68 30       	cpi	r22, 0x08	; 8
    2a40:	08 f0       	brcs	.+2      	; 0x2a44 <DIO_voidSetPinDirection+0xc>
    2a42:	79 c0       	rjmp	.+242    	; 0x2b36 <DIO_voidSetPinDirection+0xfe>
    2a44:	42 30       	cpi	r20, 0x02	; 2
    2a46:	08 f0       	brcs	.+2      	; 0x2a4a <DIO_voidSetPinDirection+0x12>
    2a48:	76 c0       	rjmp	.+236    	; 0x2b36 <DIO_voidSetPinDirection+0xfe>
    2a4a:	81 30       	cpi	r24, 0x01	; 1
    2a4c:	19 f1       	breq	.+70     	; 0x2a94 <DIO_voidSetPinDirection+0x5c>
    2a4e:	30 f0       	brcs	.+12     	; 0x2a5c <DIO_voidSetPinDirection+0x24>
    2a50:	82 30       	cpi	r24, 0x02	; 2
    2a52:	e1 f1       	breq	.+120    	; 0x2acc <DIO_voidSetPinDirection+0x94>
    2a54:	83 30       	cpi	r24, 0x03	; 3
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <DIO_voidSetPinDirection+0x22>
    2a58:	54 c0       	rjmp	.+168    	; 0x2b02 <DIO_voidSetPinDirection+0xca>
    2a5a:	08 95       	ret
    2a5c:	44 23       	and	r20, r20
    2a5e:	71 f0       	breq	.+28     	; 0x2a7c <DIO_voidSetPinDirection+0x44>
    2a60:	41 30       	cpi	r20, 0x01	; 1
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <DIO_voidSetPinDirection+0x2e>
    2a64:	68 c0       	rjmp	.+208    	; 0x2b36 <DIO_voidSetPinDirection+0xfe>
    2a66:	2a b3       	in	r18, 0x1a	; 26
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	02 c0       	rjmp	.+4      	; 0x2a72 <DIO_voidSetPinDirection+0x3a>
    2a6e:	88 0f       	add	r24, r24
    2a70:	99 1f       	adc	r25, r25
    2a72:	6a 95       	dec	r22
    2a74:	e2 f7       	brpl	.-8      	; 0x2a6e <DIO_voidSetPinDirection+0x36>
    2a76:	82 2b       	or	r24, r18
    2a78:	8a bb       	out	0x1a, r24	; 26
    2a7a:	08 95       	ret
    2a7c:	2a b3       	in	r18, 0x1a	; 26
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	02 c0       	rjmp	.+4      	; 0x2a88 <DIO_voidSetPinDirection+0x50>
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	6a 95       	dec	r22
    2a8a:	e2 f7       	brpl	.-8      	; 0x2a84 <DIO_voidSetPinDirection+0x4c>
    2a8c:	80 95       	com	r24
    2a8e:	82 23       	and	r24, r18
    2a90:	8a bb       	out	0x1a, r24	; 26
    2a92:	08 95       	ret
    2a94:	44 23       	and	r20, r20
    2a96:	71 f0       	breq	.+28     	; 0x2ab4 <DIO_voidSetPinDirection+0x7c>
    2a98:	41 30       	cpi	r20, 0x01	; 1
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <DIO_voidSetPinDirection+0x66>
    2a9c:	4c c0       	rjmp	.+152    	; 0x2b36 <DIO_voidSetPinDirection+0xfe>
    2a9e:	27 b3       	in	r18, 0x17	; 23
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <DIO_voidSetPinDirection+0x72>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	6a 95       	dec	r22
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <DIO_voidSetPinDirection+0x6e>
    2aae:	82 2b       	or	r24, r18
    2ab0:	87 bb       	out	0x17, r24	; 23
    2ab2:	08 95       	ret
    2ab4:	27 b3       	in	r18, 0x17	; 23
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <DIO_voidSetPinDirection+0x88>
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	6a 95       	dec	r22
    2ac2:	e2 f7       	brpl	.-8      	; 0x2abc <DIO_voidSetPinDirection+0x84>
    2ac4:	80 95       	com	r24
    2ac6:	82 23       	and	r24, r18
    2ac8:	87 bb       	out	0x17, r24	; 23
    2aca:	08 95       	ret
    2acc:	44 23       	and	r20, r20
    2ace:	69 f0       	breq	.+26     	; 0x2aea <DIO_voidSetPinDirection+0xb2>
    2ad0:	41 30       	cpi	r20, 0x01	; 1
    2ad2:	89 f5       	brne	.+98     	; 0x2b36 <DIO_voidSetPinDirection+0xfe>
    2ad4:	24 b3       	in	r18, 0x14	; 20
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <DIO_voidSetPinDirection+0xa8>
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	6a 95       	dec	r22
    2ae2:	e2 f7       	brpl	.-8      	; 0x2adc <DIO_voidSetPinDirection+0xa4>
    2ae4:	82 2b       	or	r24, r18
    2ae6:	84 bb       	out	0x14, r24	; 20
    2ae8:	08 95       	ret
    2aea:	24 b3       	in	r18, 0x14	; 20
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <DIO_voidSetPinDirection+0xbe>
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	6a 95       	dec	r22
    2af8:	e2 f7       	brpl	.-8      	; 0x2af2 <DIO_voidSetPinDirection+0xba>
    2afa:	80 95       	com	r24
    2afc:	82 23       	and	r24, r18
    2afe:	84 bb       	out	0x14, r24	; 20
    2b00:	08 95       	ret
    2b02:	44 23       	and	r20, r20
    2b04:	69 f0       	breq	.+26     	; 0x2b20 <DIO_voidSetPinDirection+0xe8>
    2b06:	41 30       	cpi	r20, 0x01	; 1
    2b08:	b1 f4       	brne	.+44     	; 0x2b36 <DIO_voidSetPinDirection+0xfe>
    2b0a:	21 b3       	in	r18, 0x11	; 17
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <DIO_voidSetPinDirection+0xde>
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	6a 95       	dec	r22
    2b18:	e2 f7       	brpl	.-8      	; 0x2b12 <DIO_voidSetPinDirection+0xda>
    2b1a:	82 2b       	or	r24, r18
    2b1c:	81 bb       	out	0x11, r24	; 17
    2b1e:	08 95       	ret
    2b20:	21 b3       	in	r18, 0x11	; 17
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <DIO_voidSetPinDirection+0xf4>
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	6a 95       	dec	r22
    2b2e:	e2 f7       	brpl	.-8      	; 0x2b28 <DIO_voidSetPinDirection+0xf0>
    2b30:	80 95       	com	r24
    2b32:	82 23       	and	r24, r18
    2b34:	81 bb       	out	0x11, r24	; 17
    2b36:	08 95       	ret

00002b38 <DIO_voidSetPinValue>:
    2b38:	84 30       	cpi	r24, 0x04	; 4
    2b3a:	08 f0       	brcs	.+2      	; 0x2b3e <DIO_voidSetPinValue+0x6>
    2b3c:	7c c0       	rjmp	.+248    	; 0x2c36 <DIO_voidSetPinValue+0xfe>
    2b3e:	68 30       	cpi	r22, 0x08	; 8
    2b40:	08 f0       	brcs	.+2      	; 0x2b44 <DIO_voidSetPinValue+0xc>
    2b42:	79 c0       	rjmp	.+242    	; 0x2c36 <DIO_voidSetPinValue+0xfe>
    2b44:	42 30       	cpi	r20, 0x02	; 2
    2b46:	08 f0       	brcs	.+2      	; 0x2b4a <DIO_voidSetPinValue+0x12>
    2b48:	76 c0       	rjmp	.+236    	; 0x2c36 <DIO_voidSetPinValue+0xfe>
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	19 f1       	breq	.+70     	; 0x2b94 <DIO_voidSetPinValue+0x5c>
    2b4e:	30 f0       	brcs	.+12     	; 0x2b5c <DIO_voidSetPinValue+0x24>
    2b50:	82 30       	cpi	r24, 0x02	; 2
    2b52:	e1 f1       	breq	.+120    	; 0x2bcc <DIO_voidSetPinValue+0x94>
    2b54:	83 30       	cpi	r24, 0x03	; 3
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <DIO_voidSetPinValue+0x22>
    2b58:	54 c0       	rjmp	.+168    	; 0x2c02 <DIO_voidSetPinValue+0xca>
    2b5a:	08 95       	ret
    2b5c:	44 23       	and	r20, r20
    2b5e:	71 f0       	breq	.+28     	; 0x2b7c <DIO_voidSetPinValue+0x44>
    2b60:	41 30       	cpi	r20, 0x01	; 1
    2b62:	09 f0       	breq	.+2      	; 0x2b66 <DIO_voidSetPinValue+0x2e>
    2b64:	68 c0       	rjmp	.+208    	; 0x2c36 <DIO_voidSetPinValue+0xfe>
    2b66:	2b b3       	in	r18, 0x1b	; 27
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <DIO_voidSetPinValue+0x3a>
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	6a 95       	dec	r22
    2b74:	e2 f7       	brpl	.-8      	; 0x2b6e <DIO_voidSetPinValue+0x36>
    2b76:	82 2b       	or	r24, r18
    2b78:	8b bb       	out	0x1b, r24	; 27
    2b7a:	08 95       	ret
    2b7c:	2b b3       	in	r18, 0x1b	; 27
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <DIO_voidSetPinValue+0x50>
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	6a 95       	dec	r22
    2b8a:	e2 f7       	brpl	.-8      	; 0x2b84 <DIO_voidSetPinValue+0x4c>
    2b8c:	80 95       	com	r24
    2b8e:	82 23       	and	r24, r18
    2b90:	8b bb       	out	0x1b, r24	; 27
    2b92:	08 95       	ret
    2b94:	44 23       	and	r20, r20
    2b96:	71 f0       	breq	.+28     	; 0x2bb4 <DIO_voidSetPinValue+0x7c>
    2b98:	41 30       	cpi	r20, 0x01	; 1
    2b9a:	09 f0       	breq	.+2      	; 0x2b9e <DIO_voidSetPinValue+0x66>
    2b9c:	4c c0       	rjmp	.+152    	; 0x2c36 <DIO_voidSetPinValue+0xfe>
    2b9e:	28 b3       	in	r18, 0x18	; 24
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <DIO_voidSetPinValue+0x72>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	6a 95       	dec	r22
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <DIO_voidSetPinValue+0x6e>
    2bae:	82 2b       	or	r24, r18
    2bb0:	88 bb       	out	0x18, r24	; 24
    2bb2:	08 95       	ret
    2bb4:	28 b3       	in	r18, 0x18	; 24
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	02 c0       	rjmp	.+4      	; 0x2bc0 <DIO_voidSetPinValue+0x88>
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	6a 95       	dec	r22
    2bc2:	e2 f7       	brpl	.-8      	; 0x2bbc <DIO_voidSetPinValue+0x84>
    2bc4:	80 95       	com	r24
    2bc6:	82 23       	and	r24, r18
    2bc8:	88 bb       	out	0x18, r24	; 24
    2bca:	08 95       	ret
    2bcc:	44 23       	and	r20, r20
    2bce:	69 f0       	breq	.+26     	; 0x2bea <DIO_voidSetPinValue+0xb2>
    2bd0:	41 30       	cpi	r20, 0x01	; 1
    2bd2:	89 f5       	brne	.+98     	; 0x2c36 <DIO_voidSetPinValue+0xfe>
    2bd4:	25 b3       	in	r18, 0x15	; 21
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	02 c0       	rjmp	.+4      	; 0x2be0 <DIO_voidSetPinValue+0xa8>
    2bdc:	88 0f       	add	r24, r24
    2bde:	99 1f       	adc	r25, r25
    2be0:	6a 95       	dec	r22
    2be2:	e2 f7       	brpl	.-8      	; 0x2bdc <DIO_voidSetPinValue+0xa4>
    2be4:	82 2b       	or	r24, r18
    2be6:	85 bb       	out	0x15, r24	; 21
    2be8:	08 95       	ret
    2bea:	25 b3       	in	r18, 0x15	; 21
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <DIO_voidSetPinValue+0xbe>
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	6a 95       	dec	r22
    2bf8:	e2 f7       	brpl	.-8      	; 0x2bf2 <DIO_voidSetPinValue+0xba>
    2bfa:	80 95       	com	r24
    2bfc:	82 23       	and	r24, r18
    2bfe:	85 bb       	out	0x15, r24	; 21
    2c00:	08 95       	ret
    2c02:	44 23       	and	r20, r20
    2c04:	69 f0       	breq	.+26     	; 0x2c20 <DIO_voidSetPinValue+0xe8>
    2c06:	41 30       	cpi	r20, 0x01	; 1
    2c08:	b1 f4       	brne	.+44     	; 0x2c36 <DIO_voidSetPinValue+0xfe>
    2c0a:	22 b3       	in	r18, 0x12	; 18
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <DIO_voidSetPinValue+0xde>
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	6a 95       	dec	r22
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <DIO_voidSetPinValue+0xda>
    2c1a:	82 2b       	or	r24, r18
    2c1c:	82 bb       	out	0x12, r24	; 18
    2c1e:	08 95       	ret
    2c20:	22 b3       	in	r18, 0x12	; 18
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <DIO_voidSetPinValue+0xf4>
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	6a 95       	dec	r22
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <DIO_voidSetPinValue+0xf0>
    2c30:	80 95       	com	r24
    2c32:	82 23       	and	r24, r18
    2c34:	82 bb       	out	0x12, r24	; 18
    2c36:	08 95       	ret

00002c38 <DIO_voidGetPinValue>:
    2c38:	84 30       	cpi	r24, 0x04	; 4
    2c3a:	c0 f5       	brcc	.+112    	; 0x2cac <DIO_voidGetPinValue+0x74>
    2c3c:	68 30       	cpi	r22, 0x08	; 8
    2c3e:	b0 f5       	brcc	.+108    	; 0x2cac <DIO_voidGetPinValue+0x74>
    2c40:	41 15       	cp	r20, r1
    2c42:	51 05       	cpc	r21, r1
    2c44:	99 f1       	breq	.+102    	; 0x2cac <DIO_voidGetPinValue+0x74>
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	89 f0       	breq	.+34     	; 0x2c6c <DIO_voidGetPinValue+0x34>
    2c4a:	28 f0       	brcs	.+10     	; 0x2c56 <DIO_voidGetPinValue+0x1e>
    2c4c:	82 30       	cpi	r24, 0x02	; 2
    2c4e:	c9 f0       	breq	.+50     	; 0x2c82 <DIO_voidGetPinValue+0x4a>
    2c50:	83 30       	cpi	r24, 0x03	; 3
    2c52:	11 f1       	breq	.+68     	; 0x2c98 <DIO_voidGetPinValue+0x60>
    2c54:	08 95       	ret
    2c56:	89 b3       	in	r24, 0x19	; 25
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	02 c0       	rjmp	.+4      	; 0x2c60 <DIO_voidGetPinValue+0x28>
    2c5c:	95 95       	asr	r25
    2c5e:	87 95       	ror	r24
    2c60:	6a 95       	dec	r22
    2c62:	e2 f7       	brpl	.-8      	; 0x2c5c <DIO_voidGetPinValue+0x24>
    2c64:	81 70       	andi	r24, 0x01	; 1
    2c66:	fa 01       	movw	r30, r20
    2c68:	80 83       	st	Z, r24
    2c6a:	08 95       	ret
    2c6c:	86 b3       	in	r24, 0x16	; 22
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	02 c0       	rjmp	.+4      	; 0x2c76 <DIO_voidGetPinValue+0x3e>
    2c72:	95 95       	asr	r25
    2c74:	87 95       	ror	r24
    2c76:	6a 95       	dec	r22
    2c78:	e2 f7       	brpl	.-8      	; 0x2c72 <DIO_voidGetPinValue+0x3a>
    2c7a:	81 70       	andi	r24, 0x01	; 1
    2c7c:	fa 01       	movw	r30, r20
    2c7e:	80 83       	st	Z, r24
    2c80:	08 95       	ret
    2c82:	83 b3       	in	r24, 0x13	; 19
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <DIO_voidGetPinValue+0x54>
    2c88:	95 95       	asr	r25
    2c8a:	87 95       	ror	r24
    2c8c:	6a 95       	dec	r22
    2c8e:	e2 f7       	brpl	.-8      	; 0x2c88 <DIO_voidGetPinValue+0x50>
    2c90:	81 70       	andi	r24, 0x01	; 1
    2c92:	fa 01       	movw	r30, r20
    2c94:	80 83       	st	Z, r24
    2c96:	08 95       	ret
    2c98:	80 b3       	in	r24, 0x10	; 16
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_voidGetPinValue+0x6a>
    2c9e:	95 95       	asr	r25
    2ca0:	87 95       	ror	r24
    2ca2:	6a 95       	dec	r22
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_voidGetPinValue+0x66>
    2ca6:	81 70       	andi	r24, 0x01	; 1
    2ca8:	fa 01       	movw	r30, r20
    2caa:	80 83       	st	Z, r24
    2cac:	08 95       	ret

00002cae <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    2cae:	84 30       	cpi	r24, 0x04	; 4
    2cb0:	a8 f5       	brcc	.+106    	; 0x2d1c <DIO_voidActivePinInPullUpResistance+0x6e>
    2cb2:	68 30       	cpi	r22, 0x08	; 8
    2cb4:	98 f5       	brcc	.+102    	; 0x2d1c <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	89 f0       	breq	.+34     	; 0x2cdc <DIO_voidActivePinInPullUpResistance+0x2e>
    2cba:	28 f0       	brcs	.+10     	; 0x2cc6 <DIO_voidActivePinInPullUpResistance+0x18>
    2cbc:	82 30       	cpi	r24, 0x02	; 2
    2cbe:	c9 f0       	breq	.+50     	; 0x2cf2 <DIO_voidActivePinInPullUpResistance+0x44>
    2cc0:	83 30       	cpi	r24, 0x03	; 3
    2cc2:	11 f1       	breq	.+68     	; 0x2d08 <DIO_voidActivePinInPullUpResistance+0x5a>
    2cc4:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    2cc6:	2b b3       	in	r18, 0x1b	; 27
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <DIO_voidActivePinInPullUpResistance+0x24>
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	6a 95       	dec	r22
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <DIO_voidActivePinInPullUpResistance+0x20>
    2cd6:	82 2b       	or	r24, r18
    2cd8:	8b bb       	out	0x1b, r24	; 27
			break;
    2cda:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    2cdc:	28 b3       	in	r18, 0x18	; 24
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <DIO_voidActivePinInPullUpResistance+0x3a>
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	6a 95       	dec	r22
    2cea:	e2 f7       	brpl	.-8      	; 0x2ce4 <DIO_voidActivePinInPullUpResistance+0x36>
    2cec:	82 2b       	or	r24, r18
    2cee:	88 bb       	out	0x18, r24	; 24
			break;
    2cf0:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    2cf2:	25 b3       	in	r18, 0x15	; 21
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <DIO_voidActivePinInPullUpResistance+0x50>
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	6a 95       	dec	r22
    2d00:	e2 f7       	brpl	.-8      	; 0x2cfa <DIO_voidActivePinInPullUpResistance+0x4c>
    2d02:	82 2b       	or	r24, r18
    2d04:	85 bb       	out	0x15, r24	; 21
			break;
    2d06:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    2d08:	22 b3       	in	r18, 0x12	; 18
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <DIO_voidActivePinInPullUpResistance+0x66>
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	6a 95       	dec	r22
    2d16:	e2 f7       	brpl	.-8      	; 0x2d10 <DIO_voidActivePinInPullUpResistance+0x62>
    2d18:	82 2b       	or	r24, r18
    2d1a:	82 bb       	out	0x12, r24	; 18
    2d1c:	08 95       	ret

00002d1e <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    2d1e:	8f b7       	in	r24, 0x3f	; 63
    2d20:	80 68       	ori	r24, 0x80	; 128
    2d22:	8f bf       	out	0x3f, r24	; 63
    2d24:	08 95       	ret

00002d26 <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel A)*/
	SET_BIT(TCCR1B_REG, WGM13);
    2d26:	8e b5       	in	r24, 0x2e	; 46
    2d28:	80 61       	ori	r24, 0x10	; 16
    2d2a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    2d2c:	8e b5       	in	r24, 0x2e	; 46
    2d2e:	88 60       	ori	r24, 0x08	; 8
    2d30:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    2d32:	8f b5       	in	r24, 0x2f	; 47
    2d34:	82 60       	ori	r24, 0x02	; 2
    2d36:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    2d38:	8f b5       	in	r24, 0x2f	; 47
    2d3a:	8e 7f       	andi	r24, 0xFE	; 254
    2d3c:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1A1);
    2d3e:	8f b5       	in	r24, 0x2f	; 47
    2d40:	80 68       	ori	r24, 0x80	; 128
    2d42:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0);
    2d44:	8f b5       	in	r24, 0x2f	; 47
    2d46:	8f 7b       	andi	r24, 0xBF	; 191
    2d48:	8f bd       	out	0x2f, r24	; 47
    2d4a:	08 95       	ret

00002d4c <PWM_voidInitChannel_1B>:
}

void PWM_voidInitChannel_1B(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel B)*/
	SET_BIT(TCCR1B_REG, WGM13);
    2d4c:	8e b5       	in	r24, 0x2e	; 46
    2d4e:	80 61       	ori	r24, 0x10	; 16
    2d50:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    2d52:	8e b5       	in	r24, 0x2e	; 46
    2d54:	88 60       	ori	r24, 0x08	; 8
    2d56:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    2d58:	8f b5       	in	r24, 0x2f	; 47
    2d5a:	82 60       	ori	r24, 0x02	; 2
    2d5c:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    2d5e:	8f b5       	in	r24, 0x2f	; 47
    2d60:	8e 7f       	andi	r24, 0xFE	; 254
    2d62:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1B1);
    2d64:	8f b5       	in	r24, 0x2f	; 47
    2d66:	80 62       	ori	r24, 0x20	; 32
    2d68:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1B0);
    2d6a:	8f b5       	in	r24, 0x2f	; 47
    2d6c:	8f 7e       	andi	r24, 0xEF	; 239
    2d6e:	8f bd       	out	0x2f, r24	; 47
    2d70:	08 95       	ret

00002d72 <PWM_voidGenerateChannel_1A>:
}


void PWM_voidGenerateChannel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	ec 01       	movw	r28, r24
    2d80:	6a 01       	movw	r12, r20
    2d82:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	48 ec       	ldi	r20, 0xC8	; 200
    2d8a:	52 e4       	ldi	r21, 0x42	; 66
    2d8c:	c7 01       	movw	r24, r14
    2d8e:	b6 01       	movw	r22, r12
    2d90:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__cmpsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	94 f1       	brlt	.+100    	; 0x2dfc <PWM_voidGenerateChannel_1A+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    2d98:	9e 01       	movw	r18, r28
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	60 e9       	ldi	r22, 0x90	; 144
    2da0:	70 ed       	ldi	r23, 0xD0	; 208
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
    2daa:	21 50       	subi	r18, 0x01	; 1
    2dac:	31 09       	sbc	r19, r1
    2dae:	37 bd       	out	0x27, r19	; 39
    2db0:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1A_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    2db2:	66 b5       	in	r22, 0x26	; 38
    2db4:	77 b5       	in	r23, 0x27	; 39
    2db6:	6f 5f       	subi	r22, 0xFF	; 255
    2db8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    2dc2:	a7 01       	movw	r20, r14
    2dc4:	96 01       	movw	r18, r12
    2dc6:	0e 94 3d 1b 	call	0x367a	; 0x367a <__mulsf3>
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	48 ec       	ldi	r20, 0xC8	; 200
    2dd0:	52 e4       	ldi	r21, 0x42	; 66
    2dd2:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__divsf3>
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e8       	ldi	r20, 0x80	; 128
    2ddc:	5f e3       	ldi	r21, 0x3F	; 63
    2dde:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__subsf3>
    2de2:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__fixunssfsi>
    2de6:	7b bd       	out	0x2b, r23	; 43
    2de8:	6a bd       	out	0x2a, r22	; 42
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    2dea:	8e b5       	in	r24, 0x2e	; 46
    2dec:	81 60       	ori	r24, 0x01	; 1
    2dee:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    2df0:	8e b5       	in	r24, 0x2e	; 46
    2df2:	82 60       	ori	r24, 0x02	; 2
    2df4:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    2df6:	8e b5       	in	r24, 0x2e	; 46
    2df8:	8b 7f       	andi	r24, 0xFB	; 251
    2dfa:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
}
    2dfc:	df 91       	pop	r29
    2dfe:	cf 91       	pop	r28
    2e00:	ff 90       	pop	r15
    2e02:	ef 90       	pop	r14
    2e04:	df 90       	pop	r13
    2e06:	cf 90       	pop	r12
    2e08:	08 95       	ret

00002e0a <PWM_voidGenerateChannel_1B>:



void PWM_voidGenerateChannel_1B(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    2e0a:	cf 92       	push	r12
    2e0c:	df 92       	push	r13
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	ec 01       	movw	r28, r24
    2e18:	6a 01       	movw	r12, r20
    2e1a:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	48 ec       	ldi	r20, 0xC8	; 200
    2e22:	52 e4       	ldi	r21, 0x42	; 66
    2e24:	c7 01       	movw	r24, r14
    2e26:	b6 01       	movw	r22, r12
    2e28:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__cmpsf2>
    2e2c:	18 16       	cp	r1, r24
    2e2e:	94 f1       	brlt	.+100    	; 0x2e94 <PWM_voidGenerateChannel_1B+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    2e30:	9e 01       	movw	r18, r28
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	60 e9       	ldi	r22, 0x90	; 144
    2e38:	70 ed       	ldi	r23, 0xD0	; 208
    2e3a:	83 e0       	ldi	r24, 0x03	; 3
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__udivmodsi4>
    2e42:	21 50       	subi	r18, 0x01	; 1
    2e44:	31 09       	sbc	r19, r1
    2e46:	37 bd       	out	0x27, r19	; 39
    2e48:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1B_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    2e4a:	66 b5       	in	r22, 0x26	; 38
    2e4c:	77 b5       	in	r23, 0x27	; 39
    2e4e:	6f 5f       	subi	r22, 0xFF	; 255
    2e50:	7f 4f       	sbci	r23, 0xFF	; 255
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	0e 94 8b 1a 	call	0x3516	; 0x3516 <__floatunsisf>
    2e5a:	a7 01       	movw	r20, r14
    2e5c:	96 01       	movw	r18, r12
    2e5e:	0e 94 3d 1b 	call	0x367a	; 0x367a <__mulsf3>
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	48 ec       	ldi	r20, 0xC8	; 200
    2e68:	52 e4       	ldi	r21, 0x42	; 66
    2e6a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <__divsf3>
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	40 e8       	ldi	r20, 0x80	; 128
    2e74:	5f e3       	ldi	r21, 0x3F	; 63
    2e76:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__subsf3>
    2e7a:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__fixunssfsi>
    2e7e:	79 bd       	out	0x29, r23	; 41
    2e80:	68 bd       	out	0x28, r22	; 40
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    2e82:	8e b5       	in	r24, 0x2e	; 46
    2e84:	81 60       	ori	r24, 0x01	; 1
    2e86:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    2e88:	8e b5       	in	r24, 0x2e	; 46
    2e8a:	82 60       	ori	r24, 0x02	; 2
    2e8c:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    2e8e:	8e b5       	in	r24, 0x2e	; 46
    2e90:	8b 7f       	andi	r24, 0xFB	; 251
    2e92:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	ff 90       	pop	r15
    2e9a:	ef 90       	pop	r14
    2e9c:	df 90       	pop	r13
    2e9e:	cf 90       	pop	r12
    2ea0:	08 95       	ret

00002ea2 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    2ea2:	83 b7       	in	r24, 0x33	; 51
    2ea4:	8f 7b       	andi	r24, 0xBF	; 191
    2ea6:	83 bf       	out	0x33, r24	; 51
    2ea8:	83 b7       	in	r24, 0x33	; 51
    2eaa:	88 60       	ori	r24, 0x08	; 8
    2eac:	83 bf       	out	0x33, r24	; 51
    2eae:	83 b7       	in	r24, 0x33	; 51
    2eb0:	8f 7e       	andi	r24, 0xEF	; 239
    2eb2:	83 bf       	out	0x33, r24	; 51
    2eb4:	83 b7       	in	r24, 0x33	; 51
    2eb6:	8f 7d       	andi	r24, 0xDF	; 223
    2eb8:	83 bf       	out	0x33, r24	; 51
    2eba:	89 b7       	in	r24, 0x39	; 57
    2ebc:	82 60       	ori	r24, 0x02	; 2
    2ebe:	89 bf       	out	0x39, r24	; 57
    2ec0:	89 ef       	ldi	r24, 0xF9	; 249
    2ec2:	8c bf       	out	0x3c, r24	; 60
    2ec4:	08 95       	ret

00002ec6 <TMR0_voidStart>:
    2ec6:	83 b7       	in	r24, 0x33	; 51
    2ec8:	81 60       	ori	r24, 0x01	; 1
    2eca:	83 bf       	out	0x33, r24	; 51
    2ecc:	83 b7       	in	r24, 0x33	; 51
    2ece:	82 60       	ori	r24, 0x02	; 2
    2ed0:	83 bf       	out	0x33, r24	; 51
    2ed2:	83 b7       	in	r24, 0x33	; 51
    2ed4:	8b 7f       	andi	r24, 0xFB	; 251
    2ed6:	83 bf       	out	0x33, r24	; 51
    2ed8:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <local_u16Counter+0x1>
    2edc:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <local_u16Counter>
    2ee0:	08 95       	ret

00002ee2 <TMR0_voidStop>:
    2ee2:	83 b7       	in	r24, 0x33	; 51
    2ee4:	8e 7f       	andi	r24, 0xFE	; 254
    2ee6:	83 bf       	out	0x33, r24	; 51
    2ee8:	83 b7       	in	r24, 0x33	; 51
    2eea:	8d 7f       	andi	r24, 0xFD	; 253
    2eec:	83 bf       	out	0x33, r24	; 51
    2eee:	83 b7       	in	r24, 0x33	; 51
    2ef0:	8b 7f       	andi	r24, 0xFB	; 251
    2ef2:	83 bf       	out	0x33, r24	; 51
    2ef4:	08 95       	ret

00002ef6 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	21 f0       	breq	.+8      	; 0x2f02 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    2efa:	90 93 92 04 	sts	0x0492, r25	; 0x800492 <PRV_pFunCallBackCTC+0x1>
    2efe:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <PRV_pFunCallBackCTC>
    2f02:	08 95       	ret

00002f04 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    2f04:	88 b7       	in	r24, 0x38	; 56
    2f06:	82 60       	ori	r24, 0x02	; 2
    2f08:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    2f0a:	88 b7       	in	r24, 0x38	; 56
    2f0c:	81 60       	ori	r24, 0x01	; 1
    2f0e:	88 bf       	out	0x38, r24	; 56
    2f10:	08 95       	ret

00002f12 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    2f12:	1f 92       	push	r1
    2f14:	0f 92       	push	r0
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	0f 92       	push	r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	2f 93       	push	r18
    2f1e:	3f 93       	push	r19
    2f20:	4f 93       	push	r20
    2f22:	5f 93       	push	r21
    2f24:	6f 93       	push	r22
    2f26:	7f 93       	push	r23
    2f28:	8f 93       	push	r24
    2f2a:	9f 93       	push	r25
    2f2c:	af 93       	push	r26
    2f2e:	bf 93       	push	r27
    2f30:	ef 93       	push	r30
    2f32:	ff 93       	push	r31
	
	
	local_u16Counter++;
    2f34:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <local_u16Counter>
    2f38:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <local_u16Counter+0x1>
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <local_u16Counter+0x1>
    2f42:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    2f46:	88 3e       	cpi	r24, 0xE8	; 232
    2f48:	93 40       	sbci	r25, 0x03	; 3
    2f4a:	69 f4       	brne	.+26     	; 0x2f66 <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    2f4c:	81 e7       	ldi	r24, 0x71	; 113
    2f4e:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    2f50:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <local_u16Counter+0x1>
    2f54:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    2f58:	e0 91 93 04 	lds	r30, 0x0493	; 0x800493 <PRV_pFunCallBackOVF>
    2f5c:	f0 91 94 04 	lds	r31, 0x0494	; 0x800494 <PRV_pFunCallBackOVF+0x1>
    2f60:	30 97       	sbiw	r30, 0x00	; 0
    2f62:	09 f0       	breq	.+2      	; 0x2f66 <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    2f64:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    2f66:	ff 91       	pop	r31
    2f68:	ef 91       	pop	r30
    2f6a:	bf 91       	pop	r27
    2f6c:	af 91       	pop	r26
    2f6e:	9f 91       	pop	r25
    2f70:	8f 91       	pop	r24
    2f72:	7f 91       	pop	r23
    2f74:	6f 91       	pop	r22
    2f76:	5f 91       	pop	r21
    2f78:	4f 91       	pop	r20
    2f7a:	3f 91       	pop	r19
    2f7c:	2f 91       	pop	r18
    2f7e:	0f 90       	pop	r0
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	0f 90       	pop	r0
    2f84:	1f 90       	pop	r1
    2f86:	18 95       	reti

00002f88 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    2f88:	1f 92       	push	r1
    2f8a:	0f 92       	push	r0
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	0f 92       	push	r0
    2f90:	11 24       	eor	r1, r1
    2f92:	2f 93       	push	r18
    2f94:	3f 93       	push	r19
    2f96:	4f 93       	push	r20
    2f98:	5f 93       	push	r21
    2f9a:	6f 93       	push	r22
    2f9c:	7f 93       	push	r23
    2f9e:	8f 93       	push	r24
    2fa0:	9f 93       	push	r25
    2fa2:	af 93       	push	r26
    2fa4:	bf 93       	push	r27
    2fa6:	ef 93       	push	r30
    2fa8:	ff 93       	push	r31
	

	
	local_u16Counter++;
    2faa:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <local_u16Counter>
    2fae:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <local_u16Counter+0x1>
    2fb2:	01 96       	adiw	r24, 0x01	; 1
    2fb4:	90 93 90 04 	sts	0x0490, r25	; 0x800490 <local_u16Counter+0x1>
    2fb8:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    2fbc:	88 38       	cpi	r24, 0x88	; 136
    2fbe:	93 41       	sbci	r25, 0x13	; 19
    2fc0:	69 f4       	brne	.+26     	; 0x2fdc <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    2fc2:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <local_u16Counter+0x1>
    2fc6:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    2fca:	e0 91 91 04 	lds	r30, 0x0491	; 0x800491 <PRV_pFunCallBackCTC>
    2fce:	f0 91 92 04 	lds	r31, 0x0492	; 0x800492 <PRV_pFunCallBackCTC+0x1>
    2fd2:	30 97       	sbiw	r30, 0x00	; 0
    2fd4:	19 f0       	breq	.+6      	; 0x2fdc <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    2fd6:	09 95       	icall
			TMR0clear_flag();
    2fd8:	0e 94 82 17 	call	0x2f04	; 0x2f04 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    2fdc:	ff 91       	pop	r31
    2fde:	ef 91       	pop	r30
    2fe0:	bf 91       	pop	r27
    2fe2:	af 91       	pop	r26
    2fe4:	9f 91       	pop	r25
    2fe6:	8f 91       	pop	r24
    2fe8:	7f 91       	pop	r23
    2fea:	6f 91       	pop	r22
    2fec:	5f 91       	pop	r21
    2fee:	4f 91       	pop	r20
    2ff0:	3f 91       	pop	r19
    2ff2:	2f 91       	pop	r18
    2ff4:	0f 90       	pop	r0
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	0f 90       	pop	r0
    2ffa:	1f 90       	pop	r1
    2ffc:	18 95       	reti

00002ffe <TMR2_voidInit>:

void TMR2_SetCallBackOVF(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    {
        PRV_pFunCallBackOVF=copy_pFunAction;
    2ffe:	85 b5       	in	r24, 0x25	; 37
    3000:	8f 7b       	andi	r24, 0xBF	; 191
    3002:	85 bd       	out	0x25, r24	; 37
    3004:	85 b5       	in	r24, 0x25	; 37
    3006:	88 60       	ori	r24, 0x08	; 8
    3008:	85 bd       	out	0x25, r24	; 37
    300a:	85 b5       	in	r24, 0x25	; 37
    300c:	8f 7e       	andi	r24, 0xEF	; 239
    300e:	85 bd       	out	0x25, r24	; 37
    3010:	85 b5       	in	r24, 0x25	; 37
    3012:	8f 7d       	andi	r24, 0xDF	; 223
    3014:	85 bd       	out	0x25, r24	; 37
    3016:	89 b7       	in	r24, 0x39	; 57
    3018:	80 68       	ori	r24, 0x80	; 128
    301a:	89 bf       	out	0x39, r24	; 57
    301c:	89 ef       	ldi	r24, 0xF9	; 249
    301e:	83 bd       	out	0x23, r24	; 35
    3020:	08 95       	ret

00003022 <TMR2_voidStart>:
    3022:	85 b5       	in	r24, 0x25	; 37
    3024:	81 60       	ori	r24, 0x01	; 1
    3026:	85 bd       	out	0x25, r24	; 37
    3028:	85 b5       	in	r24, 0x25	; 37
    302a:	82 60       	ori	r24, 0x02	; 2
    302c:	85 bd       	out	0x25, r24	; 37
    302e:	85 b5       	in	r24, 0x25	; 37
    3030:	8b 7f       	andi	r24, 0xFB	; 251
    3032:	85 bd       	out	0x25, r24	; 37
    3034:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <local_u16Counter+0x1>
    3038:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <local_u16Counter>
    303c:	08 95       	ret

0000303e <TMR2_SetCallBackCTC>:
    }
}

void TMR2_SetCallBackCTC(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    303e:	00 97       	sbiw	r24, 0x00	; 0
    3040:	21 f0       	breq	.+8      	; 0x304a <TMR2_SetCallBackCTC+0xc>
    {
        PRV_pFunCallBackCTC=copy_pFunAction;
    3042:	90 93 98 04 	sts	0x0498, r25	; 0x800498 <PRV_pFunCallBackCTC+0x1>
    3046:	80 93 97 04 	sts	0x0497, r24	; 0x800497 <PRV_pFunCallBackCTC>
    304a:	08 95       	ret

0000304c <TMR2_clear_flag>:
    }
}

void TMR2_clear_flag(void)
{
    TIFR2_REG |= (1 << OCF2); 
    304c:	88 b7       	in	r24, 0x38	; 56
    304e:	80 68       	ori	r24, 0x80	; 128
    3050:	88 bf       	out	0x38, r24	; 56
    SET_BIT(TIFR2_REG,TOV2);
    3052:	88 b7       	in	r24, 0x38	; 56
    3054:	80 64       	ori	r24, 0x40	; 64
    3056:	88 bf       	out	0x38, r24	; 56
    3058:	08 95       	ret

0000305a <__vector_5>:
}

void __vector_5(void)__attribute__((signal));
void __vector_5(void)
{
    305a:	1f 92       	push	r1
    305c:	0f 92       	push	r0
    305e:	0f b6       	in	r0, 0x3f	; 63
    3060:	0f 92       	push	r0
    3062:	11 24       	eor	r1, r1
    3064:	2f 93       	push	r18
    3066:	3f 93       	push	r19
    3068:	4f 93       	push	r20
    306a:	5f 93       	push	r21
    306c:	6f 93       	push	r22
    306e:	7f 93       	push	r23
    3070:	8f 93       	push	r24
    3072:	9f 93       	push	r25
    3074:	af 93       	push	r26
    3076:	bf 93       	push	r27
    3078:	ef 93       	push	r30
    307a:	ff 93       	push	r31
    local_u16Counter++;
    307c:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <local_u16Counter>
    3080:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <local_u16Counter+0x1>
    3084:	01 96       	adiw	r24, 0x01	; 1
    3086:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <local_u16Counter+0x1>
    308a:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <local_u16Counter>
    
    if(local_u16Counter==TMR2_OVERFLOW_COUNTER)
    308e:	88 3e       	cpi	r24, 0xE8	; 232
    3090:	93 40       	sbci	r25, 0x03	; 3
    3092:	69 f4       	brne	.+26     	; 0x30ae <__vector_5+0x54>
    {
        /*put preload value in timer register*/
        TCNT2_REG=TMR2_PRELOAD_VALUE;
    3094:	81 e7       	ldi	r24, 0x71	; 113
    3096:	84 bd       	out	0x24, r24	; 36
        
        /*CLR counter*/
        local_u16Counter=0;
    3098:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <local_u16Counter+0x1>
    309c:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <local_u16Counter>
        
        if(PRV_pFunCallBackOVF != NULL)
    30a0:	e0 91 99 04 	lds	r30, 0x0499	; 0x800499 <PRV_pFunCallBackOVF>
    30a4:	f0 91 9a 04 	lds	r31, 0x049A	; 0x80049a <PRV_pFunCallBackOVF+0x1>
    30a8:	30 97       	sbiw	r30, 0x00	; 0
    30aa:	09 f0       	breq	.+2      	; 0x30ae <__vector_5+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackOVF();
    30ac:	09 95       	icall
        else
        {
            //error state
        }
    }
}
    30ae:	ff 91       	pop	r31
    30b0:	ef 91       	pop	r30
    30b2:	bf 91       	pop	r27
    30b4:	af 91       	pop	r26
    30b6:	9f 91       	pop	r25
    30b8:	8f 91       	pop	r24
    30ba:	7f 91       	pop	r23
    30bc:	6f 91       	pop	r22
    30be:	5f 91       	pop	r21
    30c0:	4f 91       	pop	r20
    30c2:	3f 91       	pop	r19
    30c4:	2f 91       	pop	r18
    30c6:	0f 90       	pop	r0
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	0f 90       	pop	r0
    30cc:	1f 90       	pop	r1
    30ce:	18 95       	reti

000030d0 <__vector_4>:

void __vector_4(void)__attribute__((signal));
void __vector_4(void)
{
    30d0:	1f 92       	push	r1
    30d2:	0f 92       	push	r0
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	0f 92       	push	r0
    30d8:	11 24       	eor	r1, r1
    30da:	2f 93       	push	r18
    30dc:	3f 93       	push	r19
    30de:	4f 93       	push	r20
    30e0:	5f 93       	push	r21
    30e2:	6f 93       	push	r22
    30e4:	7f 93       	push	r23
    30e6:	8f 93       	push	r24
    30e8:	9f 93       	push	r25
    30ea:	af 93       	push	r26
    30ec:	bf 93       	push	r27
    30ee:	ef 93       	push	r30
    30f0:	ff 93       	push	r31
    local_u16Counter++;
    30f2:	80 91 95 04 	lds	r24, 0x0495	; 0x800495 <local_u16Counter>
    30f6:	90 91 96 04 	lds	r25, 0x0496	; 0x800496 <local_u16Counter+0x1>
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	90 93 96 04 	sts	0x0496, r25	; 0x800496 <local_u16Counter+0x1>
    3100:	80 93 95 04 	sts	0x0495, r24	; 0x800495 <local_u16Counter>
    
    if(local_u16Counter==TMR2_CTC_COUNTER)
    3104:	88 38       	cpi	r24, 0x88	; 136
    3106:	93 41       	sbci	r25, 0x13	; 19
    3108:	69 f4       	brne	.+26     	; 0x3124 <__vector_4+0x54>
    {
        /*CLR counter*/
        local_u16Counter=0;
    310a:	10 92 96 04 	sts	0x0496, r1	; 0x800496 <local_u16Counter+0x1>
    310e:	10 92 95 04 	sts	0x0495, r1	; 0x800495 <local_u16Counter>
        
        if(PRV_pFunCallBackCTC != NULL)
    3112:	e0 91 97 04 	lds	r30, 0x0497	; 0x800497 <PRV_pFunCallBackCTC>
    3116:	f0 91 98 04 	lds	r31, 0x0498	; 0x800498 <PRV_pFunCallBackCTC+0x1>
    311a:	30 97       	sbiw	r30, 0x00	; 0
    311c:	19 f0       	breq	.+6      	; 0x3124 <__vector_4+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackCTC();
    311e:	09 95       	icall
            TMR2_clear_flag();
    3120:	0e 94 26 18 	call	0x304c	; 0x304c <TMR2_clear_flag>
        else
        {
            //error state
        }
    }
}
    3124:	ff 91       	pop	r31
    3126:	ef 91       	pop	r30
    3128:	bf 91       	pop	r27
    312a:	af 91       	pop	r26
    312c:	9f 91       	pop	r25
    312e:	8f 91       	pop	r24
    3130:	7f 91       	pop	r23
    3132:	6f 91       	pop	r22
    3134:	5f 91       	pop	r21
    3136:	4f 91       	pop	r20
    3138:	3f 91       	pop	r19
    313a:	2f 91       	pop	r18
    313c:	0f 90       	pop	r0
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	0f 90       	pop	r0
    3142:	1f 90       	pop	r1
    3144:	18 95       	reti

00003146 <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
    3146:	8c e0       	ldi	r24, 0x0C	; 12
    3148:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
    314a:	81 b1       	in	r24, 0x01	; 1
    314c:	8d 7f       	andi	r24, 0xFD	; 253
    314e:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
    3150:	81 b1       	in	r24, 0x01	; 1
    3152:	8e 7f       	andi	r24, 0xFE	; 254
    3154:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
    3156:	86 b7       	in	r24, 0x36	; 54
    3158:	84 60       	ori	r24, 0x04	; 4
    315a:	86 bf       	out	0x36, r24	; 54
    315c:	08 95       	ret

0000315e <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    315e:	86 b7       	in	r24, 0x36	; 54
    3160:	80 62       	ori	r24, 0x20	; 32
    3162:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    3164:	86 b7       	in	r24, 0x36	; 54
    3166:	80 68       	ori	r24, 0x80	; 128
    3168:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    316a:	06 b6       	in	r0, 0x36	; 54
    316c:	07 fe       	sbrs	r0, 7
    316e:	fd cf       	rjmp	.-6      	; 0x316a <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
    3170:	81 b1       	in	r24, 0x01	; 1
    3172:	88 7f       	andi	r24, 0xF8	; 248
    3174:	88 30       	cpi	r24, 0x08	; 8
    3176:	e1 f7       	brne	.-8      	; 0x3170 <TWI_voidSendStartCondition+0x12>
}
    3178:	08 95       	ret

0000317a <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    317a:	86 b7       	in	r24, 0x36	; 54
    317c:	80 62       	ori	r24, 0x20	; 32
    317e:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    3180:	86 b7       	in	r24, 0x36	; 54
    3182:	80 68       	ori	r24, 0x80	; 128
    3184:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    3186:	06 b6       	in	r0, 0x36	; 54
    3188:	07 fe       	sbrs	r0, 7
    318a:	fd cf       	rjmp	.-6      	; 0x3186 <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
    318c:	81 b1       	in	r24, 0x01	; 1
    318e:	88 7f       	andi	r24, 0xF8	; 248
    3190:	80 31       	cpi	r24, 0x10	; 16
    3192:	e1 f7       	brne	.-8      	; 0x318c <TWI_voidSendRepeatedStartCondition+0x12>
}
    3194:	08 95       	ret

00003196 <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
    3196:	86 b7       	in	r24, 0x36	; 54
    3198:	80 61       	ori	r24, 0x10	; 16
    319a:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    319c:	86 b7       	in	r24, 0x36	; 54
    319e:	80 68       	ori	r24, 0x80	; 128
    31a0:	86 bf       	out	0x36, r24	; 54
    31a2:	08 95       	ret

000031a4 <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    31a4:	88 23       	and	r24, r24
    31a6:	94 f0       	brlt	.+36     	; 0x31cc <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    31a8:	88 0f       	add	r24, r24
    31aa:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
    31ac:	83 b1       	in	r24, 0x03	; 3
    31ae:	8e 7f       	andi	r24, 0xFE	; 254
    31b0:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    31b2:	86 b7       	in	r24, 0x36	; 54
    31b4:	8f 7d       	andi	r24, 0xDF	; 223
    31b6:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    31b8:	86 b7       	in	r24, 0x36	; 54
    31ba:	80 68       	ori	r24, 0x80	; 128
    31bc:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    31be:	06 b6       	in	r0, 0x36	; 54
    31c0:	07 fe       	sbrs	r0, 7
    31c2:	fd cf       	rjmp	.-6      	; 0x31be <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    31c4:	81 b1       	in	r24, 0x01	; 1
    31c6:	88 7f       	andi	r24, 0xF8	; 248
    31c8:	88 31       	cpi	r24, 0x18	; 24
    31ca:	e1 f7       	brne	.-8      	; 0x31c4 <TWI_voidSendSlaveAddWithWrite+0x20>
    31cc:	08 95       	ret

000031ce <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    31ce:	88 23       	and	r24, r24
    31d0:	94 f0       	brlt	.+36     	; 0x31f6 <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    31d2:	88 0f       	add	r24, r24
    31d4:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
    31d6:	83 b1       	in	r24, 0x03	; 3
    31d8:	81 60       	ori	r24, 0x01	; 1
    31da:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    31dc:	86 b7       	in	r24, 0x36	; 54
    31de:	8f 7d       	andi	r24, 0xDF	; 223
    31e0:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    31e2:	86 b7       	in	r24, 0x36	; 54
    31e4:	80 68       	ori	r24, 0x80	; 128
    31e6:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    31e8:	06 b6       	in	r0, 0x36	; 54
    31ea:	07 fe       	sbrs	r0, 7
    31ec:	fd cf       	rjmp	.-6      	; 0x31e8 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    31ee:	81 b1       	in	r24, 0x01	; 1
    31f0:	88 7f       	andi	r24, 0xF8	; 248
    31f2:	80 34       	cpi	r24, 0x40	; 64
    31f4:	e1 f7       	brne	.-8      	; 0x31ee <TWI_voidSendSlaveAddWithRead+0x20>
    31f6:	08 95       	ret

000031f8 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    31f8:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    31fa:	86 b7       	in	r24, 0x36	; 54
    31fc:	80 68       	ori	r24, 0x80	; 128
    31fe:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    3200:	06 b6       	in	r0, 0x36	; 54
    3202:	07 fe       	sbrs	r0, 7
    3204:	fd cf       	rjmp	.-6      	; 0x3200 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    3206:	81 b1       	in	r24, 0x01	; 1
    3208:	88 7f       	andi	r24, 0xF8	; 248
    320a:	88 32       	cpi	r24, 0x28	; 40
    320c:	e1 f7       	brne	.-8      	; 0x3206 <TWI_voidTransmitMasterDataByte+0xe>
}
    320e:	08 95       	ret

00003210 <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
    3210:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    3212:	89 2b       	or	r24, r25
    3214:	91 f0       	breq	.+36     	; 0x323a <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
    3216:	96 b7       	in	r25, 0x36	; 54
    3218:	90 64       	ori	r25, 0x40	; 64
    321a:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    321c:	96 b7       	in	r25, 0x36	; 54
    321e:	90 68       	ori	r25, 0x80	; 128
    3220:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    3222:	06 b6       	in	r0, 0x36	; 54
    3224:	07 fe       	sbrs	r0, 7
    3226:	fd cf       	rjmp	.-6      	; 0x3222 <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
    3228:	91 b1       	in	r25, 0x01	; 1
    322a:	98 7f       	andi	r25, 0xF8	; 248
    322c:	90 35       	cpi	r25, 0x50	; 80
    322e:	e1 f7       	brne	.-8      	; 0x3228 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
    3230:	83 b1       	in	r24, 0x03	; 3
    3232:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
    3234:	86 b7       	in	r24, 0x36	; 54
    3236:	8f 7b       	andi	r24, 0xBF	; 191
    3238:	86 bf       	out	0x36, r24	; 54
    323a:	08 95       	ret

0000323c <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
    323c:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    323e:	89 2b       	or	r24, r25
    3240:	61 f0       	breq	.+24     	; 0x325a <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    3242:	96 b7       	in	r25, 0x36	; 54
    3244:	90 68       	ori	r25, 0x80	; 128
    3246:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    3248:	06 b6       	in	r0, 0x36	; 54
    324a:	07 fe       	sbrs	r0, 7
    324c:	fd cf       	rjmp	.-6      	; 0x3248 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
    324e:	91 b1       	in	r25, 0x01	; 1
    3250:	98 7f       	andi	r25, 0xF8	; 248
    3252:	98 35       	cpi	r25, 0x58	; 88
    3254:	e1 f7       	brne	.-8      	; 0x324e <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
    3256:	83 b1       	in	r24, 0x03	; 3
    3258:	80 83       	st	Z, r24
    325a:	08 95       	ret

0000325c <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    325c:	8b b1       	in	r24, 0x0b	; 11
    325e:	8d 7f       	andi	r24, 0xFD	; 253
    3260:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    3262:	87 e6       	ldi	r24, 0x67	; 103
    3264:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    3266:	8a b1       	in	r24, 0x0a	; 10
    3268:	8b 7f       	andi	r24, 0xFB	; 251
    326a:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    326c:	86 e8       	ldi	r24, 0x86	; 134
    326e:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    3270:	8a b1       	in	r24, 0x0a	; 10
    3272:	80 61       	ori	r24, 0x10	; 16
    3274:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    3276:	8a b1       	in	r24, 0x0a	; 10
    3278:	88 60       	ori	r24, 0x08	; 8
    327a:	8a b9       	out	0x0a, r24	; 10
    327c:	08 95       	ret

0000327e <UART_voidTxChar>:


void UART_voidTxChar(u8 copy_u8TxData)
{
	/*write data to data register*/
	UDR_REG=copy_u8TxData;
    327e:	8c b9       	out	0x0c, r24	; 12
	
	/*busy wait for data moved from data register to shift register*/
	while(0==GET_BIT(UCSRA_REG,UDRE));
    3280:	5d 9b       	sbis	0x0b, 5	; 11
    3282:	fe cf       	rjmp	.-4      	; 0x3280 <UART_voidTxChar+0x2>
	
}
    3284:	08 95       	ret

00003286 <UART_voidRxChar>:



void UART_voidRxChar(u8* copy_pu8RxData)
{
	if(copy_pu8RxData!=NULL)
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	29 f0       	breq	.+10     	; 0x3294 <UART_voidRxChar+0xe>
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC));
    328a:	5f 9b       	sbis	0x0b, 7	; 11
    328c:	fe cf       	rjmp	.-4      	; 0x328a <UART_voidRxChar+0x4>
		
		/*Read data to data register*/
		*copy_pu8RxData=UDR_REG;
    328e:	2c b1       	in	r18, 0x0c	; 12
    3290:	fc 01       	movw	r30, r24
    3292:	20 83       	st	Z, r18
    3294:	08 95       	ret

00003296 <UART_voidRxCharWithTimeout>:
	}
}
void UART_voidRxCharWithTimeout(u8* copy_pu8RxData)
{
	u16 Local_u16TimeoutCounter=0;
	if(copy_pu8RxData!=NULL)
    3296:	00 97       	sbiw	r24, 0x00	; 0
    3298:	69 f4       	brne	.+26     	; 0x32b4 <UART_voidRxCharWithTimeout+0x1e>
    329a:	08 95       	ret
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC))
		{
			if(Local_u16TimeoutCounter>=UART_TIMEOUT_MS)
    329c:	24 36       	cpi	r18, 0x64	; 100
    329e:	31 05       	cpc	r19, r1
    32a0:	80 f4       	brcc	.+32     	; 0x32c2 <UART_voidRxCharWithTimeout+0x2c>
    32a2:	ef e9       	ldi	r30, 0x9F	; 159
    32a4:	ff e0       	ldi	r31, 0x0F	; 15
    32a6:	31 97       	sbiw	r30, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <UART_voidRxCharWithTimeout+0x10>
    32aa:	00 c0       	rjmp	.+0      	; 0x32ac <UART_voidRxCharWithTimeout+0x16>
    32ac:	00 00       	nop
			{
				return 0;
			}
			_delay_ms(1);
			Local_u16TimeoutCounter++;
    32ae:	2f 5f       	subi	r18, 0xFF	; 255
    32b0:	3f 4f       	sbci	r19, 0xFF	; 255
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <UART_voidRxCharWithTimeout+0x22>
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
{
	u16 Local_u16TimeoutCounter=0;
	if(copy_pu8RxData!=NULL)
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC))
    32b8:	5f 9b       	sbis	0x0b, 7	; 11
    32ba:	f0 cf       	rjmp	.-32     	; 0x329c <UART_voidRxCharWithTimeout+0x6>
			}
			_delay_ms(1);
			Local_u16TimeoutCounter++;
		}
		/*Read data to data register*/
		*copy_pu8RxData=UDR_REG;
    32bc:	2c b1       	in	r18, 0x0c	; 12
    32be:	fc 01       	movw	r30, r24
    32c0:	20 83       	st	Z, r18
    32c2:	08 95       	ret

000032c4 <UART_voidTxString>:
	{
		
	}
}
void UART_voidTxString	(u8* copy_pu8TxString)
{
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	cf 93       	push	r28
	
	if(copy_pu8TxString!=NULL)
    32ca:	00 97       	sbiw	r24, 0x00	; 0
    32cc:	29 f4       	brne	.+10     	; 0x32d8 <UART_voidTxString+0x14>
    32ce:	0c c0       	rjmp	.+24     	; 0x32e8 <UART_voidTxString+0x24>
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
		{
			/*send data[i]*/
			UART_voidTxChar(copy_pu8TxString[Local_u8Counter]);
    32d0:	0e 94 3f 19 	call	0x327e	; 0x327e <UART_voidTxChar>
			
			/*increase counter*/
			Local_u8Counter++;
    32d4:	cf 5f       	subi	r28, 0xFF	; 255
    32d6:	02 c0       	rjmp	.+4      	; 0x32dc <UART_voidTxString+0x18>
    32d8:	8c 01       	movw	r16, r24
    32da:	c0 e0       	ldi	r28, 0x00	; 0
	{
		/*Init counter*/
		u8 Local_u8Counter=0;
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
    32dc:	f8 01       	movw	r30, r16
    32de:	ec 0f       	add	r30, r28
    32e0:	f1 1d       	adc	r31, r1
    32e2:	80 81       	ld	r24, Z
    32e4:	81 11       	cpse	r24, r1
    32e6:	f4 cf       	rjmp	.-24     	; 0x32d0 <UART_voidTxString+0xc>
	{
		//error state
	}
	
	
}
    32e8:	cf 91       	pop	r28
    32ea:	1f 91       	pop	r17
    32ec:	0f 91       	pop	r16
    32ee:	08 95       	ret

000032f0 <__subsf3>:
    32f0:	50 58       	subi	r21, 0x80	; 128

000032f2 <__addsf3>:
    32f2:	bb 27       	eor	r27, r27
    32f4:	aa 27       	eor	r26, r26
    32f6:	0e 94 90 19 	call	0x3320	; 0x3320 <__addsf3x>
    32fa:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_round>
    32fe:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__fp_pscA>
    3302:	38 f0       	brcs	.+14     	; 0x3312 <__addsf3+0x20>
    3304:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fp_pscB>
    3308:	20 f0       	brcs	.+8      	; 0x3312 <__addsf3+0x20>
    330a:	39 f4       	brne	.+14     	; 0x331a <__addsf3+0x28>
    330c:	9f 3f       	cpi	r25, 0xFF	; 255
    330e:	19 f4       	brne	.+6      	; 0x3316 <__addsf3+0x24>
    3310:	26 f4       	brtc	.+8      	; 0x331a <__addsf3+0x28>
    3312:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__fp_nan>
    3316:	0e f4       	brtc	.+2      	; 0x331a <__addsf3+0x28>
    3318:	e0 95       	com	r30
    331a:	e7 fb       	bst	r30, 7
    331c:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__fp_inf>

00003320 <__addsf3x>:
    3320:	e9 2f       	mov	r30, r25
    3322:	0e 94 14 1b 	call	0x3628	; 0x3628 <__fp_split3>
    3326:	58 f3       	brcs	.-42     	; 0x32fe <__addsf3+0xc>
    3328:	ba 17       	cp	r27, r26
    332a:	62 07       	cpc	r22, r18
    332c:	73 07       	cpc	r23, r19
    332e:	84 07       	cpc	r24, r20
    3330:	95 07       	cpc	r25, r21
    3332:	20 f0       	brcs	.+8      	; 0x333c <__addsf3x+0x1c>
    3334:	79 f4       	brne	.+30     	; 0x3354 <__addsf3x+0x34>
    3336:	a6 f5       	brtc	.+104    	; 0x33a0 <__addsf3x+0x80>
    3338:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__fp_zero>
    333c:	0e f4       	brtc	.+2      	; 0x3340 <__addsf3x+0x20>
    333e:	e0 95       	com	r30
    3340:	0b 2e       	mov	r0, r27
    3342:	ba 2f       	mov	r27, r26
    3344:	a0 2d       	mov	r26, r0
    3346:	0b 01       	movw	r0, r22
    3348:	b9 01       	movw	r22, r18
    334a:	90 01       	movw	r18, r0
    334c:	0c 01       	movw	r0, r24
    334e:	ca 01       	movw	r24, r20
    3350:	a0 01       	movw	r20, r0
    3352:	11 24       	eor	r1, r1
    3354:	ff 27       	eor	r31, r31
    3356:	59 1b       	sub	r21, r25
    3358:	99 f0       	breq	.+38     	; 0x3380 <__addsf3x+0x60>
    335a:	59 3f       	cpi	r21, 0xF9	; 249
    335c:	50 f4       	brcc	.+20     	; 0x3372 <__addsf3x+0x52>
    335e:	50 3e       	cpi	r21, 0xE0	; 224
    3360:	68 f1       	brcs	.+90     	; 0x33bc <__addsf3x+0x9c>
    3362:	1a 16       	cp	r1, r26
    3364:	f0 40       	sbci	r31, 0x00	; 0
    3366:	a2 2f       	mov	r26, r18
    3368:	23 2f       	mov	r18, r19
    336a:	34 2f       	mov	r19, r20
    336c:	44 27       	eor	r20, r20
    336e:	58 5f       	subi	r21, 0xF8	; 248
    3370:	f3 cf       	rjmp	.-26     	; 0x3358 <__addsf3x+0x38>
    3372:	46 95       	lsr	r20
    3374:	37 95       	ror	r19
    3376:	27 95       	ror	r18
    3378:	a7 95       	ror	r26
    337a:	f0 40       	sbci	r31, 0x00	; 0
    337c:	53 95       	inc	r21
    337e:	c9 f7       	brne	.-14     	; 0x3372 <__addsf3x+0x52>
    3380:	7e f4       	brtc	.+30     	; 0x33a0 <__addsf3x+0x80>
    3382:	1f 16       	cp	r1, r31
    3384:	ba 0b       	sbc	r27, r26
    3386:	62 0b       	sbc	r22, r18
    3388:	73 0b       	sbc	r23, r19
    338a:	84 0b       	sbc	r24, r20
    338c:	ba f0       	brmi	.+46     	; 0x33bc <__addsf3x+0x9c>
    338e:	91 50       	subi	r25, 0x01	; 1
    3390:	a1 f0       	breq	.+40     	; 0x33ba <__addsf3x+0x9a>
    3392:	ff 0f       	add	r31, r31
    3394:	bb 1f       	adc	r27, r27
    3396:	66 1f       	adc	r22, r22
    3398:	77 1f       	adc	r23, r23
    339a:	88 1f       	adc	r24, r24
    339c:	c2 f7       	brpl	.-16     	; 0x338e <__addsf3x+0x6e>
    339e:	0e c0       	rjmp	.+28     	; 0x33bc <__addsf3x+0x9c>
    33a0:	ba 0f       	add	r27, r26
    33a2:	62 1f       	adc	r22, r18
    33a4:	73 1f       	adc	r23, r19
    33a6:	84 1f       	adc	r24, r20
    33a8:	48 f4       	brcc	.+18     	; 0x33bc <__addsf3x+0x9c>
    33aa:	87 95       	ror	r24
    33ac:	77 95       	ror	r23
    33ae:	67 95       	ror	r22
    33b0:	b7 95       	ror	r27
    33b2:	f7 95       	ror	r31
    33b4:	9e 3f       	cpi	r25, 0xFE	; 254
    33b6:	08 f0       	brcs	.+2      	; 0x33ba <__addsf3x+0x9a>
    33b8:	b0 cf       	rjmp	.-160    	; 0x331a <__addsf3+0x28>
    33ba:	93 95       	inc	r25
    33bc:	88 0f       	add	r24, r24
    33be:	08 f0       	brcs	.+2      	; 0x33c2 <__addsf3x+0xa2>
    33c0:	99 27       	eor	r25, r25
    33c2:	ee 0f       	add	r30, r30
    33c4:	97 95       	ror	r25
    33c6:	87 95       	ror	r24
    33c8:	08 95       	ret

000033ca <__cmpsf2>:
    33ca:	0e 94 c8 1a 	call	0x3590	; 0x3590 <__fp_cmp>
    33ce:	08 f4       	brcc	.+2      	; 0x33d2 <__cmpsf2+0x8>
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	08 95       	ret

000033d4 <__divsf3>:
    33d4:	0e 94 fe 19 	call	0x33fc	; 0x33fc <__divsf3x>
    33d8:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_round>
    33dc:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fp_pscB>
    33e0:	58 f0       	brcs	.+22     	; 0x33f8 <__divsf3+0x24>
    33e2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__fp_pscA>
    33e6:	40 f0       	brcs	.+16     	; 0x33f8 <__divsf3+0x24>
    33e8:	29 f4       	brne	.+10     	; 0x33f4 <__divsf3+0x20>
    33ea:	5f 3f       	cpi	r21, 0xFF	; 255
    33ec:	29 f0       	breq	.+10     	; 0x33f8 <__divsf3+0x24>
    33ee:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__fp_inf>
    33f2:	51 11       	cpse	r21, r1
    33f4:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__fp_szero>
    33f8:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__fp_nan>

000033fc <__divsf3x>:
    33fc:	0e 94 14 1b 	call	0x3628	; 0x3628 <__fp_split3>
    3400:	68 f3       	brcs	.-38     	; 0x33dc <__divsf3+0x8>

00003402 <__divsf3_pse>:
    3402:	99 23       	and	r25, r25
    3404:	b1 f3       	breq	.-20     	; 0x33f2 <__divsf3+0x1e>
    3406:	55 23       	and	r21, r21
    3408:	91 f3       	breq	.-28     	; 0x33ee <__divsf3+0x1a>
    340a:	95 1b       	sub	r25, r21
    340c:	55 0b       	sbc	r21, r21
    340e:	bb 27       	eor	r27, r27
    3410:	aa 27       	eor	r26, r26
    3412:	62 17       	cp	r22, r18
    3414:	73 07       	cpc	r23, r19
    3416:	84 07       	cpc	r24, r20
    3418:	38 f0       	brcs	.+14     	; 0x3428 <__divsf3_pse+0x26>
    341a:	9f 5f       	subi	r25, 0xFF	; 255
    341c:	5f 4f       	sbci	r21, 0xFF	; 255
    341e:	22 0f       	add	r18, r18
    3420:	33 1f       	adc	r19, r19
    3422:	44 1f       	adc	r20, r20
    3424:	aa 1f       	adc	r26, r26
    3426:	a9 f3       	breq	.-22     	; 0x3412 <__divsf3_pse+0x10>
    3428:	35 d0       	rcall	.+106    	; 0x3494 <__divsf3_pse+0x92>
    342a:	0e 2e       	mov	r0, r30
    342c:	3a f0       	brmi	.+14     	; 0x343c <__divsf3_pse+0x3a>
    342e:	e0 e8       	ldi	r30, 0x80	; 128
    3430:	32 d0       	rcall	.+100    	; 0x3496 <__divsf3_pse+0x94>
    3432:	91 50       	subi	r25, 0x01	; 1
    3434:	50 40       	sbci	r21, 0x00	; 0
    3436:	e6 95       	lsr	r30
    3438:	00 1c       	adc	r0, r0
    343a:	ca f7       	brpl	.-14     	; 0x342e <__divsf3_pse+0x2c>
    343c:	2b d0       	rcall	.+86     	; 0x3494 <__divsf3_pse+0x92>
    343e:	fe 2f       	mov	r31, r30
    3440:	29 d0       	rcall	.+82     	; 0x3494 <__divsf3_pse+0x92>
    3442:	66 0f       	add	r22, r22
    3444:	77 1f       	adc	r23, r23
    3446:	88 1f       	adc	r24, r24
    3448:	bb 1f       	adc	r27, r27
    344a:	26 17       	cp	r18, r22
    344c:	37 07       	cpc	r19, r23
    344e:	48 07       	cpc	r20, r24
    3450:	ab 07       	cpc	r26, r27
    3452:	b0 e8       	ldi	r27, 0x80	; 128
    3454:	09 f0       	breq	.+2      	; 0x3458 <__divsf3_pse+0x56>
    3456:	bb 0b       	sbc	r27, r27
    3458:	80 2d       	mov	r24, r0
    345a:	bf 01       	movw	r22, r30
    345c:	ff 27       	eor	r31, r31
    345e:	93 58       	subi	r25, 0x83	; 131
    3460:	5f 4f       	sbci	r21, 0xFF	; 255
    3462:	3a f0       	brmi	.+14     	; 0x3472 <__divsf3_pse+0x70>
    3464:	9e 3f       	cpi	r25, 0xFE	; 254
    3466:	51 05       	cpc	r21, r1
    3468:	78 f0       	brcs	.+30     	; 0x3488 <__divsf3_pse+0x86>
    346a:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__fp_inf>
    346e:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__fp_szero>
    3472:	5f 3f       	cpi	r21, 0xFF	; 255
    3474:	e4 f3       	brlt	.-8      	; 0x346e <__divsf3_pse+0x6c>
    3476:	98 3e       	cpi	r25, 0xE8	; 232
    3478:	d4 f3       	brlt	.-12     	; 0x346e <__divsf3_pse+0x6c>
    347a:	86 95       	lsr	r24
    347c:	77 95       	ror	r23
    347e:	67 95       	ror	r22
    3480:	b7 95       	ror	r27
    3482:	f7 95       	ror	r31
    3484:	9f 5f       	subi	r25, 0xFF	; 255
    3486:	c9 f7       	brne	.-14     	; 0x347a <__divsf3_pse+0x78>
    3488:	88 0f       	add	r24, r24
    348a:	91 1d       	adc	r25, r1
    348c:	96 95       	lsr	r25
    348e:	87 95       	ror	r24
    3490:	97 f9       	bld	r25, 7
    3492:	08 95       	ret
    3494:	e1 e0       	ldi	r30, 0x01	; 1
    3496:	66 0f       	add	r22, r22
    3498:	77 1f       	adc	r23, r23
    349a:	88 1f       	adc	r24, r24
    349c:	bb 1f       	adc	r27, r27
    349e:	62 17       	cp	r22, r18
    34a0:	73 07       	cpc	r23, r19
    34a2:	84 07       	cpc	r24, r20
    34a4:	ba 07       	cpc	r27, r26
    34a6:	20 f0       	brcs	.+8      	; 0x34b0 <__divsf3_pse+0xae>
    34a8:	62 1b       	sub	r22, r18
    34aa:	73 0b       	sbc	r23, r19
    34ac:	84 0b       	sbc	r24, r20
    34ae:	ba 0b       	sbc	r27, r26
    34b0:	ee 1f       	adc	r30, r30
    34b2:	88 f7       	brcc	.-30     	; 0x3496 <__divsf3_pse+0x94>
    34b4:	e0 95       	com	r30
    34b6:	08 95       	ret

000034b8 <__fixunssfsi>:
    34b8:	0e 94 1c 1b 	call	0x3638	; 0x3638 <__fp_splitA>
    34bc:	88 f0       	brcs	.+34     	; 0x34e0 <__fixunssfsi+0x28>
    34be:	9f 57       	subi	r25, 0x7F	; 127
    34c0:	98 f0       	brcs	.+38     	; 0x34e8 <__fixunssfsi+0x30>
    34c2:	b9 2f       	mov	r27, r25
    34c4:	99 27       	eor	r25, r25
    34c6:	b7 51       	subi	r27, 0x17	; 23
    34c8:	b0 f0       	brcs	.+44     	; 0x34f6 <__fixunssfsi+0x3e>
    34ca:	e1 f0       	breq	.+56     	; 0x3504 <__fixunssfsi+0x4c>
    34cc:	66 0f       	add	r22, r22
    34ce:	77 1f       	adc	r23, r23
    34d0:	88 1f       	adc	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	1a f0       	brmi	.+6      	; 0x34dc <__fixunssfsi+0x24>
    34d6:	ba 95       	dec	r27
    34d8:	c9 f7       	brne	.-14     	; 0x34cc <__fixunssfsi+0x14>
    34da:	14 c0       	rjmp	.+40     	; 0x3504 <__fixunssfsi+0x4c>
    34dc:	b1 30       	cpi	r27, 0x01	; 1
    34de:	91 f0       	breq	.+36     	; 0x3504 <__fixunssfsi+0x4c>
    34e0:	0e 94 36 1b 	call	0x366c	; 0x366c <__fp_zero>
    34e4:	b1 e0       	ldi	r27, 0x01	; 1
    34e6:	08 95       	ret
    34e8:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__fp_zero>
    34ec:	67 2f       	mov	r22, r23
    34ee:	78 2f       	mov	r23, r24
    34f0:	88 27       	eor	r24, r24
    34f2:	b8 5f       	subi	r27, 0xF8	; 248
    34f4:	39 f0       	breq	.+14     	; 0x3504 <__fixunssfsi+0x4c>
    34f6:	b9 3f       	cpi	r27, 0xF9	; 249
    34f8:	cc f3       	brlt	.-14     	; 0x34ec <__fixunssfsi+0x34>
    34fa:	86 95       	lsr	r24
    34fc:	77 95       	ror	r23
    34fe:	67 95       	ror	r22
    3500:	b3 95       	inc	r27
    3502:	d9 f7       	brne	.-10     	; 0x34fa <__fixunssfsi+0x42>
    3504:	3e f4       	brtc	.+14     	; 0x3514 <__fixunssfsi+0x5c>
    3506:	90 95       	com	r25
    3508:	80 95       	com	r24
    350a:	70 95       	com	r23
    350c:	61 95       	neg	r22
    350e:	7f 4f       	sbci	r23, 0xFF	; 255
    3510:	8f 4f       	sbci	r24, 0xFF	; 255
    3512:	9f 4f       	sbci	r25, 0xFF	; 255
    3514:	08 95       	ret

00003516 <__floatunsisf>:
    3516:	e8 94       	clt
    3518:	09 c0       	rjmp	.+18     	; 0x352c <__floatsisf+0x12>

0000351a <__floatsisf>:
    351a:	97 fb       	bst	r25, 7
    351c:	3e f4       	brtc	.+14     	; 0x352c <__floatsisf+0x12>
    351e:	90 95       	com	r25
    3520:	80 95       	com	r24
    3522:	70 95       	com	r23
    3524:	61 95       	neg	r22
    3526:	7f 4f       	sbci	r23, 0xFF	; 255
    3528:	8f 4f       	sbci	r24, 0xFF	; 255
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	99 23       	and	r25, r25
    352e:	a9 f0       	breq	.+42     	; 0x355a <__floatsisf+0x40>
    3530:	f9 2f       	mov	r31, r25
    3532:	96 e9       	ldi	r25, 0x96	; 150
    3534:	bb 27       	eor	r27, r27
    3536:	93 95       	inc	r25
    3538:	f6 95       	lsr	r31
    353a:	87 95       	ror	r24
    353c:	77 95       	ror	r23
    353e:	67 95       	ror	r22
    3540:	b7 95       	ror	r27
    3542:	f1 11       	cpse	r31, r1
    3544:	f8 cf       	rjmp	.-16     	; 0x3536 <__floatsisf+0x1c>
    3546:	fa f4       	brpl	.+62     	; 0x3586 <__floatsisf+0x6c>
    3548:	bb 0f       	add	r27, r27
    354a:	11 f4       	brne	.+4      	; 0x3550 <__floatsisf+0x36>
    354c:	60 ff       	sbrs	r22, 0
    354e:	1b c0       	rjmp	.+54     	; 0x3586 <__floatsisf+0x6c>
    3550:	6f 5f       	subi	r22, 0xFF	; 255
    3552:	7f 4f       	sbci	r23, 0xFF	; 255
    3554:	8f 4f       	sbci	r24, 0xFF	; 255
    3556:	9f 4f       	sbci	r25, 0xFF	; 255
    3558:	16 c0       	rjmp	.+44     	; 0x3586 <__floatsisf+0x6c>
    355a:	88 23       	and	r24, r24
    355c:	11 f0       	breq	.+4      	; 0x3562 <__floatsisf+0x48>
    355e:	96 e9       	ldi	r25, 0x96	; 150
    3560:	11 c0       	rjmp	.+34     	; 0x3584 <__floatsisf+0x6a>
    3562:	77 23       	and	r23, r23
    3564:	21 f0       	breq	.+8      	; 0x356e <__floatsisf+0x54>
    3566:	9e e8       	ldi	r25, 0x8E	; 142
    3568:	87 2f       	mov	r24, r23
    356a:	76 2f       	mov	r23, r22
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <__floatsisf+0x5e>
    356e:	66 23       	and	r22, r22
    3570:	71 f0       	breq	.+28     	; 0x358e <__floatsisf+0x74>
    3572:	96 e8       	ldi	r25, 0x86	; 134
    3574:	86 2f       	mov	r24, r22
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	2a f0       	brmi	.+10     	; 0x3586 <__floatsisf+0x6c>
    357c:	9a 95       	dec	r25
    357e:	66 0f       	add	r22, r22
    3580:	77 1f       	adc	r23, r23
    3582:	88 1f       	adc	r24, r24
    3584:	da f7       	brpl	.-10     	; 0x357c <__floatsisf+0x62>
    3586:	88 0f       	add	r24, r24
    3588:	96 95       	lsr	r25
    358a:	87 95       	ror	r24
    358c:	97 f9       	bld	r25, 7
    358e:	08 95       	ret

00003590 <__fp_cmp>:
    3590:	99 0f       	add	r25, r25
    3592:	00 08       	sbc	r0, r0
    3594:	55 0f       	add	r21, r21
    3596:	aa 0b       	sbc	r26, r26
    3598:	e0 e8       	ldi	r30, 0x80	; 128
    359a:	fe ef       	ldi	r31, 0xFE	; 254
    359c:	16 16       	cp	r1, r22
    359e:	17 06       	cpc	r1, r23
    35a0:	e8 07       	cpc	r30, r24
    35a2:	f9 07       	cpc	r31, r25
    35a4:	c0 f0       	brcs	.+48     	; 0x35d6 <__fp_cmp+0x46>
    35a6:	12 16       	cp	r1, r18
    35a8:	13 06       	cpc	r1, r19
    35aa:	e4 07       	cpc	r30, r20
    35ac:	f5 07       	cpc	r31, r21
    35ae:	98 f0       	brcs	.+38     	; 0x35d6 <__fp_cmp+0x46>
    35b0:	62 1b       	sub	r22, r18
    35b2:	73 0b       	sbc	r23, r19
    35b4:	84 0b       	sbc	r24, r20
    35b6:	95 0b       	sbc	r25, r21
    35b8:	39 f4       	brne	.+14     	; 0x35c8 <__fp_cmp+0x38>
    35ba:	0a 26       	eor	r0, r26
    35bc:	61 f0       	breq	.+24     	; 0x35d6 <__fp_cmp+0x46>
    35be:	23 2b       	or	r18, r19
    35c0:	24 2b       	or	r18, r20
    35c2:	25 2b       	or	r18, r21
    35c4:	21 f4       	brne	.+8      	; 0x35ce <__fp_cmp+0x3e>
    35c6:	08 95       	ret
    35c8:	0a 26       	eor	r0, r26
    35ca:	09 f4       	brne	.+2      	; 0x35ce <__fp_cmp+0x3e>
    35cc:	a1 40       	sbci	r26, 0x01	; 1
    35ce:	a6 95       	lsr	r26
    35d0:	8f ef       	ldi	r24, 0xFF	; 255
    35d2:	81 1d       	adc	r24, r1
    35d4:	81 1d       	adc	r24, r1
    35d6:	08 95       	ret

000035d8 <__fp_inf>:
    35d8:	97 f9       	bld	r25, 7
    35da:	9f 67       	ori	r25, 0x7F	; 127
    35dc:	80 e8       	ldi	r24, 0x80	; 128
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	08 95       	ret

000035e4 <__fp_nan>:
    35e4:	9f ef       	ldi	r25, 0xFF	; 255
    35e6:	80 ec       	ldi	r24, 0xC0	; 192
    35e8:	08 95       	ret

000035ea <__fp_pscA>:
    35ea:	00 24       	eor	r0, r0
    35ec:	0a 94       	dec	r0
    35ee:	16 16       	cp	r1, r22
    35f0:	17 06       	cpc	r1, r23
    35f2:	18 06       	cpc	r1, r24
    35f4:	09 06       	cpc	r0, r25
    35f6:	08 95       	ret

000035f8 <__fp_pscB>:
    35f8:	00 24       	eor	r0, r0
    35fa:	0a 94       	dec	r0
    35fc:	12 16       	cp	r1, r18
    35fe:	13 06       	cpc	r1, r19
    3600:	14 06       	cpc	r1, r20
    3602:	05 06       	cpc	r0, r21
    3604:	08 95       	ret

00003606 <__fp_round>:
    3606:	09 2e       	mov	r0, r25
    3608:	03 94       	inc	r0
    360a:	00 0c       	add	r0, r0
    360c:	11 f4       	brne	.+4      	; 0x3612 <__fp_round+0xc>
    360e:	88 23       	and	r24, r24
    3610:	52 f0       	brmi	.+20     	; 0x3626 <__fp_round+0x20>
    3612:	bb 0f       	add	r27, r27
    3614:	40 f4       	brcc	.+16     	; 0x3626 <__fp_round+0x20>
    3616:	bf 2b       	or	r27, r31
    3618:	11 f4       	brne	.+4      	; 0x361e <__fp_round+0x18>
    361a:	60 ff       	sbrs	r22, 0
    361c:	04 c0       	rjmp	.+8      	; 0x3626 <__fp_round+0x20>
    361e:	6f 5f       	subi	r22, 0xFF	; 255
    3620:	7f 4f       	sbci	r23, 0xFF	; 255
    3622:	8f 4f       	sbci	r24, 0xFF	; 255
    3624:	9f 4f       	sbci	r25, 0xFF	; 255
    3626:	08 95       	ret

00003628 <__fp_split3>:
    3628:	57 fd       	sbrc	r21, 7
    362a:	90 58       	subi	r25, 0x80	; 128
    362c:	44 0f       	add	r20, r20
    362e:	55 1f       	adc	r21, r21
    3630:	59 f0       	breq	.+22     	; 0x3648 <__fp_splitA+0x10>
    3632:	5f 3f       	cpi	r21, 0xFF	; 255
    3634:	71 f0       	breq	.+28     	; 0x3652 <__fp_splitA+0x1a>
    3636:	47 95       	ror	r20

00003638 <__fp_splitA>:
    3638:	88 0f       	add	r24, r24
    363a:	97 fb       	bst	r25, 7
    363c:	99 1f       	adc	r25, r25
    363e:	61 f0       	breq	.+24     	; 0x3658 <__fp_splitA+0x20>
    3640:	9f 3f       	cpi	r25, 0xFF	; 255
    3642:	79 f0       	breq	.+30     	; 0x3662 <__fp_splitA+0x2a>
    3644:	87 95       	ror	r24
    3646:	08 95       	ret
    3648:	12 16       	cp	r1, r18
    364a:	13 06       	cpc	r1, r19
    364c:	14 06       	cpc	r1, r20
    364e:	55 1f       	adc	r21, r21
    3650:	f2 cf       	rjmp	.-28     	; 0x3636 <__fp_split3+0xe>
    3652:	46 95       	lsr	r20
    3654:	f1 df       	rcall	.-30     	; 0x3638 <__fp_splitA>
    3656:	08 c0       	rjmp	.+16     	; 0x3668 <__fp_splitA+0x30>
    3658:	16 16       	cp	r1, r22
    365a:	17 06       	cpc	r1, r23
    365c:	18 06       	cpc	r1, r24
    365e:	99 1f       	adc	r25, r25
    3660:	f1 cf       	rjmp	.-30     	; 0x3644 <__fp_splitA+0xc>
    3662:	86 95       	lsr	r24
    3664:	71 05       	cpc	r23, r1
    3666:	61 05       	cpc	r22, r1
    3668:	08 94       	sec
    366a:	08 95       	ret

0000366c <__fp_zero>:
    366c:	e8 94       	clt

0000366e <__fp_szero>:
    366e:	bb 27       	eor	r27, r27
    3670:	66 27       	eor	r22, r22
    3672:	77 27       	eor	r23, r23
    3674:	cb 01       	movw	r24, r22
    3676:	97 f9       	bld	r25, 7
    3678:	08 95       	ret

0000367a <__mulsf3>:
    367a:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <__mulsf3x>
    367e:	0c 94 03 1b 	jmp	0x3606	; 0x3606 <__fp_round>
    3682:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__fp_pscA>
    3686:	38 f0       	brcs	.+14     	; 0x3696 <__mulsf3+0x1c>
    3688:	0e 94 fc 1a 	call	0x35f8	; 0x35f8 <__fp_pscB>
    368c:	20 f0       	brcs	.+8      	; 0x3696 <__mulsf3+0x1c>
    368e:	95 23       	and	r25, r21
    3690:	11 f0       	breq	.+4      	; 0x3696 <__mulsf3+0x1c>
    3692:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__fp_inf>
    3696:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <__fp_nan>
    369a:	11 24       	eor	r1, r1
    369c:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__fp_szero>

000036a0 <__mulsf3x>:
    36a0:	0e 94 14 1b 	call	0x3628	; 0x3628 <__fp_split3>
    36a4:	70 f3       	brcs	.-36     	; 0x3682 <__mulsf3+0x8>

000036a6 <__mulsf3_pse>:
    36a6:	95 9f       	mul	r25, r21
    36a8:	c1 f3       	breq	.-16     	; 0x369a <__mulsf3+0x20>
    36aa:	95 0f       	add	r25, r21
    36ac:	50 e0       	ldi	r21, 0x00	; 0
    36ae:	55 1f       	adc	r21, r21
    36b0:	62 9f       	mul	r22, r18
    36b2:	f0 01       	movw	r30, r0
    36b4:	72 9f       	mul	r23, r18
    36b6:	bb 27       	eor	r27, r27
    36b8:	f0 0d       	add	r31, r0
    36ba:	b1 1d       	adc	r27, r1
    36bc:	63 9f       	mul	r22, r19
    36be:	aa 27       	eor	r26, r26
    36c0:	f0 0d       	add	r31, r0
    36c2:	b1 1d       	adc	r27, r1
    36c4:	aa 1f       	adc	r26, r26
    36c6:	64 9f       	mul	r22, r20
    36c8:	66 27       	eor	r22, r22
    36ca:	b0 0d       	add	r27, r0
    36cc:	a1 1d       	adc	r26, r1
    36ce:	66 1f       	adc	r22, r22
    36d0:	82 9f       	mul	r24, r18
    36d2:	22 27       	eor	r18, r18
    36d4:	b0 0d       	add	r27, r0
    36d6:	a1 1d       	adc	r26, r1
    36d8:	62 1f       	adc	r22, r18
    36da:	73 9f       	mul	r23, r19
    36dc:	b0 0d       	add	r27, r0
    36de:	a1 1d       	adc	r26, r1
    36e0:	62 1f       	adc	r22, r18
    36e2:	83 9f       	mul	r24, r19
    36e4:	a0 0d       	add	r26, r0
    36e6:	61 1d       	adc	r22, r1
    36e8:	22 1f       	adc	r18, r18
    36ea:	74 9f       	mul	r23, r20
    36ec:	33 27       	eor	r19, r19
    36ee:	a0 0d       	add	r26, r0
    36f0:	61 1d       	adc	r22, r1
    36f2:	23 1f       	adc	r18, r19
    36f4:	84 9f       	mul	r24, r20
    36f6:	60 0d       	add	r22, r0
    36f8:	21 1d       	adc	r18, r1
    36fa:	82 2f       	mov	r24, r18
    36fc:	76 2f       	mov	r23, r22
    36fe:	6a 2f       	mov	r22, r26
    3700:	11 24       	eor	r1, r1
    3702:	9f 57       	subi	r25, 0x7F	; 127
    3704:	50 40       	sbci	r21, 0x00	; 0
    3706:	9a f0       	brmi	.+38     	; 0x372e <__mulsf3_pse+0x88>
    3708:	f1 f0       	breq	.+60     	; 0x3746 <__mulsf3_pse+0xa0>
    370a:	88 23       	and	r24, r24
    370c:	4a f0       	brmi	.+18     	; 0x3720 <__mulsf3_pse+0x7a>
    370e:	ee 0f       	add	r30, r30
    3710:	ff 1f       	adc	r31, r31
    3712:	bb 1f       	adc	r27, r27
    3714:	66 1f       	adc	r22, r22
    3716:	77 1f       	adc	r23, r23
    3718:	88 1f       	adc	r24, r24
    371a:	91 50       	subi	r25, 0x01	; 1
    371c:	50 40       	sbci	r21, 0x00	; 0
    371e:	a9 f7       	brne	.-22     	; 0x370a <__mulsf3_pse+0x64>
    3720:	9e 3f       	cpi	r25, 0xFE	; 254
    3722:	51 05       	cpc	r21, r1
    3724:	80 f0       	brcs	.+32     	; 0x3746 <__mulsf3_pse+0xa0>
    3726:	0c 94 ec 1a 	jmp	0x35d8	; 0x35d8 <__fp_inf>
    372a:	0c 94 37 1b 	jmp	0x366e	; 0x366e <__fp_szero>
    372e:	5f 3f       	cpi	r21, 0xFF	; 255
    3730:	e4 f3       	brlt	.-8      	; 0x372a <__mulsf3_pse+0x84>
    3732:	98 3e       	cpi	r25, 0xE8	; 232
    3734:	d4 f3       	brlt	.-12     	; 0x372a <__mulsf3_pse+0x84>
    3736:	86 95       	lsr	r24
    3738:	77 95       	ror	r23
    373a:	67 95       	ror	r22
    373c:	b7 95       	ror	r27
    373e:	f7 95       	ror	r31
    3740:	e7 95       	ror	r30
    3742:	9f 5f       	subi	r25, 0xFF	; 255
    3744:	c1 f7       	brne	.-16     	; 0x3736 <__mulsf3_pse+0x90>
    3746:	fe 2b       	or	r31, r30
    3748:	88 0f       	add	r24, r24
    374a:	91 1d       	adc	r25, r1
    374c:	96 95       	lsr	r25
    374e:	87 95       	ror	r24
    3750:	97 f9       	bld	r25, 7
    3752:	08 95       	ret

00003754 <__udivmodsi4>:
    3754:	a1 e2       	ldi	r26, 0x21	; 33
    3756:	1a 2e       	mov	r1, r26
    3758:	aa 1b       	sub	r26, r26
    375a:	bb 1b       	sub	r27, r27
    375c:	fd 01       	movw	r30, r26
    375e:	0d c0       	rjmp	.+26     	; 0x377a <__udivmodsi4_ep>

00003760 <__udivmodsi4_loop>:
    3760:	aa 1f       	adc	r26, r26
    3762:	bb 1f       	adc	r27, r27
    3764:	ee 1f       	adc	r30, r30
    3766:	ff 1f       	adc	r31, r31
    3768:	a2 17       	cp	r26, r18
    376a:	b3 07       	cpc	r27, r19
    376c:	e4 07       	cpc	r30, r20
    376e:	f5 07       	cpc	r31, r21
    3770:	20 f0       	brcs	.+8      	; 0x377a <__udivmodsi4_ep>
    3772:	a2 1b       	sub	r26, r18
    3774:	b3 0b       	sbc	r27, r19
    3776:	e4 0b       	sbc	r30, r20
    3778:	f5 0b       	sbc	r31, r21

0000377a <__udivmodsi4_ep>:
    377a:	66 1f       	adc	r22, r22
    377c:	77 1f       	adc	r23, r23
    377e:	88 1f       	adc	r24, r24
    3780:	99 1f       	adc	r25, r25
    3782:	1a 94       	dec	r1
    3784:	69 f7       	brne	.-38     	; 0x3760 <__udivmodsi4_loop>
    3786:	60 95       	com	r22
    3788:	70 95       	com	r23
    378a:	80 95       	com	r24
    378c:	90 95       	com	r25
    378e:	9b 01       	movw	r18, r22
    3790:	ac 01       	movw	r20, r24
    3792:	bd 01       	movw	r22, r26
    3794:	cf 01       	movw	r24, r30
    3796:	08 95       	ret

00003798 <sprintf>:
    3798:	ae e0       	ldi	r26, 0x0E	; 14
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	e2 ed       	ldi	r30, 0xD2	; 210
    379e:	fb e1       	ldi	r31, 0x1B	; 27
    37a0:	0c 94 8d 1e 	jmp	0x3d1a	; 0x3d1a <__prologue_saves__+0x1c>
    37a4:	0d 89       	ldd	r16, Y+21	; 0x15
    37a6:	1e 89       	ldd	r17, Y+22	; 0x16
    37a8:	86 e0       	ldi	r24, 0x06	; 6
    37aa:	8c 83       	std	Y+4, r24	; 0x04
    37ac:	1a 83       	std	Y+2, r17	; 0x02
    37ae:	09 83       	std	Y+1, r16	; 0x01
    37b0:	8f ef       	ldi	r24, 0xFF	; 255
    37b2:	9f e7       	ldi	r25, 0x7F	; 127
    37b4:	9e 83       	std	Y+6, r25	; 0x06
    37b6:	8d 83       	std	Y+5, r24	; 0x05
    37b8:	ae 01       	movw	r20, r28
    37ba:	47 5e       	subi	r20, 0xE7	; 231
    37bc:	5f 4f       	sbci	r21, 0xFF	; 255
    37be:	6f 89       	ldd	r22, Y+23	; 0x17
    37c0:	78 8d       	ldd	r23, Y+24	; 0x18
    37c2:	ce 01       	movw	r24, r28
    37c4:	01 96       	adiw	r24, 0x01	; 1
    37c6:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <vfprintf>
    37ca:	ef 81       	ldd	r30, Y+7	; 0x07
    37cc:	f8 85       	ldd	r31, Y+8	; 0x08
    37ce:	e0 0f       	add	r30, r16
    37d0:	f1 1f       	adc	r31, r17
    37d2:	10 82       	st	Z, r1
    37d4:	2e 96       	adiw	r28, 0x0e	; 14
    37d6:	e4 e0       	ldi	r30, 0x04	; 4
    37d8:	0c 94 a9 1e 	jmp	0x3d52	; 0x3d52 <__epilogue_restores__+0x1c>

000037dc <vfprintf>:
    37dc:	ab e0       	ldi	r26, 0x0B	; 11
    37de:	b0 e0       	ldi	r27, 0x00	; 0
    37e0:	e4 ef       	ldi	r30, 0xF4	; 244
    37e2:	fb e1       	ldi	r31, 0x1B	; 27
    37e4:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__prologue_saves__>
    37e8:	6c 01       	movw	r12, r24
    37ea:	7b 01       	movw	r14, r22
    37ec:	8a 01       	movw	r16, r20
    37ee:	fc 01       	movw	r30, r24
    37f0:	17 82       	std	Z+7, r1	; 0x07
    37f2:	16 82       	std	Z+6, r1	; 0x06
    37f4:	83 81       	ldd	r24, Z+3	; 0x03
    37f6:	81 ff       	sbrs	r24, 1
    37f8:	cc c1       	rjmp	.+920    	; 0x3b92 <vfprintf+0x3b6>
    37fa:	ce 01       	movw	r24, r28
    37fc:	01 96       	adiw	r24, 0x01	; 1
    37fe:	3c 01       	movw	r6, r24
    3800:	f6 01       	movw	r30, r12
    3802:	93 81       	ldd	r25, Z+3	; 0x03
    3804:	f7 01       	movw	r30, r14
    3806:	93 fd       	sbrc	r25, 3
    3808:	85 91       	lpm	r24, Z+
    380a:	93 ff       	sbrs	r25, 3
    380c:	81 91       	ld	r24, Z+
    380e:	7f 01       	movw	r14, r30
    3810:	88 23       	and	r24, r24
    3812:	09 f4       	brne	.+2      	; 0x3816 <vfprintf+0x3a>
    3814:	ba c1       	rjmp	.+884    	; 0x3b8a <vfprintf+0x3ae>
    3816:	85 32       	cpi	r24, 0x25	; 37
    3818:	39 f4       	brne	.+14     	; 0x3828 <vfprintf+0x4c>
    381a:	93 fd       	sbrc	r25, 3
    381c:	85 91       	lpm	r24, Z+
    381e:	93 ff       	sbrs	r25, 3
    3820:	81 91       	ld	r24, Z+
    3822:	7f 01       	movw	r14, r30
    3824:	85 32       	cpi	r24, 0x25	; 37
    3826:	29 f4       	brne	.+10     	; 0x3832 <vfprintf+0x56>
    3828:	b6 01       	movw	r22, r12
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3830:	e7 cf       	rjmp	.-50     	; 0x3800 <vfprintf+0x24>
    3832:	91 2c       	mov	r9, r1
    3834:	21 2c       	mov	r2, r1
    3836:	31 2c       	mov	r3, r1
    3838:	ff e1       	ldi	r31, 0x1F	; 31
    383a:	f3 15       	cp	r31, r3
    383c:	d8 f0       	brcs	.+54     	; 0x3874 <vfprintf+0x98>
    383e:	8b 32       	cpi	r24, 0x2B	; 43
    3840:	79 f0       	breq	.+30     	; 0x3860 <vfprintf+0x84>
    3842:	38 f4       	brcc	.+14     	; 0x3852 <vfprintf+0x76>
    3844:	80 32       	cpi	r24, 0x20	; 32
    3846:	79 f0       	breq	.+30     	; 0x3866 <vfprintf+0x8a>
    3848:	83 32       	cpi	r24, 0x23	; 35
    384a:	a1 f4       	brne	.+40     	; 0x3874 <vfprintf+0x98>
    384c:	23 2d       	mov	r18, r3
    384e:	20 61       	ori	r18, 0x10	; 16
    3850:	1d c0       	rjmp	.+58     	; 0x388c <vfprintf+0xb0>
    3852:	8d 32       	cpi	r24, 0x2D	; 45
    3854:	61 f0       	breq	.+24     	; 0x386e <vfprintf+0x92>
    3856:	80 33       	cpi	r24, 0x30	; 48
    3858:	69 f4       	brne	.+26     	; 0x3874 <vfprintf+0x98>
    385a:	23 2d       	mov	r18, r3
    385c:	21 60       	ori	r18, 0x01	; 1
    385e:	16 c0       	rjmp	.+44     	; 0x388c <vfprintf+0xb0>
    3860:	83 2d       	mov	r24, r3
    3862:	82 60       	ori	r24, 0x02	; 2
    3864:	38 2e       	mov	r3, r24
    3866:	e3 2d       	mov	r30, r3
    3868:	e4 60       	ori	r30, 0x04	; 4
    386a:	3e 2e       	mov	r3, r30
    386c:	2a c0       	rjmp	.+84     	; 0x38c2 <vfprintf+0xe6>
    386e:	f3 2d       	mov	r31, r3
    3870:	f8 60       	ori	r31, 0x08	; 8
    3872:	1d c0       	rjmp	.+58     	; 0x38ae <vfprintf+0xd2>
    3874:	37 fc       	sbrc	r3, 7
    3876:	2d c0       	rjmp	.+90     	; 0x38d2 <vfprintf+0xf6>
    3878:	20 ed       	ldi	r18, 0xD0	; 208
    387a:	28 0f       	add	r18, r24
    387c:	2a 30       	cpi	r18, 0x0A	; 10
    387e:	40 f0       	brcs	.+16     	; 0x3890 <vfprintf+0xb4>
    3880:	8e 32       	cpi	r24, 0x2E	; 46
    3882:	b9 f4       	brne	.+46     	; 0x38b2 <vfprintf+0xd6>
    3884:	36 fc       	sbrc	r3, 6
    3886:	81 c1       	rjmp	.+770    	; 0x3b8a <vfprintf+0x3ae>
    3888:	23 2d       	mov	r18, r3
    388a:	20 64       	ori	r18, 0x40	; 64
    388c:	32 2e       	mov	r3, r18
    388e:	19 c0       	rjmp	.+50     	; 0x38c2 <vfprintf+0xe6>
    3890:	36 fe       	sbrs	r3, 6
    3892:	06 c0       	rjmp	.+12     	; 0x38a0 <vfprintf+0xc4>
    3894:	8a e0       	ldi	r24, 0x0A	; 10
    3896:	98 9e       	mul	r9, r24
    3898:	20 0d       	add	r18, r0
    389a:	11 24       	eor	r1, r1
    389c:	92 2e       	mov	r9, r18
    389e:	11 c0       	rjmp	.+34     	; 0x38c2 <vfprintf+0xe6>
    38a0:	ea e0       	ldi	r30, 0x0A	; 10
    38a2:	2e 9e       	mul	r2, r30
    38a4:	20 0d       	add	r18, r0
    38a6:	11 24       	eor	r1, r1
    38a8:	22 2e       	mov	r2, r18
    38aa:	f3 2d       	mov	r31, r3
    38ac:	f0 62       	ori	r31, 0x20	; 32
    38ae:	3f 2e       	mov	r3, r31
    38b0:	08 c0       	rjmp	.+16     	; 0x38c2 <vfprintf+0xe6>
    38b2:	8c 36       	cpi	r24, 0x6C	; 108
    38b4:	21 f4       	brne	.+8      	; 0x38be <vfprintf+0xe2>
    38b6:	83 2d       	mov	r24, r3
    38b8:	80 68       	ori	r24, 0x80	; 128
    38ba:	38 2e       	mov	r3, r24
    38bc:	02 c0       	rjmp	.+4      	; 0x38c2 <vfprintf+0xe6>
    38be:	88 36       	cpi	r24, 0x68	; 104
    38c0:	41 f4       	brne	.+16     	; 0x38d2 <vfprintf+0xf6>
    38c2:	f7 01       	movw	r30, r14
    38c4:	93 fd       	sbrc	r25, 3
    38c6:	85 91       	lpm	r24, Z+
    38c8:	93 ff       	sbrs	r25, 3
    38ca:	81 91       	ld	r24, Z+
    38cc:	7f 01       	movw	r14, r30
    38ce:	81 11       	cpse	r24, r1
    38d0:	b3 cf       	rjmp	.-154    	; 0x3838 <vfprintf+0x5c>
    38d2:	98 2f       	mov	r25, r24
    38d4:	9f 7d       	andi	r25, 0xDF	; 223
    38d6:	95 54       	subi	r25, 0x45	; 69
    38d8:	93 30       	cpi	r25, 0x03	; 3
    38da:	28 f4       	brcc	.+10     	; 0x38e6 <vfprintf+0x10a>
    38dc:	0c 5f       	subi	r16, 0xFC	; 252
    38de:	1f 4f       	sbci	r17, 0xFF	; 255
    38e0:	9f e3       	ldi	r25, 0x3F	; 63
    38e2:	99 83       	std	Y+1, r25	; 0x01
    38e4:	0d c0       	rjmp	.+26     	; 0x3900 <vfprintf+0x124>
    38e6:	83 36       	cpi	r24, 0x63	; 99
    38e8:	31 f0       	breq	.+12     	; 0x38f6 <vfprintf+0x11a>
    38ea:	83 37       	cpi	r24, 0x73	; 115
    38ec:	71 f0       	breq	.+28     	; 0x390a <vfprintf+0x12e>
    38ee:	83 35       	cpi	r24, 0x53	; 83
    38f0:	09 f0       	breq	.+2      	; 0x38f4 <vfprintf+0x118>
    38f2:	59 c0       	rjmp	.+178    	; 0x39a6 <vfprintf+0x1ca>
    38f4:	21 c0       	rjmp	.+66     	; 0x3938 <vfprintf+0x15c>
    38f6:	f8 01       	movw	r30, r16
    38f8:	80 81       	ld	r24, Z
    38fa:	89 83       	std	Y+1, r24	; 0x01
    38fc:	0e 5f       	subi	r16, 0xFE	; 254
    38fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3900:	88 24       	eor	r8, r8
    3902:	83 94       	inc	r8
    3904:	91 2c       	mov	r9, r1
    3906:	53 01       	movw	r10, r6
    3908:	13 c0       	rjmp	.+38     	; 0x3930 <vfprintf+0x154>
    390a:	28 01       	movw	r4, r16
    390c:	f2 e0       	ldi	r31, 0x02	; 2
    390e:	4f 0e       	add	r4, r31
    3910:	51 1c       	adc	r5, r1
    3912:	f8 01       	movw	r30, r16
    3914:	a0 80       	ld	r10, Z
    3916:	b1 80       	ldd	r11, Z+1	; 0x01
    3918:	36 fe       	sbrs	r3, 6
    391a:	03 c0       	rjmp	.+6      	; 0x3922 <vfprintf+0x146>
    391c:	69 2d       	mov	r22, r9
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <vfprintf+0x14a>
    3922:	6f ef       	ldi	r22, 0xFF	; 255
    3924:	7f ef       	ldi	r23, 0xFF	; 255
    3926:	c5 01       	movw	r24, r10
    3928:	0e 94 da 1d 	call	0x3bb4	; 0x3bb4 <strnlen>
    392c:	4c 01       	movw	r8, r24
    392e:	82 01       	movw	r16, r4
    3930:	f3 2d       	mov	r31, r3
    3932:	ff 77       	andi	r31, 0x7F	; 127
    3934:	3f 2e       	mov	r3, r31
    3936:	16 c0       	rjmp	.+44     	; 0x3964 <vfprintf+0x188>
    3938:	28 01       	movw	r4, r16
    393a:	22 e0       	ldi	r18, 0x02	; 2
    393c:	42 0e       	add	r4, r18
    393e:	51 1c       	adc	r5, r1
    3940:	f8 01       	movw	r30, r16
    3942:	a0 80       	ld	r10, Z
    3944:	b1 80       	ldd	r11, Z+1	; 0x01
    3946:	36 fe       	sbrs	r3, 6
    3948:	03 c0       	rjmp	.+6      	; 0x3950 <vfprintf+0x174>
    394a:	69 2d       	mov	r22, r9
    394c:	70 e0       	ldi	r23, 0x00	; 0
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <vfprintf+0x178>
    3950:	6f ef       	ldi	r22, 0xFF	; 255
    3952:	7f ef       	ldi	r23, 0xFF	; 255
    3954:	c5 01       	movw	r24, r10
    3956:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <strnlen_P>
    395a:	4c 01       	movw	r8, r24
    395c:	f3 2d       	mov	r31, r3
    395e:	f0 68       	ori	r31, 0x80	; 128
    3960:	3f 2e       	mov	r3, r31
    3962:	82 01       	movw	r16, r4
    3964:	33 fc       	sbrc	r3, 3
    3966:	1b c0       	rjmp	.+54     	; 0x399e <vfprintf+0x1c2>
    3968:	82 2d       	mov	r24, r2
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	88 16       	cp	r8, r24
    396e:	99 06       	cpc	r9, r25
    3970:	b0 f4       	brcc	.+44     	; 0x399e <vfprintf+0x1c2>
    3972:	b6 01       	movw	r22, r12
    3974:	80 e2       	ldi	r24, 0x20	; 32
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    397c:	2a 94       	dec	r2
    397e:	f4 cf       	rjmp	.-24     	; 0x3968 <vfprintf+0x18c>
    3980:	f5 01       	movw	r30, r10
    3982:	37 fc       	sbrc	r3, 7
    3984:	85 91       	lpm	r24, Z+
    3986:	37 fe       	sbrs	r3, 7
    3988:	81 91       	ld	r24, Z+
    398a:	5f 01       	movw	r10, r30
    398c:	b6 01       	movw	r22, r12
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3994:	21 10       	cpse	r2, r1
    3996:	2a 94       	dec	r2
    3998:	21 e0       	ldi	r18, 0x01	; 1
    399a:	82 1a       	sub	r8, r18
    399c:	91 08       	sbc	r9, r1
    399e:	81 14       	cp	r8, r1
    39a0:	91 04       	cpc	r9, r1
    39a2:	71 f7       	brne	.-36     	; 0x3980 <vfprintf+0x1a4>
    39a4:	e8 c0       	rjmp	.+464    	; 0x3b76 <vfprintf+0x39a>
    39a6:	84 36       	cpi	r24, 0x64	; 100
    39a8:	11 f0       	breq	.+4      	; 0x39ae <vfprintf+0x1d2>
    39aa:	89 36       	cpi	r24, 0x69	; 105
    39ac:	41 f5       	brne	.+80     	; 0x39fe <vfprintf+0x222>
    39ae:	f8 01       	movw	r30, r16
    39b0:	37 fe       	sbrs	r3, 7
    39b2:	07 c0       	rjmp	.+14     	; 0x39c2 <vfprintf+0x1e6>
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	0c 5f       	subi	r16, 0xFC	; 252
    39be:	1f 4f       	sbci	r17, 0xFF	; 255
    39c0:	08 c0       	rjmp	.+16     	; 0x39d2 <vfprintf+0x1f6>
    39c2:	60 81       	ld	r22, Z
    39c4:	71 81       	ldd	r23, Z+1	; 0x01
    39c6:	07 2e       	mov	r0, r23
    39c8:	00 0c       	add	r0, r0
    39ca:	88 0b       	sbc	r24, r24
    39cc:	99 0b       	sbc	r25, r25
    39ce:	0e 5f       	subi	r16, 0xFE	; 254
    39d0:	1f 4f       	sbci	r17, 0xFF	; 255
    39d2:	f3 2d       	mov	r31, r3
    39d4:	ff 76       	andi	r31, 0x6F	; 111
    39d6:	3f 2e       	mov	r3, r31
    39d8:	97 ff       	sbrs	r25, 7
    39da:	09 c0       	rjmp	.+18     	; 0x39ee <vfprintf+0x212>
    39dc:	90 95       	com	r25
    39de:	80 95       	com	r24
    39e0:	70 95       	com	r23
    39e2:	61 95       	neg	r22
    39e4:	7f 4f       	sbci	r23, 0xFF	; 255
    39e6:	8f 4f       	sbci	r24, 0xFF	; 255
    39e8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ea:	f0 68       	ori	r31, 0x80	; 128
    39ec:	3f 2e       	mov	r3, r31
    39ee:	2a e0       	ldi	r18, 0x0A	; 10
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	a3 01       	movw	r20, r6
    39f4:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__ultoa_invert>
    39f8:	88 2e       	mov	r8, r24
    39fa:	86 18       	sub	r8, r6
    39fc:	45 c0       	rjmp	.+138    	; 0x3a88 <vfprintf+0x2ac>
    39fe:	85 37       	cpi	r24, 0x75	; 117
    3a00:	31 f4       	brne	.+12     	; 0x3a0e <vfprintf+0x232>
    3a02:	23 2d       	mov	r18, r3
    3a04:	2f 7e       	andi	r18, 0xEF	; 239
    3a06:	b2 2e       	mov	r11, r18
    3a08:	2a e0       	ldi	r18, 0x0A	; 10
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	25 c0       	rjmp	.+74     	; 0x3a58 <vfprintf+0x27c>
    3a0e:	93 2d       	mov	r25, r3
    3a10:	99 7f       	andi	r25, 0xF9	; 249
    3a12:	b9 2e       	mov	r11, r25
    3a14:	8f 36       	cpi	r24, 0x6F	; 111
    3a16:	c1 f0       	breq	.+48     	; 0x3a48 <vfprintf+0x26c>
    3a18:	18 f4       	brcc	.+6      	; 0x3a20 <vfprintf+0x244>
    3a1a:	88 35       	cpi	r24, 0x58	; 88
    3a1c:	79 f0       	breq	.+30     	; 0x3a3c <vfprintf+0x260>
    3a1e:	b5 c0       	rjmp	.+362    	; 0x3b8a <vfprintf+0x3ae>
    3a20:	80 37       	cpi	r24, 0x70	; 112
    3a22:	19 f0       	breq	.+6      	; 0x3a2a <vfprintf+0x24e>
    3a24:	88 37       	cpi	r24, 0x78	; 120
    3a26:	21 f0       	breq	.+8      	; 0x3a30 <vfprintf+0x254>
    3a28:	b0 c0       	rjmp	.+352    	; 0x3b8a <vfprintf+0x3ae>
    3a2a:	e9 2f       	mov	r30, r25
    3a2c:	e0 61       	ori	r30, 0x10	; 16
    3a2e:	be 2e       	mov	r11, r30
    3a30:	b4 fe       	sbrs	r11, 4
    3a32:	0d c0       	rjmp	.+26     	; 0x3a4e <vfprintf+0x272>
    3a34:	fb 2d       	mov	r31, r11
    3a36:	f4 60       	ori	r31, 0x04	; 4
    3a38:	bf 2e       	mov	r11, r31
    3a3a:	09 c0       	rjmp	.+18     	; 0x3a4e <vfprintf+0x272>
    3a3c:	34 fe       	sbrs	r3, 4
    3a3e:	0a c0       	rjmp	.+20     	; 0x3a54 <vfprintf+0x278>
    3a40:	29 2f       	mov	r18, r25
    3a42:	26 60       	ori	r18, 0x06	; 6
    3a44:	b2 2e       	mov	r11, r18
    3a46:	06 c0       	rjmp	.+12     	; 0x3a54 <vfprintf+0x278>
    3a48:	28 e0       	ldi	r18, 0x08	; 8
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	05 c0       	rjmp	.+10     	; 0x3a58 <vfprintf+0x27c>
    3a4e:	20 e1       	ldi	r18, 0x10	; 16
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	02 c0       	rjmp	.+4      	; 0x3a58 <vfprintf+0x27c>
    3a54:	20 e1       	ldi	r18, 0x10	; 16
    3a56:	32 e0       	ldi	r19, 0x02	; 2
    3a58:	f8 01       	movw	r30, r16
    3a5a:	b7 fe       	sbrs	r11, 7
    3a5c:	07 c0       	rjmp	.+14     	; 0x3a6c <vfprintf+0x290>
    3a5e:	60 81       	ld	r22, Z
    3a60:	71 81       	ldd	r23, Z+1	; 0x01
    3a62:	82 81       	ldd	r24, Z+2	; 0x02
    3a64:	93 81       	ldd	r25, Z+3	; 0x03
    3a66:	0c 5f       	subi	r16, 0xFC	; 252
    3a68:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6a:	06 c0       	rjmp	.+12     	; 0x3a78 <vfprintf+0x29c>
    3a6c:	60 81       	ld	r22, Z
    3a6e:	71 81       	ldd	r23, Z+1	; 0x01
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	0e 5f       	subi	r16, 0xFE	; 254
    3a76:	1f 4f       	sbci	r17, 0xFF	; 255
    3a78:	a3 01       	movw	r20, r6
    3a7a:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <__ultoa_invert>
    3a7e:	88 2e       	mov	r8, r24
    3a80:	86 18       	sub	r8, r6
    3a82:	fb 2d       	mov	r31, r11
    3a84:	ff 77       	andi	r31, 0x7F	; 127
    3a86:	3f 2e       	mov	r3, r31
    3a88:	36 fe       	sbrs	r3, 6
    3a8a:	0d c0       	rjmp	.+26     	; 0x3aa6 <vfprintf+0x2ca>
    3a8c:	23 2d       	mov	r18, r3
    3a8e:	2e 7f       	andi	r18, 0xFE	; 254
    3a90:	a2 2e       	mov	r10, r18
    3a92:	89 14       	cp	r8, r9
    3a94:	58 f4       	brcc	.+22     	; 0x3aac <vfprintf+0x2d0>
    3a96:	34 fe       	sbrs	r3, 4
    3a98:	0b c0       	rjmp	.+22     	; 0x3ab0 <vfprintf+0x2d4>
    3a9a:	32 fc       	sbrc	r3, 2
    3a9c:	09 c0       	rjmp	.+18     	; 0x3ab0 <vfprintf+0x2d4>
    3a9e:	83 2d       	mov	r24, r3
    3aa0:	8e 7e       	andi	r24, 0xEE	; 238
    3aa2:	a8 2e       	mov	r10, r24
    3aa4:	05 c0       	rjmp	.+10     	; 0x3ab0 <vfprintf+0x2d4>
    3aa6:	b8 2c       	mov	r11, r8
    3aa8:	a3 2c       	mov	r10, r3
    3aaa:	03 c0       	rjmp	.+6      	; 0x3ab2 <vfprintf+0x2d6>
    3aac:	b8 2c       	mov	r11, r8
    3aae:	01 c0       	rjmp	.+2      	; 0x3ab2 <vfprintf+0x2d6>
    3ab0:	b9 2c       	mov	r11, r9
    3ab2:	a4 fe       	sbrs	r10, 4
    3ab4:	0f c0       	rjmp	.+30     	; 0x3ad4 <vfprintf+0x2f8>
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e8 0d       	add	r30, r8
    3aba:	f1 1d       	adc	r31, r1
    3abc:	80 81       	ld	r24, Z
    3abe:	80 33       	cpi	r24, 0x30	; 48
    3ac0:	21 f4       	brne	.+8      	; 0x3aca <vfprintf+0x2ee>
    3ac2:	9a 2d       	mov	r25, r10
    3ac4:	99 7e       	andi	r25, 0xE9	; 233
    3ac6:	a9 2e       	mov	r10, r25
    3ac8:	09 c0       	rjmp	.+18     	; 0x3adc <vfprintf+0x300>
    3aca:	a2 fe       	sbrs	r10, 2
    3acc:	06 c0       	rjmp	.+12     	; 0x3ada <vfprintf+0x2fe>
    3ace:	b3 94       	inc	r11
    3ad0:	b3 94       	inc	r11
    3ad2:	04 c0       	rjmp	.+8      	; 0x3adc <vfprintf+0x300>
    3ad4:	8a 2d       	mov	r24, r10
    3ad6:	86 78       	andi	r24, 0x86	; 134
    3ad8:	09 f0       	breq	.+2      	; 0x3adc <vfprintf+0x300>
    3ada:	b3 94       	inc	r11
    3adc:	a3 fc       	sbrc	r10, 3
    3ade:	11 c0       	rjmp	.+34     	; 0x3b02 <vfprintf+0x326>
    3ae0:	a0 fe       	sbrs	r10, 0
    3ae2:	06 c0       	rjmp	.+12     	; 0x3af0 <vfprintf+0x314>
    3ae4:	b2 14       	cp	r11, r2
    3ae6:	88 f4       	brcc	.+34     	; 0x3b0a <vfprintf+0x32e>
    3ae8:	28 0c       	add	r2, r8
    3aea:	92 2c       	mov	r9, r2
    3aec:	9b 18       	sub	r9, r11
    3aee:	0e c0       	rjmp	.+28     	; 0x3b0c <vfprintf+0x330>
    3af0:	b2 14       	cp	r11, r2
    3af2:	60 f4       	brcc	.+24     	; 0x3b0c <vfprintf+0x330>
    3af4:	b6 01       	movw	r22, r12
    3af6:	80 e2       	ldi	r24, 0x20	; 32
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3afe:	b3 94       	inc	r11
    3b00:	f7 cf       	rjmp	.-18     	; 0x3af0 <vfprintf+0x314>
    3b02:	b2 14       	cp	r11, r2
    3b04:	18 f4       	brcc	.+6      	; 0x3b0c <vfprintf+0x330>
    3b06:	2b 18       	sub	r2, r11
    3b08:	02 c0       	rjmp	.+4      	; 0x3b0e <vfprintf+0x332>
    3b0a:	98 2c       	mov	r9, r8
    3b0c:	21 2c       	mov	r2, r1
    3b0e:	a4 fe       	sbrs	r10, 4
    3b10:	10 c0       	rjmp	.+32     	; 0x3b32 <vfprintf+0x356>
    3b12:	b6 01       	movw	r22, r12
    3b14:	80 e3       	ldi	r24, 0x30	; 48
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3b1c:	a2 fe       	sbrs	r10, 2
    3b1e:	17 c0       	rjmp	.+46     	; 0x3b4e <vfprintf+0x372>
    3b20:	a1 fc       	sbrc	r10, 1
    3b22:	03 c0       	rjmp	.+6      	; 0x3b2a <vfprintf+0x34e>
    3b24:	88 e7       	ldi	r24, 0x78	; 120
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	02 c0       	rjmp	.+4      	; 0x3b2e <vfprintf+0x352>
    3b2a:	88 e5       	ldi	r24, 0x58	; 88
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	b6 01       	movw	r22, r12
    3b30:	0c c0       	rjmp	.+24     	; 0x3b4a <vfprintf+0x36e>
    3b32:	8a 2d       	mov	r24, r10
    3b34:	86 78       	andi	r24, 0x86	; 134
    3b36:	59 f0       	breq	.+22     	; 0x3b4e <vfprintf+0x372>
    3b38:	a1 fe       	sbrs	r10, 1
    3b3a:	02 c0       	rjmp	.+4      	; 0x3b40 <vfprintf+0x364>
    3b3c:	8b e2       	ldi	r24, 0x2B	; 43
    3b3e:	01 c0       	rjmp	.+2      	; 0x3b42 <vfprintf+0x366>
    3b40:	80 e2       	ldi	r24, 0x20	; 32
    3b42:	a7 fc       	sbrc	r10, 7
    3b44:	8d e2       	ldi	r24, 0x2D	; 45
    3b46:	b6 01       	movw	r22, r12
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3b4e:	89 14       	cp	r8, r9
    3b50:	38 f4       	brcc	.+14     	; 0x3b60 <vfprintf+0x384>
    3b52:	b6 01       	movw	r22, r12
    3b54:	80 e3       	ldi	r24, 0x30	; 48
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3b5c:	9a 94       	dec	r9
    3b5e:	f7 cf       	rjmp	.-18     	; 0x3b4e <vfprintf+0x372>
    3b60:	8a 94       	dec	r8
    3b62:	f3 01       	movw	r30, r6
    3b64:	e8 0d       	add	r30, r8
    3b66:	f1 1d       	adc	r31, r1
    3b68:	80 81       	ld	r24, Z
    3b6a:	b6 01       	movw	r22, r12
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3b72:	81 10       	cpse	r8, r1
    3b74:	f5 cf       	rjmp	.-22     	; 0x3b60 <vfprintf+0x384>
    3b76:	22 20       	and	r2, r2
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <vfprintf+0x3a0>
    3b7a:	42 ce       	rjmp	.-892    	; 0x3800 <vfprintf+0x24>
    3b7c:	b6 01       	movw	r22, r12
    3b7e:	80 e2       	ldi	r24, 0x20	; 32
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <fputc>
    3b86:	2a 94       	dec	r2
    3b88:	f6 cf       	rjmp	.-20     	; 0x3b76 <vfprintf+0x39a>
    3b8a:	f6 01       	movw	r30, r12
    3b8c:	86 81       	ldd	r24, Z+6	; 0x06
    3b8e:	97 81       	ldd	r25, Z+7	; 0x07
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <vfprintf+0x3ba>
    3b92:	8f ef       	ldi	r24, 0xFF	; 255
    3b94:	9f ef       	ldi	r25, 0xFF	; 255
    3b96:	2b 96       	adiw	r28, 0x0b	; 11
    3b98:	e2 e1       	ldi	r30, 0x12	; 18
    3b9a:	0c 94 9b 1e 	jmp	0x3d36	; 0x3d36 <__epilogue_restores__>

00003b9e <strnlen_P>:
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	05 90       	lpm	r0, Z+
    3ba2:	61 50       	subi	r22, 0x01	; 1
    3ba4:	70 40       	sbci	r23, 0x00	; 0
    3ba6:	01 10       	cpse	r0, r1
    3ba8:	d8 f7       	brcc	.-10     	; 0x3ba0 <strnlen_P+0x2>
    3baa:	80 95       	com	r24
    3bac:	90 95       	com	r25
    3bae:	8e 0f       	add	r24, r30
    3bb0:	9f 1f       	adc	r25, r31
    3bb2:	08 95       	ret

00003bb4 <strnlen>:
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	61 50       	subi	r22, 0x01	; 1
    3bb8:	70 40       	sbci	r23, 0x00	; 0
    3bba:	01 90       	ld	r0, Z+
    3bbc:	01 10       	cpse	r0, r1
    3bbe:	d8 f7       	brcc	.-10     	; 0x3bb6 <strnlen+0x2>
    3bc0:	80 95       	com	r24
    3bc2:	90 95       	com	r25
    3bc4:	8e 0f       	add	r24, r30
    3bc6:	9f 1f       	adc	r25, r31
    3bc8:	08 95       	ret

00003bca <fputc>:
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	fb 01       	movw	r30, r22
    3bd4:	23 81       	ldd	r18, Z+3	; 0x03
    3bd6:	21 fd       	sbrc	r18, 1
    3bd8:	03 c0       	rjmp	.+6      	; 0x3be0 <fputc+0x16>
    3bda:	8f ef       	ldi	r24, 0xFF	; 255
    3bdc:	9f ef       	ldi	r25, 0xFF	; 255
    3bde:	2c c0       	rjmp	.+88     	; 0x3c38 <fputc+0x6e>
    3be0:	22 ff       	sbrs	r18, 2
    3be2:	16 c0       	rjmp	.+44     	; 0x3c10 <fputc+0x46>
    3be4:	46 81       	ldd	r20, Z+6	; 0x06
    3be6:	57 81       	ldd	r21, Z+7	; 0x07
    3be8:	24 81       	ldd	r18, Z+4	; 0x04
    3bea:	35 81       	ldd	r19, Z+5	; 0x05
    3bec:	42 17       	cp	r20, r18
    3bee:	53 07       	cpc	r21, r19
    3bf0:	44 f4       	brge	.+16     	; 0x3c02 <fputc+0x38>
    3bf2:	a0 81       	ld	r26, Z
    3bf4:	b1 81       	ldd	r27, Z+1	; 0x01
    3bf6:	9d 01       	movw	r18, r26
    3bf8:	2f 5f       	subi	r18, 0xFF	; 255
    3bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfc:	31 83       	std	Z+1, r19	; 0x01
    3bfe:	20 83       	st	Z, r18
    3c00:	8c 93       	st	X, r24
    3c02:	26 81       	ldd	r18, Z+6	; 0x06
    3c04:	37 81       	ldd	r19, Z+7	; 0x07
    3c06:	2f 5f       	subi	r18, 0xFF	; 255
    3c08:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0a:	37 83       	std	Z+7, r19	; 0x07
    3c0c:	26 83       	std	Z+6, r18	; 0x06
    3c0e:	14 c0       	rjmp	.+40     	; 0x3c38 <fputc+0x6e>
    3c10:	8b 01       	movw	r16, r22
    3c12:	ec 01       	movw	r28, r24
    3c14:	fb 01       	movw	r30, r22
    3c16:	00 84       	ldd	r0, Z+8	; 0x08
    3c18:	f1 85       	ldd	r31, Z+9	; 0x09
    3c1a:	e0 2d       	mov	r30, r0
    3c1c:	09 95       	icall
    3c1e:	89 2b       	or	r24, r25
    3c20:	e1 f6       	brne	.-72     	; 0x3bda <fputc+0x10>
    3c22:	d8 01       	movw	r26, r16
    3c24:	16 96       	adiw	r26, 0x06	; 6
    3c26:	8d 91       	ld	r24, X+
    3c28:	9c 91       	ld	r25, X
    3c2a:	17 97       	sbiw	r26, 0x07	; 7
    3c2c:	01 96       	adiw	r24, 0x01	; 1
    3c2e:	17 96       	adiw	r26, 0x07	; 7
    3c30:	9c 93       	st	X, r25
    3c32:	8e 93       	st	-X, r24
    3c34:	16 97       	sbiw	r26, 0x06	; 6
    3c36:	ce 01       	movw	r24, r28
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	08 95       	ret

00003c42 <__ultoa_invert>:
    3c42:	fa 01       	movw	r30, r20
    3c44:	aa 27       	eor	r26, r26
    3c46:	28 30       	cpi	r18, 0x08	; 8
    3c48:	51 f1       	breq	.+84     	; 0x3c9e <__ultoa_invert+0x5c>
    3c4a:	20 31       	cpi	r18, 0x10	; 16
    3c4c:	81 f1       	breq	.+96     	; 0x3cae <__ultoa_invert+0x6c>
    3c4e:	e8 94       	clt
    3c50:	6f 93       	push	r22
    3c52:	6e 7f       	andi	r22, 0xFE	; 254
    3c54:	6e 5f       	subi	r22, 0xFE	; 254
    3c56:	7f 4f       	sbci	r23, 0xFF	; 255
    3c58:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5c:	af 4f       	sbci	r26, 0xFF	; 255
    3c5e:	b1 e0       	ldi	r27, 0x01	; 1
    3c60:	3e d0       	rcall	.+124    	; 0x3cde <__ultoa_invert+0x9c>
    3c62:	b4 e0       	ldi	r27, 0x04	; 4
    3c64:	3c d0       	rcall	.+120    	; 0x3cde <__ultoa_invert+0x9c>
    3c66:	67 0f       	add	r22, r23
    3c68:	78 1f       	adc	r23, r24
    3c6a:	89 1f       	adc	r24, r25
    3c6c:	9a 1f       	adc	r25, r26
    3c6e:	a1 1d       	adc	r26, r1
    3c70:	68 0f       	add	r22, r24
    3c72:	79 1f       	adc	r23, r25
    3c74:	8a 1f       	adc	r24, r26
    3c76:	91 1d       	adc	r25, r1
    3c78:	a1 1d       	adc	r26, r1
    3c7a:	6a 0f       	add	r22, r26
    3c7c:	71 1d       	adc	r23, r1
    3c7e:	81 1d       	adc	r24, r1
    3c80:	91 1d       	adc	r25, r1
    3c82:	a1 1d       	adc	r26, r1
    3c84:	20 d0       	rcall	.+64     	; 0x3cc6 <__ultoa_invert+0x84>
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <__ultoa_invert+0x48>
    3c88:	68 94       	set
    3c8a:	3f 91       	pop	r19
    3c8c:	2a e0       	ldi	r18, 0x0A	; 10
    3c8e:	26 9f       	mul	r18, r22
    3c90:	11 24       	eor	r1, r1
    3c92:	30 19       	sub	r19, r0
    3c94:	30 5d       	subi	r19, 0xD0	; 208
    3c96:	31 93       	st	Z+, r19
    3c98:	de f6       	brtc	.-74     	; 0x3c50 <__ultoa_invert+0xe>
    3c9a:	cf 01       	movw	r24, r30
    3c9c:	08 95       	ret
    3c9e:	46 2f       	mov	r20, r22
    3ca0:	47 70       	andi	r20, 0x07	; 7
    3ca2:	40 5d       	subi	r20, 0xD0	; 208
    3ca4:	41 93       	st	Z+, r20
    3ca6:	b3 e0       	ldi	r27, 0x03	; 3
    3ca8:	0f d0       	rcall	.+30     	; 0x3cc8 <__ultoa_invert+0x86>
    3caa:	c9 f7       	brne	.-14     	; 0x3c9e <__ultoa_invert+0x5c>
    3cac:	f6 cf       	rjmp	.-20     	; 0x3c9a <__ultoa_invert+0x58>
    3cae:	46 2f       	mov	r20, r22
    3cb0:	4f 70       	andi	r20, 0x0F	; 15
    3cb2:	40 5d       	subi	r20, 0xD0	; 208
    3cb4:	4a 33       	cpi	r20, 0x3A	; 58
    3cb6:	18 f0       	brcs	.+6      	; 0x3cbe <__ultoa_invert+0x7c>
    3cb8:	49 5d       	subi	r20, 0xD9	; 217
    3cba:	31 fd       	sbrc	r19, 1
    3cbc:	40 52       	subi	r20, 0x20	; 32
    3cbe:	41 93       	st	Z+, r20
    3cc0:	02 d0       	rcall	.+4      	; 0x3cc6 <__ultoa_invert+0x84>
    3cc2:	a9 f7       	brne	.-22     	; 0x3cae <__ultoa_invert+0x6c>
    3cc4:	ea cf       	rjmp	.-44     	; 0x3c9a <__ultoa_invert+0x58>
    3cc6:	b4 e0       	ldi	r27, 0x04	; 4
    3cc8:	a6 95       	lsr	r26
    3cca:	97 95       	ror	r25
    3ccc:	87 95       	ror	r24
    3cce:	77 95       	ror	r23
    3cd0:	67 95       	ror	r22
    3cd2:	ba 95       	dec	r27
    3cd4:	c9 f7       	brne	.-14     	; 0x3cc8 <__ultoa_invert+0x86>
    3cd6:	00 97       	sbiw	r24, 0x00	; 0
    3cd8:	61 05       	cpc	r22, r1
    3cda:	71 05       	cpc	r23, r1
    3cdc:	08 95       	ret
    3cde:	9b 01       	movw	r18, r22
    3ce0:	ac 01       	movw	r20, r24
    3ce2:	0a 2e       	mov	r0, r26
    3ce4:	06 94       	lsr	r0
    3ce6:	57 95       	ror	r21
    3ce8:	47 95       	ror	r20
    3cea:	37 95       	ror	r19
    3cec:	27 95       	ror	r18
    3cee:	ba 95       	dec	r27
    3cf0:	c9 f7       	brne	.-14     	; 0x3ce4 <__ultoa_invert+0xa2>
    3cf2:	62 0f       	add	r22, r18
    3cf4:	73 1f       	adc	r23, r19
    3cf6:	84 1f       	adc	r24, r20
    3cf8:	95 1f       	adc	r25, r21
    3cfa:	a0 1d       	adc	r26, r0
    3cfc:	08 95       	ret

00003cfe <__prologue_saves__>:
    3cfe:	2f 92       	push	r2
    3d00:	3f 92       	push	r3
    3d02:	4f 92       	push	r4
    3d04:	5f 92       	push	r5
    3d06:	6f 92       	push	r6
    3d08:	7f 92       	push	r7
    3d0a:	8f 92       	push	r8
    3d0c:	9f 92       	push	r9
    3d0e:	af 92       	push	r10
    3d10:	bf 92       	push	r11
    3d12:	cf 92       	push	r12
    3d14:	df 92       	push	r13
    3d16:	ef 92       	push	r14
    3d18:	ff 92       	push	r15
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	cf 93       	push	r28
    3d20:	df 93       	push	r29
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
    3d26:	ca 1b       	sub	r28, r26
    3d28:	db 0b       	sbc	r29, r27
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	de bf       	out	0x3e, r29	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	cd bf       	out	0x3d, r28	; 61
    3d34:	09 94       	ijmp

00003d36 <__epilogue_restores__>:
    3d36:	2a 88       	ldd	r2, Y+18	; 0x12
    3d38:	39 88       	ldd	r3, Y+17	; 0x11
    3d3a:	48 88       	ldd	r4, Y+16	; 0x10
    3d3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d40:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d42:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d44:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d46:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d48:	b9 84       	ldd	r11, Y+9	; 0x09
    3d4a:	c8 84       	ldd	r12, Y+8	; 0x08
    3d4c:	df 80       	ldd	r13, Y+7	; 0x07
    3d4e:	ee 80       	ldd	r14, Y+6	; 0x06
    3d50:	fd 80       	ldd	r15, Y+5	; 0x05
    3d52:	0c 81       	ldd	r16, Y+4	; 0x04
    3d54:	1b 81       	ldd	r17, Y+3	; 0x03
    3d56:	aa 81       	ldd	r26, Y+2	; 0x02
    3d58:	b9 81       	ldd	r27, Y+1	; 0x01
    3d5a:	ce 0f       	add	r28, r30
    3d5c:	d1 1d       	adc	r29, r1
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	ed 01       	movw	r28, r26
    3d6a:	08 95       	ret

00003d6c <_exit>:
    3d6c:	f8 94       	cli

00003d6e <__stop_program>:
    3d6e:	ff cf       	rjmp	.-2      	; 0x3d6e <__stop_program>
