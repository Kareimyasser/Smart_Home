
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020c  00800060  00001620  000016b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080026c  0080026c  000018c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003dcb  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000102c  00000000  00000000  00005a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020cf  00000000  00000000  00006a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000758  00000000  00000000  00008b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f8b  00000000  00000000  0000927c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ea2  00000000  00000000  0000a207  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000c0a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__vector_10>
      2c:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 08 	call	0x1020	; 0x1020 <main>
      8a:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_DisplayTemp>:
}

void LCD_DisplayTemp()
{

    LCD_voidClear();
      92:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
    LCD_voidDisplayStringDelay((u8 *)"Temp: 30c");
      96:	87 e6       	ldi	r24, 0x67	; 103
      98:	91 e0       	ldi	r25, 0x01	; 1
      9a:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
      9e:	80 ec       	ldi	r24, 0xC0	; 192
      a0:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"0-go to home");
      a4:	8b e8       	ldi	r24, 0x8B	; 139
      a6:	90 e0       	ldi	r25, 0x00	; 0
      a8:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
    while (local_KPDIdleValue == KPD_Not_Pressed)
      ac:	04 c0       	rjmp	.+8      	; 0xb6 <LCD_DisplayTemp+0x24>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
      ae:	80 e6       	ldi	r24, 0x60	; 96
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>

    LCD_voidClear();
    LCD_voidDisplayStringDelay((u8 *)"Temp: 30c");
    LCD_voidSendCommand(Write_SecondLine);
    LCD_voidDisplayStringDelay((u8 *)"0-go to home");
    while (local_KPDIdleValue == KPD_Not_Pressed)
      b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      ba:	8f 3f       	cpi	r24, 0xFF	; 255
      bc:	c1 f3       	breq	.-16     	; 0xae <LCD_DisplayTemp+0x1c>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
    }
    if (local_KPDIdleValue == '0')
      be:	80 33       	cpi	r24, 0x30	; 48
      c0:	11 f4       	brne	.+4      	; 0xc6 <LCD_DisplayTemp+0x34>
    {
        LCD_voidClear();
      c2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
    }
    TMR0clear_flag();
      c6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TMR0clear_flag>
    LCD_voidClear();
      ca:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
      ce:	08 95       	ret

000000d0 <HOME_voidInit>:



void HOME_voidInit(void)
{
	EEPROM_voidInit();
      d0:	0e 94 ca 04 	call	0x994	; 0x994 <EEPROM_voidInit>
	
    // initialize the LCD
    LCD_voidInit();
      d4:	0e 94 86 06 	call	0xd0c	; 0xd0c <LCD_voidInit>
	
	// initialize the KPD
    KPD_voidInit();
      d8:	0e 94 38 05 	call	0xa70	; 0xa70 <KPD_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
      dc:	0e 94 c7 04 	call	0x98e	; 0x98e <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
      e0:	41 e0       	ldi	r20, 0x01	; 1
      e2:	61 e0       	ldi	r22, 0x01	; 1
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
      ea:	40 e0       	ldi	r20, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	83 e0       	ldi	r24, 0x03	; 3
      f0:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
      f4:	0e 94 9e 09 	call	0x133c	; 0x133c <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
      f8:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMR0_voidInit>
    // initialize the LEDs(1-5)
    LED_voidInit(DIO_PORTA, DIO_PIN0);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN1);
     104:	61 e0       	ldi	r22, 0x01	; 1
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     10c:	62 e0       	ldi	r22, 0x02	; 2
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LED_voidInit>
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     114:	63 e0       	ldi	r22, 0x03	; 3
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LED_voidInit>
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     11c:	62 e0       	ldi	r22, 0x02	; 2
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <LED_voidInit>
     124:	08 95       	ret

00000126 <HOME_voidLocalGetUserAndPass>:
	//check alarm 
}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     134:	00 97       	sbiw	r24, 0x00	; 0
     136:	09 f4       	brne	.+2      	; 0x13a <HOME_voidLocalGetUserAndPass+0x14>
     138:	5f c0       	rjmp	.+190    	; 0x1f8 <HOME_voidLocalGetUserAndPass+0xd2>
     13a:	61 15       	cp	r22, r1
     13c:	71 05       	cpc	r23, r1
     13e:	09 f4       	brne	.+2      	; 0x142 <HOME_voidLocalGetUserAndPass+0x1c>
     140:	5b c0       	rjmp	.+182    	; 0x1f8 <HOME_voidLocalGetUserAndPass+0xd2>
     142:	7b 01       	movw	r14, r22
     144:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     146:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     152:	88 e9       	ldi	r24, 0x98	; 152
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     162:	8a ea       	ldi	r24, 0xAA	; 170
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     16a:	2f ef       	ldi	r18, 0xFF	; 255
     16c:	83 ed       	ldi	r24, 0xD3	; 211
     16e:	90 e3       	ldi	r25, 0x30	; 48
     170:	21 50       	subi	r18, 0x01	; 1
     172:	80 40       	sbci	r24, 0x00	; 0
     174:	90 40       	sbci	r25, 0x00	; 0
     176:	e1 f7       	brne	.-8      	; 0x170 <HOME_voidLocalGetUserAndPass+0x4a>
     178:	00 c0       	rjmp	.+0      	; 0x17a <HOME_voidLocalGetUserAndPass+0x54>
     17a:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     17c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     188:	88 eb       	ldi	r24, 0xB8	; 184
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     190:	10 e0       	ldi	r17, 0x00	; 0
     192:	11 c0       	rjmp	.+34     	; 0x1b6 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     194:	e6 01       	movw	r28, r12
     196:	c1 0f       	add	r28, r17
     198:	d1 1d       	adc	r29, r1
     19a:	ce 01       	movw	r24, r28
     19c:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     1a0:	98 81       	ld	r25, Y
     1a2:	9f 3f       	cpi	r25, 0xFF	; 255
     1a4:	b9 f3       	breq	.-18     	; 0x194 <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     1a6:	61 2f       	mov	r22, r17
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1ae:	88 81       	ld	r24, Y
     1b0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     1b4:	1f 5f       	subi	r17, 0xFF	; 255
     1b6:	18 30       	cpi	r17, 0x08	; 8
     1b8:	68 f3       	brcs	.-38     	; 0x194 <HOME_voidLocalGetUserAndPass+0x6e>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
	
		//display request for pass
		LCD_voidClear();
     1ba:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     1c6:	83 ec       	ldi	r24, 0xC3	; 195
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     1ce:	10 e0       	ldi	r17, 0x00	; 0
     1d0:	11 c0       	rjmp	.+34     	; 0x1f4 <HOME_voidLocalGetUserAndPass+0xce>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     1d2:	e7 01       	movw	r28, r14
     1d4:	c1 0f       	add	r28, r17
     1d6:	d1 1d       	adc	r29, r1
     1d8:	ce 01       	movw	r24, r28
     1da:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     1de:	88 81       	ld	r24, Y
     1e0:	8f 3f       	cpi	r24, 0xFF	; 255
     1e2:	b9 f3       	breq	.-18     	; 0x1d2 <HOME_voidLocalGetUserAndPass+0xac>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     1e4:	61 2f       	mov	r22, r17
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     1ec:	88 81       	ld	r24, Y
     1ee:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     1f2:	1f 5f       	subi	r17, 0xFF	; 255
     1f4:	18 30       	cpi	r17, 0x08	; 8
     1f6:	68 f3       	brcs	.-38     	; 0x1d2 <HOME_voidLocalGetUserAndPass+0xac>
		//error massage
	}
			
	
		
}
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	ff 90       	pop	r15
     200:	ef 90       	pop	r14
     202:	df 90       	pop	r13
     204:	cf 90       	pop	r12
     206:	08 95       	ret

00000208 <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserType )
{
     208:	8f 92       	push	r8
     20a:	9f 92       	push	r9
     20c:	af 92       	push	r10
     20e:	bf 92       	push	r11
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	a0 97       	sbiw	r28, 0x20	; 32
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
	//page 32 to 61 for remote user name and password the first page for user name the followed by password
	//word 500 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserType!=NULL)
     230:	61 15       	cp	r22, r1
     232:	71 05       	cpc	r23, r1
     234:	09 f4       	brne	.+2      	; 0x238 <HOME_voidCheckUserAndPass+0x30>
     236:	ee c0       	rjmp	.+476    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     238:	81 30       	cpi	r24, 0x01	; 1
     23a:	09 f0       	breq	.+2      	; 0x23e <HOME_voidCheckUserAndPass+0x36>
     23c:	eb c0       	rjmp	.+470    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     23e:	da c0       	rjmp	.+436    	; 0x3f4 <HOME_voidCheckUserAndPass+0x1ec>
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     240:	93 94       	inc	r9
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     242:	be 01       	movw	r22, r28
     244:	6f 5e       	subi	r22, 0xEF	; 239
     246:	7f 4f       	sbci	r23, 0xFF	; 255
     248:	ce 01       	movw	r24, r28
     24a:	49 96       	adiw	r24, 0x19	; 25
     24c:	0e 94 93 00 	call	0x126	; 0x126 <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     250:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     252:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     254:	d1 2c       	mov	r13, r1
     256:	5f c0       	rjmp	.+190    	; 0x316 <HOME_voidCheckUserAndPass+0x10e>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     258:	0d 2d       	mov	r16, r13
     25a:	02 95       	swap	r16
     25c:	00 7f       	andi	r16, 0xF0	; 240
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	ae 01       	movw	r20, r28
     262:	47 5f       	subi	r20, 0xF7	; 247
     264:	5f 4f       	sbci	r21, 0xFF	; 255
     266:	68 e0       	ldi	r22, 0x08	; 8
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	c8 01       	movw	r24, r16
     26c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     270:	ae 01       	movw	r20, r28
     272:	4f 5f       	subi	r20, 0xFF	; 255
     274:	5f 4f       	sbci	r21, 0xFF	; 255
     276:	68 e0       	ldi	r22, 0x08	; 8
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	c8 01       	movw	r24, r16
     27c:	08 96       	adiw	r24, 0x08	; 8
     27e:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     282:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	14 c0       	rjmp	.+40     	; 0x2b0 <HOME_voidCheckUserAndPass+0xa8>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     288:	82 2f       	mov	r24, r18
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	e9 e1       	ldi	r30, 0x19	; 25
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	ec 0f       	add	r30, r28
     292:	fd 1f       	adc	r31, r29
     294:	e8 0f       	add	r30, r24
     296:	f9 1f       	adc	r31, r25
     298:	30 81       	ld	r19, Z
     29a:	e9 e0       	ldi	r30, 0x09	; 9
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	ec 0f       	add	r30, r28
     2a0:	fd 1f       	adc	r31, r29
     2a2:	e8 0f       	add	r30, r24
     2a4:	f9 1f       	adc	r31, r25
     2a6:	80 81       	ld	r24, Z
     2a8:	38 13       	cpse	r19, r24
     2aa:	01 c0       	rjmp	.+2      	; 0x2ae <HOME_voidCheckUserAndPass+0xa6>
						{
							Local_u8NameByteCheck++;
     2ac:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     2ae:	2f 5f       	subi	r18, 0xFF	; 255
     2b0:	28 30       	cpi	r18, 0x08	; 8
     2b2:	50 f3       	brcs	.-44     	; 0x288 <HOME_voidCheckUserAndPass+0x80>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     2b4:	48 30       	cpi	r20, 0x08	; 8
     2b6:	69 f5       	brne	.+90     	; 0x312 <HOME_voidCheckUserAndPass+0x10a>
     2b8:	15 c0       	rjmp	.+42     	; 0x2e4 <HOME_voidCheckUserAndPass+0xdc>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     2ba:	82 2f       	mov	r24, r18
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	e1 e1       	ldi	r30, 0x11	; 17
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	ec 0f       	add	r30, r28
     2c4:	fd 1f       	adc	r31, r29
     2c6:	e8 0f       	add	r30, r24
     2c8:	f9 1f       	adc	r31, r25
     2ca:	30 81       	ld	r19, Z
     2cc:	e1 e0       	ldi	r30, 0x01	; 1
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	ec 0f       	add	r30, r28
     2d2:	fd 1f       	adc	r31, r29
     2d4:	e8 0f       	add	r30, r24
     2d6:	f9 1f       	adc	r31, r25
     2d8:	80 81       	ld	r24, Z
     2da:	38 13       	cpse	r19, r24
     2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <HOME_voidCheckUserAndPass+0xd8>
							{
								Local_u8PassByteCheck++;
     2de:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     2e0:	2f 5f       	subi	r18, 0xFF	; 255
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <HOME_voidCheckUserAndPass+0xe0>
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	28 30       	cpi	r18, 0x08	; 8
     2ea:	38 f3       	brcs	.-50     	; 0x2ba <HOME_voidCheckUserAndPass+0xb2>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     2ec:	48 30       	cpi	r20, 0x08	; 8
     2ee:	79 f4       	brne	.+30     	; 0x30e <HOME_voidCheckUserAndPass+0x106>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     2f0:	2f e0       	ldi	r18, 0x0F	; 15
     2f2:	d2 12       	cpse	r13, r18
     2f4:	06 c0       	rjmp	.+12     	; 0x302 <HOME_voidCheckUserAndPass+0xfa>
							{
								*copy_pu8UserType=HOME_ADMIN;	
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	f7 01       	movw	r30, r14
     2fa:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     2fc:	88 24       	eor	r8, r8
     2fe:	83 94       	inc	r8
     300:	0e c0       	rjmp	.+28     	; 0x31e <HOME_voidCheckUserAndPass+0x116>
							{
								*copy_pu8UserType=HOME_ADMIN;	
							}
							else
							{
								*copy_pu8UserType=HOME_USER;
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	f7 01       	movw	r30, r14
     306:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     308:	88 24       	eor	r8, r8
     30a:	83 94       	inc	r8
     30c:	08 c0       	rjmp	.+16     	; 0x31e <HOME_voidCheckUserAndPass+0x116>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     30e:	b3 94       	inc	r11
     310:	01 c0       	rjmp	.+2      	; 0x314 <HOME_voidCheckUserAndPass+0x10c>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     312:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     314:	d3 94       	inc	r13
     316:	ff e0       	ldi	r31, 0x0F	; 15
     318:	fd 15       	cp	r31, r13
     31a:	08 f0       	brcs	.+2      	; 0x31e <HOME_voidCheckUserAndPass+0x116>
     31c:	9d cf       	rjmp	.-198    	; 0x258 <HOME_voidCheckUserAndPass+0x50>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	82 12       	cpse	r8, r18
     322:	14 c0       	rjmp	.+40     	; 0x34c <HOME_voidCheckUserAndPass+0x144>
				{
					LCD_voidClear();
     324:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS PERMITED");
     330:	8d ec       	ldi	r24, 0xCD	; 205
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
     338:	8f ef       	ldi	r24, 0xFF	; 255
     33a:	99 e6       	ldi	r25, 0x69	; 105
     33c:	e8 e1       	ldi	r30, 0x18	; 24
     33e:	81 50       	subi	r24, 0x01	; 1
     340:	90 40       	sbci	r25, 0x00	; 0
     342:	e0 40       	sbci	r30, 0x00	; 0
     344:	e1 f7       	brne	.-8      	; 0x33e <HOME_voidCheckUserAndPass+0x136>
     346:	00 c0       	rjmp	.+0      	; 0x348 <HOME_voidCheckUserAndPass+0x140>
     348:	00 00       	nop
     34a:	5c c0       	rjmp	.+184    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
					_delay_ms(500);
                    
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==16)
     34c:	f0 e1       	ldi	r31, 0x10	; 16
     34e:	cf 12       	cpse	r12, r31
     350:	27 c0       	rjmp	.+78     	; 0x3a0 <HOME_voidCheckUserAndPass+0x198>
				{
					LCD_voidClear();
     352:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     356:	60 e0       	ldi	r22, 0x00	; 0
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS DENIED");
     35e:	8d ed       	ldi	r24, 0xDD	; 221
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"Wrong User Name");
     36e:	8b ee       	ldi	r24, 0xEB	; 235
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     376:	22 e0       	ldi	r18, 0x02	; 2
     378:	a2 16       	cp	r10, r18
     37a:	d1 f1       	breq	.+116    	; 0x3f0 <HOME_voidCheckUserAndPass+0x1e8>
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	93 ed       	ldi	r25, 0xD3	; 211
     380:	e0 e3       	ldi	r30, 0x30	; 48
     382:	81 50       	subi	r24, 0x01	; 1
     384:	90 40       	sbci	r25, 0x00	; 0
     386:	e0 40       	sbci	r30, 0x00	; 0
     388:	e1 f7       	brne	.-8      	; 0x382 <HOME_voidCheckUserAndPass+0x17a>
     38a:	00 c0       	rjmp	.+0      	; 0x38c <HOME_voidCheckUserAndPass+0x184>
     38c:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString((u8 *)"Please Try Again");
     396:	8b ef       	ldi	r24, 0xFB	; 251
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
     39e:	28 c0       	rjmp	.+80     	; 0x3f0 <HOME_voidCheckUserAndPass+0x1e8>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     3a0:	bb 20       	and	r11, r11
     3a2:	31 f1       	breq	.+76     	; 0x3f0 <HOME_voidCheckUserAndPass+0x1e8>
				{
					LCD_voidClear();
     3a4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"ACCESS DENIED");
     3b0:	8d ed       	ldi	r24, 0xDD	; 221
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString((u8 *)"Wrong Password");
     3c0:	8c e0       	ldi	r24, 0x0C	; 12
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     3c8:	f2 e0       	ldi	r31, 0x02	; 2
     3ca:	af 16       	cp	r10, r31
     3cc:	89 f0       	breq	.+34     	; 0x3f0 <HOME_voidCheckUserAndPass+0x1e8>
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	83 ed       	ldi	r24, 0xD3	; 211
     3d2:	90 e3       	ldi	r25, 0x30	; 48
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	80 40       	sbci	r24, 0x00	; 0
     3d8:	90 40       	sbci	r25, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <HOME_voidCheckUserAndPass+0x1cc>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <HOME_voidCheckUserAndPass+0x1d6>
     3de:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	82 e0       	ldi	r24, 0x02	; 2
     3e4:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString((u8 *)"Please Try Again");
     3e8:	8b ef       	ldi	r24, 0xFB	; 251
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,
			Local_u8FireAnAlarm=0,Local_u8PagesCounter,Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,Local_u8LocalUserNameLocation,LocaL_u8RightEntery=0;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     3f0:	a3 94       	inc	r10
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <HOME_voidCheckUserAndPass+0x1f4>
     3f4:	7b 01       	movw	r14, r22
     3f6:	81 2c       	mov	r8, r1
     3f8:	91 2c       	mov	r9, r1
     3fa:	a1 2c       	mov	r10, r1
     3fc:	e2 e0       	ldi	r30, 0x02	; 2
     3fe:	ea 15       	cp	r30, r10
     400:	08 f0       	brcs	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     402:	1e cf       	rjmp	.-452    	; 0x240 <HOME_voidCheckUserAndPass+0x38>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     404:	f3 e0       	ldi	r31, 0x03	; 3
     406:	9f 12       	cpse	r9, r31
     408:	05 c0       	rjmp	.+10     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     40a:	81 10       	cpse	r8, r1
     40c:	03 c0       	rjmp	.+6      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			{
				*copy_pu8UserType=HOME_USER_FAILED;
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	f7 01       	movw	r30, r14
     412:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
}
     414:	a0 96       	adiw	r28, 0x20	; 32
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	f8 94       	cli
     41a:	de bf       	out	0x3e, r29	; 62
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	cd bf       	out	0x3d, r28	; 61
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	af 90       	pop	r10
     434:	9f 90       	pop	r9
     436:	8f 90       	pop	r8
     438:	08 95       	ret

0000043a <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     43a:	8b e1       	ldi	r24, 0x1B	; 27
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     442:	80 ec       	ldi	r24, 0xC0	; 192
     444:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     448:	8c e2       	ldi	r24, 0x2C	; 44
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
     450:	2f ef       	ldi	r18, 0xFF	; 255
     452:	83 ed       	ldi	r24, 0xD3	; 211
     454:	90 e3       	ldi	r25, 0x30	; 48
     456:	21 50       	subi	r18, 0x01	; 1
     458:	80 40       	sbci	r24, 0x00	; 0
     45a:	90 40       	sbci	r25, 0x00	; 0
     45c:	e1 f7       	brne	.-8      	; 0x456 <WelcomeScreen+0x1c>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <WelcomeScreen+0x26>
     460:	00 00       	nop
     462:	08 95       	ret

00000464 <APP_init>:




void APP_init(void)
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	a1 97       	sbiw	r28, 0x21	; 33
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     478:	0e 94 68 00 	call	0xd0	; 0xd0 <HOME_voidInit>
	
	
	
    // display the welcome screen
    WelcomeScreen();
     47c:	0e 94 1d 02 	call	0x43a	; 0x43a <WelcomeScreen>
	LCD_voidClear();
     480:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
	
	u8 testusername[8]={"11111111"};
     484:	88 e0       	ldi	r24, 0x08	; 8
     486:	e4 e6       	ldi	r30, 0x64	; 100
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	de 01       	movw	r26, r28
     48c:	11 96       	adiw	r26, 0x01	; 1
     48e:	01 90       	ld	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	8a 95       	dec	r24
     494:	e1 f7       	brne	.-8      	; 0x48e <APP_init+0x2a>
	u8 testuserpass[8]={"22222222"};
     496:	88 e0       	ldi	r24, 0x08	; 8
     498:	ed e6       	ldi	r30, 0x6D	; 109
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	de 01       	movw	r26, r28
     49e:	19 96       	adiw	r26, 0x09	; 9
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	8a 95       	dec	r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <APP_init+0x3c>
	u8 testadminname[8]={"99999999"};
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	e6 e7       	ldi	r30, 0x76	; 118
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	de 01       	movw	r26, r28
     4b0:	51 96       	adiw	r26, 0x11	; 17
     4b2:	01 90       	ld	r0, Z+
     4b4:	0d 92       	st	X+, r0
     4b6:	8a 95       	dec	r24
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <APP_init+0x4e>
	u8 testadminpass[8]={"99999999"};
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	e6 e7       	ldi	r30, 0x76	; 118
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	de 01       	movw	r26, r28
     4c2:	59 96       	adiw	r26, 0x19	; 25
     4c4:	01 90       	ld	r0, Z+
     4c6:	0d 92       	st	X+, r0
     4c8:	8a 95       	dec	r24
     4ca:	e1 f7       	brne	.-8      	; 0x4c4 <APP_init+0x60>
	u8 usertype;	
	
	EEPROM_voidWritePage(16,&testusername[0]);
     4cc:	be 01       	movw	r22, r28
     4ce:	6f 5f       	subi	r22, 0xFF	; 255
     4d0:	7f 4f       	sbci	r23, 0xFF	; 255
     4d2:	80 e1       	ldi	r24, 0x10	; 16
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 cd 04 	call	0x99a	; 0x99a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
     4da:	be 01       	movw	r22, r28
     4dc:	67 5f       	subi	r22, 0xF7	; 247
     4de:	7f 4f       	sbci	r23, 0xFF	; 255
     4e0:	88 e1       	ldi	r24, 0x18	; 24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 cd 04 	call	0x99a	; 0x99a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(240,&testadminname[0]);
     4e8:	be 01       	movw	r22, r28
     4ea:	6f 5e       	subi	r22, 0xEF	; 239
     4ec:	7f 4f       	sbci	r23, 0xFF	; 255
     4ee:	80 ef       	ldi	r24, 0xF0	; 240
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 cd 04 	call	0x99a	; 0x99a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(248,&testadminpass[0]);
     4f6:	be 01       	movw	r22, r28
     4f8:	67 5e       	subi	r22, 0xE7	; 231
     4fa:	7f 4f       	sbci	r23, 0xFF	; 255
     4fc:	88 ef       	ldi	r24, 0xF8	; 248
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 cd 04 	call	0x99a	; 0x99a <EEPROM_voidWritePage>
	
	HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
     504:	be 01       	movw	r22, r28
     506:	6f 5d       	subi	r22, 0xDF	; 223
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	0e 94 04 01 	call	0x208	; 0x208 <HOME_voidCheckUserAndPass>
	LCD_voidClear();
     510:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 d7 07 	call	0xfae	; 0xfae <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(usertype);
     51c:	69 a1       	ldd	r22, Y+33	; 0x21
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 53 07 	call	0xea6	; 0xea6 <LCD_voidDisplayNumber>
     528:	2f ef       	ldi	r18, 0xFF	; 255
     52a:	83 ed       	ldi	r24, 0xD3	; 211
     52c:	90 e3       	ldi	r25, 0x30	; 48
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	80 40       	sbci	r24, 0x00	; 0
     532:	90 40       	sbci	r25, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <APP_init+0xca>
     536:	00 c0       	rjmp	.+0      	; 0x538 <APP_init+0xd4>
     538:	00 00       	nop





}
     53a:	a1 96       	adiw	r28, 0x21	; 33
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     552:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     556:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     55a:	08 95       	ret

0000055c <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     55c:	0e 94 a6 02 	call	0x54c	; 0x54c <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     560:	89 e4       	ldi	r24, 0x49	; 73
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 cc 09 	call	0x1398	; 0x1398 <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     568:	0e 94 b4 09 	call	0x1368	; 0x1368 <TMR0_voidStart>
        LCD_voidClear();
     56c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     570:	8a e3       	ldi	r24, 0x3A	; 58
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     578:	80 ec       	ldi	r24, 0xC0	; 192
     57a:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temperature");
     57e:	87 e4       	ldi	r24, 0x47	; 71
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
        Reset_AllKPDValues();
     586:	0e 94 a6 02 	call	0x54c	; 0x54c <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     58a:	0c c0       	rjmp	.+24     	; 0x5a4 <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     58c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     590:	80 33       	cpi	r24, 0x30	; 48
     592:	21 f4       	brne	.+8      	; 0x59c <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     594:	8f ef       	ldi	r24, 0xFF	; 255
     596:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                break;
     59a:	08 c0       	rjmp	.+16     	; 0x5ac <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     59c:	83 e6       	ldi	r24, 0x63	; 99
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temperature");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     5a4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_copyKPDValue>
     5a8:	8f 3f       	cpi	r24, 0xFF	; 255
     5aa:	81 f3       	breq	.-32     	; 0x58c <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     5ac:	0e 94 c2 09 	call	0x1384	; 0x1384 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     5b0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_copyKPDValue>
     5b4:	81 33       	cpi	r24, 0x31	; 49
     5b6:	19 f0       	breq	.+6      	; 0x5be <KPD_Interface_user+0x62>
     5b8:	82 33       	cpi	r24, 0x32	; 50
     5ba:	79 f0       	breq	.+30     	; 0x5da <KPD_Interface_user+0x7e>
     5bc:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     5be:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     5c2:	85 e5       	ldi	r24, 0x55	; 85
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     5ca:	80 ec       	ldi	r24, 0xC0	; 192
     5cc:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     5d0:	82 e6       	ldi	r24, 0x62	; 98
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>

            break;
     5d8:	08 95       	ret

        case ('2'):

            LCD_voidClear();
     5da:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     5de:	81 e7       	ldi	r24, 0x71	; 113
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     5e6:	80 ec       	ldi	r24, 0xC0	; 192
     5e8:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     5ec:	81 e8       	ldi	r24, 0x81	; 129
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
     5f4:	89 e4       	ldi	r24, 0x49	; 73
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 cc 09 	call	0x1398	; 0x1398 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     5fc:	0e 94 b4 09 	call	0x1368	; 0x1368 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     600:	0c c0       	rjmp	.+24     	; 0x61a <KPD_Interface_user+0xbe>
            {
                KPD_voidGetValue(&local_lightNum);
     602:	82 e6       	ldi	r24, 0x62	; 98
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     60a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     60e:	80 33       	cpi	r24, 0x30	; 48
     610:	21 f4       	brne	.+8      	; 0x61a <KPD_Interface_user+0xbe>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    break;
     618:	04 c0       	rjmp	.+8      	; 0x622 <KPD_Interface_user+0xc6>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&LCD_DisplayTemp);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     61a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightNum>
     61e:	8f 3f       	cpi	r24, 0xFF	; 255
     620:	81 f3       	breq	.-32     	; 0x602 <KPD_Interface_user+0xa6>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     622:	0e 94 c2 09 	call	0x1384	; 0x1384 <TMR0_voidStop>
            switch (local_lightNum)
     626:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightNum>
     62a:	83 33       	cpi	r24, 0x33	; 51
     62c:	09 f4       	brne	.+2      	; 0x630 <KPD_Interface_user+0xd4>
     62e:	a6 c0       	rjmp	.+332    	; 0x77c <KPD_Interface_user+0x220>
     630:	30 f4       	brcc	.+12     	; 0x63e <KPD_Interface_user+0xe2>
     632:	81 33       	cpi	r24, 0x31	; 49
     634:	69 f0       	breq	.+26     	; 0x650 <KPD_Interface_user+0xf4>
     636:	82 33       	cpi	r24, 0x32	; 50
     638:	09 f4       	brne	.+2      	; 0x63c <KPD_Interface_user+0xe0>
     63a:	54 c0       	rjmp	.+168    	; 0x6e4 <KPD_Interface_user+0x188>
     63c:	a2 c1       	rjmp	.+836    	; 0x982 <__stack+0x123>
     63e:	85 33       	cpi	r24, 0x35	; 53
     640:	09 f4       	brne	.+2      	; 0x644 <KPD_Interface_user+0xe8>
     642:	34 c1       	rjmp	.+616    	; 0x8ac <__stack+0x4d>
     644:	08 f4       	brcc	.+2      	; 0x648 <KPD_Interface_user+0xec>
     646:	e6 c0       	rjmp	.+460    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     648:	86 33       	cpi	r24, 0x36	; 54
     64a:	09 f4       	brne	.+2      	; 0x64e <KPD_Interface_user+0xf2>
     64c:	7b c1       	rjmp	.+758    	; 0x944 <__stack+0xe5>
     64e:	99 c1       	rjmp	.+818    	; 0x982 <__stack+0x123>
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN0, &led_status);
     650:	4d e6       	ldi	r20, 0x6D	; 109
     652:	52 e0       	ldi	r21, 0x02	; 2
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_voidGetPinValue>
                LCD_voidClear();
     65c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
                if (led_status == 1)
     660:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <led_status>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	f1 f4       	brne	.+60     	; 0x6a4 <KPD_Interface_user+0x148>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     668:	8e e8       	ldi	r24, 0x8E	; 142
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     670:	80 ec       	ldi	r24, 0xC0	; 192
     672:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     676:	8c e9       	ldi	r24, 0x9C	; 156
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     67e:	04 c0       	rjmp	.+8      	; 0x688 <KPD_Interface_user+0x12c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     680:	81 e6       	ldi	r24, 0x61	; 97
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     688:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     68c:	8f 3f       	cpi	r24, 0xFF	; 255
     68e:	c1 f3       	breq	.-16     	; 0x680 <KPD_Interface_user+0x124>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     690:	81 33       	cpi	r24, 0x31	; 49
     692:	29 f4       	brne	.+10     	; 0x69e <KPD_Interface_user+0x142>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     69e:	0e 94 a6 02 	call	0x54c	; 0x54c <Reset_AllKPDValues>
     6a2:	6f c1       	rjmp	.+734    	; 0x982 <__stack+0x123>
                }
                else if (led_status == 0)
     6a4:	81 11       	cpse	r24, r1
     6a6:	6d c1       	rjmp	.+730    	; 0x982 <__stack+0x123>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     6a8:	8d ea       	ldi	r24, 0xAD	; 173
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     6b0:	80 ec       	ldi	r24, 0xC0	; 192
     6b2:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     6b6:	8c eb       	ldi	r24, 0xBC	; 188
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     6be:	04 c0       	rjmp	.+8      	; 0x6c8 <KPD_Interface_user+0x16c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     6c0:	81 e6       	ldi	r24, 0x61	; 97
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     6c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     6cc:	8f 3f       	cpi	r24, 0xFF	; 255
     6ce:	c1 f3       	breq	.-16     	; 0x6c0 <KPD_Interface_user+0x164>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     6d0:	81 33       	cpi	r24, 0x31	; 49
     6d2:	29 f4       	brne	.+10     	; 0x6de <KPD_Interface_user+0x182>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN0, LED_FORWARD_CONNECTION);
     6d4:	41 e0       	ldi	r20, 0x01	; 1
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 f6 07 	call	0xfec	; 0xfec <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     6de:	0e 94 a6 02 	call	0x54c	; 0x54c <Reset_AllKPDValues>
     6e2:	4f c1       	rjmp	.+670    	; 0x982 <__stack+0x123>
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN1, &led_status);
     6e4:	4d e6       	ldi	r20, 0x6D	; 109
     6e6:	52 e0       	ldi	r21, 0x02	; 2
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_voidGetPinValue>
                LCD_voidClear();
     6f0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
                if (led_status == 1)
     6f4:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <led_status>
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	f9 f4       	brne	.+62     	; 0x73a <KPD_Interface_user+0x1de>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     6fc:	8c ec       	ldi	r24, 0xCC	; 204
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     704:	80 ec       	ldi	r24, 0xC0	; 192
     706:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     70a:	8c e9       	ldi	r24, 0x9C	; 156
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     712:	04 c0       	rjmp	.+8      	; 0x71c <KPD_Interface_user+0x1c0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     714:	81 e6       	ldi	r24, 0x61	; 97
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     71c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     720:	8f 3f       	cpi	r24, 0xFF	; 255
     722:	c1 f3       	breq	.-16     	; 0x714 <KPD_Interface_user+0x1b8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     724:	81 33       	cpi	r24, 0x31	; 49
     726:	29 f4       	brne	.+10     	; 0x732 <KPD_Interface_user+0x1d6>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	61 e0       	ldi	r22, 0x01	; 1
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     732:	8f ef       	ldi	r24, 0xFF	; 255
     734:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     738:	24 c1       	rjmp	.+584    	; 0x982 <__stack+0x123>
                }
                else if (led_status == 0)
     73a:	81 11       	cpse	r24, r1
     73c:	22 c1       	rjmp	.+580    	; 0x982 <__stack+0x123>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     73e:	8a ed       	ldi	r24, 0xDA	; 218
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     746:	80 ec       	ldi	r24, 0xC0	; 192
     748:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     74c:	8c eb       	ldi	r24, 0xBC	; 188
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     754:	04 c0       	rjmp	.+8      	; 0x75e <KPD_Interface_user+0x202>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     756:	81 e6       	ldi	r24, 0x61	; 97
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     75e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     762:	8f 3f       	cpi	r24, 0xFF	; 255
     764:	c1 f3       	breq	.-16     	; 0x756 <KPD_Interface_user+0x1fa>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     766:	81 33       	cpi	r24, 0x31	; 49
     768:	29 f4       	brne	.+10     	; 0x774 <KPD_Interface_user+0x218>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN1, LED_FORWARD_CONNECTION);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	61 e0       	ldi	r22, 0x01	; 1
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 f6 07 	call	0xfec	; 0xfec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     77a:	03 c1       	rjmp	.+518    	; 0x982 <__stack+0x123>
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     77c:	4d e6       	ldi	r20, 0x6D	; 109
     77e:	52 e0       	ldi	r21, 0x02	; 2
     780:	62 e0       	ldi	r22, 0x02	; 2
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_voidGetPinValue>
                LCD_voidClear();
     788:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
                if (led_status == 1)
     78c:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <led_status>
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	f9 f4       	brne	.+62     	; 0x7d2 <KPD_Interface_user+0x276>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     794:	89 ee       	ldi	r24, 0xE9	; 233
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     79c:	80 ec       	ldi	r24, 0xC0	; 192
     79e:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     7a2:	8c e9       	ldi	r24, 0x9C	; 156
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <KPD_Interface_user+0x258>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     7ac:	81 e6       	ldi	r24, 0x61	; 97
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     7b4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     7b8:	8f 3f       	cpi	r24, 0xFF	; 255
     7ba:	c1 f3       	breq	.-16     	; 0x7ac <KPD_Interface_user+0x250>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     7bc:	81 33       	cpi	r24, 0x31	; 49
     7be:	29 f4       	brne	.+10     	; 0x7ca <KPD_Interface_user+0x26e>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	62 e0       	ldi	r22, 0x02	; 2
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     7d0:	d8 c0       	rjmp	.+432    	; 0x982 <__stack+0x123>
                }
                else if (led_status == 0)
     7d2:	81 11       	cpse	r24, r1
     7d4:	d6 c0       	rjmp	.+428    	; 0x982 <__stack+0x123>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     7d6:	87 ef       	ldi	r24, 0xF7	; 247
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     7de:	80 ec       	ldi	r24, 0xC0	; 192
     7e0:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     7e4:	8c eb       	ldi	r24, 0xBC	; 188
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <KPD_Interface_user+0x29a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     7ee:	81 e6       	ldi	r24, 0x61	; 97
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     7f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     7fa:	8f 3f       	cpi	r24, 0xFF	; 255
     7fc:	c1 f3       	breq	.-16     	; 0x7ee <KPD_Interface_user+0x292>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     7fe:	81 33       	cpi	r24, 0x31	; 49
     800:	29 f4       	brne	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 f6 07 	call	0xfec	; 0xfec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     812:	b7 c0       	rjmp	.+366    	; 0x982 <__stack+0x123>
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     814:	4d e6       	ldi	r20, 0x6D	; 109
     816:	52 e0       	ldi	r21, 0x02	; 2
     818:	63 e0       	ldi	r22, 0x03	; 3
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_voidGetPinValue>
                LCD_voidClear();
     820:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
                if (led_status == 1)
     824:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <led_status>
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	f9 f4       	brne	.+62     	; 0x86a <__stack+0xb>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     82c:	86 e0       	ldi	r24, 0x06	; 6
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     834:	80 ec       	ldi	r24, 0xC0	; 192
     836:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     83a:	8c e9       	ldi	r24, 0x9C	; 156
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     842:	04 c0       	rjmp	.+8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     844:	81 e6       	ldi	r24, 0x61	; 97
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     84c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     850:	8f 3f       	cpi	r24, 0xFF	; 255
     852:	c1 f3       	breq	.-16     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     854:	81 33       	cpi	r24, 0x31	; 49
     856:	29 f4       	brne	.+10     	; 0x862 <__stack+0x3>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	63 e0       	ldi	r22, 0x03	; 3
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     868:	8c c0       	rjmp	.+280    	; 0x982 <__stack+0x123>
                }
                else if (led_status == 0)
     86a:	81 11       	cpse	r24, r1
     86c:	8a c0       	rjmp	.+276    	; 0x982 <__stack+0x123>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     86e:	84 e1       	ldi	r24, 0x14	; 20
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     876:	80 ec       	ldi	r24, 0xC0	; 192
     878:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     87c:	8c eb       	ldi	r24, 0xBC	; 188
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     884:	04 c0       	rjmp	.+8      	; 0x88e <__stack+0x2f>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     886:	81 e6       	ldi	r24, 0x61	; 97
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     88e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     892:	8f 3f       	cpi	r24, 0xFF	; 255
     894:	c1 f3       	breq	.-16     	; 0x886 <__stack+0x27>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     896:	81 33       	cpi	r24, 0x31	; 49
     898:	29 f4       	brne	.+10     	; 0x8a4 <__stack+0x45>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	63 e0       	ldi	r22, 0x03	; 3
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0e 94 f6 07 	call	0xfec	; 0xfec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     8aa:	6b c0       	rjmp	.+214    	; 0x982 <__stack+0x123>
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     8ac:	4d e6       	ldi	r20, 0x6D	; 109
     8ae:	52 e0       	ldi	r21, 0x02	; 2
     8b0:	62 e0       	ldi	r22, 0x02	; 2
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_voidGetPinValue>
                LCD_voidClear();
     8b8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
                if (led_status == 1)
     8bc:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <led_status>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	f9 f4       	brne	.+62     	; 0x902 <__stack+0xa3>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     8c4:	83 e2       	ldi	r24, 0x23	; 35
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     8cc:	80 ec       	ldi	r24, 0xC0	; 192
     8ce:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     8d2:	8c e9       	ldi	r24, 0x9C	; 156
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <__stack+0x85>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     8dc:	81 e6       	ldi	r24, 0x61	; 97
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     8e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     8e8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ea:	c1 f3       	breq	.-16     	; 0x8dc <__stack+0x7d>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     8ec:	81 33       	cpi	r24, 0x31	; 49
     8ee:	29 f4       	brne	.+10     	; 0x8fa <__stack+0x9b>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	62 e0       	ldi	r22, 0x02	; 2
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     8fa:	8f ef       	ldi	r24, 0xFF	; 255
     8fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     900:	40 c0       	rjmp	.+128    	; 0x982 <__stack+0x123>
                }
                else if (led_status == 0)
     902:	81 11       	cpse	r24, r1
     904:	3e c0       	rjmp	.+124    	; 0x982 <__stack+0x123>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     906:	81 e3       	ldi	r24, 0x31	; 49
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     90e:	80 ec       	ldi	r24, 0xC0	; 192
     910:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     914:	8c eb       	ldi	r24, 0xBC	; 188
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     91e:	81 e6       	ldi	r24, 0x61	; 97
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 6c 05 	call	0xad8	; 0xad8 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     926:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     92a:	8f 3f       	cpi	r24, 0xFF	; 255
     92c:	c1 f3       	breq	.-16     	; 0x91e <__stack+0xbf>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     92e:	81 33       	cpi	r24, 0x31	; 49
     930:	29 f4       	brne	.+10     	; 0x93c <__stack+0xdd>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     932:	41 e0       	ldi	r20, 0x01	; 1
     934:	62 e0       	ldi	r22, 0x02	; 2
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	0e 94 f6 07 	call	0xfec	; 0xfec <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     942:	1f c0       	rjmp	.+62     	; 0x982 <__stack+0x123>
                break;
                // if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     944:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_voidClear>
                if (led_status == 1)
     948:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <led_status>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	61 f4       	brne	.+24     	; 0x968 <__stack+0x109>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     950:	80 e4       	ldi	r24, 0x40	; 64
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     958:	80 ec       	ldi	r24, 0xC0	; 192
     95a:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     95e:	8c e9       	ldi	r24, 0x9C	; 156
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
     966:	0d c0       	rjmp	.+26     	; 0x982 <__stack+0x123>
                }
                else if (led_status == 0)
     968:	81 11       	cpse	r24, r1
     96a:	0b c0       	rjmp	.+22     	; 0x982 <__stack+0x123>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     96c:	8e e4       	ldi	r24, 0x4E	; 78
     96e:	92 e0       	ldi	r25, 0x02	; 2
     970:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     974:	80 ec       	ldi	r24, 0xC0	; 192
     976:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     97a:	8c eb       	ldi	r24, 0xBC	; 188
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_voidDisplayStringDelay>
                }
                break;

            }

            local_lightNum = KPD_Not_Pressed;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightNum>
            Local_copyKPDValue = KPD_Not_Pressed;
     988:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Local_copyKPDValue>
     98c:	08 95       	ret

0000098e <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     98e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <UART_voidInit>
     992:	08 95       	ret

00000994 <EEPROM_voidInit>:
	{
		//error
	}
	
	
}
     994:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <TWI_voidInitMaster>
     998:	08 95       	ret

0000099a <EEPROM_voidWritePage>:
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	61 15       	cp	r22, r1
     9a4:	71 05       	cpc	r23, r1
     9a6:	f9 f0       	breq	.+62     	; 0x9e6 <EEPROM_voidWritePage+0x4c>
     9a8:	8b 01       	movw	r16, r22
     9aa:	d8 2f       	mov	r29, r24
     9ac:	c9 2f       	mov	r28, r25
     9ae:	c0 65       	ori	r28, 0x50	; 80
     9b0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <TWI_voidSendStartCondition>
     9b4:	8c 2f       	mov	r24, r28
     9b6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TWI_voidSendSlaveAddWithWrite>
     9ba:	8d 2f       	mov	r24, r29
     9bc:	0e 94 a9 0a 	call	0x1552	; 0x1552 <TWI_voidTransmitMasterDataByte>
     9c0:	c0 e0       	ldi	r28, 0x00	; 0
     9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <EEPROM_voidWritePage+0x38>
     9c4:	f8 01       	movw	r30, r16
     9c6:	ec 0f       	add	r30, r28
     9c8:	f1 1d       	adc	r31, r1
     9ca:	80 81       	ld	r24, Z
     9cc:	0e 94 a9 0a 	call	0x1552	; 0x1552 <TWI_voidTransmitMasterDataByte>
     9d0:	cf 5f       	subi	r28, 0xFF	; 255
     9d2:	c8 30       	cpi	r28, 0x08	; 8
     9d4:	b8 f3       	brcs	.-18     	; 0x9c4 <EEPROM_voidWritePage+0x2a>
     9d6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <TWI_voidSendStopCondition>
     9da:	8f e1       	ldi	r24, 0x1F	; 31
     9dc:	9e e4       	ldi	r25, 0x4E	; 78
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <EEPROM_voidWritePage+0x44>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <EEPROM_voidWritePage+0x4a>
     9e4:	00 00       	nop
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	08 95       	ret

000009f0 <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
     9fc:	41 15       	cp	r20, r1
     9fe:	51 05       	cpc	r21, r1
     a00:	81 f1       	breq	.+96     	; 0xa62 <EEPROM_voidSequentialRead+0x72>
     a02:	61 15       	cp	r22, r1
     a04:	22 e0       	ldi	r18, 0x02	; 2
     a06:	72 07       	cpc	r23, r18
     a08:	60 f5       	brcc	.+88     	; 0xa62 <EEPROM_voidSequentialRead+0x72>
     a0a:	8a 01       	movw	r16, r20
     a0c:	7b 01       	movw	r14, r22
     a0e:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     a10:	c9 2f       	mov	r28, r25
     a12:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
     a14:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     a18:	8c 2f       	mov	r24, r28
     a1a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     a1e:	8d 2f       	mov	r24, r29
     a20:	0e 94 a9 0a 	call	0x1552	; 0x1552 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
     a24:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
     a28:	8c 2f       	mov	r24, r28
     a2a:	0e 94 94 0a 	call	0x1528	; 0x1528 <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
     a2e:	c0 e0       	ldi	r28, 0x00	; 0
     a30:	d0 e0       	ldi	r29, 0x00	; 0
     a32:	06 c0       	rjmp	.+12     	; 0xa40 <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
     a34:	c8 01       	movw	r24, r16
     a36:	8c 0f       	add	r24, r28
     a38:	9d 1f       	adc	r25, r29
     a3a:	0e 94 b5 0a 	call	0x156a	; 0x156a <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
     a3e:	21 96       	adiw	r28, 0x01	; 1
     a40:	c7 01       	movw	r24, r14
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	c8 17       	cp	r28, r24
     a46:	d9 07       	cpc	r29, r25
     a48:	a8 f3       	brcs	.-22     	; 0xa34 <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
     a4a:	80 0f       	add	r24, r16
     a4c:	91 1f       	adc	r25, r17
     a4e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
     a52:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <TWI_voidSendStopCondition>
     a56:	8f e1       	ldi	r24, 0x1F	; 31
     a58:	9e e4       	ldi	r25, 0x4E	; 78
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <EEPROM_voidSequentialRead+0x6a>
     a5e:	00 c0       	rjmp	.+0      	; 0xa60 <EEPROM_voidSequentialRead+0x70>
     a60:	00 00       	nop
	{
		//error state
	}


     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ff 90       	pop	r15
     a6c:	ef 90       	pop	r14
     a6e:	08 95       	ret

00000a70 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	64 e0       	ldi	r22, 0x04	; 4
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     a7a:	41 e0       	ldi	r20, 0x01	; 1
     a7c:	65 e0       	ldi	r22, 0x05	; 5
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	66 e0       	ldi	r22, 0x06	; 6
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     a98:	40 e0       	ldi	r20, 0x00	; 0
     a9a:	64 e0       	ldi	r22, 0x04	; 4
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	65 e0       	ldi	r22, 0x05	; 5
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	66 e0       	ldi	r22, 0x06	; 6
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     ab6:	63 e0       	ldi	r22, 0x03	; 3
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     abe:	64 e0       	ldi	r22, 0x04	; 4
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     ac6:	65 e0       	ldi	r22, 0x05	; 5
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     ace:	66 e0       	ldi	r22, 0x06	; 6
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	0e 94 66 09 	call	0x12cc	; 0x12cc <DIO_voidActivePinInPullUpResistance>
     ad6:	08 95       	ret

00000ad8 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     ad8:	6f 92       	push	r6
     ada:	7f 92       	push	r7
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	6b 97       	sbiw	r28, 0x1b	; 27
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     b04:	00 97       	sbiw	r24, 0x00	; 0
     b06:	09 f4       	brne	.+2      	; 0xb0a <KPD_voidGetValue+0x32>
     b08:	7e c0       	rjmp	.+252    	; 0xc06 <KPD_voidGetValue+0x12e>
     b0a:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	88 8f       	std	Y+24, r24	; 0x18
     b10:	89 8f       	std	Y+25, r24	; 0x19
     b12:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     b14:	34 e0       	ldi	r19, 0x04	; 4
     b16:	3d 8b       	std	Y+21, r19	; 0x15
     b18:	25 e0       	ldi	r18, 0x05	; 5
     b1a:	2e 8b       	std	Y+22, r18	; 0x16
     b1c:	96 e0       	ldi	r25, 0x06	; 6
     b1e:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	89 8b       	std	Y+17, r24	; 0x11
     b24:	8a 8b       	std	Y+18, r24	; 0x12
     b26:	8b 8b       	std	Y+19, r24	; 0x13
     b28:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	8d 87       	std	Y+13, r24	; 0x0d
     b2e:	3e 87       	std	Y+14, r19	; 0x0e
     b30:	2f 87       	std	Y+15, r18	; 0x0f
     b32:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	ef e7       	ldi	r30, 0x7F	; 127
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	de 01       	movw	r26, r28
     b3c:	11 96       	adiw	r26, 0x01	; 1
     b3e:	01 90       	ld	r0, Z+
     b40:	0d 92       	st	X+, r0
     b42:	8a 95       	dec	r24
     b44:	e1 f7       	brne	.-8      	; 0xb3e <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	f5 01       	movw	r30, r10
     b4a:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     b4c:	81 2c       	mov	r8, r1
     b4e:	57 c0       	rjmp	.+174    	; 0xbfe <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     b50:	c8 2c       	mov	r12, r8
     b52:	d1 2c       	mov	r13, r1
     b54:	e5 e1       	ldi	r30, 0x15	; 21
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	ec 0f       	add	r30, r28
     b5a:	fd 1f       	adc	r31, r29
     b5c:	ec 0d       	add	r30, r12
     b5e:	fd 1d       	adc	r31, r13
     b60:	60 80       	ld	r6, Z
     b62:	e8 e1       	ldi	r30, 0x18	; 24
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	ec 0f       	add	r30, r28
     b68:	fd 1f       	adc	r31, r29
     b6a:	ec 0d       	add	r30, r12
     b6c:	fd 1d       	adc	r31, r13
     b6e:	70 80       	ld	r7, Z
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	66 2d       	mov	r22, r6
     b74:	87 2d       	mov	r24, r7
     b76:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     b7a:	10 e0       	ldi	r17, 0x00	; 0
     b7c:	38 c0       	rjmp	.+112    	; 0xbee <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     b7e:	e1 2e       	mov	r14, r17
     b80:	f1 2c       	mov	r15, r1
     b82:	ed e0       	ldi	r30, 0x0D	; 13
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	ec 0f       	add	r30, r28
     b88:	fd 1f       	adc	r31, r29
     b8a:	ee 0d       	add	r30, r14
     b8c:	ff 1d       	adc	r31, r15
     b8e:	00 81       	ld	r16, Z
     b90:	e1 e1       	ldi	r30, 0x11	; 17
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ec 0f       	add	r30, r28
     b96:	fd 1f       	adc	r31, r29
     b98:	ee 0d       	add	r30, r14
     b9a:	ff 1d       	adc	r31, r15
     b9c:	90 80       	ld	r9, Z
     b9e:	ae 01       	movw	r20, r28
     ba0:	45 5e       	subi	r20, 0xE5	; 229
     ba2:	5f 4f       	sbci	r21, 0xFF	; 255
     ba4:	60 2f       	mov	r22, r16
     ba6:	89 2d       	mov	r24, r9
     ba8:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     bac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bae:	81 11       	cpse	r24, r1
     bb0:	1d c0       	rjmp	.+58     	; 0xbec <KPD_voidGetValue+0x114>
     bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     bb4:	ae 01       	movw	r20, r28
     bb6:	45 5e       	subi	r20, 0xE5	; 229
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	60 2f       	mov	r22, r16
     bbc:	89 2d       	mov	r24, r9
     bbe:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     bc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bc4:	88 23       	and	r24, r24
     bc6:	b1 f3       	breq	.-20     	; 0xbb4 <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     bc8:	c7 01       	movw	r24, r14
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	8c 0f       	add	r24, r28
     bd8:	9d 1f       	adc	r25, r29
     bda:	e8 0e       	add	r14, r24
     bdc:	f9 1e       	adc	r15, r25
     bde:	f7 01       	movw	r30, r14
     be0:	ec 0d       	add	r30, r12
     be2:	fd 1d       	adc	r31, r13
     be4:	80 81       	ld	r24, Z
     be6:	f5 01       	movw	r30, r10
     be8:	80 83       	st	Z, r24
     bea:	0d c0       	rjmp	.+26     	; 0xc06 <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     bec:	1f 5f       	subi	r17, 0xFF	; 255
     bee:	14 30       	cpi	r17, 0x04	; 4
     bf0:	30 f2       	brcs	.-116    	; 0xb7e <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	66 2d       	mov	r22, r6
     bf6:	87 2d       	mov	r24, r7
     bf8:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     bfc:	83 94       	inc	r8
     bfe:	f2 e0       	ldi	r31, 0x02	; 2
     c00:	f8 15       	cp	r31, r8
     c02:	08 f0       	brcs	.+2      	; 0xc06 <KPD_voidGetValue+0x12e>
     c04:	a5 cf       	rjmp	.-182    	; 0xb50 <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
     c06:	6b 96       	adiw	r28, 0x1b	; 27
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	7f 90       	pop	r7
     c2c:	6f 90       	pop	r6
     c2e:	08 95       	ret

00000c30 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     c30:	cf 93       	push	r28
     c32:	c8 2f       	mov	r28, r24
     c34:	80 ff       	sbrs	r24, 0
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <PRV_voidWriteHalfPort+0x14>
     c38:	41 e0       	ldi	r20, 0x01	; 1
     c3a:	64 e0       	ldi	r22, 0x04	; 4
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <PRV_voidWriteHalfPort+0x1e>
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	64 e0       	ldi	r22, 0x04	; 4
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c4e:	c1 ff       	sbrs	r28, 1
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <PRV_voidWriteHalfPort+0x2e>
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	65 e0       	ldi	r22, 0x05	; 5
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c5c:	05 c0       	rjmp	.+10     	; 0xc68 <PRV_voidWriteHalfPort+0x38>
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	65 e0       	ldi	r22, 0x05	; 5
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c68:	c2 ff       	sbrs	r28, 2
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <PRV_voidWriteHalfPort+0x48>
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	66 e0       	ldi	r22, 0x06	; 6
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c76:	05 c0       	rjmp	.+10     	; 0xc82 <PRV_voidWriteHalfPort+0x52>
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	66 e0       	ldi	r22, 0x06	; 6
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c82:	c3 ff       	sbrs	r28, 3
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <PRV_voidWriteHalfPort+0x62>
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	67 e0       	ldi	r22, 0x07	; 7
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c90:	05 c0       	rjmp	.+10     	; 0xc9c <PRV_voidWriteHalfPort+0x6c>
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	67 e0       	ldi	r22, 0x07	; 7
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <LCD_voidSendCommand>:
     ca0:	cf 93       	push	r28
     ca2:	c8 2f       	mov	r28, r24
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	62 e0       	ldi	r22, 0x02	; 2
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     cb8:	8c 2f       	mov	r24, r28
     cba:	82 95       	swap	r24
     cbc:	8f 70       	andi	r24, 0x0F	; 15
     cbe:	0e 94 18 06 	call	0xc30	; 0xc30 <PRV_voidWriteHalfPort>
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	63 e0       	ldi	r22, 0x03	; 3
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     ccc:	8f e9       	ldi	r24, 0x9F	; 159
     cce:	9f e0       	ldi	r25, 0x0F	; 15
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <LCD_voidSendCommand+0x30>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <LCD_voidSendCommand+0x36>
     cd6:	00 00       	nop
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	63 e0       	ldi	r22, 0x03	; 3
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     ce2:	8c 2f       	mov	r24, r28
     ce4:	0e 94 18 06 	call	0xc30	; 0xc30 <PRV_voidWriteHalfPort>
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	63 e0       	ldi	r22, 0x03	; 3
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     cf2:	8f e9       	ldi	r24, 0x9F	; 159
     cf4:	9f e0       	ldi	r25, 0x0F	; 15
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <LCD_voidSendCommand+0x56>
     cfa:	00 c0       	rjmp	.+0      	; 0xcfc <LCD_voidSendCommand+0x5c>
     cfc:	00 00       	nop
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	63 e0       	ldi	r22, 0x03	; 3
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <LCD_voidInit>:
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	62 e0       	ldi	r22, 0x02	; 2
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	63 e0       	ldi	r22, 0x03	; 3
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	64 e0       	ldi	r22, 0x04	; 4
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	65 e0       	ldi	r22, 0x05	; 5
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	66 e0       	ldi	r22, 0x06	; 6
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	67 e0       	ldi	r22, 0x07	; 7
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     d52:	2f e7       	ldi	r18, 0x7F	; 127
     d54:	85 eb       	ldi	r24, 0xB5	; 181
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	21 50       	subi	r18, 0x01	; 1
     d5a:	80 40       	sbci	r24, 0x00	; 0
     d5c:	90 40       	sbci	r25, 0x00	; 0
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <LCD_voidInit+0x4c>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <LCD_voidInit+0x56>
     d62:	00 00       	nop
     d64:	40 e0       	ldi	r20, 0x00	; 0
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	62 e0       	ldi	r22, 0x02	; 2
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	0e 94 18 06 	call	0xc30	; 0xc30 <PRV_voidWriteHalfPort>
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	63 e0       	ldi	r22, 0x03	; 3
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     d88:	8f e9       	ldi	r24, 0x9F	; 159
     d8a:	9f e0       	ldi	r25, 0x0F	; 15
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <LCD_voidInit+0x80>
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <LCD_voidInit+0x86>
     d92:	00 00       	nop
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	63 e0       	ldi	r22, 0x03	; 3
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     d9e:	88 e2       	ldi	r24, 0x28	; 40
     da0:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
     da4:	90 ef       	ldi	r25, 0xF0	; 240
     da6:	9a 95       	dec	r25
     da8:	f1 f7       	brne	.-4      	; 0xda6 <LCD_voidInit+0x9a>
     daa:	8f e0       	ldi	r24, 0x0F	; 15
     dac:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
     db0:	20 ef       	ldi	r18, 0xF0	; 240
     db2:	2a 95       	dec	r18
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <LCD_voidInit+0xa6>
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
     dbc:	8f e3       	ldi	r24, 0x3F	; 63
     dbe:	9f e1       	ldi	r25, 0x1F	; 31
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <LCD_voidInit+0xb4>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <LCD_voidInit+0xba>
     dc6:	00 00       	nop
     dc8:	86 e0       	ldi	r24, 0x06	; 6
     dca:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
     dce:	08 95       	ret

00000dd0 <LCD_voidDisplayChar>:
     dd0:	cf 93       	push	r28
     dd2:	c8 2f       	mov	r28, r24
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	62 e0       	ldi	r22, 0x02	; 2
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     de8:	8c 2f       	mov	r24, r28
     dea:	82 95       	swap	r24
     dec:	8f 70       	andi	r24, 0x0F	; 15
     dee:	0e 94 18 06 	call	0xc30	; 0xc30 <PRV_voidWriteHalfPort>
     df2:	41 e0       	ldi	r20, 0x01	; 1
     df4:	63 e0       	ldi	r22, 0x03	; 3
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     dfc:	8f e9       	ldi	r24, 0x9F	; 159
     dfe:	9f e0       	ldi	r25, 0x0F	; 15
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <LCD_voidDisplayChar+0x30>
     e04:	00 c0       	rjmp	.+0      	; 0xe06 <LCD_voidDisplayChar+0x36>
     e06:	00 00       	nop
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	63 e0       	ldi	r22, 0x03	; 3
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     e12:	8c 2f       	mov	r24, r28
     e14:	0e 94 18 06 	call	0xc30	; 0xc30 <PRV_voidWriteHalfPort>
     e18:	41 e0       	ldi	r20, 0x01	; 1
     e1a:	63 e0       	ldi	r22, 0x03	; 3
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     e22:	8f e9       	ldi	r24, 0x9F	; 159
     e24:	9f e0       	ldi	r25, 0x0F	; 15
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <LCD_voidDisplayChar+0x56>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <LCD_voidDisplayChar+0x5c>
     e2c:	00 00       	nop
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	63 e0       	ldi	r22, 0x03	; 3
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <LCD_voidDisplayString>:
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	29 f4       	brne	.+10     	; 0xe50 <LCD_voidDisplayString+0x14>
     e46:	0c c0       	rjmp	.+24     	; 0xe60 <LCD_voidDisplayString+0x24>
     e48:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_voidDisplayChar>
     e4c:	cf 5f       	subi	r28, 0xFF	; 255
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <LCD_voidDisplayString+0x18>
     e50:	8c 01       	movw	r16, r24
     e52:	c0 e0       	ldi	r28, 0x00	; 0
     e54:	f8 01       	movw	r30, r16
     e56:	ec 0f       	add	r30, r28
     e58:	f1 1d       	adc	r31, r1
     e5a:	80 81       	ld	r24, Z
     e5c:	81 11       	cpse	r24, r1
     e5e:	f4 cf       	rjmp	.-24     	; 0xe48 <LCD_voidDisplayString+0xc>
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <LCD_voidDisplayStringDelay>:
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	71 f4       	brne	.+28     	; 0xe8e <LCD_voidDisplayStringDelay+0x26>
     e72:	15 c0       	rjmp	.+42     	; 0xe9e <LCD_voidDisplayStringDelay+0x36>
     e74:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_voidDisplayChar>
     e78:	cf 5f       	subi	r28, 0xFF	; 255
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	80 e7       	ldi	r24, 0x70	; 112
     e7e:	92 e0       	ldi	r25, 0x02	; 2
     e80:	21 50       	subi	r18, 0x01	; 1
     e82:	80 40       	sbci	r24, 0x00	; 0
     e84:	90 40       	sbci	r25, 0x00	; 0
     e86:	e1 f7       	brne	.-8      	; 0xe80 <LCD_voidDisplayStringDelay+0x18>
     e88:	00 c0       	rjmp	.+0      	; 0xe8a <LCD_voidDisplayStringDelay+0x22>
     e8a:	00 00       	nop
     e8c:	02 c0       	rjmp	.+4      	; 0xe92 <LCD_voidDisplayStringDelay+0x2a>
     e8e:	8c 01       	movw	r16, r24
     e90:	c0 e0       	ldi	r28, 0x00	; 0
     e92:	f8 01       	movw	r30, r16
     e94:	ec 0f       	add	r30, r28
     e96:	f1 1d       	adc	r31, r1
     e98:	80 81       	ld	r24, Z
     e9a:	81 11       	cpse	r24, r1
     e9c:	eb cf       	rjmp	.-42     	; 0xe74 <LCD_voidDisplayStringDelay+0xc>
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <LCD_voidDisplayNumber>:
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <LCD_voidDisplayNumber+0xa>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <LCD_voidDisplayNumber+0xc>
     eb2:	1f 92       	push	r1
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	26 2f       	mov	r18, r22
     eba:	10 e0       	ldi	r17, 0x00	; 0
     ebc:	08 c0       	rjmp	.+16     	; 0xece <LCD_voidDisplayNumber+0x28>
     ebe:	1f 5f       	subi	r17, 0xFF	; 255
     ec0:	ed ec       	ldi	r30, 0xCD	; 205
     ec2:	6e 9f       	mul	r22, r30
     ec4:	61 2d       	mov	r22, r1
     ec6:	11 24       	eor	r1, r1
     ec8:	66 95       	lsr	r22
     eca:	66 95       	lsr	r22
     ecc:	66 95       	lsr	r22
     ece:	61 11       	cpse	r22, r1
     ed0:	f6 cf       	rjmp	.-20     	; 0xebe <LCD_voidDisplayNumber+0x18>
     ed2:	00 e0       	ldi	r16, 0x00	; 0
     ed4:	1a c0       	rjmp	.+52     	; 0xf0a <LCD_voidDisplayNumber+0x64>
     ed6:	62 2f       	mov	r22, r18
     ed8:	2a e0       	ldi	r18, 0x0A	; 10
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__udivmodsi4>
     ee4:	73 2f       	mov	r23, r19
     ee6:	84 2f       	mov	r24, r20
     ee8:	95 2f       	mov	r25, r21
     eea:	a0 2f       	mov	r26, r16
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	e1 2f       	mov	r30, r17
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	ea 1b       	sub	r30, r26
     ef6:	fb 0b       	sbc	r31, r27
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	4c 0f       	add	r20, r28
     efe:	5d 1f       	adc	r21, r29
     f00:	e4 0f       	add	r30, r20
     f02:	f5 1f       	adc	r31, r21
     f04:	60 5d       	subi	r22, 0xD0	; 208
     f06:	60 83       	st	Z, r22
     f08:	0f 5f       	subi	r16, 0xFF	; 255
     f0a:	01 17       	cp	r16, r17
     f0c:	20 f3       	brcs	.-56     	; 0xed6 <LCD_voidDisplayNumber+0x30>
     f0e:	e1 e0       	ldi	r30, 0x01	; 1
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	ec 0f       	add	r30, r28
     f14:	fd 1f       	adc	r31, r29
     f16:	e1 0f       	add	r30, r17
     f18:	f1 1d       	adc	r31, r1
     f1a:	10 82       	st	Z, r1
     f1c:	10 e0       	ldi	r17, 0x00	; 0
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <LCD_voidDisplayNumber+0x80>
     f20:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_voidDisplayChar>
     f24:	1f 5f       	subi	r17, 0xFF	; 255
     f26:	e1 e0       	ldi	r30, 0x01	; 1
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ec 0f       	add	r30, r28
     f2c:	fd 1f       	adc	r31, r29
     f2e:	e1 0f       	add	r30, r17
     f30:	f1 1d       	adc	r31, r1
     f32:	80 81       	ld	r24, Z
     f34:	81 11       	cpse	r24, r1
     f36:	f4 cf       	rjmp	.-24     	; 0xf20 <LCD_voidDisplayNumber+0x7a>
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret

00000f4c <LCD_voidClear>:
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	62 e0       	ldi	r22, 0x02	; 2
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	0e 94 18 06 	call	0xc30	; 0xc30 <PRV_voidWriteHalfPort>
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	63 e0       	ldi	r22, 0x03	; 3
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     f70:	8f e9       	ldi	r24, 0x9F	; 159
     f72:	9f e0       	ldi	r25, 0x0F	; 15
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <LCD_voidClear+0x28>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <LCD_voidClear+0x2e>
     f7a:	00 00       	nop
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	63 e0       	ldi	r22, 0x03	; 3
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 18 06 	call	0xc30	; 0xc30 <PRV_voidWriteHalfPort>
     f8c:	41 e0       	ldi	r20, 0x01	; 1
     f8e:	63 e0       	ldi	r22, 0x03	; 3
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     f96:	8f e9       	ldi	r24, 0x9F	; 159
     f98:	9f e0       	ldi	r25, 0x0F	; 15
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <LCD_voidClear+0x4e>
     f9e:	00 c0       	rjmp	.+0      	; 0xfa0 <LCD_voidClear+0x54>
     fa0:	00 00       	nop
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	63 e0       	ldi	r22, 0x03	; 3
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
     fac:	08 95       	ret

00000fae <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
	if(copy_u8Position<40)
     fb2:	68 32       	cpi	r22, 0x28	; 40
     fb4:	a0 f4       	brcc	.+40     	; 0xfde <LCD_voidGoTOSpecificPosition+0x30>
     fb6:	c6 2f       	mov	r28, r22
     fb8:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     fc0:	d1 30       	cpi	r29, 0x01	; 1
     fc2:	19 f0       	breq	.+6      	; 0xfca <LCD_voidGoTOSpecificPosition+0x1c>
     fc4:	d2 30       	cpi	r29, 0x02	; 2
     fc6:	31 f0       	breq	.+12     	; 0xfd4 <LCD_voidGoTOSpecificPosition+0x26>
     fc8:	0a c0       	rjmp	.+20     	; 0xfde <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     fca:	8c 2f       	mov	r24, r28
     fcc:	80 68       	ori	r24, 0x80	; 128
     fce:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
		
			
			break;
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     fd4:	80 e4       	ldi	r24, 0x40	; 64
     fd6:	8c 0f       	add	r24, r28
     fd8:	80 68       	ori	r24, 0x80	; 128
     fda:	0e 94 50 06 	call	0xca0	; 0xca0 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_voidSetPinDirection>
     fea:	08 95       	ret

00000fec <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     fec:	41 30       	cpi	r20, 0x01	; 1
     fee:	19 f0       	breq	.+6      	; 0xff6 <LED_voidOn+0xa>
     ff0:	42 30       	cpi	r20, 0x02	; 2
     ff2:	29 f0       	breq	.+10     	; 0xffe <LED_voidOn+0x12>
     ff4:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
		break;
     ffc:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
    1004:	08 95       	ret

00001006 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    1006:	41 30       	cpi	r20, 0x01	; 1
    1008:	19 f0       	breq	.+6      	; 0x1010 <LED_voidOff+0xa>
    100a:	42 30       	cpi	r20, 0x02	; 2
    100c:	29 f0       	breq	.+10     	; 0x1018 <LED_voidOff+0x12>
    100e:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
		break;
    1016:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    1018:	41 e0       	ldi	r20, 0x01	; 1
    101a:	0e 94 ab 08 	call	0x1156	; 0x1156 <DIO_voidSetPinValue>
    101e:	08 95       	ret

00001020 <main>:

extern u8 global_accessType;

int main()
{
	APP_init();
    1020:	0e 94 32 02 	call	0x464	; 0x464 <APP_init>
    1024:	2f ef       	ldi	r18, 0xFF	; 255
    1026:	83 ed       	ldi	r24, 0xD3	; 211
    1028:	90 e3       	ldi	r25, 0x30	; 48
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	80 40       	sbci	r24, 0x00	; 0
    102e:	90 40       	sbci	r25, 0x00	; 0
    1030:	e1 f7       	brne	.-8      	; 0x102a <main+0xa>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <main+0x14>
    1034:	00 00       	nop
_delay_ms(1000);


	while(1)
	{
		if (global_accessType ==accessPermited)
    1036:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__data_end>
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	19 f4       	brne	.+6      	; 0x1044 <main+0x24>
		{
		KPD_Interface_user();
    103e:	0e 94 ae 02 	call	0x55c	; 0x55c <KPD_Interface_user>
    1042:	f9 cf       	rjmp	.-14     	; 0x1036 <main+0x16>
		}
		else if (global_accessType ==accessDenied)
    1044:	81 11       	cpse	r24, r1
    1046:	f7 cf       	rjmp	.-18     	; 0x1036 <main+0x16>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
    1048:	8d e5       	ldi	r24, 0x5D	; 93
    104a:	92 e0       	ldi	r25, 0x02	; 2
    104c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <LCD_voidDisplayString>
		}
		
		
		
	}
}
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	08 95       	ret

00001056 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	08 f0       	brcs	.+2      	; 0x105c <DIO_voidSetPinDirection+0x6>
    105a:	7c c0       	rjmp	.+248    	; 0x1154 <DIO_voidSetPinDirection+0xfe>
    105c:	68 30       	cpi	r22, 0x08	; 8
    105e:	08 f0       	brcs	.+2      	; 0x1062 <DIO_voidSetPinDirection+0xc>
    1060:	79 c0       	rjmp	.+242    	; 0x1154 <DIO_voidSetPinDirection+0xfe>
    1062:	42 30       	cpi	r20, 0x02	; 2
    1064:	08 f0       	brcs	.+2      	; 0x1068 <DIO_voidSetPinDirection+0x12>
    1066:	76 c0       	rjmp	.+236    	; 0x1154 <DIO_voidSetPinDirection+0xfe>
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	19 f1       	breq	.+70     	; 0x10b2 <DIO_voidSetPinDirection+0x5c>
    106c:	30 f0       	brcs	.+12     	; 0x107a <DIO_voidSetPinDirection+0x24>
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	e1 f1       	breq	.+120    	; 0x10ea <DIO_voidSetPinDirection+0x94>
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	09 f4       	brne	.+2      	; 0x1078 <DIO_voidSetPinDirection+0x22>
    1076:	54 c0       	rjmp	.+168    	; 0x1120 <DIO_voidSetPinDirection+0xca>
    1078:	08 95       	ret
    107a:	44 23       	and	r20, r20
    107c:	71 f0       	breq	.+28     	; 0x109a <DIO_voidSetPinDirection+0x44>
    107e:	41 30       	cpi	r20, 0x01	; 1
    1080:	09 f0       	breq	.+2      	; 0x1084 <DIO_voidSetPinDirection+0x2e>
    1082:	68 c0       	rjmp	.+208    	; 0x1154 <DIO_voidSetPinDirection+0xfe>
    1084:	2a b3       	in	r18, 0x1a	; 26
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <DIO_voidSetPinDirection+0x3a>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	6a 95       	dec	r22
    1092:	e2 f7       	brpl	.-8      	; 0x108c <DIO_voidSetPinDirection+0x36>
    1094:	82 2b       	or	r24, r18
    1096:	8a bb       	out	0x1a, r24	; 26
    1098:	08 95       	ret
    109a:	2a b3       	in	r18, 0x1a	; 26
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_voidSetPinDirection+0x50>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	6a 95       	dec	r22
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_voidSetPinDirection+0x4c>
    10aa:	80 95       	com	r24
    10ac:	82 23       	and	r24, r18
    10ae:	8a bb       	out	0x1a, r24	; 26
    10b0:	08 95       	ret
    10b2:	44 23       	and	r20, r20
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <DIO_voidSetPinDirection+0x7c>
    10b6:	41 30       	cpi	r20, 0x01	; 1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <DIO_voidSetPinDirection+0x66>
    10ba:	4c c0       	rjmp	.+152    	; 0x1154 <DIO_voidSetPinDirection+0xfe>
    10bc:	27 b3       	in	r18, 0x17	; 23
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_voidSetPinDirection+0x72>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	6a 95       	dec	r22
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_voidSetPinDirection+0x6e>
    10cc:	82 2b       	or	r24, r18
    10ce:	87 bb       	out	0x17, r24	; 23
    10d0:	08 95       	ret
    10d2:	27 b3       	in	r18, 0x17	; 23
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_voidSetPinDirection+0x88>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	6a 95       	dec	r22
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_voidSetPinDirection+0x84>
    10e2:	80 95       	com	r24
    10e4:	82 23       	and	r24, r18
    10e6:	87 bb       	out	0x17, r24	; 23
    10e8:	08 95       	ret
    10ea:	44 23       	and	r20, r20
    10ec:	69 f0       	breq	.+26     	; 0x1108 <DIO_voidSetPinDirection+0xb2>
    10ee:	41 30       	cpi	r20, 0x01	; 1
    10f0:	89 f5       	brne	.+98     	; 0x1154 <DIO_voidSetPinDirection+0xfe>
    10f2:	24 b3       	in	r18, 0x14	; 20
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_voidSetPinDirection+0xa8>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	6a 95       	dec	r22
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_voidSetPinDirection+0xa4>
    1102:	82 2b       	or	r24, r18
    1104:	84 bb       	out	0x14, r24	; 20
    1106:	08 95       	ret
    1108:	24 b3       	in	r18, 0x14	; 20
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_voidSetPinDirection+0xbe>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	6a 95       	dec	r22
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_voidSetPinDirection+0xba>
    1118:	80 95       	com	r24
    111a:	82 23       	and	r24, r18
    111c:	84 bb       	out	0x14, r24	; 20
    111e:	08 95       	ret
    1120:	44 23       	and	r20, r20
    1122:	69 f0       	breq	.+26     	; 0x113e <DIO_voidSetPinDirection+0xe8>
    1124:	41 30       	cpi	r20, 0x01	; 1
    1126:	b1 f4       	brne	.+44     	; 0x1154 <DIO_voidSetPinDirection+0xfe>
    1128:	21 b3       	in	r18, 0x11	; 17
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_voidSetPinDirection+0xde>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	6a 95       	dec	r22
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_voidSetPinDirection+0xda>
    1138:	82 2b       	or	r24, r18
    113a:	81 bb       	out	0x11, r24	; 17
    113c:	08 95       	ret
    113e:	21 b3       	in	r18, 0x11	; 17
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_voidSetPinDirection+0xf4>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	6a 95       	dec	r22
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_voidSetPinDirection+0xf0>
    114e:	80 95       	com	r24
    1150:	82 23       	and	r24, r18
    1152:	81 bb       	out	0x11, r24	; 17
    1154:	08 95       	ret

00001156 <DIO_voidSetPinValue>:
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	08 f0       	brcs	.+2      	; 0x115c <DIO_voidSetPinValue+0x6>
    115a:	7c c0       	rjmp	.+248    	; 0x1254 <DIO_voidSetPinValue+0xfe>
    115c:	68 30       	cpi	r22, 0x08	; 8
    115e:	08 f0       	brcs	.+2      	; 0x1162 <DIO_voidSetPinValue+0xc>
    1160:	79 c0       	rjmp	.+242    	; 0x1254 <DIO_voidSetPinValue+0xfe>
    1162:	42 30       	cpi	r20, 0x02	; 2
    1164:	08 f0       	brcs	.+2      	; 0x1168 <DIO_voidSetPinValue+0x12>
    1166:	76 c0       	rjmp	.+236    	; 0x1254 <DIO_voidSetPinValue+0xfe>
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	19 f1       	breq	.+70     	; 0x11b2 <DIO_voidSetPinValue+0x5c>
    116c:	30 f0       	brcs	.+12     	; 0x117a <DIO_voidSetPinValue+0x24>
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	e1 f1       	breq	.+120    	; 0x11ea <DIO_voidSetPinValue+0x94>
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	09 f4       	brne	.+2      	; 0x1178 <DIO_voidSetPinValue+0x22>
    1176:	54 c0       	rjmp	.+168    	; 0x1220 <DIO_voidSetPinValue+0xca>
    1178:	08 95       	ret
    117a:	44 23       	and	r20, r20
    117c:	71 f0       	breq	.+28     	; 0x119a <DIO_voidSetPinValue+0x44>
    117e:	41 30       	cpi	r20, 0x01	; 1
    1180:	09 f0       	breq	.+2      	; 0x1184 <DIO_voidSetPinValue+0x2e>
    1182:	68 c0       	rjmp	.+208    	; 0x1254 <DIO_voidSetPinValue+0xfe>
    1184:	2b b3       	in	r18, 0x1b	; 27
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_voidSetPinValue+0x3a>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	6a 95       	dec	r22
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_voidSetPinValue+0x36>
    1194:	82 2b       	or	r24, r18
    1196:	8b bb       	out	0x1b, r24	; 27
    1198:	08 95       	ret
    119a:	2b b3       	in	r18, 0x1b	; 27
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_voidSetPinValue+0x50>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	6a 95       	dec	r22
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_voidSetPinValue+0x4c>
    11aa:	80 95       	com	r24
    11ac:	82 23       	and	r24, r18
    11ae:	8b bb       	out	0x1b, r24	; 27
    11b0:	08 95       	ret
    11b2:	44 23       	and	r20, r20
    11b4:	71 f0       	breq	.+28     	; 0x11d2 <DIO_voidSetPinValue+0x7c>
    11b6:	41 30       	cpi	r20, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <DIO_voidSetPinValue+0x66>
    11ba:	4c c0       	rjmp	.+152    	; 0x1254 <DIO_voidSetPinValue+0xfe>
    11bc:	28 b3       	in	r18, 0x18	; 24
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_voidSetPinValue+0x72>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	6a 95       	dec	r22
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_voidSetPinValue+0x6e>
    11cc:	82 2b       	or	r24, r18
    11ce:	88 bb       	out	0x18, r24	; 24
    11d0:	08 95       	ret
    11d2:	28 b3       	in	r18, 0x18	; 24
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_voidSetPinValue+0x88>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	6a 95       	dec	r22
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_voidSetPinValue+0x84>
    11e2:	80 95       	com	r24
    11e4:	82 23       	and	r24, r18
    11e6:	88 bb       	out	0x18, r24	; 24
    11e8:	08 95       	ret
    11ea:	44 23       	and	r20, r20
    11ec:	69 f0       	breq	.+26     	; 0x1208 <DIO_voidSetPinValue+0xb2>
    11ee:	41 30       	cpi	r20, 0x01	; 1
    11f0:	89 f5       	brne	.+98     	; 0x1254 <DIO_voidSetPinValue+0xfe>
    11f2:	25 b3       	in	r18, 0x15	; 21
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_voidSetPinValue+0xa8>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	6a 95       	dec	r22
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_voidSetPinValue+0xa4>
    1202:	82 2b       	or	r24, r18
    1204:	85 bb       	out	0x15, r24	; 21
    1206:	08 95       	ret
    1208:	25 b3       	in	r18, 0x15	; 21
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_voidSetPinValue+0xbe>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	6a 95       	dec	r22
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_voidSetPinValue+0xba>
    1218:	80 95       	com	r24
    121a:	82 23       	and	r24, r18
    121c:	85 bb       	out	0x15, r24	; 21
    121e:	08 95       	ret
    1220:	44 23       	and	r20, r20
    1222:	69 f0       	breq	.+26     	; 0x123e <DIO_voidSetPinValue+0xe8>
    1224:	41 30       	cpi	r20, 0x01	; 1
    1226:	b1 f4       	brne	.+44     	; 0x1254 <DIO_voidSetPinValue+0xfe>
    1228:	22 b3       	in	r18, 0x12	; 18
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_voidSetPinValue+0xde>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	6a 95       	dec	r22
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_voidSetPinValue+0xda>
    1238:	82 2b       	or	r24, r18
    123a:	82 bb       	out	0x12, r24	; 18
    123c:	08 95       	ret
    123e:	22 b3       	in	r18, 0x12	; 18
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_voidSetPinValue+0xf4>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	6a 95       	dec	r22
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_voidSetPinValue+0xf0>
    124e:	80 95       	com	r24
    1250:	82 23       	and	r24, r18
    1252:	82 bb       	out	0x12, r24	; 18
    1254:	08 95       	ret

00001256 <DIO_voidGetPinValue>:
    1256:	84 30       	cpi	r24, 0x04	; 4
    1258:	c0 f5       	brcc	.+112    	; 0x12ca <DIO_voidGetPinValue+0x74>
    125a:	68 30       	cpi	r22, 0x08	; 8
    125c:	b0 f5       	brcc	.+108    	; 0x12ca <DIO_voidGetPinValue+0x74>
    125e:	41 15       	cp	r20, r1
    1260:	51 05       	cpc	r21, r1
    1262:	99 f1       	breq	.+102    	; 0x12ca <DIO_voidGetPinValue+0x74>
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	89 f0       	breq	.+34     	; 0x128a <DIO_voidGetPinValue+0x34>
    1268:	28 f0       	brcs	.+10     	; 0x1274 <DIO_voidGetPinValue+0x1e>
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	c9 f0       	breq	.+50     	; 0x12a0 <DIO_voidGetPinValue+0x4a>
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	11 f1       	breq	.+68     	; 0x12b6 <DIO_voidGetPinValue+0x60>
    1272:	08 95       	ret
    1274:	89 b3       	in	r24, 0x19	; 25
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_voidGetPinValue+0x28>
    127a:	95 95       	asr	r25
    127c:	87 95       	ror	r24
    127e:	6a 95       	dec	r22
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_voidGetPinValue+0x24>
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	fa 01       	movw	r30, r20
    1286:	80 83       	st	Z, r24
    1288:	08 95       	ret
    128a:	86 b3       	in	r24, 0x16	; 22
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_voidGetPinValue+0x3e>
    1290:	95 95       	asr	r25
    1292:	87 95       	ror	r24
    1294:	6a 95       	dec	r22
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_voidGetPinValue+0x3a>
    1298:	81 70       	andi	r24, 0x01	; 1
    129a:	fa 01       	movw	r30, r20
    129c:	80 83       	st	Z, r24
    129e:	08 95       	ret
    12a0:	83 b3       	in	r24, 0x13	; 19
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_voidGetPinValue+0x54>
    12a6:	95 95       	asr	r25
    12a8:	87 95       	ror	r24
    12aa:	6a 95       	dec	r22
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_voidGetPinValue+0x50>
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	fa 01       	movw	r30, r20
    12b2:	80 83       	st	Z, r24
    12b4:	08 95       	ret
    12b6:	80 b3       	in	r24, 0x10	; 16
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_voidGetPinValue+0x6a>
    12bc:	95 95       	asr	r25
    12be:	87 95       	ror	r24
    12c0:	6a 95       	dec	r22
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_voidGetPinValue+0x66>
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	fa 01       	movw	r30, r20
    12c8:	80 83       	st	Z, r24
    12ca:	08 95       	ret

000012cc <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    12cc:	84 30       	cpi	r24, 0x04	; 4
    12ce:	a8 f5       	brcc	.+106    	; 0x133a <DIO_voidActivePinInPullUpResistance+0x6e>
    12d0:	68 30       	cpi	r22, 0x08	; 8
    12d2:	98 f5       	brcc	.+102    	; 0x133a <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	89 f0       	breq	.+34     	; 0x12fa <DIO_voidActivePinInPullUpResistance+0x2e>
    12d8:	28 f0       	brcs	.+10     	; 0x12e4 <DIO_voidActivePinInPullUpResistance+0x18>
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	c9 f0       	breq	.+50     	; 0x1310 <DIO_voidActivePinInPullUpResistance+0x44>
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	11 f1       	breq	.+68     	; 0x1326 <DIO_voidActivePinInPullUpResistance+0x5a>
    12e2:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    12e4:	2b b3       	in	r18, 0x1b	; 27
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <DIO_voidActivePinInPullUpResistance+0x24>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	6a 95       	dec	r22
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <DIO_voidActivePinInPullUpResistance+0x20>
    12f4:	82 2b       	or	r24, r18
    12f6:	8b bb       	out	0x1b, r24	; 27
			break;
    12f8:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    12fa:	28 b3       	in	r18, 0x18	; 24
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_voidActivePinInPullUpResistance+0x3a>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	6a 95       	dec	r22
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <DIO_voidActivePinInPullUpResistance+0x36>
    130a:	82 2b       	or	r24, r18
    130c:	88 bb       	out	0x18, r24	; 24
			break;
    130e:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    1310:	25 b3       	in	r18, 0x15	; 21
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_voidActivePinInPullUpResistance+0x50>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	6a 95       	dec	r22
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_voidActivePinInPullUpResistance+0x4c>
    1320:	82 2b       	or	r24, r18
    1322:	85 bb       	out	0x15, r24	; 21
			break;
    1324:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    1326:	22 b3       	in	r18, 0x12	; 18
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_voidActivePinInPullUpResistance+0x66>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	6a 95       	dec	r22
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_voidActivePinInPullUpResistance+0x62>
    1336:	82 2b       	or	r24, r18
    1338:	82 bb       	out	0x12, r24	; 18
    133a:	08 95       	ret

0000133c <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    133c:	8f b7       	in	r24, 0x3f	; 63
    133e:	80 68       	ori	r24, 0x80	; 128
    1340:	8f bf       	out	0x3f, r24	; 63
    1342:	08 95       	ret

00001344 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    1344:	83 b7       	in	r24, 0x33	; 51
    1346:	8f 7b       	andi	r24, 0xBF	; 191
    1348:	83 bf       	out	0x33, r24	; 51
    134a:	83 b7       	in	r24, 0x33	; 51
    134c:	88 60       	ori	r24, 0x08	; 8
    134e:	83 bf       	out	0x33, r24	; 51
    1350:	83 b7       	in	r24, 0x33	; 51
    1352:	8f 7e       	andi	r24, 0xEF	; 239
    1354:	83 bf       	out	0x33, r24	; 51
    1356:	83 b7       	in	r24, 0x33	; 51
    1358:	8f 7d       	andi	r24, 0xDF	; 223
    135a:	83 bf       	out	0x33, r24	; 51
    135c:	89 b7       	in	r24, 0x39	; 57
    135e:	82 60       	ori	r24, 0x02	; 2
    1360:	89 bf       	out	0x39, r24	; 57
    1362:	89 ef       	ldi	r24, 0xF9	; 249
    1364:	8c bf       	out	0x3c, r24	; 60
    1366:	08 95       	ret

00001368 <TMR0_voidStart>:
    1368:	83 b7       	in	r24, 0x33	; 51
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	83 bf       	out	0x33, r24	; 51
    136e:	83 b7       	in	r24, 0x33	; 51
    1370:	82 60       	ori	r24, 0x02	; 2
    1372:	83 bf       	out	0x33, r24	; 51
    1374:	83 b7       	in	r24, 0x33	; 51
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	83 bf       	out	0x33, r24	; 51
    137a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <local_u16Counter+0x1>
    137e:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <local_u16Counter>
    1382:	08 95       	ret

00001384 <TMR0_voidStop>:
    1384:	83 b7       	in	r24, 0x33	; 51
    1386:	8e 7f       	andi	r24, 0xFE	; 254
    1388:	83 bf       	out	0x33, r24	; 51
    138a:	83 b7       	in	r24, 0x33	; 51
    138c:	8d 7f       	andi	r24, 0xFD	; 253
    138e:	83 bf       	out	0x33, r24	; 51
    1390:	83 b7       	in	r24, 0x33	; 51
    1392:	8b 7f       	andi	r24, 0xFB	; 251
    1394:	83 bf       	out	0x33, r24	; 51
    1396:	08 95       	ret

00001398 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	21 f0       	breq	.+8      	; 0x13a4 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    139c:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <PRV_pFunCallBackCTC+0x1>
    13a0:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <PRV_pFunCallBackCTC>
    13a4:	08 95       	ret

000013a6 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    13a6:	88 b7       	in	r24, 0x38	; 56
    13a8:	82 60       	ori	r24, 0x02	; 2
    13aa:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    13ac:	88 b7       	in	r24, 0x38	; 56
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	88 bf       	out	0x38, r24	; 56
    13b2:	08 95       	ret

000013b4 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    13b4:	1f 92       	push	r1
    13b6:	0f 92       	push	r0
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	0f 92       	push	r0
    13bc:	11 24       	eor	r1, r1
    13be:	2f 93       	push	r18
    13c0:	3f 93       	push	r19
    13c2:	4f 93       	push	r20
    13c4:	5f 93       	push	r21
    13c6:	6f 93       	push	r22
    13c8:	7f 93       	push	r23
    13ca:	8f 93       	push	r24
    13cc:	9f 93       	push	r25
    13ce:	af 93       	push	r26
    13d0:	bf 93       	push	r27
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
	
	
	local_u16Counter++;
    13d6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <local_u16Counter>
    13da:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <local_u16Counter+0x1>
    13de:	01 96       	adiw	r24, 0x01	; 1
    13e0:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <local_u16Counter+0x1>
    13e4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    13e8:	88 3e       	cpi	r24, 0xE8	; 232
    13ea:	93 40       	sbci	r25, 0x03	; 3
    13ec:	69 f4       	brne	.+26     	; 0x1408 <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    13ee:	81 e7       	ldi	r24, 0x71	; 113
    13f0:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    13f2:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <local_u16Counter+0x1>
    13f6:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    13fa:	e0 91 72 02 	lds	r30, 0x0272	; 0x800272 <PRV_pFunCallBackOVF>
    13fe:	f0 91 73 02 	lds	r31, 0x0273	; 0x800273 <PRV_pFunCallBackOVF+0x1>
    1402:	30 97       	sbiw	r30, 0x00	; 0
    1404:	09 f0       	breq	.+2      	; 0x1408 <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    1406:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    142a:	1f 92       	push	r1
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	0f 92       	push	r0
    1432:	11 24       	eor	r1, r1
    1434:	2f 93       	push	r18
    1436:	3f 93       	push	r19
    1438:	4f 93       	push	r20
    143a:	5f 93       	push	r21
    143c:	6f 93       	push	r22
    143e:	7f 93       	push	r23
    1440:	8f 93       	push	r24
    1442:	9f 93       	push	r25
    1444:	af 93       	push	r26
    1446:	bf 93       	push	r27
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
	

	
	local_u16Counter++;
    144c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <local_u16Counter>
    1450:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <local_u16Counter+0x1>
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <local_u16Counter+0x1>
    145a:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    145e:	88 38       	cpi	r24, 0x88	; 136
    1460:	93 41       	sbci	r25, 0x13	; 19
    1462:	69 f4       	brne	.+26     	; 0x147e <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    1464:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <local_u16Counter+0x1>
    1468:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    146c:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <PRV_pFunCallBackCTC>
    1470:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <PRV_pFunCallBackCTC+0x1>
    1474:	30 97       	sbiw	r30, 0x00	; 0
    1476:	19 f0       	breq	.+6      	; 0x147e <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    1478:	09 95       	icall
			TMR0clear_flag();
    147a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    147e:	ff 91       	pop	r31
    1480:	ef 91       	pop	r30
    1482:	bf 91       	pop	r27
    1484:	af 91       	pop	r26
    1486:	9f 91       	pop	r25
    1488:	8f 91       	pop	r24
    148a:	7f 91       	pop	r23
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
    14a0:	8c e0       	ldi	r24, 0x0C	; 12
    14a2:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
    14a4:	81 b1       	in	r24, 0x01	; 1
    14a6:	8d 7f       	andi	r24, 0xFD	; 253
    14a8:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
    14aa:	81 b1       	in	r24, 0x01	; 1
    14ac:	8e 7f       	andi	r24, 0xFE	; 254
    14ae:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
    14b0:	86 b7       	in	r24, 0x36	; 54
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	86 bf       	out	0x36, r24	; 54
    14b6:	08 95       	ret

000014b8 <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    14b8:	86 b7       	in	r24, 0x36	; 54
    14ba:	80 62       	ori	r24, 0x20	; 32
    14bc:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    14be:	86 b7       	in	r24, 0x36	; 54
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    14c4:	06 b6       	in	r0, 0x36	; 54
    14c6:	07 fe       	sbrs	r0, 7
    14c8:	fd cf       	rjmp	.-6      	; 0x14c4 <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
    14ca:	81 b1       	in	r24, 0x01	; 1
    14cc:	88 7f       	andi	r24, 0xF8	; 248
    14ce:	88 30       	cpi	r24, 0x08	; 8
    14d0:	e1 f7       	brne	.-8      	; 0x14ca <TWI_voidSendStartCondition+0x12>
}
    14d2:	08 95       	ret

000014d4 <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    14d4:	86 b7       	in	r24, 0x36	; 54
    14d6:	80 62       	ori	r24, 0x20	; 32
    14d8:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    14da:	86 b7       	in	r24, 0x36	; 54
    14dc:	80 68       	ori	r24, 0x80	; 128
    14de:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    14e0:	06 b6       	in	r0, 0x36	; 54
    14e2:	07 fe       	sbrs	r0, 7
    14e4:	fd cf       	rjmp	.-6      	; 0x14e0 <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
    14e6:	81 b1       	in	r24, 0x01	; 1
    14e8:	88 7f       	andi	r24, 0xF8	; 248
    14ea:	80 31       	cpi	r24, 0x10	; 16
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <TWI_voidSendRepeatedStartCondition+0x12>
}
    14ee:	08 95       	ret

000014f0 <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
    14f0:	86 b7       	in	r24, 0x36	; 54
    14f2:	80 61       	ori	r24, 0x10	; 16
    14f4:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    14f6:	86 b7       	in	r24, 0x36	; 54
    14f8:	80 68       	ori	r24, 0x80	; 128
    14fa:	86 bf       	out	0x36, r24	; 54
    14fc:	08 95       	ret

000014fe <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    14fe:	88 23       	and	r24, r24
    1500:	94 f0       	brlt	.+36     	; 0x1526 <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    1502:	88 0f       	add	r24, r24
    1504:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
    1506:	83 b1       	in	r24, 0x03	; 3
    1508:	8e 7f       	andi	r24, 0xFE	; 254
    150a:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    150c:	86 b7       	in	r24, 0x36	; 54
    150e:	8f 7d       	andi	r24, 0xDF	; 223
    1510:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    1512:	86 b7       	in	r24, 0x36	; 54
    1514:	80 68       	ori	r24, 0x80	; 128
    1516:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    1518:	06 b6       	in	r0, 0x36	; 54
    151a:	07 fe       	sbrs	r0, 7
    151c:	fd cf       	rjmp	.-6      	; 0x1518 <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    151e:	81 b1       	in	r24, 0x01	; 1
    1520:	88 7f       	andi	r24, 0xF8	; 248
    1522:	88 31       	cpi	r24, 0x18	; 24
    1524:	e1 f7       	brne	.-8      	; 0x151e <TWI_voidSendSlaveAddWithWrite+0x20>
    1526:	08 95       	ret

00001528 <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    1528:	88 23       	and	r24, r24
    152a:	94 f0       	brlt	.+36     	; 0x1550 <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    152c:	88 0f       	add	r24, r24
    152e:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
    1530:	83 b1       	in	r24, 0x03	; 3
    1532:	81 60       	ori	r24, 0x01	; 1
    1534:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    1536:	86 b7       	in	r24, 0x36	; 54
    1538:	8f 7d       	andi	r24, 0xDF	; 223
    153a:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    153c:	86 b7       	in	r24, 0x36	; 54
    153e:	80 68       	ori	r24, 0x80	; 128
    1540:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    1542:	06 b6       	in	r0, 0x36	; 54
    1544:	07 fe       	sbrs	r0, 7
    1546:	fd cf       	rjmp	.-6      	; 0x1542 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    1548:	81 b1       	in	r24, 0x01	; 1
    154a:	88 7f       	andi	r24, 0xF8	; 248
    154c:	80 34       	cpi	r24, 0x40	; 64
    154e:	e1 f7       	brne	.-8      	; 0x1548 <TWI_voidSendSlaveAddWithRead+0x20>
    1550:	08 95       	ret

00001552 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    1552:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    1554:	86 b7       	in	r24, 0x36	; 54
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    155a:	06 b6       	in	r0, 0x36	; 54
    155c:	07 fe       	sbrs	r0, 7
    155e:	fd cf       	rjmp	.-6      	; 0x155a <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    1560:	81 b1       	in	r24, 0x01	; 1
    1562:	88 7f       	andi	r24, 0xF8	; 248
    1564:	88 32       	cpi	r24, 0x28	; 40
    1566:	e1 f7       	brne	.-8      	; 0x1560 <TWI_voidTransmitMasterDataByte+0xe>
}
    1568:	08 95       	ret

0000156a <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
    156a:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    156c:	89 2b       	or	r24, r25
    156e:	91 f0       	breq	.+36     	; 0x1594 <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
    1570:	96 b7       	in	r25, 0x36	; 54
    1572:	90 64       	ori	r25, 0x40	; 64
    1574:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    1576:	96 b7       	in	r25, 0x36	; 54
    1578:	90 68       	ori	r25, 0x80	; 128
    157a:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    157c:	06 b6       	in	r0, 0x36	; 54
    157e:	07 fe       	sbrs	r0, 7
    1580:	fd cf       	rjmp	.-6      	; 0x157c <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
    1582:	91 b1       	in	r25, 0x01	; 1
    1584:	98 7f       	andi	r25, 0xF8	; 248
    1586:	90 35       	cpi	r25, 0x50	; 80
    1588:	e1 f7       	brne	.-8      	; 0x1582 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
    158a:	83 b1       	in	r24, 0x03	; 3
    158c:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
    158e:	86 b7       	in	r24, 0x36	; 54
    1590:	8f 7b       	andi	r24, 0xBF	; 191
    1592:	86 bf       	out	0x36, r24	; 54
    1594:	08 95       	ret

00001596 <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
    1596:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    1598:	89 2b       	or	r24, r25
    159a:	61 f0       	breq	.+24     	; 0x15b4 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    159c:	96 b7       	in	r25, 0x36	; 54
    159e:	90 68       	ori	r25, 0x80	; 128
    15a0:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    15a2:	06 b6       	in	r0, 0x36	; 54
    15a4:	07 fe       	sbrs	r0, 7
    15a6:	fd cf       	rjmp	.-6      	; 0x15a2 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
    15a8:	91 b1       	in	r25, 0x01	; 1
    15aa:	98 7f       	andi	r25, 0xF8	; 248
    15ac:	98 35       	cpi	r25, 0x58	; 88
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
    15b0:	83 b1       	in	r24, 0x03	; 3
    15b2:	80 83       	st	Z, r24
    15b4:	08 95       	ret

000015b6 <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    15b6:	8b b1       	in	r24, 0x0b	; 11
    15b8:	8d 7f       	andi	r24, 0xFD	; 253
    15ba:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    15bc:	87 e6       	ldi	r24, 0x67	; 103
    15be:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    15c0:	8a b1       	in	r24, 0x0a	; 10
    15c2:	8b 7f       	andi	r24, 0xFB	; 251
    15c4:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    15c6:	86 e8       	ldi	r24, 0x86	; 134
    15c8:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    15ca:	8a b1       	in	r24, 0x0a	; 10
    15cc:	80 61       	ori	r24, 0x10	; 16
    15ce:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    15d0:	8a b1       	in	r24, 0x0a	; 10
    15d2:	88 60       	ori	r24, 0x08	; 8
    15d4:	8a b9       	out	0x0a, r24	; 10
    15d6:	08 95       	ret

000015d8 <__udivmodsi4>:
    15d8:	a1 e2       	ldi	r26, 0x21	; 33
    15da:	1a 2e       	mov	r1, r26
    15dc:	aa 1b       	sub	r26, r26
    15de:	bb 1b       	sub	r27, r27
    15e0:	fd 01       	movw	r30, r26
    15e2:	0d c0       	rjmp	.+26     	; 0x15fe <__udivmodsi4_ep>

000015e4 <__udivmodsi4_loop>:
    15e4:	aa 1f       	adc	r26, r26
    15e6:	bb 1f       	adc	r27, r27
    15e8:	ee 1f       	adc	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	a2 17       	cp	r26, r18
    15ee:	b3 07       	cpc	r27, r19
    15f0:	e4 07       	cpc	r30, r20
    15f2:	f5 07       	cpc	r31, r21
    15f4:	20 f0       	brcs	.+8      	; 0x15fe <__udivmodsi4_ep>
    15f6:	a2 1b       	sub	r26, r18
    15f8:	b3 0b       	sbc	r27, r19
    15fa:	e4 0b       	sbc	r30, r20
    15fc:	f5 0b       	sbc	r31, r21

000015fe <__udivmodsi4_ep>:
    15fe:	66 1f       	adc	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	88 1f       	adc	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	1a 94       	dec	r1
    1608:	69 f7       	brne	.-38     	; 0x15e4 <__udivmodsi4_loop>
    160a:	60 95       	com	r22
    160c:	70 95       	com	r23
    160e:	80 95       	com	r24
    1610:	90 95       	com	r25
    1612:	9b 01       	movw	r18, r22
    1614:	ac 01       	movw	r20, r24
    1616:	bd 01       	movw	r22, r26
    1618:	cf 01       	movw	r24, r30
    161a:	08 95       	ret

0000161c <_exit>:
    161c:	f8 94       	cli

0000161e <__stop_program>:
    161e:	ff cf       	rjmp	.-2      	; 0x161e <__stop_program>
