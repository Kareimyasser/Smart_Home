
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000468  00800060  00003fa2  00004036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  008004c8  008004c8  0000449e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000449e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000044fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b0  00000000  00000000  00004538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007b0a  00000000  00000000  000049e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013e6  00000000  00000000  0000c4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003a90  00000000  00000000  0000d8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c8c  00000000  00000000  00011368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001660  00000000  00000000  00011ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000328d  00000000  00000000  00013654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  000168e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 98 19 	jmp	0x3330	; 0x3330 <__vector_4>
      14:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__vector_10>
      2c:	0c 94 af 18 	jmp	0x315e	; 0x315e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <main>
      8a:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CheckTempForAc>:

void CheckTempForAc()
//this function is for cheking the temperature and turn on the AC if the temperature is above 28 and turn it off if the temperature is below 21
// this is the function that get called for tmr2 interrupt
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
      92:	68 ec       	ldi	r22, 0xC8	; 200
      94:	74 e0       	ldi	r23, 0x04	; 4
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
	if (local_temp > 28)
      9c:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
      a0:	8d 31       	cpi	r24, 0x1D	; 29
      a2:	30 f0       	brcs	.+12     	; 0xb0 <CheckTempForAc+0x1e>
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
      a4:	40 e0       	ldi	r20, 0x00	; 0
      a6:	62 e0       	ldi	r22, 0x02	; 2
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
      ae:	08 95       	ret
		
	}
	else if (local_temp <21)
      b0:	85 31       	cpi	r24, 0x15	; 21
      b2:	28 f4       	brcc	.+10     	; 0xbe <CheckTempForAc+0x2c>
	
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
      be:	08 95       	ret

000000c0 <HOME_voidInit>:

void HOME_voidInit(void)
{
	//Home initialization function is for the hardware initialization of the smart home system
	    // initialize the LCD
    LCD_voidInit();
      c0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <LCD_voidInit>
	// initialize the PWM
	PWM_voidInitChannel_1A();
      c4:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <PWM_voidInitChannel_1A>
	PWM_voidInitChannel_1B();
      c8:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <PWM_voidInitChannel_1B>

	// initialize the EEPROM
	EEPROM_voidInit();
      cc:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <EEPROM_voidInit>
	
	// initialize the Door_Servo
	SERVO_voidInit(DIO_PORTD,DIO_PIN4);
      d0:	64 e0       	ldi	r22, 0x04	; 4
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <SERVO_voidInit>
	// reset door angle to 0
	SERVO_voidStartByAngle(0);
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <SERVO_voidStartByAngle>

	// initialize the KPD
    KPD_voidInit();
      e2:	0e 94 95 12 	call	0x252a	; 0x252a <KPD_voidInit>

	// initialize the ADC
	ADC_voidInit(ADC_REFERENCE_INTRNAL);
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
      ec:	40 e0       	ldi	r20, 0x00	; 0
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	80 e0       	ldi	r24, 0x00	; 0
      f2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>

	// AC PIN
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
      f6:	41 e0       	ldi	r20, 0x01	; 1
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>

	// initialize the Buzzer
	BUZZER_voidInit(DIO_PORTD,DIO_PIN6);
     100:	66 e0       	ldi	r22, 0x06	; 6
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 d5 11 	call	0x23aa	; 0x23aa <BUZZER_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
     108:	0e 94 c9 11 	call	0x2392	; 0x2392 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
     10c:	41 e0       	ldi	r20, 0x01	; 1
     10e:	61 e0       	ldi	r22, 0x01	; 1
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
     120:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
     124:	0e 94 77 18 	call	0x30ee	; 0x30ee <TMR0_voidInit>
    // initialize the LEDs(1-5)
	//LED 1
    LED_voidInit(DIO_PORTD, DIO_PIN3);
     128:	63 e0       	ldi	r22, 0x03	; 3
     12a:	83 e0       	ldi	r24, 0x03	; 3
     12c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LED_voidInit>
	//LED 2
    LED_voidInit(DIO_PORTB, DIO_PIN0);
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LED_voidInit>
	//LED 3
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     138:	62 e0       	ldi	r22, 0x02	; 2
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LED_voidInit>
	//LED 4
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     140:	63 e0       	ldi	r22, 0x03	; 3
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LED_voidInit>
	//LED 5
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LED_voidInit>
	// Dimmer LED 6
	LED_voidInit(DIO_PORTD, DIO_PIN5);
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <LED_voidInit>

	// initialize tmr2
	TMR2_voidInit();
     158:	0e 94 25 19 	call	0x324a	; 0x324a <TMR2_voidInit>
	TMR2_SetCallBackCTC(CheckTempForAc);
     15c:	89 e4       	ldi	r24, 0x49	; 73
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 4f 19 	call	0x329e	; 0x329e <TMR2_SetCallBackCTC>
     164:	08 95       	ret

00000166 <APP_init>:




void APP_init(void)
{
     166:	cf 93       	push	r28
     168:	df 93       	push	r29
     16a:	cd b7       	in	r28, 0x3d	; 61
     16c:	de b7       	in	r29, 0x3e	; 62
     16e:	e0 97       	sbiw	r28, 0x30	; 48
     170:	0f b6       	in	r0, 0x3f	; 63
     172:	f8 94       	cli
     174:	de bf       	out	0x3e, r29	; 62
     176:	0f be       	out	0x3f, r0	; 63
     178:	cd bf       	out	0x3d, r28	; 61
	/*APP_init function is for the logic initialization of the smart home system setting initial 
	values for the users and epprom locations for saving */


    HOME_voidInit();
     17a:	0e 94 60 00 	call	0xc0	; 0xc0 <HOME_voidInit>

	// display the welcome screen

	LCD_voidClear();
     17e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>

	
	// local users
	u8 testusername[8]="7654321";
     182:	88 e0       	ldi	r24, 0x08	; 8
     184:	e2 e7       	ldi	r30, 0x72	; 114
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	de 01       	movw	r26, r28
     18a:	11 96       	adiw	r26, 0x01	; 1
     18c:	01 90       	ld	r0, Z+
     18e:	0d 92       	st	X+, r0
     190:	8a 95       	dec	r24
     192:	e1 f7       	brne	.-8      	; 0x18c <APP_init+0x26>
	u8 testuserpass[8]="7654321";
     194:	88 e0       	ldi	r24, 0x08	; 8
     196:	e2 e7       	ldi	r30, 0x72	; 114
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	de 01       	movw	r26, r28
     19c:	19 96       	adiw	r26, 0x09	; 9
     19e:	01 90       	ld	r0, Z+
     1a0:	0d 92       	st	X+, r0
     1a2:	8a 95       	dec	r24
     1a4:	e1 f7       	brne	.-8      	; 0x19e <APP_init+0x38>

	// Remote users
		//admin users
	u8 testadminname[8]="1122334";
     1a6:	88 e0       	ldi	r24, 0x08	; 8
     1a8:	ea e7       	ldi	r30, 0x7A	; 122
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	de 01       	movw	r26, r28
     1ae:	51 96       	adiw	r26, 0x11	; 17
     1b0:	01 90       	ld	r0, Z+
     1b2:	0d 92       	st	X+, r0
     1b4:	8a 95       	dec	r24
     1b6:	e1 f7       	brne	.-8      	; 0x1b0 <APP_init+0x4a>
	u8 testadminpass[8]="1122334";
     1b8:	88 e0       	ldi	r24, 0x08	; 8
     1ba:	ea e7       	ldi	r30, 0x7A	; 122
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	de 01       	movw	r26, r28
     1c0:	59 96       	adiw	r26, 0x19	; 25
     1c2:	01 90       	ld	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	8a 95       	dec	r24
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <APP_init+0x5c>
		//remote users
	u8 testusername1[8]="1002003";
     1ca:	88 e0       	ldi	r24, 0x08	; 8
     1cc:	e2 e8       	ldi	r30, 0x82	; 130
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	de 01       	movw	r26, r28
     1d2:	91 96       	adiw	r26, 0x21	; 33
     1d4:	01 90       	ld	r0, Z+
     1d6:	0d 92       	st	X+, r0
     1d8:	8a 95       	dec	r24
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <APP_init+0x6e>
	u8 testuserpass1[8]="1002003";
     1dc:	88 e0       	ldi	r24, 0x08	; 8
     1de:	e2 e8       	ldi	r30, 0x82	; 130
     1e0:	f0 e0       	ldi	r31, 0x00	; 0
     1e2:	de 01       	movw	r26, r28
     1e4:	99 96       	adiw	r26, 0x29	; 41
     1e6:	01 90       	ld	r0, Z+
     1e8:	0d 92       	st	X+, r0
     1ea:	8a 95       	dec	r24
     1ec:	e1 f7       	brne	.-8      	; 0x1e6 <APP_init+0x80>
		
	
	EEPROM_voidWritePage(16,&testusername[0]);
     1ee:	be 01       	movw	r22, r28
     1f0:	6f 5f       	subi	r22, 0xFF	; 255
     1f2:	7f 4f       	sbci	r23, 0xFF	; 255
     1f4:	80 e1       	ldi	r24, 0x10	; 16
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
     1fc:	be 01       	movw	r22, r28
     1fe:	67 5f       	subi	r22, 0xF7	; 247
     200:	7f 4f       	sbci	r23, 0xFF	; 255
     202:	88 e1       	ldi	r24, 0x18	; 24
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(80,&testadminname[0]);
     20a:	be 01       	movw	r22, r28
     20c:	6f 5e       	subi	r22, 0xEF	; 239
     20e:	7f 4f       	sbci	r23, 0xFF	; 255
     210:	80 e5       	ldi	r24, 0x50	; 80
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(88,&testadminpass[0]);
     218:	be 01       	movw	r22, r28
     21a:	67 5e       	subi	r22, 0xE7	; 231
     21c:	7f 4f       	sbci	r23, 0xFF	; 255
     21e:	88 e5       	ldi	r24, 0x58	; 88
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(96,&testusername1[0]);
     226:	be 01       	movw	r22, r28
     228:	6f 5d       	subi	r22, 0xDF	; 223
     22a:	7f 4f       	sbci	r23, 0xFF	; 255
     22c:	80 e6       	ldi	r24, 0x60	; 96
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(104,&testuserpass1[0]);
     234:	be 01       	movw	r22, r28
     236:	67 5d       	subi	r22, 0xD7	; 215
     238:	7f 4f       	sbci	r23, 0xFF	; 255
     23a:	88 e6       	ldi	r24, 0x68	; 104
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
	


	
	
}
     242:	e0 96       	adiw	r28, 0x30	; 48
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <HOME_voidLocalGetUserAndPass>:

}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     254:	cf 92       	push	r12
     256:	df 92       	push	r13
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	09 f4       	brne	.+2      	; 0x268 <HOME_voidLocalGetUserAndPass+0x14>
     266:	69 c0       	rjmp	.+210    	; 0x33a <HOME_voidLocalGetUserAndPass+0xe6>
     268:	61 15       	cp	r22, r1
     26a:	71 05       	cpc	r23, r1
     26c:	09 f4       	brne	.+2      	; 0x270 <HOME_voidLocalGetUserAndPass+0x1c>
     26e:	65 c0       	rjmp	.+202    	; 0x33a <HOME_voidLocalGetUserAndPass+0xe6>
     270:	7b 01       	movw	r14, r22
     272:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     274:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     280:	8a e8       	ldi	r24, 0x8A	; 138
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	82 e0       	ldi	r24, 0x02	; 2
     28c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     290:	8c e9       	ldi	r24, 0x9C	; 156
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     298:	2f ef       	ldi	r18, 0xFF	; 255
     29a:	83 ed       	ldi	r24, 0xD3	; 211
     29c:	90 e3       	ldi	r25, 0x30	; 48
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	80 40       	sbci	r24, 0x00	; 0
     2a2:	90 40       	sbci	r25, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <HOME_voidLocalGetUserAndPass+0x4a>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <HOME_voidLocalGetUserAndPass+0x54>
     2a8:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     2aa:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     2b6:	8c eb       	ldi	r24, 0xBC	; 188
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	11 c0       	rjmp	.+34     	; 0x2e4 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     2c2:	e6 01       	movw	r28, r12
     2c4:	c1 0f       	add	r28, r17
     2c6:	d1 1d       	adc	r29, r1
     2c8:	ce 01       	movw	r24, r28
     2ca:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     2ce:	98 81       	ld	r25, Y
     2d0:	9f 3f       	cpi	r25, 0xFF	; 255
     2d2:	b9 f3       	breq	.-18     	; 0x2c2 <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     2d4:	61 2f       	mov	r22, r17
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     2dc:	88 81       	ld	r24, Y
     2de:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     2e2:	1f 5f       	subi	r17, 0xFF	; 255
     2e4:	17 30       	cpi	r17, 0x07	; 7
     2e6:	68 f3       	brcs	.-38     	; 0x2c2 <HOME_voidLocalGetUserAndPass+0x6e>
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
		copy_pu8LocalUserName[Local_u8UserNameLengthCounter]='\0';
     2e8:	f6 01       	movw	r30, r12
     2ea:	e1 0f       	add	r30, r17
     2ec:	f1 1d       	adc	r31, r1
     2ee:	10 82       	st	Z, r1
		//display request for pass
		LCD_voidClear();
     2f0:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     2fc:	8a ea       	ldi	r24, 0xAA	; 170
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	13 c0       	rjmp	.+38     	; 0x32e <HOME_voidLocalGetUserAndPass+0xda>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     308:	e7 01       	movw	r28, r14
     30a:	c1 0f       	add	r28, r17
     30c:	d1 1d       	adc	r29, r1
     30e:	ce 01       	movw	r24, r28
     310:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     314:	88 81       	ld	r24, Y
     316:	8f 3f       	cpi	r24, 0xFF	; 255
     318:	b9 f3       	breq	.-18     	; 0x308 <HOME_voidLocalGetUserAndPass+0xb4>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     31a:	61 2f       	mov	r22, r17
     31c:	82 e0       	ldi	r24, 0x02	; 2
     31e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     322:	88 81       	ld	r24, Y
     324:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidDisplayChar>
				LCD_voidPwdEffect();
     328:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <LCD_voidPwdEffect>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     32c:	1f 5f       	subi	r17, 0xFF	; 255
     32e:	17 30       	cpi	r17, 0x07	; 7
     330:	58 f3       	brcs	.-42     	; 0x308 <HOME_voidLocalGetUserAndPass+0xb4>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
				LCD_voidPwdEffect();
			}
			copy_pu8LocalUserPass[Local_u8UserPassCounter]='\0';
     332:	f7 01       	movw	r30, r14
     334:	e1 0f       	add	r30, r17
     336:	f1 1d       	adc	r31, r1
     338:	10 82       	st	Z, r1
		//error massage
	}
			
	
		
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	08 95       	ret

0000034a <HOME_voidRemoteGetUserAndPass>:



void HOME_voidRemoteGetUserAndPass(u8* copy_pu8RemoteUserName,u8* copy_pu8RemoteUserPass)
{
     34a:	cf 92       	push	r12
     34c:	df 92       	push	r13
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
	if((copy_pu8RemoteUserName!=NULL)&&(copy_pu8RemoteUserPass!=NULL))
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	09 f4       	brne	.+2      	; 0x35e <HOME_voidRemoteGetUserAndPass+0x14>
     35c:	64 c0       	rjmp	.+200    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     35e:	61 15       	cp	r22, r1
     360:	71 05       	cpc	r23, r1
     362:	09 f4       	brne	.+2      	; 0x366 <HOME_voidRemoteGetUserAndPass+0x1c>
     364:	60 c0       	rjmp	.+192    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     366:	8b 01       	movw	r16, r22
     368:	7c 01       	movw	r14, r24
		u8 Local_u8UserNameLengthCounter=0,Local_u8UserPassCounter=0;
	
		
	
		//dis request for user name
		BL_voidTxString	("User Name:");
     36a:	8c eb       	ldi	r24, 0xBC	; 188
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     372:	8d e0       	ldi	r24, 0x0D	; 13
     374:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     378:	c0 e0       	ldi	r28, 0x00	; 0
     37a:	0b c0       	rjmp	.+22     	; 0x392 <HOME_voidRemoteGetUserAndPass+0x48>
		{
			
			
			BL_voidRxChar(&copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     37c:	67 01       	movw	r12, r14
     37e:	cc 0e       	add	r12, r28
     380:	d1 1c       	adc	r13, r1
     382:	c6 01       	movw	r24, r12
     384:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
			if(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]=='#')
     388:	f6 01       	movw	r30, r12
     38a:	80 81       	ld	r24, Z
     38c:	83 32       	cpi	r24, 0x23	; 35
     38e:	19 f0       	breq	.+6      	; 0x396 <HOME_voidRemoteGetUserAndPass+0x4c>
		//dis request for user name
		BL_voidTxString	("User Name:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     390:	cf 5f       	subi	r28, 0xFF	; 255
     392:	c8 30       	cpi	r28, 0x08	; 8
     394:	98 f3       	brcs	.-26     	; 0x37c <HOME_voidRemoteGetUserAndPass+0x32>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
     396:	f7 01       	movw	r30, r14
     398:	ec 0f       	add	r30, r28
     39a:	f1 1d       	adc	r31, r1
     39c:	10 82       	st	Z, r1
		BL_voidTxString("Entered User Name:");
     39e:	84 eb       	ldi	r24, 0xB4	; 180
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     3a6:	8d e0       	ldi	r24, 0x0D	; 13
     3a8:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     3ac:	c0 e0       	ldi	r28, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <HOME_voidRemoteGetUserAndPass+0x74>
		{
			
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     3b0:	f7 01       	movw	r30, r14
     3b2:	ec 0f       	add	r30, r28
     3b4:	f1 1d       	adc	r31, r1
     3b6:	80 81       	ld	r24, Z
     3b8:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
		BL_voidTxString("Entered User Name:");
		BL_voidTxChar('\r');
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     3bc:	cf 5f       	subi	r28, 0xFF	; 255
     3be:	c8 30       	cpi	r28, 0x08	; 8
     3c0:	b8 f3       	brcs	.-18     	; 0x3b0 <HOME_voidRemoteGetUserAndPass+0x66>
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
			
		}
		
		BL_voidTxChar('\r');
     3c2:	8d e0       	ldi	r24, 0x0D	; 13
     3c4:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		
		
		//display request for pass
		BL_voidTxString	("Password:");
     3c8:	87 ec       	ldi	r24, 0xC7	; 199
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     3d0:	8d e0       	ldi	r24, 0x0D	; 13
     3d2:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     3d6:	c0 e0       	ldi	r28, 0x00	; 0
     3d8:	0b c0       	rjmp	.+22     	; 0x3f0 <HOME_voidRemoteGetUserAndPass+0xa6>
		{
			
			BL_voidRxChar(&copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     3da:	78 01       	movw	r14, r16
     3dc:	ec 0e       	add	r14, r28
     3de:	f1 1c       	adc	r15, r1
     3e0:	c7 01       	movw	r24, r14
     3e2:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
			if(copy_pu8RemoteUserPass[Local_u8UserPassCounter]=='#')
     3e6:	f7 01       	movw	r30, r14
     3e8:	80 81       	ld	r24, Z
     3ea:	83 32       	cpi	r24, 0x23	; 35
     3ec:	19 f0       	breq	.+6      	; 0x3f4 <HOME_voidRemoteGetUserAndPass+0xaa>
		//display request for pass
		BL_voidTxString	("Password:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     3ee:	cf 5f       	subi	r28, 0xFF	; 255
     3f0:	c9 30       	cpi	r28, 0x09	; 9
     3f2:	98 f3       	brcs	.-26     	; 0x3da <HOME_voidRemoteGetUserAndPass+0x90>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
     3f4:	f8 01       	movw	r30, r16
     3f6:	ec 0f       	add	r30, r28
     3f8:	f1 1d       	adc	r31, r1
     3fa:	10 82       	st	Z, r1
		BL_voidTxString("Entered Pass:");
     3fc:	81 ed       	ldi	r24, 0xD1	; 209
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     404:	8d e0       	ldi	r24, 0x0D	; 13
     406:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     40a:	c0 e0       	ldi	r28, 0x00	; 0
     40c:	07 c0       	rjmp	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     40e:	f8 01       	movw	r30, r16
     410:	ec 0f       	add	r30, r28
     412:	f1 1d       	adc	r31, r1
     414:	80 81       	ld	r24, Z
     416:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
		BL_voidTxString("Entered Pass:");
		BL_voidTxChar('\r');
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     41a:	cf 5f       	subi	r28, 0xFF	; 255
     41c:	c8 30       	cpi	r28, 0x08	; 8
     41e:	b8 f3       	brcs	.-18     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
		
		}

		BL_voidTxChar('\r');
     420:	8d e0       	ldi	r24, 0x0D	; 13
     422:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		//error massage
	}
			
	
		
}
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	08 95       	ret

00000436 <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserStatus)
{
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	a0 97       	sbiw	r28, 0x20	; 32
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	//page 12 to 21 for remote user name and password the first page for user name the followed by password
	//word 180 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserStatus!=NULL)
     45e:	61 15       	cp	r22, r1
     460:	71 05       	cpc	r23, r1
     462:	09 f4       	brne	.+2      	; 0x466 <HOME_voidCheckUserAndPass+0x30>
     464:	b6 c1       	rjmp	.+876    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     466:	4b 01       	movw	r8, r22
		u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,
		Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,Local_u8FireAnAlarm=0,Local_u8PagesCounter,
		Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,LocaL_u8RightEntery=0;
		
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	09 f0       	breq	.+2      	; 0x46e <HOME_voidCheckUserAndPass+0x38>
     46c:	e8 c0       	rjmp	.+464    	; 0x63e <HOME_voidCheckUserAndPass+0x208>
     46e:	d8 c0       	rjmp	.+432    	; 0x620 <HOME_voidCheckUserAndPass+0x1ea>
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     470:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     472:	be 01       	movw	r22, r28
     474:	6f 5e       	subi	r22, 0xEF	; 239
     476:	7f 4f       	sbci	r23, 0xFF	; 255
     478:	ce 01       	movw	r24, r28
     47a:	49 96       	adiw	r24, 0x19	; 25
     47c:	0e 94 2a 01 	call	0x254	; 0x254 <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     480:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     482:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     484:	00 e0       	ldi	r16, 0x00	; 0
     486:	60 c0       	rjmp	.+192    	; 0x548 <HOME_voidCheckUserAndPass+0x112>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     488:	e0 2e       	mov	r14, r16
     48a:	ee 0c       	add	r14, r14
     48c:	ee 0c       	add	r14, r14
     48e:	ee 0c       	add	r14, r14
     490:	ee 0c       	add	r14, r14
     492:	f1 2c       	mov	r15, r1
     494:	ae 01       	movw	r20, r28
     496:	47 5f       	subi	r20, 0xF7	; 247
     498:	5f 4f       	sbci	r21, 0xFF	; 255
     49a:	68 e0       	ldi	r22, 0x08	; 8
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	c7 01       	movw	r24, r14
     4a0:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     4a4:	ae 01       	movw	r20, r28
     4a6:	4f 5f       	subi	r20, 0xFF	; 255
     4a8:	5f 4f       	sbci	r21, 0xFF	; 255
     4aa:	68 e0       	ldi	r22, 0x08	; 8
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	c7 01       	movw	r24, r14
     4b0:	08 96       	adiw	r24, 0x08	; 8
     4b2:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     4b6:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	14 c0       	rjmp	.+40     	; 0x4e4 <HOME_voidCheckUserAndPass+0xae>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     4bc:	82 2f       	mov	r24, r18
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	e9 e1       	ldi	r30, 0x19	; 25
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	ec 0f       	add	r30, r28
     4c6:	fd 1f       	adc	r31, r29
     4c8:	e8 0f       	add	r30, r24
     4ca:	f9 1f       	adc	r31, r25
     4cc:	30 81       	ld	r19, Z
     4ce:	e9 e0       	ldi	r30, 0x09	; 9
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	ec 0f       	add	r30, r28
     4d4:	fd 1f       	adc	r31, r29
     4d6:	e8 0f       	add	r30, r24
     4d8:	f9 1f       	adc	r31, r25
     4da:	80 81       	ld	r24, Z
     4dc:	38 13       	cpse	r19, r24
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <HOME_voidCheckUserAndPass+0xac>
						{
							Local_u8NameByteCheck++;
     4e0:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     4e2:	2f 5f       	subi	r18, 0xFF	; 255
     4e4:	28 30       	cpi	r18, 0x08	; 8
     4e6:	50 f3       	brcs	.-44     	; 0x4bc <HOME_voidCheckUserAndPass+0x86>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     4e8:	48 30       	cpi	r20, 0x08	; 8
     4ea:	61 f5       	brne	.+88     	; 0x544 <HOME_voidCheckUserAndPass+0x10e>
     4ec:	15 c0       	rjmp	.+42     	; 0x518 <HOME_voidCheckUserAndPass+0xe2>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     4ee:	82 2f       	mov	r24, r18
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	e1 e1       	ldi	r30, 0x11	; 17
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ec 0f       	add	r30, r28
     4f8:	fd 1f       	adc	r31, r29
     4fa:	e8 0f       	add	r30, r24
     4fc:	f9 1f       	adc	r31, r25
     4fe:	30 81       	ld	r19, Z
     500:	e1 e0       	ldi	r30, 0x01	; 1
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	ec 0f       	add	r30, r28
     506:	fd 1f       	adc	r31, r29
     508:	e8 0f       	add	r30, r24
     50a:	f9 1f       	adc	r31, r25
     50c:	80 81       	ld	r24, Z
     50e:	38 13       	cpse	r19, r24
     510:	01 c0       	rjmp	.+2      	; 0x514 <HOME_voidCheckUserAndPass+0xde>
							{
								Local_u8PassByteCheck++;
     512:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     514:	2f 5f       	subi	r18, 0xFF	; 255
     516:	02 c0       	rjmp	.+4      	; 0x51c <HOME_voidCheckUserAndPass+0xe6>
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	28 30       	cpi	r18, 0x08	; 8
     51e:	38 f3       	brcs	.-50     	; 0x4ee <HOME_voidCheckUserAndPass+0xb8>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     520:	48 30       	cpi	r20, 0x08	; 8
     522:	71 f4       	brne	.+28     	; 0x540 <HOME_voidCheckUserAndPass+0x10a>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     524:	05 30       	cpi	r16, 0x05	; 5
     526:	31 f4       	brne	.+12     	; 0x534 <HOME_voidCheckUserAndPass+0xfe>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	f4 01       	movw	r30, r8
     52c:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     52e:	dd 24       	eor	r13, r13
     530:	d3 94       	inc	r13
     532:	0d c0       	rjmp	.+26     	; 0x54e <HOME_voidCheckUserAndPass+0x118>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_LOCAL_USER;
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	f4 01       	movw	r30, r8
     538:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     53a:	dd 24       	eor	r13, r13
     53c:	d3 94       	inc	r13
     53e:	07 c0       	rjmp	.+14     	; 0x54e <HOME_voidCheckUserAndPass+0x118>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     540:	b3 94       	inc	r11
     542:	01 c0       	rjmp	.+2      	; 0x546 <HOME_voidCheckUserAndPass+0x110>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     544:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	06 30       	cpi	r16, 0x06	; 6
     54a:	08 f4       	brcc	.+2      	; 0x54e <HOME_voidCheckUserAndPass+0x118>
     54c:	9d cf       	rjmp	.-198    	; 0x488 <HOME_voidCheckUserAndPass+0x52>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	df 12       	cpse	r13, r31
     552:	14 c0       	rjmp	.+40     	; 0x57c <HOME_voidCheckUserAndPass+0x146>
				{
					LCD_voidClear();
     554:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS PERMITED");
     560:	8f ed       	ldi	r24, 0xDF	; 223
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
     568:	2f ef       	ldi	r18, 0xFF	; 255
     56a:	89 e6       	ldi	r24, 0x69	; 105
     56c:	98 e1       	ldi	r25, 0x18	; 24
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	80 40       	sbci	r24, 0x00	; 0
     572:	90 40       	sbci	r25, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <HOME_voidCheckUserAndPass+0x138>
     576:	00 c0       	rjmp	.+0      	; 0x578 <HOME_voidCheckUserAndPass+0x142>
     578:	00 00       	nop
     57a:	58 c0       	rjmp	.+176    	; 0x62c <HOME_voidCheckUserAndPass+0x1f6>
					_delay_ms(500);
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     57c:	e6 e0       	ldi	r30, 0x06	; 6
     57e:	ce 12       	cpse	r12, r30
     580:	26 c0       	rjmp	.+76     	; 0x5ce <HOME_voidCheckUserAndPass+0x198>
				{
					LCD_voidClear();
     582:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     58e:	8f ee       	ldi	r24, 0xEF	; 239
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	82 e0       	ldi	r24, 0x02	; 2
     59a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong User Name");
     59e:	8d ef       	ldi	r24, 0xFD	; 253
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     5a6:	12 30       	cpi	r17, 0x02	; 2
     5a8:	c9 f1       	breq	.+114    	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
     5aa:	ff ef       	ldi	r31, 0xFF	; 255
     5ac:	23 ed       	ldi	r18, 0xD3	; 211
     5ae:	80 e3       	ldi	r24, 0x30	; 48
     5b0:	f1 50       	subi	r31, 0x01	; 1
     5b2:	20 40       	sbci	r18, 0x00	; 0
     5b4:	80 40       	sbci	r24, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <HOME_voidCheckUserAndPass+0x17a>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <HOME_voidCheckUserAndPass+0x184>
     5ba:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     5c4:	8d e0       	ldi	r24, 0x0D	; 13
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
     5cc:	27 c0       	rjmp	.+78     	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     5ce:	bb 20       	and	r11, r11
     5d0:	29 f1       	breq	.+74     	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
				{
					LCD_voidClear();
     5d2:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     5de:	8f ee       	ldi	r24, 0xEF	; 239
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong Password");
     5ee:	8e e1       	ldi	r24, 0x1E	; 30
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     5f6:	12 30       	cpi	r17, 0x02	; 2
     5f8:	89 f0       	breq	.+34     	; 0x61c <HOME_voidCheckUserAndPass+0x1e6>
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
     5fc:	e3 ed       	ldi	r30, 0xD3	; 211
     5fe:	f0 e3       	ldi	r31, 0x30	; 48
     600:	91 50       	subi	r25, 0x01	; 1
     602:	e0 40       	sbci	r30, 0x00	; 0
     604:	f0 40       	sbci	r31, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <HOME_voidCheckUserAndPass+0x1ca>
     608:	00 c0       	rjmp	.+0      	; 0x60a <HOME_voidCheckUserAndPass+0x1d4>
     60a:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     614:	8d e0       	ldi	r24, 0x0D	; 13
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
			u8 local_u8EnteredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     61c:	1f 5f       	subi	r17, 0xFF	; 255
     61e:	03 c0       	rjmp	.+6      	; 0x626 <HOME_voidCheckUserAndPass+0x1f0>
     620:	d1 2c       	mov	r13, r1
     622:	a1 2c       	mov	r10, r1
     624:	10 e0       	ldi	r17, 0x00	; 0
     626:	13 30       	cpi	r17, 0x03	; 3
     628:	08 f4       	brcc	.+2      	; 0x62c <HOME_voidCheckUserAndPass+0x1f6>
     62a:	22 cf       	rjmp	.-444    	; 0x470 <HOME_voidCheckUserAndPass+0x3a>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     62c:	23 e0       	ldi	r18, 0x03	; 3
     62e:	a2 12       	cpse	r10, r18
     630:	d0 c0       	rjmp	.+416    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     632:	d1 10       	cpse	r13, r1
     634:	ce c0       	rjmp	.+412    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
			{
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	f4 01       	movw	r30, r8
     63a:	80 83       	st	Z, r24
     63c:	ca c0       	rjmp	.+404    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
			}
		}
		
		else if(copy_u8AccessType==HOME_REMOTE_ACCESS)
     63e:	82 30       	cpi	r24, 0x02	; 2
     640:	09 f0       	breq	.+2      	; 0x644 <HOME_voidCheckUserAndPass+0x20e>
     642:	c7 c0       	rjmp	.+398    	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     644:	b8 c0       	rjmp	.+368    	; 0x7b6 <HOME_voidCheckUserAndPass+0x380>
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
     646:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				
				//dis request for use name and pass
				BL_voidTxString	("Please Enter User Name & Password ");
     648:	8d e2       	ldi	r24, 0x2D	; 45
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
				BL_voidTxString("\n");
     650:	80 e5       	ldi	r24, 0x50	; 80
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
     658:	be 01       	movw	r22, r28
     65a:	6f 5e       	subi	r22, 0xEF	; 239
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	ce 01       	movw	r24, r28
     660:	49 96       	adiw	r24, 0x19	; 25
     662:	0e 94 a5 01 	call	0x34a	; 0x34a <HOME_voidRemoteGetUserAndPass>
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     666:	b1 2c       	mov	r11, r1
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     668:	c1 2c       	mov	r12, r1
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     66a:	05 e0       	ldi	r16, 0x05	; 5
     66c:	60 c0       	rjmp	.+192    	; 0x72e <HOME_voidCheckUserAndPass+0x2f8>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from EEPROM
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
     66e:	e0 2e       	mov	r14, r16
     670:	ee 0c       	add	r14, r14
     672:	ee 0c       	add	r14, r14
     674:	ee 0c       	add	r14, r14
     676:	ee 0c       	add	r14, r14
     678:	f1 2c       	mov	r15, r1
     67a:	ae 01       	movw	r20, r28
     67c:	47 5f       	subi	r20, 0xF7	; 247
     67e:	5f 4f       	sbci	r21, 0xFF	; 255
     680:	68 e0       	ldi	r22, 0x08	; 8
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	c7 01       	movw	r24, r14
     686:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
     68a:	ae 01       	movw	r20, r28
     68c:	4f 5f       	subi	r20, 0xFF	; 255
     68e:	5f 4f       	sbci	r21, 0xFF	; 255
     690:	68 e0       	ldi	r22, 0x08	; 8
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	c7 01       	movw	r24, r14
     696:	08 96       	adiw	r24, 0x08	; 8
     698:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_voidSequentialRead>
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
				{
					Local_u8NameByteCheck=0;
     69c:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	14 c0       	rjmp	.+40     	; 0x6ca <HOME_voidCheckUserAndPass+0x294>
					{
						
						//check the byte stored with the entered	
						if(local_u8EnteredRemoteUserName[Local_u8NameByteCheckCounter]==local_u8StoredRemoteUserName[Local_u8NameByteCheckCounter])
     6a2:	82 2f       	mov	r24, r18
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	e9 e1       	ldi	r30, 0x19	; 25
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ec 0f       	add	r30, r28
     6ac:	fd 1f       	adc	r31, r29
     6ae:	e8 0f       	add	r30, r24
     6b0:	f9 1f       	adc	r31, r25
     6b2:	30 81       	ld	r19, Z
     6b4:	e9 e0       	ldi	r30, 0x09	; 9
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	ec 0f       	add	r30, r28
     6ba:	fd 1f       	adc	r31, r29
     6bc:	e8 0f       	add	r30, r24
     6be:	f9 1f       	adc	r31, r25
     6c0:	80 81       	ld	r24, Z
     6c2:	38 13       	cpse	r19, r24
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <HOME_voidCheckUserAndPass+0x292>
						{
							
							Local_u8NameByteCheck++;
     6c6:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     6c8:	2f 5f       	subi	r18, 0xFF	; 255
     6ca:	28 30       	cpi	r18, 0x08	; 8
     6cc:	50 f3       	brcs	.-44     	; 0x6a2 <HOME_voidCheckUserAndPass+0x26c>
							
							
						}
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     6ce:	48 30       	cpi	r20, 0x08	; 8
     6d0:	61 f5       	brne	.+88     	; 0x72a <HOME_voidCheckUserAndPass+0x2f4>
     6d2:	15 c0       	rjmp	.+42     	; 0x6fe <HOME_voidCheckUserAndPass+0x2c8>
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							//check the byte stored with the entered
							if(local_u8EnteredRemoteUserPass[Local_u8PassByteCheckCounter]==local_u8StoredRemoteUserPass[Local_u8PassByteCheckCounter])
     6d4:	82 2f       	mov	r24, r18
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	e1 e1       	ldi	r30, 0x11	; 17
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	ec 0f       	add	r30, r28
     6de:	fd 1f       	adc	r31, r29
     6e0:	e8 0f       	add	r30, r24
     6e2:	f9 1f       	adc	r31, r25
     6e4:	30 81       	ld	r19, Z
     6e6:	e1 e0       	ldi	r30, 0x01	; 1
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ec 0f       	add	r30, r28
     6ec:	fd 1f       	adc	r31, r29
     6ee:	e8 0f       	add	r30, r24
     6f0:	f9 1f       	adc	r31, r25
     6f2:	80 81       	ld	r24, Z
     6f4:	38 13       	cpse	r19, r24
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <HOME_voidCheckUserAndPass+0x2c4>
							{
								Local_u8PassByteCheck++;
     6f8:	4f 5f       	subi	r20, 0xFF	; 255
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	02 c0       	rjmp	.+4      	; 0x702 <HOME_voidCheckUserAndPass+0x2cc>
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	28 30       	cpi	r18, 0x08	; 8
     704:	38 f3       	brcs	.-50     	; 0x6d4 <HOME_voidCheckUserAndPass+0x29e>
								
							}
									
						}
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     706:	48 30       	cpi	r20, 0x08	; 8
     708:	71 f4       	brne	.+28     	; 0x726 <HOME_voidCheckUserAndPass+0x2f0>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     70a:	05 30       	cpi	r16, 0x05	; 5
     70c:	31 f4       	brne	.+12     	; 0x71a <HOME_voidCheckUserAndPass+0x2e4>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	f4 01       	movw	r30, r8
     712:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     714:	dd 24       	eor	r13, r13
     716:	d3 94       	inc	r13
     718:	0d c0       	rjmp	.+26     	; 0x734 <HOME_voidCheckUserAndPass+0x2fe>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_REMOTE_USER;
     71a:	84 e0       	ldi	r24, 0x04	; 4
     71c:	f4 01       	movw	r30, r8
     71e:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     720:	dd 24       	eor	r13, r13
     722:	d3 94       	inc	r13
     724:	07 c0       	rjmp	.+14     	; 0x734 <HOME_voidCheckUserAndPass+0x2fe>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     726:	b3 94       	inc	r11
     728:	01 c0       	rjmp	.+2      	; 0x72c <HOME_voidCheckUserAndPass+0x2f6>
						
						
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     72a:	c3 94       	inc	r12
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	0b 30       	cpi	r16, 0x0B	; 11
     730:	08 f4       	brcc	.+2      	; 0x734 <HOME_voidCheckUserAndPass+0x2fe>
     732:	9d cf       	rjmp	.-198    	; 0x66e <HOME_voidCheckUserAndPass+0x238>
						
					}
						
				}
				//case of wright entry
				if(LocaL_u8RightEntery==1)
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	df 12       	cpse	r13, r31
     738:	08 c0       	rjmp	.+16     	; 0x74a <HOME_voidCheckUserAndPass+0x314>
				{
					
					BL_voidTxString	("ACCESS PERMITED");
     73a:	8f ed       	ldi	r24, 0xDF	; 223
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     742:	8d e0       	ldi	r24, 0x0D	; 13
     744:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					break;
     748:	3c c0       	rjmp	.+120    	; 0x7c2 <HOME_voidCheckUserAndPass+0x38c>
				}
				//is the entery was wrong 
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     74a:	26 e0       	ldi	r18, 0x06	; 6
     74c:	c2 12       	cpse	r12, r18
     74e:	18 c0       	rjmp	.+48     	; 0x780 <HOME_voidCheckUserAndPass+0x34a>
				{
					BL_voidTxString	("ACCESS DENIED");
     750:	8f ee       	ldi	r24, 0xEF	; 239
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     758:	8d e0       	ldi	r24, 0x0D	; 13
     75a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidTxString	("Wrong User Name");
     75e:	8d ef       	ldi	r24, 0xFD	; 253
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     766:	8d e0       	ldi	r24, 0x0D	; 13
     768:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     76c:	12 30       	cpi	r17, 0x02	; 2
     76e:	09 f1       	breq	.+66     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
					{	
						
						BL_voidTxString	("Please Try Again");
     770:	8d e0       	ldi	r24, 0x0D	; 13
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
						BL_voidTxChar('\r');
     778:	8d e0       	ldi	r24, 0x0D	; 13
     77a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
     77e:	19 c0       	rjmp	.+50     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
						
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     780:	bb 20       	and	r11, r11
     782:	b9 f0       	breq	.+46     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
				{
					BL_voidTxString	("ACCESS DENIED");
     784:	8f ee       	ldi	r24, 0xEF	; 239
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     78c:	8d e0       	ldi	r24, 0x0D	; 13
     78e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidTxString	("Wrong Password");
     792:	8e e1       	ldi	r24, 0x1E	; 30
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     79a:	8d e0       	ldi	r24, 0x0D	; 13
     79c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
										
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     7a0:	12 30       	cpi	r17, 0x02	; 2
     7a2:	39 f0       	breq	.+14     	; 0x7b2 <HOME_voidCheckUserAndPass+0x37c>
					{
						BL_voidTxString	("Please Try Again");
     7a4:	8d e0       	ldi	r24, 0x0D	; 13
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
						BL_voidTxChar('\r');
     7ac:	8d e0       	ldi	r24, 0x0D	; 13
     7ae:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			u8 local_u8EnteredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8RemoteUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     7b2:	1f 5f       	subi	r17, 0xFF	; 255
     7b4:	03 c0       	rjmp	.+6      	; 0x7bc <HOME_voidCheckUserAndPass+0x386>
     7b6:	d1 2c       	mov	r13, r1
     7b8:	a1 2c       	mov	r10, r1
     7ba:	10 e0       	ldi	r17, 0x00	; 0
     7bc:	13 30       	cpi	r17, 0x03	; 3
     7be:	08 f4       	brcc	.+2      	; 0x7c2 <HOME_voidCheckUserAndPass+0x38c>
     7c0:	42 cf       	rjmp	.-380    	; 0x646 <HOME_voidCheckUserAndPass+0x210>
					}
				}
				
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	a8 12       	cpse	r10, r24
     7c6:	05 c0       	rjmp	.+10     	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
     7c8:	d1 10       	cpse	r13, r1
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <HOME_voidCheckUserAndPass+0x39c>
			{
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     7cc:	85 e0       	ldi	r24, 0x05	; 5
     7ce:	f4 01       	movw	r30, r8
     7d0:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
}
     7d2:	a0 96       	adiw	r28, 0x20	; 32
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	08 95       	ret

000007f8 <GetUserType>:
	

}
void GetUserType()
{
	BL_voidTxString("Press # to login");
     7f8:	82 e5       	ldi	r24, 0x52	; 82
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
     800:	8d e0       	ldi	r24, 0x0D	; 13
     802:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	LCD_voidClear();
     806:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
	LCD_voidDisplayString("Press # to login");
     80a:	82 e5       	ldi	r24, 0x52	; 82
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
	while (Local_copyKPDValue ==KPD_Not_Pressed && bluetooh_value != '#')
     812:	04 c0       	rjmp	.+8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	{
		KPD_voidGetValue(&Local_copyKPDValue);
     814:	84 e6       	ldi	r24, 0x64	; 100
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
{
	BL_voidTxString("Press # to login");
	BL_voidTxChar('\r');
	LCD_voidClear();
	LCD_voidDisplayString("Press # to login");
	while (Local_copyKPDValue ==KPD_Not_Pressed && bluetooh_value != '#')
     81c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
     820:	8f 3f       	cpi	r24, 0xFF	; 255
     822:	21 f4       	brne	.+8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     824:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <bluetooh_value>
     828:	93 32       	cpi	r25, 0x23	; 35
     82a:	a1 f7       	brne	.-24     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
	{
		KPD_voidGetValue(&Local_copyKPDValue);
		// BL_voidRxCharWithTimeout(&bluetooh_value);
	}
	if (Local_copyKPDValue =='#')
     82c:	83 32       	cpi	r24, 0x23	; 35
     82e:	51 f4       	brne	.+20     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	{
		BL_voidTxString("Local User");
     830:	83 e6       	ldi	r24, 0x63	; 99
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
     838:	65 e6       	ldi	r22, 0x65	; 101
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0e 94 1b 02 	call	0x436	; 0x436 <HOME_voidCheckUserAndPass>
     842:	08 95       	ret
	
	}
	else if (bluetooh_value == '#')
     844:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     848:	83 32       	cpi	r24, 0x23	; 35
     84a:	59 f4       	brne	.+22     	; 0x862 <__stack+0x3>
	{
		LCD_voidClear();
     84c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
		LCD_voidDisplayString("Remote User");
     850:	8e e6       	ldi	r24, 0x6E	; 110
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
		HOME_voidCheckUserAndPass(HOME_REMOTE_ACCESS,&usertype);
     858:	65 e6       	ldi	r22, 0x65	; 101
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	0e 94 1b 02 	call	0x436	; 0x436 <HOME_voidCheckUserAndPass>
     862:	08 95       	ret

00000864 <HOME_voidChangeUserNameAndPass>:
		//error massage
	}
}

void HOME_voidChangeUserNameAndPass(void)
{
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	e0 97       	sbiw	r28, 0x30	; 48
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
	
	
	//dis request for use name and pass
	BL_voidTxString	("Please Enter User Name & Password u want to change");
     880:	8a e7       	ldi	r24, 0x7A	; 122
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxString("\r");
     888:	8d ea       	ldi	r24, 0xAD	; 173
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
     890:	be 01       	movw	r22, r28
     892:	67 5f       	subi	r22, 0xF7	; 247
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 a5 01 	call	0x34a	; 0x34a <HOME_voidRemoteGetUserAndPass>
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     89e:	10 e0       	ldi	r17, 0x00	; 0
     8a0:	51 c0       	rjmp	.+162    	; 0x944 <HOME_voidChangeUserNameAndPass+0xe0>
	{
		Local_u8NameByteCheck=0;
		Local_u8PassByteCheck=0;
		
		//skip admin page
		if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     8a2:	15 30       	cpi	r17, 0x05	; 5
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <HOME_voidChangeUserNameAndPass+0x44>
     8a6:	4d c0       	rjmp	.+154    	; 0x942 <HOME_voidChangeUserNameAndPass+0xde>
		{
			continue;
		}
		
		//get user name and pass from EEPROM
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
     8a8:	01 2f       	mov	r16, r17
     8aa:	02 95       	swap	r16
     8ac:	00 7f       	andi	r16, 0xF0	; 240
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
     8ae:	e0 2e       	mov	r14, r16
     8b0:	f1 2c       	mov	r15, r1
     8b2:	ae 01       	movw	r20, r28
     8b4:	4f 5d       	subi	r20, 0xDF	; 223
     8b6:	5f 4f       	sbci	r21, 0xFF	; 255
     8b8:	68 e0       	ldi	r22, 0x08	; 8
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	c7 01       	movw	r24, r14
     8be:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_voidSequentialRead>
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
     8c2:	ae 01       	movw	r20, r28
     8c4:	47 5d       	subi	r20, 0xD7	; 215
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	68 e0       	ldi	r22, 0x08	; 8
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	c7 01       	movw	r24, r14
     8ce:	08 96       	adiw	r24, 0x08	; 8
     8d0:	0e 94 55 12 	call	0x24aa	; 0x24aa <EEPROM_voidSequentialRead>
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
	{
		Local_u8NameByteCheck=0;
     8d4:	40 e0       	ldi	r20, 0x00	; 0
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	14 c0       	rjmp	.+40     	; 0x902 <HOME_voidChangeUserNameAndPass+0x9e>
		{
			
			//check the byte stored with the entered	
			if(local_u8OldUserName[Local_u8NameByteCheckCounter]==local_u8SavedUserName[Local_u8NameByteCheckCounter])
     8da:	82 2f       	mov	r24, r18
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	e1 e0       	ldi	r30, 0x01	; 1
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	ec 0f       	add	r30, r28
     8e4:	fd 1f       	adc	r31, r29
     8e6:	e8 0f       	add	r30, r24
     8e8:	f9 1f       	adc	r31, r25
     8ea:	30 81       	ld	r19, Z
     8ec:	e1 e2       	ldi	r30, 0x21	; 33
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ec 0f       	add	r30, r28
     8f2:	fd 1f       	adc	r31, r29
     8f4:	e8 0f       	add	r30, r24
     8f6:	f9 1f       	adc	r31, r25
     8f8:	80 81       	ld	r24, Z
     8fa:	38 13       	cpse	r19, r24
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <HOME_voidChangeUserNameAndPass+0x9c>
			{
				
				Local_u8NameByteCheck++;
     8fe:	4f 5f       	subi	r20, 0xFF	; 255
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     900:	2f 5f       	subi	r18, 0xFF	; 255
     902:	28 30       	cpi	r18, 0x08	; 8
     904:	50 f3       	brcs	.-44     	; 0x8da <HOME_voidChangeUserNameAndPass+0x76>
				
			}
			
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     906:	48 30       	cpi	r20, 0x08	; 8
     908:	e1 f4       	brne	.+56     	; 0x942 <HOME_voidChangeUserNameAndPass+0xde>
     90a:	15 c0       	rjmp	.+42     	; 0x936 <HOME_voidChangeUserNameAndPass+0xd2>
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
			{
				//check the byte stored with the entered
				if(local_u8OldUserPass[Local_u8PassByteCheckCounter]==local_u8SavedUserPass[Local_u8PassByteCheckCounter])
     90c:	82 2f       	mov	r24, r18
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	e9 e0       	ldi	r30, 0x09	; 9
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	ec 0f       	add	r30, r28
     916:	fd 1f       	adc	r31, r29
     918:	e8 0f       	add	r30, r24
     91a:	f9 1f       	adc	r31, r25
     91c:	30 81       	ld	r19, Z
     91e:	e9 e2       	ldi	r30, 0x29	; 41
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	ec 0f       	add	r30, r28
     924:	fd 1f       	adc	r31, r29
     926:	e8 0f       	add	r30, r24
     928:	f9 1f       	adc	r31, r25
     92a:	80 81       	ld	r24, Z
     92c:	38 13       	cpse	r19, r24
     92e:	01 c0       	rjmp	.+2      	; 0x932 <HOME_voidChangeUserNameAndPass+0xce>
				{
					Local_u8PassByteCheck++;
     930:	4f 5f       	subi	r20, 0xFF	; 255
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     932:	2f 5f       	subi	r18, 0xFF	; 255
     934:	02 c0       	rjmp	.+4      	; 0x93a <HOME_voidChangeUserNameAndPass+0xd6>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	28 30       	cpi	r18, 0x08	; 8
     93c:	38 f3       	brcs	.-50     	; 0x90c <HOME_voidChangeUserNameAndPass+0xa8>
				}
						
			}
			
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     93e:	48 30       	cpi	r20, 0x08	; 8
     940:	31 f0       	breq	.+12     	; 0x94e <HOME_voidChangeUserNameAndPass+0xea>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     942:	1f 5f       	subi	r17, 0xFF	; 255
     944:	1b 30       	cpi	r17, 0x0B	; 11
     946:	08 f4       	brcc	.+2      	; 0x94a <HOME_voidChangeUserNameAndPass+0xe6>
     948:	ac cf       	rjmp	.-168    	; 0x8a2 <HOME_voidChangeUserNameAndPass+0x3e>
{
	u8 local_u8OldUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8OldUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8TempUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8TempUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8SavedUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8SavedUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	01 c0       	rjmp	.+2      	; 0x950 <HOME_voidChangeUserNameAndPass+0xec>
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
			{
				
			
				LocaL_u8RightEntery=1;
     94e:	81 e0       	ldi	r24, 0x01	; 1
		}
			
	}
	
	//case of wright entry
	if(LocaL_u8RightEntery==1)
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	21 f5       	brne	.+72     	; 0x99c <HOME_voidChangeUserNameAndPass+0x138>
	{
		
		BL_voidTxString	("Please Enter The new User And Pass");
     954:	8f ea       	ldi	r24, 0xAF	; 175
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     95c:	8d e0       	ldi	r24, 0x0D	; 13
     95e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		//get New user name and pass from BL
		HOME_voidRemoteGetUserAndPass(&local_u8TempUserName,&local_u8TempUserPass);
     962:	be 01       	movw	r22, r28
     964:	67 5e       	subi	r22, 0xE7	; 231
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	ce 01       	movw	r24, r28
     96a:	41 96       	adiw	r24, 0x11	; 17
     96c:	0e 94 a5 01 	call	0x34a	; 0x34a <HOME_voidRemoteGetUserAndPass>
		//write the new user name & pass in EEPROM
		EEPROM_voidWritePage(Local_u8UserNameLocation,&local_u8TempUserName);
     970:	10 e0       	ldi	r17, 0x00	; 0
     972:	be 01       	movw	r22, r28
     974:	6f 5e       	subi	r22, 0xEF	; 239
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	c8 01       	movw	r24, r16
     97a:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
		EEPROM_voidWritePage((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),&local_u8TempUserPass);
     97e:	be 01       	movw	r22, r28
     980:	67 5e       	subi	r22, 0xE7	; 231
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	c8 01       	movw	r24, r16
     986:	08 96       	adiw	r24, 0x08	; 8
     988:	0e 94 02 12 	call	0x2404	; 0x2404 <EEPROM_voidWritePage>
		BL_voidTxString	("User Data Changed Successfully");
     98c:	82 ed       	ldi	r24, 0xD2	; 210
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     994:	8d e0       	ldi	r24, 0x0D	; 13
     996:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <HOME_voidChangeUserNameAndPass+0x146>
	}
	//is the entery was wrong 
	else 
	{

		BL_voidTxString	("Wrong User Name or password");
     99c:	81 ef       	ldi	r24, 0xF1	; 241
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     9a4:	8d e0       	ldi	r24, 0x0D	; 13
     9a6:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>

	}

	
	
}
     9aa:	e0 96       	adiw	r28, 0x30	; 48
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	ff 90       	pop	r15
     9c0:	ef 90       	pop	r14
     9c2:	08 95       	ret

000009c4 <HOME_voidFireAnALarm>:


void HOME_voidFireAnALarm(u8 copy_pu8UserStatus)
{
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <HOME_voidFireAnALarm+0x6>
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CheckAlarm,Local_u8ResetValue;
	
	// fire alarm if the user entry failed
	if(copy_pu8UserStatus==HOME_LOGIN_FAILED)
     9ce:	85 30       	cpi	r24, 0x05	; 5
     9d0:	29 f4       	brne	.+10     	; 0x9dc <HOME_voidFireAnALarm+0x18>
	{
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_VALUE);
     9d2:	68 ec       	ldi	r22, 0xC8	; 200
     9d4:	84 eb       	ldi	r24, 0xB4	; 180
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <EEPROM_voidWriteByte>
	}
	
	//check alarm status
	EEPROM_voidReadByte(HOME_ALARM_LOCATION,&Local_u8CheckAlarm);
     9dc:	be 01       	movw	r22, r28
     9de:	6f 5f       	subi	r22, 0xFF	; 255
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	84 eb       	ldi	r24, 0xB4	; 180
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 2d 12 	call	0x245a	; 0x245a <EEPROM_voidReadByte>
	
	//block system if there is an alarm
	if(Local_u8CheckAlarm==HOME_ALARM_VALUE)
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	88 3c       	cpi	r24, 0xC8	; 200
     9ee:	29 f5       	brne	.+74     	; 0xa3a <HOME_voidFireAnALarm+0x76>
	{
		while(1)
		{
			BL_voidTxString	("SYSTEM IS BLOCKED");
     9f0:	8d e0       	ldi	r24, 0x0D	; 13
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     9f8:	8d e0       	ldi	r24, 0x0D	; 13
     9fa:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>

			BUZZER_voidOn(DIO_PORTD,DIO_PIN6);
     9fe:	66 e0       	ldi	r22, 0x06	; 6
     a00:	83 e0       	ldi	r24, 0x03	; 3
     a02:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <BUZZER_voidOn>
			
			LCD_voidClear();
     a06:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
			LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayString("SYSTEM IS BLOCKED");
     a12:	8d e0       	ldi	r24, 0x0D	; 13
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
			
			//if the user enter # end alarm
			BL_voidRxChar(&Local_u8ResetValue);
     a1a:	ce 01       	movw	r24, r28
     a1c:	02 96       	adiw	r24, 0x02	; 2
     a1e:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
			if(Local_u8ResetValue=='#')
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	83 32       	cpi	r24, 0x23	; 35
     a26:	21 f7       	brne	.-56     	; 0x9f0 <HOME_voidFireAnALarm+0x2c>
			{
				BUZZER_voidOff(DIO_PORTD,DIO_PIN6);
     a28:	66 e0       	ldi	r22, 0x06	; 6
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <BUZZER_voidOff>
				break;
			}
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	84 eb       	ldi	r24, 0xB4	; 180
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <EEPROM_voidWriteByte>
	}
}
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <KPD_Interface_RemoteAdmin>:
void KPD_Interface_RemoteAdmin(void)
{
	// This function is for admin usertype for accessing the smart home remotely showing all options available for the admin//

	//setting the TRM0 ctc interrupt function
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
     a44:	8d ef       	ldi	r24, 0xFD	; 253
     a46:	9d e0       	ldi	r25, 0x0D	; 13
     a48:	0e 94 a1 18 	call	0x3142	; 0x3142 <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
     a4c:	8d e0       	ldi	r24, 0x0D	; 13
     a4e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
     a52:	8f e1       	ldi	r24, 0x1F	; 31
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
     a5a:	8d e0       	ldi	r24, 0x0D	; 13
     a5c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
     a60:	8c e2       	ldi	r24, 0x2C	; 44
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
     a68:	8d e0       	ldi	r24, 0x0D	; 13
     a6a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidTxString("5- change username and password");
     a6e:	8a e3       	ldi	r24, 0x3A	; 58
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
     a76:	8d e0       	ldi	r24, 0x0D	; 13
     a78:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidTxString("6- To Sign Out");
     a7c:	8a e5       	ldi	r24, 0x5A	; 90
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
     a84:	8d e0       	ldi	r24, 0x0D	; 13
     a86:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	TMR0_voidStart();
     a8a:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
	//reciving user selection from BL
	BL_voidRxChar(&bluetooh_value);
     a8e:	89 ed       	ldi	r24, 0xD9	; 217
     a90:	94 e0       	ldi	r25, 0x04	; 4
     a92:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
	TMR0_voidStop();
     a96:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
	switch (bluetooh_value)
     a9a:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     a9e:	83 33       	cpi	r24, 0x33	; 51
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <KPD_Interface_RemoteAdmin+0x60>
     aa2:	cb c3       	rjmp	.+1942   	; 0x123a <KPD_Interface_RemoteAdmin+0x7f6>
     aa4:	30 f4       	brcc	.+12     	; 0xab2 <KPD_Interface_RemoteAdmin+0x6e>
     aa6:	81 33       	cpi	r24, 0x31	; 49
     aa8:	69 f0       	breq	.+26     	; 0xac4 <KPD_Interface_RemoteAdmin+0x80>
     aaa:	82 33       	cpi	r24, 0x32	; 50
     aac:	09 f4       	brne	.+2      	; 0xab0 <KPD_Interface_RemoteAdmin+0x6c>
     aae:	b4 c0       	rjmp	.+360    	; 0xc18 <KPD_Interface_RemoteAdmin+0x1d4>
     ab0:	08 95       	ret
     ab2:	85 33       	cpi	r24, 0x35	; 53
     ab4:	09 f4       	brne	.+2      	; 0xab8 <KPD_Interface_RemoteAdmin+0x74>
     ab6:	3f c4       	rjmp	.+2174   	; 0x1336 <KPD_Interface_RemoteAdmin+0x8f2>
     ab8:	08 f4       	brcc	.+2      	; 0xabc <KPD_Interface_RemoteAdmin+0x78>
     aba:	eb c3       	rjmp	.+2006   	; 0x1292 <KPD_Interface_RemoteAdmin+0x84e>
     abc:	86 33       	cpi	r24, 0x36	; 54
     abe:	09 f4       	brne	.+2      	; 0xac2 <KPD_Interface_RemoteAdmin+0x7e>
     ac0:	3d c4       	rjmp	.+2170   	; 0x133c <KPD_Interface_RemoteAdmin+0x8f8>
     ac2:	08 95       	ret
	{
	case ('1'):
		DIO_voidGetPinValue(DIO_PORTC,DIO_PIN2,&ac_status);
     ac4:	4b ec       	ldi	r20, 0xCB	; 203
     ac6:	54 e0       	ldi	r21, 0x04	; 4
     ac8:	62 e0       	ldi	r22, 0x02	; 2
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
		if (ac_status==0)
     ad0:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <ac_status>
     ad4:	81 11       	cpse	r24, r1
     ad6:	49 c0       	rjmp	.+146    	; 0xb6a <KPD_Interface_RemoteAdmin+0x126>
		{
			BL_voidTxString("AC is Off");
     ad8:	89 e6       	ldi	r24, 0x69	; 105
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     ae0:	8d e0       	ldi	r24, 0x0D	; 13
     ae2:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		//getting temp from ADC
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     ae6:	68 ec       	ldi	r22, 0xC8	; 200
     ae8:	74 e0       	ldi	r23, 0x04	; 4
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
		//sprintf is used to format and store a string in a buffer
		sprintf(tempString, "Room Temp: %d c", local_temp);
     af0:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
     af4:	1f 92       	push	r1
     af6:	8f 93       	push	r24
     af8:	83 e7       	ldi	r24, 0x73	; 115
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	9f 93       	push	r25
     afe:	8f 93       	push	r24
     b00:	8e ee       	ldi	r24, 0xEE	; 238
     b02:	94 e0       	ldi	r25, 0x04	; 4
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
		BL_voidTxString(tempString);
     b0c:	8e ee       	ldi	r24, 0xEE	; 238
     b0e:	94 e0       	ldi	r25, 0x04	; 4
     b10:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     b14:	8d e0       	ldi	r24, 0x0D	; 13
     b16:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		BL_voidTxString("1- To Turn It On");
     b1a:	83 e8       	ldi	r24, 0x83	; 131
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     b22:	8d e0       	ldi	r24, 0x0D	; 13
     b24:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		BL_voidTxString("0-go to home");
     b28:	84 e9       	ldi	r24, 0x94	; 148
     b2a:	92 e0       	ldi	r25, 0x02	; 2
     b2c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
     b30:	8d e0       	ldi	r24, 0x0D	; 13
     b32:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		TMR0_voidStart();
     b36:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
		BL_voidRxChar(&bluetooh_value);
     b3a:	89 ed       	ldi	r24, 0xD9	; 217
     b3c:	94 e0       	ldi	r25, 0x04	; 4
     b3e:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
		TMR0_voidStop();
     b42:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
		if (bluetooh_value=='0')
     b46:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	80 33       	cpi	r24, 0x30	; 48
     b58:	09 f4       	brne	.+2      	; 0xb5c <KPD_Interface_RemoteAdmin+0x118>
     b5a:	f3 c3       	rjmp	.+2022   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
			{
				break;
			}
		if (bluetooh_value=='1')
     b5c:	81 33       	cpi	r24, 0x31	; 49
     b5e:	29 f4       	brne	.+10     	; 0xb6a <KPD_Interface_RemoteAdmin+0x126>
			{
				DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
     b60:	41 e0       	ldi	r20, 0x01	; 1
     b62:	62 e0       	ldi	r22, 0x02	; 2
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>


			

		}
				if (ac_status==1)
     b6a:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <ac_status>
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	09 f0       	breq	.+2      	; 0xb74 <KPD_Interface_RemoteAdmin+0x130>
     b72:	e7 c3       	rjmp	.+1998   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
		{
			BL_voidTxString("AC is On");
     b74:	81 ea       	ldi	r24, 0xA1	; 161
     b76:	92 e0       	ldi	r25, 0x02	; 2
     b78:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     b7c:	8d e0       	ldi	r24, 0x0D	; 13
     b7e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxString("1- To Turn It Off");
     b82:	8a ea       	ldi	r24, 0xAA	; 170
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     b8a:	8d e0       	ldi	r24, 0x0D	; 13
     b8c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     b90:	68 ec       	ldi	r22, 0xC8	; 200
     b92:	74 e0       	ldi	r23, 0x04	; 4
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
			//sprintf is used to format and store a string in a buffer
			sprintf(tempString, "Room Temp: %d c", local_temp);
     b9a:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
     b9e:	1f 92       	push	r1
     ba0:	8f 93       	push	r24
     ba2:	83 e7       	ldi	r24, 0x73	; 115
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	9f 93       	push	r25
     ba8:	8f 93       	push	r24
     baa:	8e ee       	ldi	r24, 0xEE	; 238
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
			BL_voidTxString(tempString);
     bb6:	8e ee       	ldi	r24, 0xEE	; 238
     bb8:	94 e0       	ldi	r25, 0x04	; 4
     bba:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     bbe:	8d e0       	ldi	r24, 0x0D	; 13
     bc0:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxString("1- To Turn It On");
     bc4:	83 e8       	ldi	r24, 0x83	; 131
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     bcc:	8d e0       	ldi	r24, 0x0D	; 13
     bce:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxString("0-go to home");
     bd2:	84 e9       	ldi	r24, 0x94	; 148
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     bda:	8d e0       	ldi	r24, 0x0D	; 13
     bdc:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			TMR0_voidStart();
     be0:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     be4:	89 ed       	ldi	r24, 0xD9	; 217
     be6:	94 e0       	ldi	r25, 0x04	; 4
     be8:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
			TMR0_voidStop();
     bec:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
			if (bluetooh_value=='0')
     bf0:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     bf4:	0f 90       	pop	r0
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	80 33       	cpi	r24, 0x30	; 48
     c02:	09 f4       	brne	.+2      	; 0xc06 <KPD_Interface_RemoteAdmin+0x1c2>
     c04:	9e c3       	rjmp	.+1852   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
				{
					break;
				}
			
			if (bluetooh_value=='1')
     c06:	81 33       	cpi	r24, 0x31	; 49
     c08:	09 f0       	breq	.+2      	; 0xc0c <KPD_Interface_RemoteAdmin+0x1c8>
     c0a:	9b c3       	rjmp	.+1846   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
				{
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	62 e0       	ldi	r22, 0x02	; 2
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
     c16:	08 95       	ret
		break;
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
     c18:	8d e0       	ldi	r24, 0x0D	; 13
     c1a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
            BL_voidTxString("Choose light to");
     c1e:	8c eb       	ldi	r24, 0xBC	; 188
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
            BL_voidTxChar('\r');
     c26:	8d e0       	ldi	r24, 0x0D	; 13
     c28:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
     c2c:	8c ec       	ldi	r24, 0xCC	; 204
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
     c34:	8d e0       	ldi	r24, 0x0D	; 13
     c36:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxChar('\r');
     c3a:	8d e0       	ldi	r24, 0x0D	; 13
     c3c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
            TMR0_voidStart();
     c40:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     c44:	89 ed       	ldi	r24, 0xD9	; 217
     c46:	94 e0       	ldi	r25, 0x04	; 4
     c48:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
            TMR0_voidStop();
     c4c:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
            switch (bluetooh_value)
     c50:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     c54:	83 33       	cpi	r24, 0x33	; 51
     c56:	09 f4       	brne	.+2      	; 0xc5a <KPD_Interface_RemoteAdmin+0x216>
     c58:	a0 c0       	rjmp	.+320    	; 0xd9a <KPD_Interface_RemoteAdmin+0x356>
     c5a:	30 f4       	brcc	.+12     	; 0xc68 <KPD_Interface_RemoteAdmin+0x224>
     c5c:	81 33       	cpi	r24, 0x31	; 49
     c5e:	69 f0       	breq	.+26     	; 0xc7a <KPD_Interface_RemoteAdmin+0x236>
     c60:	82 33       	cpi	r24, 0x32	; 50
     c62:	09 f4       	brne	.+2      	; 0xc66 <KPD_Interface_RemoteAdmin+0x222>
     c64:	50 c0       	rjmp	.+160    	; 0xd06 <KPD_Interface_RemoteAdmin+0x2c2>
     c66:	08 95       	ret
     c68:	85 33       	cpi	r24, 0x35	; 53
     c6a:	09 f4       	brne	.+2      	; 0xc6e <KPD_Interface_RemoteAdmin+0x22a>
     c6c:	2a c1       	rjmp	.+596    	; 0xec2 <KPD_Interface_RemoteAdmin+0x47e>
     c6e:	08 f4       	brcc	.+2      	; 0xc72 <KPD_Interface_RemoteAdmin+0x22e>
     c70:	de c0       	rjmp	.+444    	; 0xe2e <KPD_Interface_RemoteAdmin+0x3ea>
     c72:	86 33       	cpi	r24, 0x36	; 54
     c74:	09 f4       	brne	.+2      	; 0xc78 <KPD_Interface_RemoteAdmin+0x234>
     c76:	6f c1       	rjmp	.+734    	; 0xf56 <KPD_Interface_RemoteAdmin+0x512>
     c78:	08 95       	ret
            {
            case ('1'):
			//DIO_voidGetPinValue is used to check if the led is on or off before changing its state

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     c7a:	4a ec       	ldi	r20, 0xCA	; 202
     c7c:	54 e0       	ldi	r21, 0x04	; 4
     c7e:	63 e0       	ldi	r22, 0x03	; 3
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     c86:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	e9 f4       	brne	.+58     	; 0xcc8 <KPD_Interface_RemoteAdmin+0x284>
                {
                    BL_voidTxString("Light 1 is On");
     c8e:	89 ed       	ldi	r24, 0xD9	; 217
     c90:	92 e0       	ldi	r25, 0x02	; 2
     c92:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     c96:	8d e0       	ldi	r24, 0x0D	; 13
     c98:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     c9c:	87 ee       	ldi	r24, 0xE7	; 231
     c9e:	92 e0       	ldi	r25, 0x02	; 2
     ca0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     ca4:	8d e0       	ldi	r24, 0x0D	; 13
     ca6:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     caa:	89 ed       	ldi	r24, 0xD9	; 217
     cac:	94 e0       	ldi	r25, 0x04	; 4
     cae:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
     cb2:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     cb6:	81 33       	cpi	r24, 0x31	; 49
     cb8:	09 f0       	breq	.+2      	; 0xcbc <KPD_Interface_RemoteAdmin+0x278>
     cba:	43 c3       	rjmp	.+1670   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     cbc:	41 e0       	ldi	r20, 0x01	; 1
     cbe:	63 e0       	ldi	r22, 0x03	; 3
     cc0:	83 e0       	ldi	r24, 0x03	; 3
     cc2:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
     cc6:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
     cc8:	81 11       	cpse	r24, r1
     cca:	3b c3       	rjmp	.+1654   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 1 is OFF");
     ccc:	88 ef       	ldi	r24, 0xF8	; 248
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     cd4:	8d e0       	ldi	r24, 0x0D	; 13
     cd6:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     cda:	87 e0       	ldi	r24, 0x07	; 7
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     ce2:	8d e0       	ldi	r24, 0x0D	; 13
     ce4:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     ce8:	89 ed       	ldi	r24, 0xD9	; 217
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
     cf0:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     cf4:	81 33       	cpi	r24, 0x31	; 49
     cf6:	09 f0       	breq	.+2      	; 0xcfa <KPD_Interface_RemoteAdmin+0x2b6>
     cf8:	24 c3       	rjmp	.+1608   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	63 e0       	ldi	r22, 0x03	; 3
     cfe:	83 e0       	ldi	r24, 0x03	; 3
     d00:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
     d04:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
     d06:	4a ec       	ldi	r20, 0xCA	; 202
     d08:	54 e0       	ldi	r21, 0x04	; 4
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     d12:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	f9 f4       	brne	.+62     	; 0xd58 <KPD_Interface_RemoteAdmin+0x314>
                {
                    BL_voidTxString("Light 2 is On");
     d1a:	87 e1       	ldi	r24, 0x17	; 23
     d1c:	93 e0       	ldi	r25, 0x03	; 3
     d1e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     d22:	8d e0       	ldi	r24, 0x0D	; 13
     d24:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     d28:	87 ee       	ldi	r24, 0xE7	; 231
     d2a:	92 e0       	ldi	r25, 0x02	; 2
     d2c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     d30:	8d e0       	ldi	r24, 0x0D	; 13
     d32:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d36:	89 ed       	ldi	r24, 0xD9	; 217
     d38:	94 e0       	ldi	r25, 0x04	; 4
     d3a:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
     d3e:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     d42:	81 33       	cpi	r24, 0x31	; 49
     d44:	29 f4       	brne	.+10     	; 0xd50 <KPD_Interface_RemoteAdmin+0x30c>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     d56:	08 95       	ret
                }
                else if (led_status == 0)
     d58:	81 11       	cpse	r24, r1
     d5a:	f3 c2       	rjmp	.+1510   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 2 is OFF");
     d5c:	85 e2       	ldi	r24, 0x25	; 37
     d5e:	93 e0       	ldi	r25, 0x03	; 3
     d60:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     d64:	8d e0       	ldi	r24, 0x0D	; 13
     d66:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     d6a:	87 e0       	ldi	r24, 0x07	; 7
     d6c:	93 e0       	ldi	r25, 0x03	; 3
     d6e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     d72:	8d e0       	ldi	r24, 0x0D	; 13
     d74:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d78:	89 ed       	ldi	r24, 0xD9	; 217
     d7a:	94 e0       	ldi	r25, 0x04	; 4
     d7c:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
     d80:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     d84:	81 33       	cpi	r24, 0x31	; 49
     d86:	29 f4       	brne	.+10     	; 0xd92 <KPD_Interface_RemoteAdmin+0x34e>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     d88:	41 e0       	ldi	r20, 0x01	; 1
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     d98:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     d9a:	4a ec       	ldi	r20, 0xCA	; 202
     d9c:	54 e0       	ldi	r21, 0x04	; 4
     d9e:	62 e0       	ldi	r22, 0x02	; 2
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     da6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	f9 f4       	brne	.+62     	; 0xdec <KPD_Interface_RemoteAdmin+0x3a8>
                {
                    BL_voidTxString("Light 3 is On");
     dae:	84 e3       	ldi	r24, 0x34	; 52
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     db6:	8d e0       	ldi	r24, 0x0D	; 13
     db8:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     dbc:	87 ee       	ldi	r24, 0xE7	; 231
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     dc4:	8d e0       	ldi	r24, 0x0D	; 13
     dc6:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     dca:	89 ed       	ldi	r24, 0xD9	; 217
     dcc:	94 e0       	ldi	r25, 0x04	; 4
     dce:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
     dd2:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     dd6:	81 33       	cpi	r24, 0x31	; 49
     dd8:	29 f4       	brne	.+10     	; 0xde4 <KPD_Interface_RemoteAdmin+0x3a0>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	62 e0       	ldi	r22, 0x02	; 2
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     dea:	08 95       	ret
                }
                else if (led_status == 0)
     dec:	81 11       	cpse	r24, r1
     dee:	a9 c2       	rjmp	.+1362   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 3 is OFF");
     df0:	82 e4       	ldi	r24, 0x42	; 66
     df2:	93 e0       	ldi	r25, 0x03	; 3
     df4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     df8:	8d e0       	ldi	r24, 0x0D	; 13
     dfa:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     dfe:	87 e0       	ldi	r24, 0x07	; 7
     e00:	93 e0       	ldi	r25, 0x03	; 3
     e02:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     e06:	8d e0       	ldi	r24, 0x0D	; 13
     e08:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     e0c:	89 ed       	ldi	r24, 0xD9	; 217
     e0e:	94 e0       	ldi	r25, 0x04	; 4
     e10:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
     e14:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     e18:	81 33       	cpi	r24, 0x31	; 49
     e1a:	29 f4       	brne	.+10     	; 0xe26 <KPD_Interface_RemoteAdmin+0x3e2>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     e1c:	41 e0       	ldi	r20, 0x01	; 1
     e1e:	62 e0       	ldi	r22, 0x02	; 2
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     e2c:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     e2e:	4a ec       	ldi	r20, 0xCA	; 202
     e30:	54 e0       	ldi	r21, 0x04	; 4
     e32:	63 e0       	ldi	r22, 0x03	; 3
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     e3a:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	f9 f4       	brne	.+62     	; 0xe80 <KPD_Interface_RemoteAdmin+0x43c>
                {
                    BL_voidTxString("Light 4 is On");
     e42:	81 e5       	ldi	r24, 0x51	; 81
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e4a:	8d e0       	ldi	r24, 0x0D	; 13
     e4c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     e50:	87 ee       	ldi	r24, 0xE7	; 231
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     e58:	8d e0       	ldi	r24, 0x0D	; 13
     e5a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     e5e:	89 ed       	ldi	r24, 0xD9	; 217
     e60:	94 e0       	ldi	r25, 0x04	; 4
     e62:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
     e66:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     e6a:	81 33       	cpi	r24, 0x31	; 49
     e6c:	29 f4       	brne	.+10     	; 0xe78 <KPD_Interface_RemoteAdmin+0x434>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	63 e0       	ldi	r22, 0x03	; 3
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     e7e:	08 95       	ret
                }
                else if (led_status == 0)
     e80:	81 11       	cpse	r24, r1
     e82:	5f c2       	rjmp	.+1214   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 4 is OFF");
     e84:	8f e5       	ldi	r24, 0x5F	; 95
     e86:	93 e0       	ldi	r25, 0x03	; 3
     e88:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e8c:	8d e0       	ldi	r24, 0x0D	; 13
     e8e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     e92:	87 e0       	ldi	r24, 0x07	; 7
     e94:	93 e0       	ldi	r25, 0x03	; 3
     e96:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     e9a:	8d e0       	ldi	r24, 0x0D	; 13
     e9c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     ea0:	89 ed       	ldi	r24, 0xD9	; 217
     ea2:	94 e0       	ldi	r25, 0x04	; 4
     ea4:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
     ea8:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     eac:	81 33       	cpi	r24, 0x31	; 49
     eae:	29 f4       	brne	.+10     	; 0xeba <KPD_Interface_RemoteAdmin+0x476>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     eb0:	41 e0       	ldi	r20, 0x01	; 1
     eb2:	63 e0       	ldi	r22, 0x03	; 3
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     ec0:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     ec2:	4a ec       	ldi	r20, 0xCA	; 202
     ec4:	54 e0       	ldi	r21, 0x04	; 4
     ec6:	62 e0       	ldi	r22, 0x02	; 2
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     ece:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	f9 f4       	brne	.+62     	; 0xf14 <KPD_Interface_RemoteAdmin+0x4d0>
                {
                    BL_voidTxString("Light 5 is On");
     ed6:	8e e6       	ldi	r24, 0x6E	; 110
     ed8:	93 e0       	ldi	r25, 0x03	; 3
     eda:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     ede:	8d e0       	ldi	r24, 0x0D	; 13
     ee0:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     ee4:	87 ee       	ldi	r24, 0xE7	; 231
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     eec:	8d e0       	ldi	r24, 0x0D	; 13
     eee:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     ef2:	89 ed       	ldi	r24, 0xD9	; 217
     ef4:	94 e0       	ldi	r25, 0x04	; 4
     ef6:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
     efa:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     efe:	81 33       	cpi	r24, 0x31	; 49
     f00:	29 f4       	brne	.+10     	; 0xf0c <KPD_Interface_RemoteAdmin+0x4c8>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	62 e0       	ldi	r22, 0x02	; 2
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     f12:	08 95       	ret
                }
                else if (led_status == 0)
     f14:	81 11       	cpse	r24, r1
     f16:	15 c2       	rjmp	.+1066   	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 5 is OFF");
     f18:	8c e7       	ldi	r24, 0x7C	; 124
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     f20:	8d e0       	ldi	r24, 0x0D	; 13
     f22:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     f26:	87 e0       	ldi	r24, 0x07	; 7
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     f2e:	8d e0       	ldi	r24, 0x0D	; 13
     f30:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     f34:	89 ed       	ldi	r24, 0xD9	; 217
     f36:	94 e0       	ldi	r25, 0x04	; 4
     f38:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
     f3c:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     f40:	81 33       	cpi	r24, 0x31	; 49
     f42:	29 f4       	brne	.+10     	; 0xf4e <KPD_Interface_RemoteAdmin+0x50a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	62 e0       	ldi	r22, 0x02	; 2
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
     f54:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):
				// Dimmer can be controlled using TMR1 PWM mode range from 0 to 100 with -+10% step
                if (dimmer_brightness > 0)
     f56:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
     f5a:	88 23       	and	r24, r24
     f5c:	09 f4       	brne	.+2      	; 0xf60 <KPD_Interface_RemoteAdmin+0x51c>
     f5e:	b1 c0       	rjmp	.+354    	; 0x10c2 <KPD_Interface_RemoteAdmin+0x67e>
                {
					 BL_voidTxChar('\r');
     f60:	8d e0       	ldi	r24, 0x0D	; 13
     f62:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
     f66:	8b e8       	ldi	r24, 0x8B	; 139
     f68:	93 e0       	ldi	r25, 0x03	; 3
     f6a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     f6e:	8d e0       	ldi	r24, 0x0D	; 13
     f70:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     f74:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
     f78:	1f 92       	push	r1
     f7a:	8f 93       	push	r24
     f7c:	89 e9       	ldi	r24, 0x99	; 153
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	9f 93       	push	r25
     f82:	8f 93       	push	r24
     f84:	8a ed       	ldi	r24, 0xDA	; 218
     f86:	94 e0       	ldi	r25, 0x04	; 4
     f88:	9f 93       	push	r25
     f8a:	8f 93       	push	r24
     f8c:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
					BL_voidTxString(DimmerString);
     f90:	8a ed       	ldi	r24, 0xDA	; 218
     f92:	94 e0       	ldi	r25, 0x04	; 4
     f94:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
     f98:	8d e0       	ldi	r24, 0x0D	; 13
     f9a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     f9e:	89 ea       	ldi	r24, 0xA9	; 169
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
     fa6:	8d e0       	ldi	r24, 0x0D	; 13
     fa8:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     fac:	89 ed       	ldi	r24, 0xD9	; 217
     fae:	94 e0       	ldi	r25, 0x04	; 4
     fb0:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
					while (bluetooh_value != 0)
     fb4:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	88 23       	and	r24, r24
     fc6:	09 f4       	brne	.+2      	; 0xfca <KPD_Interface_RemoteAdmin+0x586>
     fc8:	bc c1       	rjmp	.+888    	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
					{
						if (bluetooh_value == '1')
     fca:	81 33       	cpi	r24, 0x31	; 49
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <KPD_Interface_RemoteAdmin+0x58c>
     fce:	43 c0       	rjmp	.+134    	; 0x1056 <KPD_Interface_RemoteAdmin+0x612>
						{
							dimmer_brightness += 10;
     fd0:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
     fd4:	66 5f       	subi	r22, 0xF6	; 246
     fd6:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
     fe4:	ab 01       	movw	r20, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	88 ee       	ldi	r24, 0xE8	; 232
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     ff0:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
     ff4:	1f 92       	push	r1
     ff6:	8f 93       	push	r24
     ff8:	89 e9       	ldi	r24, 0x99	; 153
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	9f 93       	push	r25
     ffe:	8f 93       	push	r24
    1000:	8a ed       	ldi	r24, 0xDA	; 218
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	9f 93       	push	r25
    1006:	8f 93       	push	r24
    1008:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    100c:	8a ed       	ldi	r24, 0xDA	; 218
    100e:	94 e0       	ldi	r25, 0x04	; 4
    1010:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1014:	8d e0       	ldi	r24, 0x0D	; 13
    1016:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    101a:	89 ea       	ldi	r24, 0xA9	; 169
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    1022:	8d e0       	ldi	r24, 0x0D	; 13
    1024:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							// check if is the brightness is more than 100
							if (dimmer_brightness > 100)
    1028:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	85 36       	cpi	r24, 0x65	; 101
    103a:	08 f4       	brcc	.+2      	; 0x103e <KPD_Interface_RemoteAdmin+0x5fa>
    103c:	82 c1       	rjmp	.+772    	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
							{
								//block increasing the brightness above 100
								dimmer_brightness = 100;
    103e:	84 e6       	ldi	r24, 0x64	; 100
    1040:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1044:	40 e0       	ldi	r20, 0x00	; 0
    1046:	50 e0       	ldi	r21, 0x00	; 0
    1048:	68 ec       	ldi	r22, 0xC8	; 200
    104a:	72 e4       	ldi	r23, 0x42	; 66
    104c:	88 ee       	ldi	r24, 0xE8	; 232
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
    1054:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
    1056:	82 33       	cpi	r24, 0x32	; 50
    1058:	09 f0       	breq	.+2      	; 0x105c <KPD_Interface_RemoteAdmin+0x618>
    105a:	73 c1       	rjmp	.+742    	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
						{
							dimmer_brightness -= 10;
    105c:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1060:	6a 50       	subi	r22, 0x0A	; 10
    1062:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    1070:	ab 01       	movw	r20, r22
    1072:	bc 01       	movw	r22, r24
    1074:	88 ee       	ldi	r24, 0xE8	; 232
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    107c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1080:	1f 92       	push	r1
    1082:	8f 93       	push	r24
    1084:	89 e9       	ldi	r24, 0x99	; 153
    1086:	93 e0       	ldi	r25, 0x03	; 3
    1088:	9f 93       	push	r25
    108a:	8f 93       	push	r24
    108c:	8a ed       	ldi	r24, 0xDA	; 218
    108e:	94 e0       	ldi	r25, 0x04	; 4
    1090:	9f 93       	push	r25
    1092:	8f 93       	push	r24
    1094:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    1098:	8a ed       	ldi	r24, 0xDA	; 218
    109a:	94 e0       	ldi	r25, 0x04	; 4
    109c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    10a0:	8d e0       	ldi	r24, 0x0D	; 13
    10a2:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    10a6:	89 ea       	ldi	r24, 0xA9	; 169
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    10ae:	8d e0       	ldi	r24, 0x0D	; 13
    10b0:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							{
								//block decreasing the brightness below 0
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
    10c2:	81 11       	cpse	r24, r1
    10c4:	3e c1       	rjmp	.+636    	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
                {
                    BL_voidTxString("Light 6 is OFF");
    10c6:	89 eb       	ldi	r24, 0xB9	; 185
    10c8:	93 e0       	ldi	r25, 0x03	; 3
    10ca:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
    10ce:	2f ef       	ldi	r18, 0xFF	; 255
    10d0:	83 ed       	ldi	r24, 0xD3	; 211
    10d2:	90 e3       	ldi	r25, 0x30	; 48
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	80 40       	sbci	r24, 0x00	; 0
    10d8:	90 40       	sbci	r25, 0x00	; 0
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <KPD_Interface_RemoteAdmin+0x690>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <KPD_Interface_RemoteAdmin+0x69a>
    10de:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
    10e0:	8d e0       	ldi	r24, 0x0D	; 13
    10e2:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    10e6:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    10ea:	1f 92       	push	r1
    10ec:	8f 93       	push	r24
    10ee:	89 e9       	ldi	r24, 0x99	; 153
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	9f 93       	push	r25
    10f4:	8f 93       	push	r24
    10f6:	8a ed       	ldi	r24, 0xDA	; 218
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
					BL_voidTxString(DimmerString);
    1102:	8a ed       	ldi	r24, 0xDA	; 218
    1104:	94 e0       	ldi	r25, 0x04	; 4
    1106:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    110a:	8d e0       	ldi	r24, 0x0D	; 13
    110c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    1110:	89 ea       	ldi	r24, 0xA9	; 169
    1112:	93 e0       	ldi	r25, 0x03	; 3
    1114:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1118:	8d e0       	ldi	r24, 0x0D	; 13
    111a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    111e:	89 ed       	ldi	r24, 0xD9	; 217
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
					while (bluetooh_value != 0)
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	7e c0       	rjmp	.+252    	; 0x1230 <KPD_Interface_RemoteAdmin+0x7ec>
					{
						if (bluetooh_value == '1')
    1134:	81 33       	cpi	r24, 0x31	; 49
    1136:	09 f0       	breq	.+2      	; 0x113a <KPD_Interface_RemoteAdmin+0x6f6>
    1138:	43 c0       	rjmp	.+134    	; 0x11c0 <KPD_Interface_RemoteAdmin+0x77c>
						{
							dimmer_brightness += 10;
    113a:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    113e:	66 5f       	subi	r22, 0xF6	; 246
    1140:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    114e:	ab 01       	movw	r20, r22
    1150:	bc 01       	movw	r22, r24
    1152:	88 ee       	ldi	r24, 0xE8	; 232
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    115a:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    115e:	1f 92       	push	r1
    1160:	8f 93       	push	r24
    1162:	89 e9       	ldi	r24, 0x99	; 153
    1164:	93 e0       	ldi	r25, 0x03	; 3
    1166:	9f 93       	push	r25
    1168:	8f 93       	push	r24
    116a:	8a ed       	ldi	r24, 0xDA	; 218
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	9f 93       	push	r25
    1170:	8f 93       	push	r24
    1172:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    1176:	8a ed       	ldi	r24, 0xDA	; 218
    1178:	94 e0       	ldi	r25, 0x04	; 4
    117a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    117e:	8d e0       	ldi	r24, 0x0D	; 13
    1180:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1184:	89 ea       	ldi	r24, 0xA9	; 169
    1186:	93 e0       	ldi	r25, 0x03	; 3
    1188:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    118c:	8d e0       	ldi	r24, 0x0D	; 13
    118e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1192:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	85 36       	cpi	r24, 0x65	; 101
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <KPD_Interface_RemoteAdmin+0x764>
    11a6:	cd c0       	rjmp	.+410    	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
							{
								dimmer_brightness = 100;
    11a8:	84 e6       	ldi	r24, 0x64	; 100
    11aa:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	68 ec       	ldi	r22, 0xC8	; 200
    11b4:	72 e4       	ldi	r23, 0x42	; 66
    11b6:	88 ee       	ldi	r24, 0xE8	; 232
    11b8:	93 e0       	ldi	r25, 0x03	; 3
    11ba:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
    11be:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    11c0:	82 33       	cpi	r24, 0x32	; 50
    11c2:	99 f5       	brne	.+102    	; 0x122a <KPD_Interface_RemoteAdmin+0x7e6>
						{
							dimmer_brightness -= 10;
    11c4:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    11c8:	6a 50       	subi	r22, 0x0A	; 10
    11ca:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    11d8:	ab 01       	movw	r20, r22
    11da:	bc 01       	movw	r22, r24
    11dc:	88 ee       	ldi	r24, 0xE8	; 232
    11de:	93 e0       	ldi	r25, 0x03	; 3
    11e0:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    11e4:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    11e8:	1f 92       	push	r1
    11ea:	8f 93       	push	r24
    11ec:	89 e9       	ldi	r24, 0x99	; 153
    11ee:	93 e0       	ldi	r25, 0x03	; 3
    11f0:	9f 93       	push	r25
    11f2:	8f 93       	push	r24
    11f4:	8a ed       	ldi	r24, 0xDA	; 218
    11f6:	94 e0       	ldi	r25, 0x04	; 4
    11f8:	9f 93       	push	r25
    11fa:	8f 93       	push	r24
    11fc:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    1200:	8a ed       	ldi	r24, 0xDA	; 218
    1202:	94 e0       	ldi	r25, 0x04	; 4
    1204:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1208:	8d e0       	ldi	r24, 0x0D	; 13
    120a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    120e:	89 ea       	ldi	r24, 0xA9	; 169
    1210:	93 e0       	ldi	r25, 0x03	; 3
    1212:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    1216:	8d e0       	ldi	r24, 0x0D	; 13
    1218:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    122a:	80 33       	cpi	r24, 0x30	; 48
    122c:	09 f4       	brne	.+2      	; 0x1230 <KPD_Interface_RemoteAdmin+0x7ec>
    122e:	89 c0       	rjmp	.+274    	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    1230:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1234:	81 11       	cpse	r24, r1
    1236:	7e cf       	rjmp	.-260    	; 0x1134 <KPD_Interface_RemoteAdmin+0x6f0>
    1238:	08 95       	ret
			break;

			case ('3'):
			
				// checking the temperature from the ADC before displaying it
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    123a:	68 ec       	ldi	r22, 0xC8	; 200
    123c:	74 e0       	ldi	r23, 0x04	; 4
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    1244:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
    1248:	1f 92       	push	r1
    124a:	8f 93       	push	r24
    124c:	83 e7       	ldi	r24, 0x73	; 115
    124e:	92 e0       	ldi	r25, 0x02	; 2
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	8e ee       	ldi	r24, 0xEE	; 238
    1256:	94 e0       	ldi	r25, 0x04	; 4
    1258:	9f 93       	push	r25
    125a:	8f 93       	push	r24
    125c:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
				BL_voidTxString(tempString);
    1260:	8e ee       	ldi	r24, 0xEE	; 238
    1262:	94 e0       	ldi	r25, 0x04	; 4
    1264:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
				BL_voidTxChar('\r');
    1268:	8d e0       	ldi	r24, 0x0D	; 13
    126a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    126e:	84 e9       	ldi	r24, 0x94	; 148
    1270:	92 e0       	ldi	r25, 0x02	; 2
    1272:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
				BL_voidTxChar('\r');
    1276:	8d e0       	ldi	r24, 0x0D	; 13
    1278:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    127c:	89 ed       	ldi	r24, 0xD9	; 217
    127e:	94 e0       	ldi	r25, 0x04	; 4
    1280:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
				if (bluetooh_value=='0')
				{
					
				}
				break;
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	08 95       	ret

			case ('4'):
				// checking the door status before displaying it
				if (door_angle==0)
    1292:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <door_angle>
    1296:	81 11       	cpse	r24, r1
    1298:	27 c0       	rjmp	.+78     	; 0x12e8 <KPD_Interface_RemoteAdmin+0x8a4>
				{
					BL_voidTxString("Door is closed");
    129a:	88 ec       	ldi	r24, 0xC8	; 200
    129c:	93 e0       	ldi	r25, 0x03	; 3
    129e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    12a2:	8d e0       	ldi	r24, 0x0D	; 13
    12a4:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidTxString("1-Open Door 0-Home");
    12a8:	87 ed       	ldi	r24, 0xD7	; 215
    12aa:	93 e0       	ldi	r25, 0x03	; 3
    12ac:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    12b0:	8d e0       	ldi	r24, 0x0D	; 13
    12b2:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    12b6:	89 ed       	ldi	r24, 0xD9	; 217
    12b8:	94 e0       	ldi	r25, 0x04	; 4
    12ba:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
					BL_voidTxChar('\r');
    12be:	8d e0       	ldi	r24, 0x0D	; 13
    12c0:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					if (bluetooh_value=='1')
    12c4:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    12c8:	81 33       	cpi	r24, 0x31	; 49
    12ca:	d9 f5       	brne	.+118    	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
					{
						BL_voidTxString("Door is opening");
    12cc:	8a ee       	ldi	r24, 0xEA	; 234
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
						SERVO_voidStartByAngle(90);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	84 eb       	ldi	r24, 0xB4	; 180
    12da:	92 e4       	ldi	r25, 0x42	; 66
    12dc:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <SERVO_voidStartByAngle>
						door_angle=90;
    12e0:	8a e5       	ldi	r24, 0x5A	; 90
    12e2:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <door_angle>
    12e6:	08 95       	ret
						break;
					}
					break;

				}
				else if (door_angle==90)
    12e8:	8a 35       	cpi	r24, 0x5A	; 90
    12ea:	59 f5       	brne	.+86     	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
				{
					BL_voidTxString("Door is open");
    12ec:	8a ef       	ldi	r24, 0xFA	; 250
    12ee:	93 e0       	ldi	r25, 0x03	; 3
    12f0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    12f4:	8d e0       	ldi	r24, 0x0D	; 13
    12f6:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidTxString("1-Close Door 0-Home");
    12fa:	87 e0       	ldi	r24, 0x07	; 7
    12fc:	94 e0       	ldi	r25, 0x04	; 4
    12fe:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1302:	8d e0       	ldi	r24, 0x0D	; 13
    1304:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1308:	89 ed       	ldi	r24, 0xD9	; 217
    130a:	94 e0       	ldi	r25, 0x04	; 4
    130c:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
					BL_voidTxChar('\r');
    1310:	8d e0       	ldi	r24, 0x0D	; 13
    1312:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					if (bluetooh_value=='1')
    1316:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    131a:	81 33       	cpi	r24, 0x31	; 49
    131c:	91 f4       	brne	.+36     	; 0x1342 <KPD_Interface_RemoteAdmin+0x8fe>
					{
						BL_voidTxString("Door is closing");
    131e:	8b e1       	ldi	r24, 0x1B	; 27
    1320:	94 e0       	ldi	r25, 0x04	; 4
    1322:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
						SERVO_voidStartByAngle(0);
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	70 e0       	ldi	r23, 0x00	; 0
    132a:	cb 01       	movw	r24, r22
    132c:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <SERVO_voidStartByAngle>
						door_angle=0;
    1330:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <door_angle>
    1334:	08 95       	ret
			break;


			case ('5'):
			// this case is only for admin to change the username and password (Admin is only remote typeuser)
			HOME_voidChangeUserNameAndPass();
    1336:	0e 94 32 04 	call	0x864	; 0x864 <HOME_voidChangeUserNameAndPass>
					
        	break;
    133a:	08 95       	ret

			case('6'):
			usertype =HOME_NO_LOGIN;
    133c:	86 e0       	ldi	r24, 0x06	; 6
    133e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usertype>
    1342:	08 95       	ret

00001344 <KPD_Interface_RemoteUser>:


void KPD_Interface_RemoteUser(void)
{
	//this is the remote user interface to control the smart home (same as the admin but with less options without(door control,changing username and password))
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
    1344:	8d ef       	ldi	r24, 0xFD	; 253
    1346:	9d e0       	ldi	r25, 0x0D	; 13
    1348:	0e 94 a1 18 	call	0x3142	; 0x3142 <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
    134c:	8d e0       	ldi	r24, 0x0D	; 13
    134e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
    1352:	8f e1       	ldi	r24, 0x1F	; 31
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
    135a:	8d e0       	ldi	r24, 0x0D	; 13
    135c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidTxString("3-temp");
    1360:	8b e2       	ldi	r24, 0x2B	; 43
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
    1368:	8d e0       	ldi	r24, 0x0D	; 13
    136a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidTxString("6- To Sign Out");
    136e:	8a e5       	ldi	r24, 0x5A	; 90
    1370:	92 e0       	ldi	r25, 0x02	; 2
    1372:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
    1376:	8d e0       	ldi	r24, 0x0D	; 13
    1378:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	TMR0_voidStart();
    137c:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
	BL_voidRxChar(&bluetooh_value);
    1380:	89 ed       	ldi	r24, 0xD9	; 217
    1382:	94 e0       	ldi	r25, 0x04	; 4
    1384:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
	TMR0_voidStop();
    1388:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
	switch (bluetooh_value)
    138c:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1390:	82 33       	cpi	r24, 0x32	; 50
    1392:	09 f4       	brne	.+2      	; 0x1396 <KPD_Interface_RemoteUser+0x52>
    1394:	b5 c0       	rjmp	.+362    	; 0x1500 <KPD_Interface_RemoteUser+0x1bc>
    1396:	18 f4       	brcc	.+6      	; 0x139e <KPD_Interface_RemoteUser+0x5a>
    1398:	81 33       	cpi	r24, 0x31	; 49
    139a:	41 f0       	breq	.+16     	; 0x13ac <KPD_Interface_RemoteUser+0x68>
    139c:	08 95       	ret
    139e:	83 33       	cpi	r24, 0x33	; 51
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <KPD_Interface_RemoteUser+0x60>
    13a2:	be c3       	rjmp	.+1916   	; 0x1b20 <KPD_Interface_RemoteUser+0x7dc>
    13a4:	86 33       	cpi	r24, 0x36	; 54
    13a6:	09 f4       	brne	.+2      	; 0x13aa <KPD_Interface_RemoteUser+0x66>
    13a8:	e6 c3       	rjmp	.+1996   	; 0x1b76 <KPD_Interface_RemoteUser+0x832>
    13aa:	08 95       	ret
	{
	case ('1'):
				DIO_voidGetPinValue(DIO_PORTC,DIO_PIN2,&ac_status);
    13ac:	4b ec       	ldi	r20, 0xCB	; 203
    13ae:	54 e0       	ldi	r21, 0x04	; 4
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
		if (ac_status==0)
    13b8:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <ac_status>
    13bc:	81 11       	cpse	r24, r1
    13be:	49 c0       	rjmp	.+146    	; 0x1452 <KPD_Interface_RemoteUser+0x10e>
		{
			BL_voidTxString("AC is Off");
    13c0:	89 e6       	ldi	r24, 0x69	; 105
    13c2:	92 e0       	ldi	r25, 0x02	; 2
    13c4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
    13c8:	8d e0       	ldi	r24, 0x0D	; 13
    13ca:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		//getting temp from ADC
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    13ce:	68 ec       	ldi	r22, 0xC8	; 200
    13d0:	74 e0       	ldi	r23, 0x04	; 4
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
		//sprintf is used to format and store a string in a buffer
		sprintf(tempString, "Room Temp: %d c", local_temp);
    13d8:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
    13dc:	1f 92       	push	r1
    13de:	8f 93       	push	r24
    13e0:	83 e7       	ldi	r24, 0x73	; 115
    13e2:	92 e0       	ldi	r25, 0x02	; 2
    13e4:	9f 93       	push	r25
    13e6:	8f 93       	push	r24
    13e8:	8e ee       	ldi	r24, 0xEE	; 238
    13ea:	94 e0       	ldi	r25, 0x04	; 4
    13ec:	9f 93       	push	r25
    13ee:	8f 93       	push	r24
    13f0:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
		BL_voidTxString(tempString);
    13f4:	8e ee       	ldi	r24, 0xEE	; 238
    13f6:	94 e0       	ldi	r25, 0x04	; 4
    13f8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
    13fc:	8d e0       	ldi	r24, 0x0D	; 13
    13fe:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		BL_voidTxString("1- To Turn It On");
    1402:	83 e8       	ldi	r24, 0x83	; 131
    1404:	92 e0       	ldi	r25, 0x02	; 2
    1406:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
    140a:	8d e0       	ldi	r24, 0x0D	; 13
    140c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		BL_voidTxString("0-go to home");
    1410:	84 e9       	ldi	r24, 0x94	; 148
    1412:	92 e0       	ldi	r25, 0x02	; 2
    1414:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
		BL_voidTxChar('\r');
    1418:	8d e0       	ldi	r24, 0x0D	; 13
    141a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
		TMR0_voidStart();
    141e:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
		BL_voidRxChar(&bluetooh_value);
    1422:	89 ed       	ldi	r24, 0xD9	; 217
    1424:	94 e0       	ldi	r25, 0x04	; 4
    1426:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
		TMR0_voidStop();
    142a:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
		if (bluetooh_value=='0')
    142e:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	80 33       	cpi	r24, 0x30	; 48
    1440:	09 f4       	brne	.+2      	; 0x1444 <KPD_Interface_RemoteUser+0x100>
    1442:	9c c3       	rjmp	.+1848   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
			{
				break;
			}
		if (bluetooh_value=='1')
    1444:	81 33       	cpi	r24, 0x31	; 49
    1446:	29 f4       	brne	.+10     	; 0x1452 <KPD_Interface_RemoteUser+0x10e>
			{
				DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
    1448:	41 e0       	ldi	r20, 0x01	; 1
    144a:	62 e0       	ldi	r22, 0x02	; 2
    144c:	82 e0       	ldi	r24, 0x02	; 2
    144e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>


			

		}
				if (ac_status==1)
    1452:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <ac_status>
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	09 f0       	breq	.+2      	; 0x145c <KPD_Interface_RemoteUser+0x118>
    145a:	90 c3       	rjmp	.+1824   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
		{
			BL_voidTxString("AC is On");
    145c:	81 ea       	ldi	r24, 0xA1	; 161
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
    1464:	8d e0       	ldi	r24, 0x0D	; 13
    1466:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxString("1- To Turn It Off");
    146a:	8a ea       	ldi	r24, 0xAA	; 170
    146c:	92 e0       	ldi	r25, 0x02	; 2
    146e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
    1472:	8d e0       	ldi	r24, 0x0D	; 13
    1474:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1478:	68 ec       	ldi	r22, 0xC8	; 200
    147a:	74 e0       	ldi	r23, 0x04	; 4
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
			//sprintf is used to format and store a string in a buffer
			sprintf(tempString, "Room Temp: %d c", local_temp);
    1482:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
    1486:	1f 92       	push	r1
    1488:	8f 93       	push	r24
    148a:	83 e7       	ldi	r24, 0x73	; 115
    148c:	92 e0       	ldi	r25, 0x02	; 2
    148e:	9f 93       	push	r25
    1490:	8f 93       	push	r24
    1492:	8e ee       	ldi	r24, 0xEE	; 238
    1494:	94 e0       	ldi	r25, 0x04	; 4
    1496:	9f 93       	push	r25
    1498:	8f 93       	push	r24
    149a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
			BL_voidTxString(tempString);
    149e:	8e ee       	ldi	r24, 0xEE	; 238
    14a0:	94 e0       	ldi	r25, 0x04	; 4
    14a2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
    14a6:	8d e0       	ldi	r24, 0x0D	; 13
    14a8:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxString("1- To Turn It On");
    14ac:	83 e8       	ldi	r24, 0x83	; 131
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
    14b4:	8d e0       	ldi	r24, 0x0D	; 13
    14b6:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxString("0-go to home");
    14ba:	84 e9       	ldi	r24, 0x94	; 148
    14bc:	92 e0       	ldi	r25, 0x02	; 2
    14be:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
    14c2:	8d e0       	ldi	r24, 0x0D	; 13
    14c4:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			TMR0_voidStart();
    14c8:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
    14cc:	89 ed       	ldi	r24, 0xD9	; 217
    14ce:	94 e0       	ldi	r25, 0x04	; 4
    14d0:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
			TMR0_voidStop();
    14d4:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
			if (bluetooh_value=='0')
    14d8:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	80 33       	cpi	r24, 0x30	; 48
    14ea:	09 f4       	brne	.+2      	; 0x14ee <KPD_Interface_RemoteUser+0x1aa>
    14ec:	47 c3       	rjmp	.+1678   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
				{
					break;
				}
			
			if (bluetooh_value=='1')
    14ee:	81 33       	cpi	r24, 0x31	; 49
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <KPD_Interface_RemoteUser+0x1b0>
    14f2:	44 c3       	rjmp	.+1672   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
				{
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    14fe:	08 95       	ret
		break;
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
    1500:	8d e0       	ldi	r24, 0x0D	; 13
    1502:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
            BL_voidTxString("Choose light to");
    1506:	8c eb       	ldi	r24, 0xBC	; 188
    1508:	92 e0       	ldi	r25, 0x02	; 2
    150a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
            BL_voidTxChar('\r');
    150e:	8d e0       	ldi	r24, 0x0D	; 13
    1510:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
    1514:	8c ec       	ldi	r24, 0xCC	; 204
    1516:	92 e0       	ldi	r25, 0x02	; 2
    1518:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
			BL_voidTxChar('\r');
    151c:	8d e0       	ldi	r24, 0x0D	; 13
    151e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
			BL_voidTxChar('\r');
    1522:	8d e0       	ldi	r24, 0x0D	; 13
    1524:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
            TMR0_voidStart();
    1528:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
    152c:	89 ed       	ldi	r24, 0xD9	; 217
    152e:	94 e0       	ldi	r25, 0x04	; 4
    1530:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
            TMR0_voidStop();
    1534:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
            switch (bluetooh_value)
    1538:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    153c:	83 33       	cpi	r24, 0x33	; 51
    153e:	09 f4       	brne	.+2      	; 0x1542 <KPD_Interface_RemoteUser+0x1fe>
    1540:	a0 c0       	rjmp	.+320    	; 0x1682 <KPD_Interface_RemoteUser+0x33e>
    1542:	30 f4       	brcc	.+12     	; 0x1550 <KPD_Interface_RemoteUser+0x20c>
    1544:	81 33       	cpi	r24, 0x31	; 49
    1546:	69 f0       	breq	.+26     	; 0x1562 <KPD_Interface_RemoteUser+0x21e>
    1548:	82 33       	cpi	r24, 0x32	; 50
    154a:	09 f4       	brne	.+2      	; 0x154e <KPD_Interface_RemoteUser+0x20a>
    154c:	50 c0       	rjmp	.+160    	; 0x15ee <KPD_Interface_RemoteUser+0x2aa>
    154e:	08 95       	ret
    1550:	85 33       	cpi	r24, 0x35	; 53
    1552:	09 f4       	brne	.+2      	; 0x1556 <KPD_Interface_RemoteUser+0x212>
    1554:	2a c1       	rjmp	.+596    	; 0x17aa <KPD_Interface_RemoteUser+0x466>
    1556:	08 f4       	brcc	.+2      	; 0x155a <KPD_Interface_RemoteUser+0x216>
    1558:	de c0       	rjmp	.+444    	; 0x1716 <KPD_Interface_RemoteUser+0x3d2>
    155a:	86 33       	cpi	r24, 0x36	; 54
    155c:	09 f4       	brne	.+2      	; 0x1560 <KPD_Interface_RemoteUser+0x21c>
    155e:	6f c1       	rjmp	.+734    	; 0x183e <KPD_Interface_RemoteUser+0x4fa>
    1560:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    1562:	4a ec       	ldi	r20, 0xCA	; 202
    1564:	54 e0       	ldi	r21, 0x04	; 4
    1566:	63 e0       	ldi	r22, 0x03	; 3
    1568:	83 e0       	ldi	r24, 0x03	; 3
    156a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    156e:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	e9 f4       	brne	.+58     	; 0x15b0 <KPD_Interface_RemoteUser+0x26c>
                {
                    BL_voidTxString("Light 1 is On");
    1576:	89 ed       	ldi	r24, 0xD9	; 217
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    157e:	8d e0       	ldi	r24, 0x0D	; 13
    1580:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1584:	87 ee       	ldi	r24, 0xE7	; 231
    1586:	92 e0       	ldi	r25, 0x02	; 2
    1588:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    158c:	8d e0       	ldi	r24, 0x0D	; 13
    158e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1592:	89 ed       	ldi	r24, 0xD9	; 217
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
    159a:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    159e:	81 33       	cpi	r24, 0x31	; 49
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <KPD_Interface_RemoteUser+0x260>
    15a2:	ec c2       	rjmp	.+1496   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	63 e0       	ldi	r22, 0x03	; 3
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
    15ae:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
    15b0:	81 11       	cpse	r24, r1
    15b2:	e4 c2       	rjmp	.+1480   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 1 is OFF");
    15b4:	88 ef       	ldi	r24, 0xF8	; 248
    15b6:	92 e0       	ldi	r25, 0x02	; 2
    15b8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    15bc:	8d e0       	ldi	r24, 0x0D	; 13
    15be:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    15c2:	87 e0       	ldi	r24, 0x07	; 7
    15c4:	93 e0       	ldi	r25, 0x03	; 3
    15c6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    15ca:	8d e0       	ldi	r24, 0x0D	; 13
    15cc:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    15d0:	89 ed       	ldi	r24, 0xD9	; 217
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
    15d8:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    15dc:	81 33       	cpi	r24, 0x31	; 49
    15de:	09 f0       	breq	.+2      	; 0x15e2 <KPD_Interface_RemoteUser+0x29e>
    15e0:	cd c2       	rjmp	.+1434   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	63 e0       	ldi	r22, 0x03	; 3
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
    15ec:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
    15ee:	4a ec       	ldi	r20, 0xCA	; 202
    15f0:	54 e0       	ldi	r21, 0x04	; 4
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    15fa:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	f9 f4       	brne	.+62     	; 0x1640 <KPD_Interface_RemoteUser+0x2fc>
                {
                    BL_voidTxString("Light 2 is On");
    1602:	87 e1       	ldi	r24, 0x17	; 23
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    160a:	8d e0       	ldi	r24, 0x0D	; 13
    160c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1610:	87 ee       	ldi	r24, 0xE7	; 231
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1618:	8d e0       	ldi	r24, 0x0D	; 13
    161a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    161e:	89 ed       	ldi	r24, 0xD9	; 217
    1620:	94 e0       	ldi	r25, 0x04	; 4
    1622:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
    1626:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    162a:	81 33       	cpi	r24, 0x31	; 49
    162c:	29 f4       	brne	.+10     	; 0x1638 <KPD_Interface_RemoteUser+0x2f4>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1638:	8f ef       	ldi	r24, 0xFF	; 255
    163a:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    163e:	08 95       	ret
                }
                else if (led_status == 0)
    1640:	81 11       	cpse	r24, r1
    1642:	9c c2       	rjmp	.+1336   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 2 is OFF");
    1644:	85 e2       	ldi	r24, 0x25	; 37
    1646:	93 e0       	ldi	r25, 0x03	; 3
    1648:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    164c:	8d e0       	ldi	r24, 0x0D	; 13
    164e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1652:	87 e0       	ldi	r24, 0x07	; 7
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    165a:	8d e0       	ldi	r24, 0x0D	; 13
    165c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1660:	89 ed       	ldi	r24, 0xD9	; 217
    1662:	94 e0       	ldi	r25, 0x04	; 4
    1664:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
                    if (bluetooh_value == '1')
    1668:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    166c:	81 33       	cpi	r24, 0x31	; 49
    166e:	29 f4       	brne	.+10     	; 0x167a <KPD_Interface_RemoteUser+0x336>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    1680:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    1682:	4a ec       	ldi	r20, 0xCA	; 202
    1684:	54 e0       	ldi	r21, 0x04	; 4
    1686:	62 e0       	ldi	r22, 0x02	; 2
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    168e:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	f9 f4       	brne	.+62     	; 0x16d4 <KPD_Interface_RemoteUser+0x390>
                {
                    BL_voidTxString("Light 3 is On");
    1696:	84 e3       	ldi	r24, 0x34	; 52
    1698:	93 e0       	ldi	r25, 0x03	; 3
    169a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    169e:	8d e0       	ldi	r24, 0x0D	; 13
    16a0:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    16a4:	87 ee       	ldi	r24, 0xE7	; 231
    16a6:	92 e0       	ldi	r25, 0x02	; 2
    16a8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    16ac:	8d e0       	ldi	r24, 0x0D	; 13
    16ae:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    16b2:	89 ed       	ldi	r24, 0xD9	; 217
    16b4:	94 e0       	ldi	r25, 0x04	; 4
    16b6:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
    16ba:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    16be:	81 33       	cpi	r24, 0x31	; 49
    16c0:	29 f4       	brne	.+10     	; 0x16cc <KPD_Interface_RemoteUser+0x388>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	62 e0       	ldi	r22, 0x02	; 2
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    16d2:	08 95       	ret
                }
                else if (led_status == 0)
    16d4:	81 11       	cpse	r24, r1
    16d6:	52 c2       	rjmp	.+1188   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 3 is OFF");
    16d8:	82 e4       	ldi	r24, 0x42	; 66
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    16e0:	8d e0       	ldi	r24, 0x0D	; 13
    16e2:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    16e6:	87 e0       	ldi	r24, 0x07	; 7
    16e8:	93 e0       	ldi	r25, 0x03	; 3
    16ea:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    16ee:	8d e0       	ldi	r24, 0x0D	; 13
    16f0:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    16f4:	89 ed       	ldi	r24, 0xD9	; 217
    16f6:	94 e0       	ldi	r25, 0x04	; 4
    16f8:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
    16fc:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1700:	81 33       	cpi	r24, 0x31	; 49
    1702:	29 f4       	brne	.+10     	; 0x170e <KPD_Interface_RemoteUser+0x3ca>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    1714:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    1716:	4a ec       	ldi	r20, 0xCA	; 202
    1718:	54 e0       	ldi	r21, 0x04	; 4
    171a:	63 e0       	ldi	r22, 0x03	; 3
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    1722:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	f9 f4       	brne	.+62     	; 0x1768 <KPD_Interface_RemoteUser+0x424>
                {
                    BL_voidTxString("Light 4 is On");
    172a:	81 e5       	ldi	r24, 0x51	; 81
    172c:	93 e0       	ldi	r25, 0x03	; 3
    172e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1732:	8d e0       	ldi	r24, 0x0D	; 13
    1734:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1738:	87 ee       	ldi	r24, 0xE7	; 231
    173a:	92 e0       	ldi	r25, 0x02	; 2
    173c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1740:	8d e0       	ldi	r24, 0x0D	; 13
    1742:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1746:	89 ed       	ldi	r24, 0xD9	; 217
    1748:	94 e0       	ldi	r25, 0x04	; 4
    174a:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
    174e:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1752:	81 33       	cpi	r24, 0x31	; 49
    1754:	29 f4       	brne	.+10     	; 0x1760 <KPD_Interface_RemoteUser+0x41c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1756:	41 e0       	ldi	r20, 0x01	; 1
    1758:	63 e0       	ldi	r22, 0x03	; 3
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1760:	8f ef       	ldi	r24, 0xFF	; 255
    1762:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    1766:	08 95       	ret
                }
                else if (led_status == 0)
    1768:	81 11       	cpse	r24, r1
    176a:	08 c2       	rjmp	.+1040   	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 4 is OFF");
    176c:	8f e5       	ldi	r24, 0x5F	; 95
    176e:	93 e0       	ldi	r25, 0x03	; 3
    1770:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1774:	8d e0       	ldi	r24, 0x0D	; 13
    1776:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    177a:	87 e0       	ldi	r24, 0x07	; 7
    177c:	93 e0       	ldi	r25, 0x03	; 3
    177e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1782:	8d e0       	ldi	r24, 0x0D	; 13
    1784:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1788:	89 ed       	ldi	r24, 0xD9	; 217
    178a:	94 e0       	ldi	r25, 0x04	; 4
    178c:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1790:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1794:	81 33       	cpi	r24, 0x31	; 49
    1796:	29 f4       	brne	.+10     	; 0x17a2 <KPD_Interface_RemoteUser+0x45e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	63 e0       	ldi	r22, 0x03	; 3
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
    17a4:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    17a8:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    17aa:	4a ec       	ldi	r20, 0xCA	; 202
    17ac:	54 e0       	ldi	r21, 0x04	; 4
    17ae:	62 e0       	ldi	r22, 0x02	; 2
    17b0:	83 e0       	ldi	r24, 0x03	; 3
    17b2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    17b6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	f9 f4       	brne	.+62     	; 0x17fc <KPD_Interface_RemoteUser+0x4b8>
                {
                    BL_voidTxString("Light 5 is On");
    17be:	8e e6       	ldi	r24, 0x6E	; 110
    17c0:	93 e0       	ldi	r25, 0x03	; 3
    17c2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    17c6:	8d e0       	ldi	r24, 0x0D	; 13
    17c8:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    17cc:	87 ee       	ldi	r24, 0xE7	; 231
    17ce:	92 e0       	ldi	r25, 0x02	; 2
    17d0:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    17d4:	8d e0       	ldi	r24, 0x0D	; 13
    17d6:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    17da:	89 ed       	ldi	r24, 0xD9	; 217
    17dc:	94 e0       	ldi	r25, 0x04	; 4
    17de:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
    17e2:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    17e6:	81 33       	cpi	r24, 0x31	; 49
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <KPD_Interface_RemoteUser+0x4b0>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	62 e0       	ldi	r22, 0x02	; 2
    17ee:	83 e0       	ldi	r24, 0x03	; 3
    17f0:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    17fa:	08 95       	ret
                }
                else if (led_status == 0)
    17fc:	81 11       	cpse	r24, r1
    17fe:	be c1       	rjmp	.+892    	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 5 is OFF");
    1800:	8c e7       	ldi	r24, 0x7C	; 124
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1808:	8d e0       	ldi	r24, 0x0D	; 13
    180a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    180e:	87 e0       	ldi	r24, 0x07	; 7
    1810:	93 e0       	ldi	r25, 0x03	; 3
    1812:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1816:	8d e0       	ldi	r24, 0x0D	; 13
    1818:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    181c:	89 ed       	ldi	r24, 0xD9	; 217
    181e:	94 e0       	ldi	r25, 0x04	; 4
    1820:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1824:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1828:	81 33       	cpi	r24, 0x31	; 49
    182a:	29 f4       	brne	.+10     	; 0x1836 <KPD_Interface_RemoteUser+0x4f2>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    182c:	41 e0       	ldi	r20, 0x01	; 1
    182e:	62 e0       	ldi	r22, 0x02	; 2
    1830:	83 e0       	ldi	r24, 0x03	; 3
    1832:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1836:	8f ef       	ldi	r24, 0xFF	; 255
    1838:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <bluetooh_value>
    183c:	08 95       	ret

            case ('6'):
				
                
				
                if (dimmer_brightness > 0)
    183e:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1842:	88 23       	and	r24, r24
    1844:	09 f4       	brne	.+2      	; 0x1848 <KPD_Interface_RemoteUser+0x504>
    1846:	b1 c0       	rjmp	.+354    	; 0x19aa <KPD_Interface_RemoteUser+0x666>
                {
					 BL_voidTxChar('\r');
    1848:	8d e0       	ldi	r24, 0x0D	; 13
    184a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
    184e:	8b e8       	ldi	r24, 0x8B	; 139
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1856:	8d e0       	ldi	r24, 0x0D	; 13
    1858:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    185c:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1860:	1f 92       	push	r1
    1862:	8f 93       	push	r24
    1864:	89 e9       	ldi	r24, 0x99	; 153
    1866:	93 e0       	ldi	r25, 0x03	; 3
    1868:	9f 93       	push	r25
    186a:	8f 93       	push	r24
    186c:	8a ed       	ldi	r24, 0xDA	; 218
    186e:	94 e0       	ldi	r25, 0x04	; 4
    1870:	9f 93       	push	r25
    1872:	8f 93       	push	r24
    1874:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
					BL_voidTxString(DimmerString);
    1878:	8a ed       	ldi	r24, 0xDA	; 218
    187a:	94 e0       	ldi	r25, 0x04	; 4
    187c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1880:	8d e0       	ldi	r24, 0x0D	; 13
    1882:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    1886:	89 ea       	ldi	r24, 0xA9	; 169
    1888:	93 e0       	ldi	r25, 0x03	; 3
    188a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    188e:	8d e0       	ldi	r24, 0x0D	; 13
    1890:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1894:	89 ed       	ldi	r24, 0xD9	; 217
    1896:	94 e0       	ldi	r25, 0x04	; 4
    1898:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
					while (bluetooh_value != 0)
    189c:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	88 23       	and	r24, r24
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <KPD_Interface_RemoteUser+0x56e>
    18b0:	65 c1       	rjmp	.+714    	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
					{
						if (bluetooh_value == '1')
    18b2:	81 33       	cpi	r24, 0x31	; 49
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <KPD_Interface_RemoteUser+0x574>
    18b6:	43 c0       	rjmp	.+134    	; 0x193e <KPD_Interface_RemoteUser+0x5fa>
						{
							dimmer_brightness += 10;
    18b8:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    18bc:	66 5f       	subi	r22, 0xF6	; 246
    18be:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    18cc:	ab 01       	movw	r20, r22
    18ce:	bc 01       	movw	r22, r24
    18d0:	88 ee       	ldi	r24, 0xE8	; 232
    18d2:	93 e0       	ldi	r25, 0x03	; 3
    18d4:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    18d8:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    18dc:	1f 92       	push	r1
    18de:	8f 93       	push	r24
    18e0:	89 e9       	ldi	r24, 0x99	; 153
    18e2:	93 e0       	ldi	r25, 0x03	; 3
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	8a ed       	ldi	r24, 0xDA	; 218
    18ea:	94 e0       	ldi	r25, 0x04	; 4
    18ec:	9f 93       	push	r25
    18ee:	8f 93       	push	r24
    18f0:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    18f4:	8a ed       	ldi	r24, 0xDA	; 218
    18f6:	94 e0       	ldi	r25, 0x04	; 4
    18f8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    18fc:	8d e0       	ldi	r24, 0x0D	; 13
    18fe:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1902:	89 ea       	ldi	r24, 0xA9	; 169
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    190a:	8d e0       	ldi	r24, 0x0D	; 13
    190c:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1910:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	85 36       	cpi	r24, 0x65	; 101
    1922:	08 f4       	brcc	.+2      	; 0x1926 <KPD_Interface_RemoteUser+0x5e2>
    1924:	2b c1       	rjmp	.+598    	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
							{
								dimmer_brightness = 100;
    1926:	84 e6       	ldi	r24, 0x64	; 100
    1928:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	68 ec       	ldi	r22, 0xC8	; 200
    1932:	72 e4       	ldi	r23, 0x42	; 66
    1934:	88 ee       	ldi	r24, 0xE8	; 232
    1936:	93 e0       	ldi	r25, 0x03	; 3
    1938:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
    193c:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
    193e:	82 33       	cpi	r24, 0x32	; 50
    1940:	09 f0       	breq	.+2      	; 0x1944 <KPD_Interface_RemoteUser+0x600>
    1942:	1c c1       	rjmp	.+568    	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
						{
							dimmer_brightness -= 10;
    1944:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1948:	6a 50       	subi	r22, 0x0A	; 10
    194a:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    1958:	ab 01       	movw	r20, r22
    195a:	bc 01       	movw	r22, r24
    195c:	88 ee       	ldi	r24, 0xE8	; 232
    195e:	93 e0       	ldi	r25, 0x03	; 3
    1960:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1964:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1968:	1f 92       	push	r1
    196a:	8f 93       	push	r24
    196c:	89 e9       	ldi	r24, 0x99	; 153
    196e:	93 e0       	ldi	r25, 0x03	; 3
    1970:	9f 93       	push	r25
    1972:	8f 93       	push	r24
    1974:	8a ed       	ldi	r24, 0xDA	; 218
    1976:	94 e0       	ldi	r25, 0x04	; 4
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    1980:	8a ed       	ldi	r24, 0xDA	; 218
    1982:	94 e0       	ldi	r25, 0x04	; 4
    1984:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1988:	8d e0       	ldi	r24, 0x0D	; 13
    198a:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    198e:	89 ea       	ldi	r24, 0xA9	; 169
    1990:	93 e0       	ldi	r25, 0x03	; 3
    1992:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    1996:	8d e0       	ldi	r24, 0x0D	; 13
    1998:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
    19aa:	81 11       	cpse	r24, r1
    19ac:	e7 c0       	rjmp	.+462    	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
                {
                    BL_voidTxString("Light 6 is OFF");
    19ae:	89 eb       	ldi	r24, 0xB9	; 185
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
    19b6:	2f ef       	ldi	r18, 0xFF	; 255
    19b8:	83 ed       	ldi	r24, 0xD3	; 211
    19ba:	90 e3       	ldi	r25, 0x30	; 48
    19bc:	21 50       	subi	r18, 0x01	; 1
    19be:	80 40       	sbci	r24, 0x00	; 0
    19c0:	90 40       	sbci	r25, 0x00	; 0
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <KPD_Interface_RemoteUser+0x678>
    19c4:	00 c0       	rjmp	.+0      	; 0x19c6 <KPD_Interface_RemoteUser+0x682>
    19c6:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
    19c8:	8d e0       	ldi	r24, 0x0D	; 13
    19ca:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    19ce:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    19d2:	1f 92       	push	r1
    19d4:	8f 93       	push	r24
    19d6:	89 e9       	ldi	r24, 0x99	; 153
    19d8:	93 e0       	ldi	r25, 0x03	; 3
    19da:	9f 93       	push	r25
    19dc:	8f 93       	push	r24
    19de:	8a ed       	ldi	r24, 0xDA	; 218
    19e0:	94 e0       	ldi	r25, 0x04	; 4
    19e2:	9f 93       	push	r25
    19e4:	8f 93       	push	r24
    19e6:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
					BL_voidTxString(DimmerString);
    19ea:	8a ed       	ldi	r24, 0xDA	; 218
    19ec:	94 e0       	ldi	r25, 0x04	; 4
    19ee:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    BL_voidTxChar('\r');
    19f2:	8d e0       	ldi	r24, 0x0D	; 13
    19f4:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    19f8:	89 ea       	ldi	r24, 0xA9	; 169
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
					BL_voidTxChar('\r');
    1a00:	8d e0       	ldi	r24, 0x0D	; 13
    1a02:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1a06:	89 ed       	ldi	r24, 0xD9	; 217
    1a08:	94 e0       	ldi	r25, 0x04	; 4
    1a0a:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
					while (bluetooh_value != 0)
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	0f 90       	pop	r0
    1a18:	0f 90       	pop	r0
    1a1a:	7d c0       	rjmp	.+250    	; 0x1b16 <KPD_Interface_RemoteUser+0x7d2>
					{
						if (bluetooh_value == '1')
    1a1c:	81 33       	cpi	r24, 0x31	; 49
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <KPD_Interface_RemoteUser+0x6de>
    1a20:	43 c0       	rjmp	.+134    	; 0x1aa8 <KPD_Interface_RemoteUser+0x764>
						{
							dimmer_brightness += 10;
    1a22:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1a26:	66 5f       	subi	r22, 0xF6	; 246
    1a28:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    1a36:	ab 01       	movw	r20, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	88 ee       	ldi	r24, 0xE8	; 232
    1a3c:	93 e0       	ldi	r25, 0x03	; 3
    1a3e:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1a42:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1a46:	1f 92       	push	r1
    1a48:	8f 93       	push	r24
    1a4a:	89 e9       	ldi	r24, 0x99	; 153
    1a4c:	93 e0       	ldi	r25, 0x03	; 3
    1a4e:	9f 93       	push	r25
    1a50:	8f 93       	push	r24
    1a52:	8a ed       	ldi	r24, 0xDA	; 218
    1a54:	94 e0       	ldi	r25, 0x04	; 4
    1a56:	9f 93       	push	r25
    1a58:	8f 93       	push	r24
    1a5a:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    1a5e:	8a ed       	ldi	r24, 0xDA	; 218
    1a60:	94 e0       	ldi	r25, 0x04	; 4
    1a62:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1a66:	8d e0       	ldi	r24, 0x0D	; 13
    1a68:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1a6c:	89 ea       	ldi	r24, 0xA9	; 169
    1a6e:	93 e0       	ldi	r25, 0x03	; 3
    1a70:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    1a74:	8d e0       	ldi	r24, 0x0D	; 13
    1a76:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1a7a:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	85 36       	cpi	r24, 0x65	; 101
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <KPD_Interface_RemoteUser+0x74c>
    1a8e:	76 c0       	rjmp	.+236    	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
							{
								dimmer_brightness = 100;
    1a90:	84 e6       	ldi	r24, 0x64	; 100
    1a92:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	68 ec       	ldi	r22, 0xC8	; 200
    1a9c:	72 e4       	ldi	r23, 0x42	; 66
    1a9e:	88 ee       	ldi	r24, 0xE8	; 232
    1aa0:	93 e0       	ldi	r25, 0x03	; 3
    1aa2:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
    1aa6:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    1aa8:	82 33       	cpi	r24, 0x32	; 50
    1aaa:	99 f5       	brne	.+102    	; 0x1b12 <KPD_Interface_RemoteUser+0x7ce>
						{
							dimmer_brightness -= 10;
    1aac:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1ab0:	6a 50       	subi	r22, 0x0A	; 10
    1ab2:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    1ac0:	ab 01       	movw	r20, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	88 ee       	ldi	r24, 0xE8	; 232
    1ac6:	93 e0       	ldi	r25, 0x03	; 3
    1ac8:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1acc:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    1ad0:	1f 92       	push	r1
    1ad2:	8f 93       	push	r24
    1ad4:	89 e9       	ldi	r24, 0x99	; 153
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	8a ed       	ldi	r24, 0xDA	; 218
    1ade:	94 e0       	ldi	r25, 0x04	; 4
    1ae0:	9f 93       	push	r25
    1ae2:	8f 93       	push	r24
    1ae4:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
							BL_voidTxString(DimmerString);
    1ae8:	8a ed       	ldi	r24, 0xDA	; 218
    1aea:	94 e0       	ldi	r25, 0x04	; 4
    1aec:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1af0:	8d e0       	ldi	r24, 0x0D	; 13
    1af2:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1af6:	89 ea       	ldi	r24, 0xA9	; 169
    1af8:	93 e0       	ldi	r25, 0x03	; 3
    1afa:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
							BL_voidTxChar('\r');
    1afe:	8d e0       	ldi	r24, 0x0D	; 13
    1b00:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    1b12:	80 33       	cpi	r24, 0x30	; 48
    1b14:	99 f1       	breq	.+102    	; 0x1b7c <KPD_Interface_RemoteUser+0x838>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    1b16:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	7f cf       	rjmp	.-258    	; 0x1a1c <KPD_Interface_RemoteUser+0x6d8>
    1b1e:	08 95       	ret
			break;

			case ('3'):
			
				
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1b20:	68 ec       	ldi	r22, 0xC8	; 200
    1b22:	74 e0       	ldi	r23, 0x04	; 4
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    1b2a:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
    1b2e:	1f 92       	push	r1
    1b30:	8f 93       	push	r24
    1b32:	83 e7       	ldi	r24, 0x73	; 115
    1b34:	92 e0       	ldi	r25, 0x02	; 2
    1b36:	9f 93       	push	r25
    1b38:	8f 93       	push	r24
    1b3a:	8e ee       	ldi	r24, 0xEE	; 238
    1b3c:	94 e0       	ldi	r25, 0x04	; 4
    1b3e:	9f 93       	push	r25
    1b40:	8f 93       	push	r24
    1b42:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
				BL_voidTxString(tempString);
    1b46:	8e ee       	ldi	r24, 0xEE	; 238
    1b48:	94 e0       	ldi	r25, 0x04	; 4
    1b4a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
				BL_voidTxChar('\r');
    1b4e:	8d e0       	ldi	r24, 0x0D	; 13
    1b50:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    1b54:	84 e9       	ldi	r24, 0x94	; 148
    1b56:	92 e0       	ldi	r25, 0x02	; 2
    1b58:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
				BL_voidTxChar('\r');
    1b5c:	8d e0       	ldi	r24, 0x0D	; 13
    1b5e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    1b62:	89 ed       	ldi	r24, 0xD9	; 217
    1b64:	94 e0       	ldi	r25, 0x04	; 4
    1b66:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
				{
					
				}

			case('6'):
			usertype =HOME_NO_LOGIN;
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usertype>
    1b7c:	08 95       	ret

00001b7e <WelcomeScreenRemote>:
        }
    
}
void WelcomeScreenRemote()
{
	BL_voidTxString(" Welcome to your Smart Home");
    1b7e:	82 e3       	ldi	r24, 0x32	; 50
    1b80:	94 e0       	ldi	r25, 0x04	; 4
    1b82:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
    1b86:	8d e0       	ldi	r24, 0x0D	; 13
    1b88:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
    1b8c:	08 95       	ret

00001b8e <WelcomeScreenLocal>:
}

void WelcomeScreenLocal()
// this function is for greeting the user in local user interface
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
    1b8e:	8e e4       	ldi	r24, 0x4E	; 78
    1b90:	94 e0       	ldi	r25, 0x04	; 4
    1b92:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
    1b96:	80 ec       	ldi	r24, 0xC0	; 192
    1b98:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    1b9c:	8f e5       	ldi	r24, 0x5F	; 95
    1b9e:	94 e0       	ldi	r25, 0x04	; 4
    1ba0:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
    1ba4:	2f ef       	ldi	r18, 0xFF	; 255
    1ba6:	83 ed       	ldi	r24, 0xD3	; 211
    1ba8:	90 e3       	ldi	r25, 0x30	; 48
    1baa:	21 50       	subi	r18, 0x01	; 1
    1bac:	80 40       	sbci	r24, 0x00	; 0
    1bae:	90 40       	sbci	r25, 0x00	; 0
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <WelcomeScreenLocal+0x1c>
    1bb2:	00 c0       	rjmp	.+0      	; 0x1bb4 <WelcomeScreenLocal+0x26>
    1bb4:	00 00       	nop
    1bb6:	08 95       	ret

00001bb8 <Display_Remotetemp>:
}

void Display_Remotetemp(void)
//function for getting temp value from temp sensor and displaying it for remote user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    1bb8:	68 ec       	ldi	r22, 0xC8	; 200
    1bba:	74 e0       	ldi	r23, 0x04	; 4
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
	sprintf(tempString, "Room Temp: %d c", local_temp);
    1bc2:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__data_end>
    1bc6:	1f 92       	push	r1
    1bc8:	8f 93       	push	r24
    1bca:	83 e7       	ldi	r24, 0x73	; 115
    1bcc:	92 e0       	ldi	r25, 0x02	; 2
    1bce:	9f 93       	push	r25
    1bd0:	8f 93       	push	r24
    1bd2:	8e ee       	ldi	r24, 0xEE	; 238
    1bd4:	94 e0       	ldi	r25, 0x04	; 4
    1bd6:	9f 93       	push	r25
    1bd8:	8f 93       	push	r24
    1bda:	0e 94 e5 1c 	call	0x39ca	; 0x39ca <sprintf>
	BL_voidTxString(tempString);
    1bde:	8e ee       	ldi	r24, 0xEE	; 238
    1be0:	94 e0       	ldi	r25, 0x04	; 4
    1be2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
    1be6:	8d e0       	ldi	r24, 0x0D	; 13
    1be8:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	08 95       	ret

00001bfa <Idle_RemoteAction>:

void Idle_RemoteAction()
//this function is for the remote user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the remote user 
{ 
    BL_voidTxChar('\r');
    1bfa:	8d e0       	ldi	r24, 0x0D	; 13
    1bfc:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	Display_Remotetemp();
    1c00:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <Display_Remotetemp>
	BL_voidTxString("0-Go to Home");
    1c04:	8d e6       	ldi	r24, 0x6D	; 109
    1c06:	94 e0       	ldi	r25, 0x04	; 4
    1c08:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <BL_voidTxString>
	BL_voidTxChar('\r');
    1c0c:	8d e0       	ldi	r24, 0x0D	; 13
    1c0e:	0e 94 cc 11 	call	0x2398	; 0x2398 <BL_voidTxChar>
	BL_voidRxChar(&bluetooh_value);
    1c12:	89 ed       	ldi	r24, 0xD9	; 217
    1c14:	94 e0       	ldi	r25, 0x04	; 4
    1c16:	0e 94 cf 11 	call	0x239e	; 0x239e <BL_voidRxChar>
    if (bluetooh_value == '0')
    1c1a:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <bluetooh_value>
    1c1e:	80 33       	cpi	r24, 0x30	; 48
    1c20:	11 f4       	brne	.+4      	; 0x1c26 <Idle_RemoteAction+0x2c>
    {
        TMR0clear_flag();
    1c22:	0e 94 a8 18 	call	0x3150	; 0x3150 <TMR0clear_flag>
    1c26:	08 95       	ret

00001c28 <Display_temp>:
}

void Display_temp(void)
//function for getting temp value from temp sensor and displaying it for local user
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1c28:	68 ec       	ldi	r22, 0xC8	; 200
    1c2a:	74 e0       	ldi	r23, 0x04	; 4
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    1c32:	6b e0       	ldi	r22, 0x0B	; 11
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
    1c3a:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <__data_end>
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
    1c48:	08 95       	ret

00001c4a <Idle_Action>:

void Idle_Action()
//this function is for the local user interface to go to the idle function after 5 sec of inactivity
// tmr0 interrupt function for the local user
{ 
    LCD_voidClear();
    1c4a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
    1c4e:	80 e8       	ldi	r24, 0x80	; 128
    1c50:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
    1c54:	8a e7       	ldi	r24, 0x7A	; 122
    1c56:	94 e0       	ldi	r25, 0x04	; 4
    1c58:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
	Display_temp();
    1c5c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
    1c60:	80 ec       	ldi	r24, 0xC0	; 192
    1c62:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
    1c66:	8d e6       	ldi	r24, 0x6D	; 109
    1c68:	94 e0       	ldi	r25, 0x04	; 4
    1c6a:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1c6e:	06 c0       	rjmp	.+12     	; 0x1c7c <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
    1c70:	81 e6       	ldi	r24, 0x61	; 97
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
		Display_temp();
    1c78:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1c7c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1c80:	8f 3f       	cpi	r24, 0xFF	; 255
    1c82:	b1 f3       	breq	.-20     	; 0x1c70 <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
    1c84:	80 33       	cpi	r24, 0x30	; 48
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <Idle_Action+0x42>
    {
        LCD_voidClear();
    1c88:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
    }
    TMR0clear_flag();
    1c8c:	0e 94 a8 18 	call	0x3150	; 0x3150 <TMR0clear_flag>
    LCD_voidClear();
    1c90:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
    1c94:	08 95       	ret

00001c96 <Reset_AllKPDValues>:
}

void Reset_AllKPDValues()
//function for reseting all KPD values for new values to be entered
{
    Local_copyKPDValue = KPD_Not_Pressed;
    1c96:	8f ef       	ldi	r24, 0xFF	; 255
    1c98:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
    1c9c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
    1ca0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
    1ca4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
    1ca8:	08 95       	ret

00001caa <KPD_Interface_Localuser>:

void KPD_Interface_Localuser(void)
{
	//this is the local user interface to control the smart home all user allowed functions using lcd to display options and KPD for interaction
		//reseting all KPD variables for new values to be entered
        Reset_AllKPDValues();
    1caa:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Reset_AllKPDValues>
		2-start tmr0 before busy wait for KPD to avoid starting the tmr0 counter when the lcd didnt finish printing the options
		3-after the wihle loop is finished make sure to stop the tmr0 to avoid going to the idle function
		*/
	
		//setting the TRM0 ctc interrupt function
        TMR0_SetCallBackCTC(&Idle_Action);
    1cae:	85 e2       	ldi	r24, 0x25	; 37
    1cb0:	9e e0       	ldi	r25, 0x0E	; 14
    1cb2:	0e 94 a1 18 	call	0x3142	; 0x3142 <TMR0_SetCallBackCTC>
		//starting the timer0
        TMR0_voidStart();
    1cb6:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
        LCD_voidClear();
    1cba:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
    1cbe:	8f e1       	ldi	r24, 0x1F	; 31
    1cc0:	92 e0       	ldi	r25, 0x02	; 2
    1cc2:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
    1cc6:	80 ec       	ldi	r24, 0xC0	; 192
    1cc8:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 6-LogOut");
    1ccc:	89 e8       	ldi	r24, 0x89	; 137
    1cce:	94 e0       	ldi	r25, 0x04	; 4
    1cd0:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
        Reset_AllKPDValues();
    1cd4:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Reset_AllKPDValues>

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1cd8:	0c c0       	rjmp	.+24     	; 0x1cf2 <KPD_Interface_Localuser+0x48>
        {
            if (local_KPDIdleValue == '0')
    1cda:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1cde:	80 33       	cpi	r24, 0x30	; 48
    1ce0:	21 f4       	brne	.+8      	; 0x1cea <KPD_Interface_Localuser+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <KPD_Interface_Localuser+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
    1cea:	84 e6       	ldi	r24, 0x64	; 100
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 6-LogOut");
        Reset_AllKPDValues();

        // busy wait for KPD to get the value. timr0 is still counting for the 5 sec idle to go to interrupt function
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1cf2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf8:	81 f3       	breq	.-32     	; 0x1cda <KPD_Interface_Localuser+0x30>
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
		//stopping timer after reciving the value to avoid tmr0 from going to idle function
        TMR0_voidStop();
    1cfa:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
        switch (Local_copyKPDValue)
    1cfe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1d02:	82 33       	cpi	r24, 0x32	; 50
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <KPD_Interface_Localuser+0x5e>
    1d06:	4a c0       	rjmp	.+148    	; 0x1d9c <KPD_Interface_Localuser+0xf2>
    1d08:	18 f4       	brcc	.+6      	; 0x1d10 <KPD_Interface_Localuser+0x66>
    1d0a:	81 33       	cpi	r24, 0x31	; 49
    1d0c:	41 f0       	breq	.+16     	; 0x1d1e <KPD_Interface_Localuser+0x74>
    1d0e:	08 95       	ret
    1d10:	83 33       	cpi	r24, 0x33	; 51
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <KPD_Interface_Localuser+0x6c>
    1d14:	07 c3       	rjmp	.+1550   	; 0x2324 <KPD_Interface_Localuser+0x67a>
    1d16:	86 33       	cpi	r24, 0x36	; 54
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <KPD_Interface_Localuser+0x72>
    1d1a:	37 c3       	rjmp	.+1646   	; 0x238a <KPD_Interface_Localuser+0x6e0>
    1d1c:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
    1d1e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off 0-H");
    1d22:	89 e9       	ldi	r24, 0x99	; 153
    1d24:	94 e0       	ldi	r25, 0x04	; 4
    1d26:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1d2a:	80 ec       	ldi	r24, 0xC0	; 192
    1d2c:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1d30:	68 ec       	ldi	r22, 0xC8	; 200
    1d32:	74 e0       	ldi	r23, 0x04	; 4
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
    1d3a:	8a ea       	ldi	r24, 0xAA	; 170
    1d3c:	94 e0       	ldi	r25, 0x04	; 4
    1d3e:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1d42:	6c e0       	ldi	r22, 0x0C	; 12
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayNumber(local_temp);
    1d4a:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <__data_end>
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1d58:	1c c0       	rjmp	.+56     	; 0x1d92 <KPD_Interface_Localuser+0xe8>
			{
				KPD_voidGetValue(&local_KPDSelectValue);
    1d5a:	80 e6       	ldi	r24, 0x60	; 96
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1d62:	68 ec       	ldi	r22, 0xC8	; 200
    1d64:	74 e0       	ldi	r23, 0x04	; 4
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1d6c:	6c e0       	ldi	r22, 0x0C	; 12
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    1d74:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <__data_end>
    1d78:	70 e0       	ldi	r23, 0x00	; 0
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
				if (local_KPDSelectValue == '0')
    1d82:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1d86:	80 33       	cpi	r24, 0x30	; 48
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <KPD_Interface_Localuser+0xe8>
				{
					local_KPDSelectValue = KPD_Not_Pressed;
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
    1d90:	08 95       	ret
            LCD_voidSendCommand(Write_SecondLine);
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
			LCD_voidDisplayNumber(local_temp);
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1d92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1d96:	8f 3f       	cpi	r24, 0xFF	; 255
    1d98:	01 f3       	breq	.-64     	; 0x1d5a <KPD_Interface_Localuser+0xb0>
    1d9a:	08 95       	ret
            break;
			

        case ('2'):

            LCD_voidClear();
    1d9c:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
    1da0:	8c eb       	ldi	r24, 0xBC	; 188
    1da2:	92 e0       	ldi	r25, 0x02	; 2
    1da4:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1da8:	80 ec       	ldi	r24, 0xC0	; 192
    1daa:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
    1dae:	8c ec       	ldi	r24, 0xCC	; 204
    1db0:	92 e0       	ldi	r25, 0x02	; 2
    1db2:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
    1db6:	85 e2       	ldi	r24, 0x25	; 37
    1db8:	9e e0       	ldi	r25, 0x0E	; 14
    1dba:	0e 94 a1 18 	call	0x3142	; 0x3142 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
    1dbe:	0e 94 89 18 	call	0x3112	; 0x3112 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1dc2:	0c c0       	rjmp	.+24     	; 0x1ddc <KPD_Interface_Localuser+0x132>
            {
                KPD_voidGetValue(&local_lightNum);
    1dc4:	83 e6       	ldi	r24, 0x63	; 99
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
    1dcc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1dd0:	80 33       	cpi	r24, 0x30	; 48
    1dd2:	21 f4       	brne	.+8      	; 0x1ddc <KPD_Interface_Localuser+0x132>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <KPD_Interface_Localuser+0x13a>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1ddc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1de0:	8f 3f       	cpi	r24, 0xFF	; 255
    1de2:	81 f3       	breq	.-32     	; 0x1dc4 <KPD_Interface_Localuser+0x11a>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
    1de4:	0e 94 97 18 	call	0x312e	; 0x312e <TMR0_voidStop>
            switch (local_lightNum)
    1de8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1dec:	83 33       	cpi	r24, 0x33	; 51
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <KPD_Interface_Localuser+0x148>
    1df0:	a6 c0       	rjmp	.+332    	; 0x1f3e <KPD_Interface_Localuser+0x294>
    1df2:	30 f4       	brcc	.+12     	; 0x1e00 <KPD_Interface_Localuser+0x156>
    1df4:	81 33       	cpi	r24, 0x31	; 49
    1df6:	69 f0       	breq	.+26     	; 0x1e12 <KPD_Interface_Localuser+0x168>
    1df8:	82 33       	cpi	r24, 0x32	; 50
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <KPD_Interface_Localuser+0x154>
    1dfc:	54 c0       	rjmp	.+168    	; 0x1ea6 <KPD_Interface_Localuser+0x1fc>
    1dfe:	08 95       	ret
    1e00:	85 33       	cpi	r24, 0x35	; 53
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <KPD_Interface_Localuser+0x15c>
    1e04:	34 c1       	rjmp	.+616    	; 0x206e <KPD_Interface_Localuser+0x3c4>
    1e06:	08 f4       	brcc	.+2      	; 0x1e0a <KPD_Interface_Localuser+0x160>
    1e08:	e6 c0       	rjmp	.+460    	; 0x1fd6 <KPD_Interface_Localuser+0x32c>
    1e0a:	86 33       	cpi	r24, 0x36	; 54
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <KPD_Interface_Localuser+0x166>
    1e0e:	7b c1       	rjmp	.+758    	; 0x2106 <KPD_Interface_Localuser+0x45c>
    1e10:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    1e12:	4a ec       	ldi	r20, 0xCA	; 202
    1e14:	54 e0       	ldi	r21, 0x04	; 4
    1e16:	63 e0       	ldi	r22, 0x03	; 3
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                LCD_voidClear();
    1e1e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
                if (led_status == 1)
    1e22:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	f1 f4       	brne	.+60     	; 0x1e66 <KPD_Interface_Localuser+0x1bc>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
    1e2a:	89 ed       	ldi	r24, 0xD9	; 217
    1e2c:	92 e0       	ldi	r25, 0x02	; 2
    1e2e:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e32:	80 ec       	ldi	r24, 0xC0	; 192
    1e34:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1e38:	87 ee       	ldi	r24, 0xE7	; 231
    1e3a:	92 e0       	ldi	r25, 0x02	; 2
    1e3c:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <KPD_Interface_Localuser+0x1a0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e42:	82 e6       	ldi	r24, 0x62	; 98
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e4a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e50:	c1 f3       	breq	.-16     	; 0x1e42 <KPD_Interface_Localuser+0x198>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1e52:	81 33       	cpi	r24, 0x31	; 49
    1e54:	29 f4       	brne	.+10     	; 0x1e60 <KPD_Interface_Localuser+0x1b6>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	63 e0       	ldi	r22, 0x03	; 3
    1e5a:	83 e0       	ldi	r24, 0x03	; 3
    1e5c:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    Reset_AllKPDValues();
    1e60:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Reset_AllKPDValues>
					break;
    1e64:	08 95       	ret
                }
                else if (led_status == 0)
    1e66:	81 11       	cpse	r24, r1
    1e68:	93 c2       	rjmp	.+1318   	; 0x2390 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
    1e6a:	88 ef       	ldi	r24, 0xF8	; 248
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e72:	80 ec       	ldi	r24, 0xC0	; 192
    1e74:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1e78:	87 e0       	ldi	r24, 0x07	; 7
    1e7a:	93 e0       	ldi	r25, 0x03	; 3
    1e7c:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e80:	04 c0       	rjmp	.+8      	; 0x1e8a <KPD_Interface_Localuser+0x1e0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e82:	82 e6       	ldi	r24, 0x62	; 98
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e8a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e90:	c1 f3       	breq	.-16     	; 0x1e82 <KPD_Interface_Localuser+0x1d8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1e92:	81 33       	cpi	r24, 0x31	; 49
    1e94:	29 f4       	brne	.+10     	; 0x1ea0 <KPD_Interface_Localuser+0x1f6>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1e96:	41 e0       	ldi	r20, 0x01	; 1
    1e98:	63 e0       	ldi	r22, 0x03	; 3
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
    1ea0:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Reset_AllKPDValues>
    1ea4:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
    1ea6:	4a ec       	ldi	r20, 0xCA	; 202
    1ea8:	54 e0       	ldi	r21, 0x04	; 4
    1eaa:	64 e0       	ldi	r22, 0x04	; 4
    1eac:	83 e0       	ldi	r24, 0x03	; 3
    1eae:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                LCD_voidClear();
    1eb2:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
                if (led_status == 1)
    1eb6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	f9 f4       	brne	.+62     	; 0x1efc <KPD_Interface_Localuser+0x252>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
    1ebe:	87 e1       	ldi	r24, 0x17	; 23
    1ec0:	93 e0       	ldi	r25, 0x03	; 3
    1ec2:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1ec6:	80 ec       	ldi	r24, 0xC0	; 192
    1ec8:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1ecc:	87 ee       	ldi	r24, 0xE7	; 231
    1ece:	92 e0       	ldi	r25, 0x02	; 2
    1ed0:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <KPD_Interface_Localuser+0x234>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1ed6:	82 e6       	ldi	r24, 0x62	; 98
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1ede:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1ee2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ee4:	c1 f3       	breq	.-16     	; 0x1ed6 <KPD_Interface_Localuser+0x22c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1ee6:	81 33       	cpi	r24, 0x31	; 49
    1ee8:	29 f4       	brne	.+10     	; 0x1ef4 <KPD_Interface_Localuser+0x24a>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	64 e0       	ldi	r22, 0x04	; 4
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1ef4:	8f ef       	ldi	r24, 0xFF	; 255
    1ef6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1efa:	08 95       	ret
                }
                else if (led_status == 0)
    1efc:	81 11       	cpse	r24, r1
    1efe:	48 c2       	rjmp	.+1168   	; 0x2390 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
    1f00:	85 e2       	ldi	r24, 0x25	; 37
    1f02:	93 e0       	ldi	r25, 0x03	; 3
    1f04:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1f08:	80 ec       	ldi	r24, 0xC0	; 192
    1f0a:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1f0e:	87 e0       	ldi	r24, 0x07	; 7
    1f10:	93 e0       	ldi	r25, 0x03	; 3
    1f12:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <KPD_Interface_Localuser+0x276>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1f18:	82 e6       	ldi	r24, 0x62	; 98
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1f20:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1f24:	8f 3f       	cpi	r24, 0xFF	; 255
    1f26:	c1 f3       	breq	.-16     	; 0x1f18 <KPD_Interface_Localuser+0x26e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1f28:	81 33       	cpi	r24, 0x31	; 49
    1f2a:	29 f4       	brne	.+10     	; 0x1f36 <KPD_Interface_Localuser+0x28c>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	64 e0       	ldi	r22, 0x04	; 4
    1f30:	83 e0       	ldi	r24, 0x03	; 3
    1f32:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1f36:	8f ef       	ldi	r24, 0xFF	; 255
    1f38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1f3c:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    1f3e:	4a ec       	ldi	r20, 0xCA	; 202
    1f40:	54 e0       	ldi	r21, 0x04	; 4
    1f42:	62 e0       	ldi	r22, 0x02	; 2
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                LCD_voidClear();
    1f4a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
                if (led_status == 1)
    1f4e:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	f9 f4       	brne	.+62     	; 0x1f94 <KPD_Interface_Localuser+0x2ea>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
    1f56:	84 e3       	ldi	r24, 0x34	; 52
    1f58:	93 e0       	ldi	r25, 0x03	; 3
    1f5a:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1f5e:	80 ec       	ldi	r24, 0xC0	; 192
    1f60:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1f64:	87 ee       	ldi	r24, 0xE7	; 231
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <KPD_Interface_Localuser+0x2cc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1f6e:	82 e6       	ldi	r24, 0x62	; 98
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1f76:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1f7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7c:	c1 f3       	breq	.-16     	; 0x1f6e <KPD_Interface_Localuser+0x2c4>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1f7e:	81 33       	cpi	r24, 0x31	; 49
    1f80:	29 f4       	brne	.+10     	; 0x1f8c <KPD_Interface_Localuser+0x2e2>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	62 e0       	ldi	r22, 0x02	; 2
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1f92:	08 95       	ret
                }
                else if (led_status == 0)
    1f94:	81 11       	cpse	r24, r1
    1f96:	fc c1       	rjmp	.+1016   	; 0x2390 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
    1f98:	82 e4       	ldi	r24, 0x42	; 66
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1fa0:	80 ec       	ldi	r24, 0xC0	; 192
    1fa2:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1fa6:	87 e0       	ldi	r24, 0x07	; 7
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1fae:	04 c0       	rjmp	.+8      	; 0x1fb8 <KPD_Interface_Localuser+0x30e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1fb0:	82 e6       	ldi	r24, 0x62	; 98
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1fb8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbe:	c1 f3       	breq	.-16     	; 0x1fb0 <KPD_Interface_Localuser+0x306>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1fc0:	81 33       	cpi	r24, 0x31	; 49
    1fc2:	29 f4       	brne	.+10     	; 0x1fce <KPD_Interface_Localuser+0x324>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	62 e0       	ldi	r22, 0x02	; 2
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1fce:	8f ef       	ldi	r24, 0xFF	; 255
    1fd0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1fd4:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    1fd6:	4a ec       	ldi	r20, 0xCA	; 202
    1fd8:	54 e0       	ldi	r21, 0x04	; 4
    1fda:	63 e0       	ldi	r22, 0x03	; 3
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                LCD_voidClear();
    1fe2:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
                if (led_status == 1)
    1fe6:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    1fea:	81 30       	cpi	r24, 0x01	; 1
    1fec:	f9 f4       	brne	.+62     	; 0x202c <KPD_Interface_Localuser+0x382>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
    1fee:	81 e5       	ldi	r24, 0x51	; 81
    1ff0:	93 e0       	ldi	r25, 0x03	; 3
    1ff2:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1ff6:	80 ec       	ldi	r24, 0xC0	; 192
    1ff8:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1ffc:	87 ee       	ldi	r24, 0xE7	; 231
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    2004:	04 c0       	rjmp	.+8      	; 0x200e <KPD_Interface_Localuser+0x364>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    2006:	82 e6       	ldi	r24, 0x62	; 98
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    200e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2012:	8f 3f       	cpi	r24, 0xFF	; 255
    2014:	c1 f3       	breq	.-16     	; 0x2006 <KPD_Interface_Localuser+0x35c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    2016:	81 33       	cpi	r24, 0x31	; 49
    2018:	29 f4       	brne	.+10     	; 0x2024 <KPD_Interface_Localuser+0x37a>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	63 e0       	ldi	r22, 0x03	; 3
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    2024:	8f ef       	ldi	r24, 0xFF	; 255
    2026:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    202a:	08 95       	ret
                }
                else if (led_status == 0)
    202c:	81 11       	cpse	r24, r1
    202e:	b0 c1       	rjmp	.+864    	; 0x2390 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
    2030:	8f e5       	ldi	r24, 0x5F	; 95
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    2038:	80 ec       	ldi	r24, 0xC0	; 192
    203a:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    203e:	87 e0       	ldi	r24, 0x07	; 7
    2040:	93 e0       	ldi	r25, 0x03	; 3
    2042:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <KPD_Interface_Localuser+0x3a6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    2048:	82 e6       	ldi	r24, 0x62	; 98
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    2050:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2054:	8f 3f       	cpi	r24, 0xFF	; 255
    2056:	c1 f3       	breq	.-16     	; 0x2048 <KPD_Interface_Localuser+0x39e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    2058:	81 33       	cpi	r24, 0x31	; 49
    205a:	29 f4       	brne	.+10     	; 0x2066 <KPD_Interface_Localuser+0x3bc>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	63 e0       	ldi	r22, 0x03	; 3
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    206c:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    206e:	4a ec       	ldi	r20, 0xCA	; 202
    2070:	54 e0       	ldi	r21, 0x04	; 4
    2072:	62 e0       	ldi	r22, 0x02	; 2
    2074:	83 e0       	ldi	r24, 0x03	; 3
    2076:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
                LCD_voidClear();
    207a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
                if (led_status == 1)
    207e:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	f9 f4       	brne	.+62     	; 0x20c4 <KPD_Interface_Localuser+0x41a>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
    2086:	8e e6       	ldi	r24, 0x6E	; 110
    2088:	93 e0       	ldi	r25, 0x03	; 3
    208a:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    208e:	80 ec       	ldi	r24, 0xC0	; 192
    2090:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    2094:	87 ee       	ldi	r24, 0xE7	; 231
    2096:	92 e0       	ldi	r25, 0x02	; 2
    2098:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <KPD_Interface_Localuser+0x3fc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    209e:	82 e6       	ldi	r24, 0x62	; 98
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    20a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    20aa:	8f 3f       	cpi	r24, 0xFF	; 255
    20ac:	c1 f3       	breq	.-16     	; 0x209e <KPD_Interface_Localuser+0x3f4>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    20ae:	81 33       	cpi	r24, 0x31	; 49
    20b0:	29 f4       	brne	.+10     	; 0x20bc <KPD_Interface_Localuser+0x412>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	62 e0       	ldi	r22, 0x02	; 2
    20b6:	83 e0       	ldi	r24, 0x03	; 3
    20b8:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    20bc:	8f ef       	ldi	r24, 0xFF	; 255
    20be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    20c2:	08 95       	ret
                }
                else if (led_status == 0)
    20c4:	81 11       	cpse	r24, r1
    20c6:	64 c1       	rjmp	.+712    	; 0x2390 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
    20c8:	8c e7       	ldi	r24, 0x7C	; 124
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    20d0:	80 ec       	ldi	r24, 0xC0	; 192
    20d2:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    20d6:	87 e0       	ldi	r24, 0x07	; 7
    20d8:	93 e0       	ldi	r25, 0x03	; 3
    20da:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <KPD_Interface_Localuser+0x43e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    20e0:	82 e6       	ldi	r24, 0x62	; 98
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    20e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    20ec:	8f 3f       	cpi	r24, 0xFF	; 255
    20ee:	c1 f3       	breq	.-16     	; 0x20e0 <KPD_Interface_Localuser+0x436>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    20f0:	81 33       	cpi	r24, 0x31	; 49
    20f2:	29 f4       	brne	.+10     	; 0x20fe <KPD_Interface_Localuser+0x454>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	62 e0       	ldi	r22, 0x02	; 2
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    2104:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
    2106:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
				
                if (dimmer_brightness > 0)
    210a:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    210e:	88 23       	and	r24, r24
    2110:	09 f4       	brne	.+2      	; 0x2114 <KPD_Interface_Localuser+0x46a>
    2112:	82 c0       	rjmp	.+260    	; 0x2218 <KPD_Interface_Localuser+0x56e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
    2114:	8b e8       	ldi	r24, 0x8B	; 139
    2116:	93 e0       	ldi	r25, 0x03	; 3
    2118:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
    211c:	2f ef       	ldi	r18, 0xFF	; 255
    211e:	83 ed       	ldi	r24, 0xD3	; 211
    2120:	90 e3       	ldi	r25, 0x30	; 48
    2122:	21 50       	subi	r18, 0x01	; 1
    2124:	80 40       	sbci	r24, 0x00	; 0
    2126:	90 40       	sbci	r25, 0x00	; 0
    2128:	e1 f7       	brne	.-8      	; 0x2122 <KPD_Interface_Localuser+0x478>
    212a:	00 c0       	rjmp	.+0      	; 0x212c <KPD_Interface_Localuser+0x482>
    212c:	00 00       	nop
					_delay_ms(1000);
					LCD_voidClear();
    212e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    2132:	88 eb       	ldi	r24, 0xB8	; 184
    2134:	94 e0       	ldi	r25, 0x04	; 4
    2136:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    213a:	6d e0       	ldi	r22, 0x0D	; 13
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    2142:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    2146:	70 e0       	ldi	r23, 0x00	; 0
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    2150:	80 ec       	ldi	r24, 0xC0	; 192
    2152:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    2156:	89 ea       	ldi	r24, 0xA9	; 169
    2158:	93 e0       	ldi	r25, 0x03	; 3
    215a:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    215e:	56 c0       	rjmp	.+172    	; 0x220c <KPD_Interface_Localuser+0x562>
					{
						KPD_voidGetValue(&local_lightStatus);
    2160:	82 e6       	ldi	r24, 0x62	; 98
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    2168:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    216c:	81 33       	cpi	r24, 0x31	; 49
    216e:	59 f5       	brne	.+86     	; 0x21c6 <KPD_Interface_Localuser+0x51c>
						{
							dimmer_brightness += 10;
    2170:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    2174:	66 5f       	subi	r22, 0xF6	; 246
    2176:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    2184:	ab 01       	movw	r20, r22
    2186:	bc 01       	movw	r22, r24
    2188:	88 ee       	ldi	r24, 0xE8	; 232
    218a:	93 e0       	ldi	r25, 0x03	; 3
    218c:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    2190:	6d e0       	ldi	r22, 0x0D	; 13
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    2198:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    21a6:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    21aa:	85 36       	cpi	r24, 0x65	; 101
    21ac:	78 f1       	brcs	.+94     	; 0x220c <KPD_Interface_Localuser+0x562>
							{
								dimmer_brightness = 100;
    21ae:	84 e6       	ldi	r24, 0x64	; 100
    21b0:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	68 ec       	ldi	r22, 0xC8	; 200
    21ba:	72 e4       	ldi	r23, 0x42	; 66
    21bc:	88 ee       	ldi	r24, 0xE8	; 232
    21be:	93 e0       	ldi	r25, 0x03	; 3
    21c0:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
    21c4:	23 c0       	rjmp	.+70     	; 0x220c <KPD_Interface_Localuser+0x562>
							}
						
							
						}
						else if (local_lightStatus == '2')
    21c6:	82 33       	cpi	r24, 0x32	; 50
    21c8:	e1 f4       	brne	.+56     	; 0x2202 <KPD_Interface_Localuser+0x558>
						{
							dimmer_brightness -= 10;
    21ca:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    21ce:	6a 50       	subi	r22, 0x0A	; 10
    21d0:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    21d4:	70 e0       	ldi	r23, 0x00	; 0
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    21de:	ab 01       	movw	r20, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	88 ee       	ldi	r24, 0xE8	; 232
    21e4:	93 e0       	ldi	r25, 0x03	; 3
    21e6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    21ea:	6d e0       	ldi	r22, 0x0D	; 13
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    21f2:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
    2200:	05 c0       	rjmp	.+10     	; 0x220c <KPD_Interface_Localuser+0x562>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    2202:	80 33       	cpi	r24, 0x30	; 48
    2204:	19 f4       	brne	.+6      	; 0x220c <KPD_Interface_Localuser+0x562>
						{
							LCD_voidClear();
    2206:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
							break;
    220a:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    220c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2210:	8f 3f       	cpi	r24, 0xFF	; 255
    2212:	09 f4       	brne	.+2      	; 0x2216 <KPD_Interface_Localuser+0x56c>
    2214:	a5 cf       	rjmp	.-182    	; 0x2160 <KPD_Interface_Localuser+0x4b6>
    2216:	08 95       	ret
						}						
						
					}
					
                }
                else if (led_status == 0)
    2218:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <led_status>
    221c:	81 11       	cpse	r24, r1
    221e:	b8 c0       	rjmp	.+368    	; 0x2390 <KPD_Interface_Localuser+0x6e6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
    2220:	89 eb       	ldi	r24, 0xB9	; 185
    2222:	93 e0       	ldi	r25, 0x03	; 3
    2224:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
    2228:	2f ef       	ldi	r18, 0xFF	; 255
    222a:	83 ed       	ldi	r24, 0xD3	; 211
    222c:	90 e3       	ldi	r25, 0x30	; 48
    222e:	21 50       	subi	r18, 0x01	; 1
    2230:	80 40       	sbci	r24, 0x00	; 0
    2232:	90 40       	sbci	r25, 0x00	; 0
    2234:	e1 f7       	brne	.-8      	; 0x222e <KPD_Interface_Localuser+0x584>
    2236:	00 c0       	rjmp	.+0      	; 0x2238 <KPD_Interface_Localuser+0x58e>
    2238:	00 00       	nop
					_delay_ms(1000);
                    LCD_voidClear();
    223a:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    223e:	88 eb       	ldi	r24, 0xB8	; 184
    2240:	94 e0       	ldi	r25, 0x04	; 4
    2242:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    2246:	6d e0       	ldi	r22, 0x0D	; 13
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    224e:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    2252:	70 e0       	ldi	r23, 0x00	; 0
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    225c:	80 ec       	ldi	r24, 0xC0	; 192
    225e:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    2262:	89 ea       	ldi	r24, 0xA9	; 169
    2264:	93 e0       	ldi	r25, 0x03	; 3
    2266:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    226a:	56 c0       	rjmp	.+172    	; 0x2318 <KPD_Interface_Localuser+0x66e>
					{
						KPD_voidGetValue(&local_lightStatus);
    226c:	82 e6       	ldi	r24, 0x62	; 98
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    2274:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2278:	81 33       	cpi	r24, 0x31	; 49
    227a:	59 f5       	brne	.+86     	; 0x22d2 <KPD_Interface_Localuser+0x628>
						{
							dimmer_brightness += 10;
    227c:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    2280:	66 5f       	subi	r22, 0xF6	; 246
    2282:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    2286:	70 e0       	ldi	r23, 0x00	; 0
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    2290:	ab 01       	movw	r20, r22
    2292:	bc 01       	movw	r22, r24
    2294:	88 ee       	ldi	r24, 0xE8	; 232
    2296:	93 e0       	ldi	r25, 0x03	; 3
    2298:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    229c:	6d e0       	ldi	r22, 0x0D	; 13
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    22a4:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    22b2:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <dimmer_brightness>
    22b6:	85 36       	cpi	r24, 0x65	; 101
    22b8:	78 f1       	brcs	.+94     	; 0x2318 <KPD_Interface_Localuser+0x66e>
							{
								dimmer_brightness = 100;
    22ba:	84 e6       	ldi	r24, 0x64	; 100
    22bc:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	68 ec       	ldi	r22, 0xC8	; 200
    22c6:	72 e4       	ldi	r23, 0x42	; 66
    22c8:	88 ee       	ldi	r24, 0xE8	; 232
    22ca:	93 e0       	ldi	r25, 0x03	; 3
    22cc:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
    22d0:	23 c0       	rjmp	.+70     	; 0x2318 <KPD_Interface_Localuser+0x66e>
							}
						
							
						}
						else if (local_lightStatus == '2')
    22d2:	82 33       	cpi	r24, 0x32	; 50
    22d4:	e1 f4       	brne	.+56     	; 0x230e <KPD_Interface_Localuser+0x664>
						{
							dimmer_brightness -= 10;
    22d6:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    22da:	6a 50       	subi	r22, 0x0A	; 10
    22dc:	60 93 c9 04 	sts	0x04C9, r22	; 0x8004c9 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    22ea:	ab 01       	movw	r20, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	88 ee       	ldi	r24, 0xE8	; 232
    22f0:	93 e0       	ldi	r25, 0x03	; 3
    22f2:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    22f6:	6d e0       	ldi	r22, 0x0D	; 13
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    22fe:	60 91 c9 04 	lds	r22, 0x04C9	; 0x8004c9 <dimmer_brightness>
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <KPD_Interface_Localuser+0x66e>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    230e:	80 33       	cpi	r24, 0x30	; 48
    2310:	19 f4       	brne	.+6      	; 0x2318 <KPD_Interface_Localuser+0x66e>
						{
							LCD_voidClear();
    2312:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
							break;
    2316:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    2318:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    231c:	8f 3f       	cpi	r24, 0xFF	; 255
    231e:	09 f4       	brne	.+2      	; 0x2322 <KPD_Interface_Localuser+0x678>
    2320:	a5 cf       	rjmp	.-182    	; 0x226c <KPD_Interface_Localuser+0x5c2>
    2322:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
    2324:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    2328:	68 ec       	ldi	r22, 0xC8	; 200
    232a:	74 e0       	ldi	r23, 0x04	; 4
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
    2332:	80 e8       	ldi	r24, 0x80	; 128
    2334:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
    2338:	8a ea       	ldi	r24, 0xAA	; 170
    233a:	94 e0       	ldi	r25, 0x04	; 4
    233c:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    2340:	6b e0       	ldi	r22, 0x0B	; 11
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    2348:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <__data_end>
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	0e 94 b0 14 	call	0x2960	; 0x2960 <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
    2356:	83 e6       	ldi	r24, 0x63	; 99
    2358:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
    235c:	80 ec       	ldi	r24, 0xC0	; 192
    235e:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
    2362:	84 e9       	ldi	r24, 0x94	; 148
    2364:	92 e0       	ldi	r25, 0x02	; 2
    2366:	0e 94 91 14 	call	0x2922	; 0x2922 <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
    236a:	06 c0       	rjmp	.+12     	; 0x2378 <KPD_Interface_Localuser+0x6ce>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
    236c:	81 e6       	ldi	r24, 0x61	; 97
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	0e 94 c9 12 	call	0x2592	; 0x2592 <KPD_voidGetValue>
					Display_temp();
    2374:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
    2378:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    237c:	8f 3f       	cpi	r24, 0xFF	; 255
    237e:	b1 f3       	breq	.-20     	; 0x236c <KPD_Interface_Localuser+0x6c2>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
    2380:	80 33       	cpi	r24, 0x30	; 48
    2382:	31 f4       	brne	.+12     	; 0x2390 <KPD_Interface_Localuser+0x6e6>
				{
					LCD_voidClear();
    2384:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
    2388:	08 95       	ret
				}
			break;

			case('6'):
			usertype =HOME_NO_LOGIN;
    238a:	86 e0       	ldi	r24, 0x06	; 6
    238c:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <usertype>
    2390:	08 95       	ret

00002392 <BL_voidInit>:
	
}

BL_voidRxCharWithTimeout(u8* copy_pu8BlRxData)
{
	 UART_voidRxCharWithTimeout(copy_pu8BlRxData);
    2392:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <UART_voidInit>
    2396:	08 95       	ret

00002398 <BL_voidTxChar>:
    2398:	0e 94 6f 1a 	call	0x34de	; 0x34de <UART_voidTxChar>
    239c:	08 95       	ret

0000239e <BL_voidRxChar>:
    239e:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <UART_voidRxChar>
    23a2:	08 95       	ret

000023a4 <BL_voidTxString>:
}


void BL_voidTxString(u8* copy_pu8BlTxString)
{
	UART_voidTxString(copy_pu8BlTxString);
    23a4:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <UART_voidTxString>
    23a8:	08 95       	ret

000023aa <BUZZER_voidInit>:
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    23b0:	08 95       	ret

000023b2 <BUZZER_voidOn>:
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    23b8:	08 95       	ret

000023ba <BUZZER_voidOff>:
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    23c0:	08 95       	ret

000023c2 <EEPROM_voidInit>:
    23c2:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <TWI_voidInitMaster>
    23c6:	08 95       	ret

000023c8 <EEPROM_voidWriteByte>:
    23c8:	1f 93       	push	r17
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	d8 2f       	mov	r29, r24
    23d0:	c6 2f       	mov	r28, r22
    23d2:	19 2f       	mov	r17, r25
    23d4:	10 65       	ori	r17, 0x50	; 80
    23d6:	0e 94 df 19 	call	0x33be	; 0x33be <TWI_voidSendStartCondition>
    23da:	81 2f       	mov	r24, r17
    23dc:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidSendSlaveAddWithWrite>
    23e0:	8d 2f       	mov	r24, r29
    23e2:	0e 94 2c 1a 	call	0x3458	; 0x3458 <TWI_voidTransmitMasterDataByte>
    23e6:	8c 2f       	mov	r24, r28
    23e8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <TWI_voidTransmitMasterDataByte>
    23ec:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TWI_voidSendStopCondition>
    23f0:	8f e1       	ldi	r24, 0x1F	; 31
    23f2:	9e e4       	ldi	r25, 0x4E	; 78
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <EEPROM_voidWriteByte+0x2c>
    23f8:	00 c0       	rjmp	.+0      	; 0x23fa <EEPROM_voidWriteByte+0x32>
    23fa:	00 00       	nop
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	08 95       	ret

00002404 <EEPROM_voidWritePage>:
    2404:	0f 93       	push	r16
    2406:	1f 93       	push	r17
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
    240c:	61 15       	cp	r22, r1
    240e:	71 05       	cpc	r23, r1
    2410:	f9 f0       	breq	.+62     	; 0x2450 <EEPROM_voidWritePage+0x4c>
    2412:	8b 01       	movw	r16, r22
    2414:	d8 2f       	mov	r29, r24
    2416:	c9 2f       	mov	r28, r25
    2418:	c0 65       	ori	r28, 0x50	; 80
    241a:	0e 94 df 19 	call	0x33be	; 0x33be <TWI_voidSendStartCondition>
    241e:	8c 2f       	mov	r24, r28
    2420:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidSendSlaveAddWithWrite>
    2424:	8d 2f       	mov	r24, r29
    2426:	0e 94 2c 1a 	call	0x3458	; 0x3458 <TWI_voidTransmitMasterDataByte>
    242a:	c0 e0       	ldi	r28, 0x00	; 0
    242c:	07 c0       	rjmp	.+14     	; 0x243c <EEPROM_voidWritePage+0x38>
    242e:	f8 01       	movw	r30, r16
    2430:	ec 0f       	add	r30, r28
    2432:	f1 1d       	adc	r31, r1
    2434:	80 81       	ld	r24, Z
    2436:	0e 94 2c 1a 	call	0x3458	; 0x3458 <TWI_voidTransmitMasterDataByte>
    243a:	cf 5f       	subi	r28, 0xFF	; 255
    243c:	c8 30       	cpi	r28, 0x08	; 8
    243e:	b8 f3       	brcs	.-18     	; 0x242e <EEPROM_voidWritePage+0x2a>
    2440:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TWI_voidSendStopCondition>
    2444:	8f e1       	ldi	r24, 0x1F	; 31
    2446:	9e e4       	ldi	r25, 0x4E	; 78
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <EEPROM_voidWritePage+0x44>
    244c:	00 c0       	rjmp	.+0      	; 0x244e <EEPROM_voidWritePage+0x4a>
    244e:	00 00       	nop
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	08 95       	ret

0000245a <EEPROM_voidReadByte>:
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	61 15       	cp	r22, r1
    2464:	71 05       	cpc	r23, r1
    2466:	e1 f0       	breq	.+56     	; 0x24a0 <EEPROM_voidReadByte+0x46>
    2468:	8b 01       	movw	r16, r22
    246a:	d8 2f       	mov	r29, r24
    246c:	c9 2f       	mov	r28, r25
    246e:	c0 65       	ori	r28, 0x50	; 80
    2470:	0e 94 df 19 	call	0x33be	; 0x33be <TWI_voidSendStartCondition>
    2474:	8c 2f       	mov	r24, r28
    2476:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidSendSlaveAddWithWrite>
    247a:	8d 2f       	mov	r24, r29
    247c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <TWI_voidTransmitMasterDataByte>
    2480:	0e 94 ed 19 	call	0x33da	; 0x33da <TWI_voidSendRepeatedStartCondition>
    2484:	8c 2f       	mov	r24, r28
    2486:	0e 94 17 1a 	call	0x342e	; 0x342e <TWI_voidSendSlaveAddWithRead>
    248a:	c8 01       	movw	r24, r16
    248c:	0e 94 4e 1a 	call	0x349c	; 0x349c <TWI_voidRecieveMasterDataByteWithNAch>
    2490:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TWI_voidSendStopCondition>
    2494:	8f e1       	ldi	r24, 0x1F	; 31
    2496:	9e e4       	ldi	r25, 0x4E	; 78
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <EEPROM_voidReadByte+0x3e>
    249c:	00 c0       	rjmp	.+0      	; 0x249e <EEPROM_voidReadByte+0x44>
    249e:	00 00       	nop
    24a0:	df 91       	pop	r29
    24a2:	cf 91       	pop	r28
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	08 95       	ret

000024aa <EEPROM_voidSequentialRead>:
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	41 15       	cp	r20, r1
    24b8:	51 05       	cpc	r21, r1
    24ba:	81 f1       	breq	.+96     	; 0x251c <EEPROM_voidSequentialRead+0x72>
    24bc:	61 15       	cp	r22, r1
    24be:	22 e0       	ldi	r18, 0x02	; 2
    24c0:	72 07       	cpc	r23, r18
    24c2:	60 f5       	brcc	.+88     	; 0x251c <EEPROM_voidSequentialRead+0x72>
    24c4:	8a 01       	movw	r16, r20
    24c6:	7b 01       	movw	r14, r22
    24c8:	d8 2f       	mov	r29, r24
    24ca:	c9 2f       	mov	r28, r25
    24cc:	c0 65       	ori	r28, 0x50	; 80
    24ce:	0e 94 df 19 	call	0x33be	; 0x33be <TWI_voidSendStartCondition>
    24d2:	8c 2f       	mov	r24, r28
    24d4:	0e 94 02 1a 	call	0x3404	; 0x3404 <TWI_voidSendSlaveAddWithWrite>
    24d8:	8d 2f       	mov	r24, r29
    24da:	0e 94 2c 1a 	call	0x3458	; 0x3458 <TWI_voidTransmitMasterDataByte>
    24de:	0e 94 ed 19 	call	0x33da	; 0x33da <TWI_voidSendRepeatedStartCondition>
    24e2:	8c 2f       	mov	r24, r28
    24e4:	0e 94 17 1a 	call	0x342e	; 0x342e <TWI_voidSendSlaveAddWithRead>
    24e8:	c0 e0       	ldi	r28, 0x00	; 0
    24ea:	d0 e0       	ldi	r29, 0x00	; 0
    24ec:	06 c0       	rjmp	.+12     	; 0x24fa <EEPROM_voidSequentialRead+0x50>
    24ee:	c8 01       	movw	r24, r16
    24f0:	8c 0f       	add	r24, r28
    24f2:	9d 1f       	adc	r25, r29
    24f4:	0e 94 38 1a 	call	0x3470	; 0x3470 <TWI_voidRecieveMasterDataByteWithAch>
    24f8:	21 96       	adiw	r28, 0x01	; 1
    24fa:	c7 01       	movw	r24, r14
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	c8 17       	cp	r28, r24
    2500:	d9 07       	cpc	r29, r25
    2502:	a8 f3       	brcs	.-22     	; 0x24ee <EEPROM_voidSequentialRead+0x44>
    2504:	80 0f       	add	r24, r16
    2506:	91 1f       	adc	r25, r17
    2508:	0e 94 4e 1a 	call	0x349c	; 0x349c <TWI_voidRecieveMasterDataByteWithNAch>
    250c:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <TWI_voidSendStopCondition>
    2510:	8f e1       	ldi	r24, 0x1F	; 31
    2512:	9e e4       	ldi	r25, 0x4E	; 78
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <EEPROM_voidSequentialRead+0x6a>
    2518:	00 c0       	rjmp	.+0      	; 0x251a <EEPROM_voidSequentialRead+0x70>
    251a:	00 00       	nop
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	ff 90       	pop	r15
    2526:	ef 90       	pop	r14
    2528:	08 95       	ret

0000252a <KPD_voidInit>:
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	64 e0       	ldi	r22, 0x04	; 4
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	65 e0       	ldi	r22, 0x05	; 5
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	66 e0       	ldi	r22, 0x06	; 6
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2548:	40 e0       	ldi	r20, 0x00	; 0
    254a:	63 e0       	ldi	r22, 0x03	; 3
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	64 e0       	ldi	r22, 0x04	; 4
    2556:	82 e0       	ldi	r24, 0x02	; 2
    2558:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	65 e0       	ldi	r22, 0x05	; 5
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	66 e0       	ldi	r22, 0x06	; 6
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2570:	63 e0       	ldi	r22, 0x03	; 3
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	0e 94 7d 17 	call	0x2efa	; 0x2efa <DIO_voidActivePinInPullUpResistance>
    2578:	64 e0       	ldi	r22, 0x04	; 4
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <DIO_voidActivePinInPullUpResistance>
    2580:	65 e0       	ldi	r22, 0x05	; 5
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	0e 94 7d 17 	call	0x2efa	; 0x2efa <DIO_voidActivePinInPullUpResistance>
    2588:	66 e0       	ldi	r22, 0x06	; 6
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	0e 94 7d 17 	call	0x2efa	; 0x2efa <DIO_voidActivePinInPullUpResistance>
    2590:	08 95       	ret

00002592 <KPD_voidGetValue>:
    2592:	6f 92       	push	r6
    2594:	7f 92       	push	r7
    2596:	8f 92       	push	r8
    2598:	9f 92       	push	r9
    259a:	af 92       	push	r10
    259c:	bf 92       	push	r11
    259e:	cf 92       	push	r12
    25a0:	df 92       	push	r13
    25a2:	ef 92       	push	r14
    25a4:	ff 92       	push	r15
    25a6:	0f 93       	push	r16
    25a8:	1f 93       	push	r17
    25aa:	cf 93       	push	r28
    25ac:	df 93       	push	r29
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
    25b2:	6b 97       	sbiw	r28, 0x1b	; 27
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <KPD_voidGetValue+0x32>
    25c2:	7e c0       	rjmp	.+252    	; 0x26c0 <KPD_voidGetValue+0x12e>
    25c4:	5c 01       	movw	r10, r24
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	88 8f       	std	Y+24, r24	; 0x18
    25ca:	89 8f       	std	Y+25, r24	; 0x19
    25cc:	8a 8f       	std	Y+26, r24	; 0x1a
    25ce:	34 e0       	ldi	r19, 0x04	; 4
    25d0:	3d 8b       	std	Y+21, r19	; 0x15
    25d2:	25 e0       	ldi	r18, 0x05	; 5
    25d4:	2e 8b       	std	Y+22, r18	; 0x16
    25d6:	96 e0       	ldi	r25, 0x06	; 6
    25d8:	9f 8b       	std	Y+23, r25	; 0x17
    25da:	82 e0       	ldi	r24, 0x02	; 2
    25dc:	89 8b       	std	Y+17, r24	; 0x11
    25de:	8a 8b       	std	Y+18, r24	; 0x12
    25e0:	8b 8b       	std	Y+19, r24	; 0x13
    25e2:	8c 8b       	std	Y+20, r24	; 0x14
    25e4:	83 e0       	ldi	r24, 0x03	; 3
    25e6:	8d 87       	std	Y+13, r24	; 0x0d
    25e8:	3e 87       	std	Y+14, r19	; 0x0e
    25ea:	2f 87       	std	Y+15, r18	; 0x0f
    25ec:	98 8b       	std	Y+16, r25	; 0x10
    25ee:	8c e0       	ldi	r24, 0x0C	; 12
    25f0:	e6 e6       	ldi	r30, 0x66	; 102
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	de 01       	movw	r26, r28
    25f6:	11 96       	adiw	r26, 0x01	; 1
    25f8:	01 90       	ld	r0, Z+
    25fa:	0d 92       	st	X+, r0
    25fc:	8a 95       	dec	r24
    25fe:	e1 f7       	brne	.-8      	; 0x25f8 <KPD_voidGetValue+0x66>
    2600:	8f ef       	ldi	r24, 0xFF	; 255
    2602:	f5 01       	movw	r30, r10
    2604:	80 83       	st	Z, r24
    2606:	81 2c       	mov	r8, r1
    2608:	57 c0       	rjmp	.+174    	; 0x26b8 <KPD_voidGetValue+0x126>
    260a:	c8 2c       	mov	r12, r8
    260c:	d1 2c       	mov	r13, r1
    260e:	e5 e1       	ldi	r30, 0x15	; 21
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	ec 0f       	add	r30, r28
    2614:	fd 1f       	adc	r31, r29
    2616:	ec 0d       	add	r30, r12
    2618:	fd 1d       	adc	r31, r13
    261a:	60 80       	ld	r6, Z
    261c:	e8 e1       	ldi	r30, 0x18	; 24
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	ec 0f       	add	r30, r28
    2622:	fd 1f       	adc	r31, r29
    2624:	ec 0d       	add	r30, r12
    2626:	fd 1d       	adc	r31, r13
    2628:	70 80       	ld	r7, Z
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	66 2d       	mov	r22, r6
    262e:	87 2d       	mov	r24, r7
    2630:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2634:	10 e0       	ldi	r17, 0x00	; 0
    2636:	38 c0       	rjmp	.+112    	; 0x26a8 <KPD_voidGetValue+0x116>
    2638:	e1 2e       	mov	r14, r17
    263a:	f1 2c       	mov	r15, r1
    263c:	ed e0       	ldi	r30, 0x0D	; 13
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	ec 0f       	add	r30, r28
    2642:	fd 1f       	adc	r31, r29
    2644:	ee 0d       	add	r30, r14
    2646:	ff 1d       	adc	r31, r15
    2648:	00 81       	ld	r16, Z
    264a:	e1 e1       	ldi	r30, 0x11	; 17
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	ec 0f       	add	r30, r28
    2650:	fd 1f       	adc	r31, r29
    2652:	ee 0d       	add	r30, r14
    2654:	ff 1d       	adc	r31, r15
    2656:	90 80       	ld	r9, Z
    2658:	ae 01       	movw	r20, r28
    265a:	45 5e       	subi	r20, 0xE5	; 229
    265c:	5f 4f       	sbci	r21, 0xFF	; 255
    265e:	60 2f       	mov	r22, r16
    2660:	89 2d       	mov	r24, r9
    2662:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
    2666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2668:	81 11       	cpse	r24, r1
    266a:	1d c0       	rjmp	.+58     	; 0x26a6 <KPD_voidGetValue+0x114>
    266c:	07 c0       	rjmp	.+14     	; 0x267c <KPD_voidGetValue+0xea>
    266e:	ae 01       	movw	r20, r28
    2670:	45 5e       	subi	r20, 0xE5	; 229
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	60 2f       	mov	r22, r16
    2676:	89 2d       	mov	r24, r9
    2678:	0e 94 42 17 	call	0x2e84	; 0x2e84 <DIO_voidGetPinValue>
    267c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267e:	88 23       	and	r24, r24
    2680:	b1 f3       	breq	.-20     	; 0x266e <KPD_voidGetValue+0xdc>
    2682:	c7 01       	movw	r24, r14
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	e8 0e       	add	r14, r24
    268a:	f9 1e       	adc	r15, r25
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	8c 0f       	add	r24, r28
    2692:	9d 1f       	adc	r25, r29
    2694:	e8 0e       	add	r14, r24
    2696:	f9 1e       	adc	r15, r25
    2698:	f7 01       	movw	r30, r14
    269a:	ec 0d       	add	r30, r12
    269c:	fd 1d       	adc	r31, r13
    269e:	80 81       	ld	r24, Z
    26a0:	f5 01       	movw	r30, r10
    26a2:	80 83       	st	Z, r24
    26a4:	0d c0       	rjmp	.+26     	; 0x26c0 <KPD_voidGetValue+0x12e>
    26a6:	1f 5f       	subi	r17, 0xFF	; 255
    26a8:	14 30       	cpi	r17, 0x04	; 4
    26aa:	30 f2       	brcs	.-116    	; 0x2638 <KPD_voidGetValue+0xa6>
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	66 2d       	mov	r22, r6
    26b0:	87 2d       	mov	r24, r7
    26b2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    26b6:	83 94       	inc	r8
    26b8:	f2 e0       	ldi	r31, 0x02	; 2
    26ba:	f8 15       	cp	r31, r8
    26bc:	08 f0       	brcs	.+2      	; 0x26c0 <KPD_voidGetValue+0x12e>
    26be:	a5 cf       	rjmp	.-182    	; 0x260a <KPD_voidGetValue+0x78>
    26c0:	6b 96       	adiw	r28, 0x1b	; 27
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	ff 90       	pop	r15
    26d6:	ef 90       	pop	r14
    26d8:	df 90       	pop	r13
    26da:	cf 90       	pop	r12
    26dc:	bf 90       	pop	r11
    26de:	af 90       	pop	r10
    26e0:	9f 90       	pop	r9
    26e2:	8f 90       	pop	r8
    26e4:	7f 90       	pop	r7
    26e6:	6f 90       	pop	r6
    26e8:	08 95       	ret

000026ea <PRV_voidWriteHalfPort>:
    26ea:	cf 93       	push	r28
    26ec:	c8 2f       	mov	r28, r24
    26ee:	80 ff       	sbrs	r24, 0
    26f0:	06 c0       	rjmp	.+12     	; 0x26fe <PRV_voidWriteHalfPort+0x14>
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	64 e0       	ldi	r22, 0x04	; 4
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    26fc:	05 c0       	rjmp	.+10     	; 0x2708 <PRV_voidWriteHalfPort+0x1e>
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	64 e0       	ldi	r22, 0x04	; 4
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2708:	c1 ff       	sbrs	r28, 1
    270a:	06 c0       	rjmp	.+12     	; 0x2718 <PRV_voidWriteHalfPort+0x2e>
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	65 e0       	ldi	r22, 0x05	; 5
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2716:	05 c0       	rjmp	.+10     	; 0x2722 <PRV_voidWriteHalfPort+0x38>
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	65 e0       	ldi	r22, 0x05	; 5
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2722:	c2 ff       	sbrs	r28, 2
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <PRV_voidWriteHalfPort+0x48>
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	66 e0       	ldi	r22, 0x06	; 6
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2730:	05 c0       	rjmp	.+10     	; 0x273c <PRV_voidWriteHalfPort+0x52>
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	66 e0       	ldi	r22, 0x06	; 6
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    273c:	c3 ff       	sbrs	r28, 3
    273e:	06 c0       	rjmp	.+12     	; 0x274c <PRV_voidWriteHalfPort+0x62>
    2740:	41 e0       	ldi	r20, 0x01	; 1
    2742:	67 e0       	ldi	r22, 0x07	; 7
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    274a:	05 c0       	rjmp	.+10     	; 0x2756 <PRV_voidWriteHalfPort+0x6c>
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	67 e0       	ldi	r22, 0x07	; 7
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2756:	cf 91       	pop	r28
    2758:	08 95       	ret

0000275a <LCD_voidSendCommand>:
    275a:	cf 93       	push	r28
    275c:	c8 2f       	mov	r28, r24
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	61 e0       	ldi	r22, 0x01	; 1
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	62 e0       	ldi	r22, 0x02	; 2
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2772:	8c 2f       	mov	r24, r28
    2774:	82 95       	swap	r24
    2776:	8f 70       	andi	r24, 0x0F	; 15
    2778:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    277c:	41 e0       	ldi	r20, 0x01	; 1
    277e:	63 e0       	ldi	r22, 0x03	; 3
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2786:	8f e9       	ldi	r24, 0x9F	; 159
    2788:	9f e0       	ldi	r25, 0x0F	; 15
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <LCD_voidSendCommand+0x30>
    278e:	00 c0       	rjmp	.+0      	; 0x2790 <LCD_voidSendCommand+0x36>
    2790:	00 00       	nop
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	63 e0       	ldi	r22, 0x03	; 3
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    279c:	8c 2f       	mov	r24, r28
    279e:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	63 e0       	ldi	r22, 0x03	; 3
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    27ac:	8f e9       	ldi	r24, 0x9F	; 159
    27ae:	9f e0       	ldi	r25, 0x0F	; 15
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_voidSendCommand+0x56>
    27b4:	00 c0       	rjmp	.+0      	; 0x27b6 <LCD_voidSendCommand+0x5c>
    27b6:	00 00       	nop
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	63 e0       	ldi	r22, 0x03	; 3
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <LCD_voidInit>:
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    27d0:	41 e0       	ldi	r20, 0x01	; 1
    27d2:	62 e0       	ldi	r22, 0x02	; 2
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    27da:	41 e0       	ldi	r20, 0x01	; 1
    27dc:	63 e0       	ldi	r22, 0x03	; 3
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	64 e0       	ldi	r22, 0x04	; 4
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    27ee:	41 e0       	ldi	r20, 0x01	; 1
    27f0:	65 e0       	ldi	r22, 0x05	; 5
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    27f8:	41 e0       	ldi	r20, 0x01	; 1
    27fa:	66 e0       	ldi	r22, 0x06	; 6
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	67 e0       	ldi	r22, 0x07	; 7
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    280c:	2f e7       	ldi	r18, 0x7F	; 127
    280e:	85 eb       	ldi	r24, 0xB5	; 181
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	21 50       	subi	r18, 0x01	; 1
    2814:	80 40       	sbci	r24, 0x00	; 0
    2816:	90 40       	sbci	r25, 0x00	; 0
    2818:	e1 f7       	brne	.-8      	; 0x2812 <LCD_voidInit+0x4c>
    281a:	00 c0       	rjmp	.+0      	; 0x281c <LCD_voidInit+0x56>
    281c:	00 00       	nop
    281e:	40 e0       	ldi	r20, 0x00	; 0
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	62 e0       	ldi	r22, 0x02	; 2
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	63 e0       	ldi	r22, 0x03	; 3
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2842:	8f e9       	ldi	r24, 0x9F	; 159
    2844:	9f e0       	ldi	r25, 0x0F	; 15
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_voidInit+0x80>
    284a:	00 c0       	rjmp	.+0      	; 0x284c <LCD_voidInit+0x86>
    284c:	00 00       	nop
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	63 e0       	ldi	r22, 0x03	; 3
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2858:	88 e2       	ldi	r24, 0x28	; 40
    285a:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    285e:	90 ef       	ldi	r25, 0xF0	; 240
    2860:	9a 95       	dec	r25
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_voidInit+0x9a>
    2864:	8c e0       	ldi	r24, 0x0C	; 12
    2866:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    286a:	20 ef       	ldi	r18, 0xF0	; 240
    286c:	2a 95       	dec	r18
    286e:	f1 f7       	brne	.-4      	; 0x286c <LCD_voidInit+0xa6>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    2876:	8f e3       	ldi	r24, 0x3F	; 63
    2878:	9f e1       	ldi	r25, 0x1F	; 31
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_voidInit+0xb4>
    287e:	00 c0       	rjmp	.+0      	; 0x2880 <LCD_voidInit+0xba>
    2880:	00 00       	nop
    2882:	86 e0       	ldi	r24, 0x06	; 6
    2884:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    2888:	08 95       	ret

0000288a <LCD_voidDisplayChar>:
    288a:	cf 93       	push	r28
    288c:	c8 2f       	mov	r28, r24
    288e:	41 e0       	ldi	r20, 0x01	; 1
    2890:	61 e0       	ldi	r22, 0x01	; 1
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	62 e0       	ldi	r22, 0x02	; 2
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    28a2:	8c 2f       	mov	r24, r28
    28a4:	82 95       	swap	r24
    28a6:	8f 70       	andi	r24, 0x0F	; 15
    28a8:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	63 e0       	ldi	r22, 0x03	; 3
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    28b6:	8f e9       	ldi	r24, 0x9F	; 159
    28b8:	9f e0       	ldi	r25, 0x0F	; 15
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <LCD_voidDisplayChar+0x30>
    28be:	00 c0       	rjmp	.+0      	; 0x28c0 <LCD_voidDisplayChar+0x36>
    28c0:	00 00       	nop
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	63 e0       	ldi	r22, 0x03	; 3
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    28cc:	8c 2f       	mov	r24, r28
    28ce:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	63 e0       	ldi	r22, 0x03	; 3
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    28dc:	8f e9       	ldi	r24, 0x9F	; 159
    28de:	9f e0       	ldi	r25, 0x0F	; 15
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_voidDisplayChar+0x56>
    28e4:	00 c0       	rjmp	.+0      	; 0x28e6 <LCD_voidDisplayChar+0x5c>
    28e6:	00 00       	nop
    28e8:	40 e0       	ldi	r20, 0x00	; 0
    28ea:	63 e0       	ldi	r22, 0x03	; 3
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    28f2:	cf 91       	pop	r28
    28f4:	08 95       	ret

000028f6 <LCD_voidDisplayString>:
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	29 f4       	brne	.+10     	; 0x290a <LCD_voidDisplayString+0x14>
    2900:	0c c0       	rjmp	.+24     	; 0x291a <LCD_voidDisplayString+0x24>
    2902:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidDisplayChar>
    2906:	cf 5f       	subi	r28, 0xFF	; 255
    2908:	02 c0       	rjmp	.+4      	; 0x290e <LCD_voidDisplayString+0x18>
    290a:	8c 01       	movw	r16, r24
    290c:	c0 e0       	ldi	r28, 0x00	; 0
    290e:	f8 01       	movw	r30, r16
    2910:	ec 0f       	add	r30, r28
    2912:	f1 1d       	adc	r31, r1
    2914:	80 81       	ld	r24, Z
    2916:	81 11       	cpse	r24, r1
    2918:	f4 cf       	rjmp	.-24     	; 0x2902 <LCD_voidDisplayString+0xc>
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	08 95       	ret

00002922 <LCD_voidDisplayStringDelay>:
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	00 97       	sbiw	r24, 0x00	; 0
    292a:	71 f4       	brne	.+28     	; 0x2948 <LCD_voidDisplayStringDelay+0x26>
    292c:	15 c0       	rjmp	.+42     	; 0x2958 <LCD_voidDisplayStringDelay+0x36>
    292e:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidDisplayChar>
    2932:	cf 5f       	subi	r28, 0xFF	; 255
    2934:	2f ef       	ldi	r18, 0xFF	; 255
    2936:	80 e7       	ldi	r24, 0x70	; 112
    2938:	92 e0       	ldi	r25, 0x02	; 2
    293a:	21 50       	subi	r18, 0x01	; 1
    293c:	80 40       	sbci	r24, 0x00	; 0
    293e:	90 40       	sbci	r25, 0x00	; 0
    2940:	e1 f7       	brne	.-8      	; 0x293a <LCD_voidDisplayStringDelay+0x18>
    2942:	00 c0       	rjmp	.+0      	; 0x2944 <LCD_voidDisplayStringDelay+0x22>
    2944:	00 00       	nop
    2946:	02 c0       	rjmp	.+4      	; 0x294c <LCD_voidDisplayStringDelay+0x2a>
    2948:	8c 01       	movw	r16, r24
    294a:	c0 e0       	ldi	r28, 0x00	; 0
    294c:	f8 01       	movw	r30, r16
    294e:	ec 0f       	add	r30, r28
    2950:	f1 1d       	adc	r31, r1
    2952:	80 81       	ld	r24, Z
    2954:	81 11       	cpse	r24, r1
    2956:	eb cf       	rjmp	.-42     	; 0x292e <LCD_voidDisplayStringDelay+0xc>
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	08 95       	ret

00002960 <LCD_voidDisplayNumber>:
    2960:	0f 93       	push	r16
    2962:	1f 93       	push	r17
    2964:	cf 93       	push	r28
    2966:	df 93       	push	r29
    2968:	00 d0       	rcall	.+0      	; 0x296a <LCD_voidDisplayNumber+0xa>
    296a:	00 d0       	rcall	.+0      	; 0x296c <LCD_voidDisplayNumber+0xc>
    296c:	1f 92       	push	r1
    296e:	cd b7       	in	r28, 0x3d	; 61
    2970:	de b7       	in	r29, 0x3e	; 62
    2972:	26 2f       	mov	r18, r22
    2974:	10 e0       	ldi	r17, 0x00	; 0
    2976:	08 c0       	rjmp	.+16     	; 0x2988 <LCD_voidDisplayNumber+0x28>
    2978:	1f 5f       	subi	r17, 0xFF	; 255
    297a:	ed ec       	ldi	r30, 0xCD	; 205
    297c:	6e 9f       	mul	r22, r30
    297e:	61 2d       	mov	r22, r1
    2980:	11 24       	eor	r1, r1
    2982:	66 95       	lsr	r22
    2984:	66 95       	lsr	r22
    2986:	66 95       	lsr	r22
    2988:	61 11       	cpse	r22, r1
    298a:	f6 cf       	rjmp	.-20     	; 0x2978 <LCD_voidDisplayNumber+0x18>
    298c:	00 e0       	ldi	r16, 0x00	; 0
    298e:	1a c0       	rjmp	.+52     	; 0x29c4 <LCD_voidDisplayNumber+0x64>
    2990:	62 2f       	mov	r22, r18
    2992:	2a e0       	ldi	r18, 0x0A	; 10
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	50 e0       	ldi	r21, 0x00	; 0
    299a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodsi4>
    299e:	73 2f       	mov	r23, r19
    29a0:	84 2f       	mov	r24, r20
    29a2:	95 2f       	mov	r25, r21
    29a4:	a0 2f       	mov	r26, r16
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	11 96       	adiw	r26, 0x01	; 1
    29aa:	e1 2f       	mov	r30, r17
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	ea 1b       	sub	r30, r26
    29b0:	fb 0b       	sbc	r31, r27
    29b2:	41 e0       	ldi	r20, 0x01	; 1
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	4c 0f       	add	r20, r28
    29b8:	5d 1f       	adc	r21, r29
    29ba:	e4 0f       	add	r30, r20
    29bc:	f5 1f       	adc	r31, r21
    29be:	60 5d       	subi	r22, 0xD0	; 208
    29c0:	60 83       	st	Z, r22
    29c2:	0f 5f       	subi	r16, 0xFF	; 255
    29c4:	01 17       	cp	r16, r17
    29c6:	20 f3       	brcs	.-56     	; 0x2990 <LCD_voidDisplayNumber+0x30>
    29c8:	e1 e0       	ldi	r30, 0x01	; 1
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	ec 0f       	add	r30, r28
    29ce:	fd 1f       	adc	r31, r29
    29d0:	e1 0f       	add	r30, r17
    29d2:	f1 1d       	adc	r31, r1
    29d4:	10 82       	st	Z, r1
    29d6:	10 e0       	ldi	r17, 0x00	; 0
    29d8:	03 c0       	rjmp	.+6      	; 0x29e0 <LCD_voidDisplayNumber+0x80>
    29da:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidDisplayChar>
    29de:	1f 5f       	subi	r17, 0xFF	; 255
    29e0:	e1 e0       	ldi	r30, 0x01	; 1
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	ec 0f       	add	r30, r28
    29e6:	fd 1f       	adc	r31, r29
    29e8:	e1 0f       	add	r30, r17
    29ea:	f1 1d       	adc	r31, r1
    29ec:	80 81       	ld	r24, Z
    29ee:	81 11       	cpse	r24, r1
    29f0:	f4 cf       	rjmp	.-24     	; 0x29da <LCD_voidDisplayNumber+0x7a>
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	df 91       	pop	r29
    29fe:	cf 91       	pop	r28
    2a00:	1f 91       	pop	r17
    2a02:	0f 91       	pop	r16
    2a04:	08 95       	ret

00002a06 <LCD_voidClear>:
    2a06:	40 e0       	ldi	r20, 0x00	; 0
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	62 e0       	ldi	r22, 0x02	; 2
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	63 e0       	ldi	r22, 0x03	; 3
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a2a:	8f e9       	ldi	r24, 0x9F	; 159
    2a2c:	9f e0       	ldi	r25, 0x0F	; 15
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <LCD_voidClear+0x28>
    2a32:	00 c0       	rjmp	.+0      	; 0x2a34 <LCD_voidClear+0x2e>
    2a34:	00 00       	nop
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	63 e0       	ldi	r22, 0x03	; 3
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	63 e0       	ldi	r22, 0x03	; 3
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a50:	8f e9       	ldi	r24, 0x9F	; 159
    2a52:	9f e0       	ldi	r25, 0x0F	; 15
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_voidClear+0x4e>
    2a58:	00 c0       	rjmp	.+0      	; 0x2a5a <LCD_voidClear+0x54>
    2a5a:	00 00       	nop
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	63 e0       	ldi	r22, 0x03	; 3
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a66:	08 95       	ret

00002a68 <LCD_voidShiftCursor>:
    2a68:	cf 93       	push	r28
    2a6a:	c8 2f       	mov	r28, r24
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	62 e0       	ldi	r22, 0x02	; 2
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a80:	8c 2f       	mov	r24, r28
    2a82:	82 95       	swap	r24
    2a84:	8f 70       	andi	r24, 0x0F	; 15
    2a86:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	63 e0       	ldi	r22, 0x03	; 3
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2a94:	8f e9       	ldi	r24, 0x9F	; 159
    2a96:	9f e0       	ldi	r25, 0x0F	; 15
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	f1 f7       	brne	.-4      	; 0x2a98 <LCD_voidShiftCursor+0x30>
    2a9c:	00 c0       	rjmp	.+0      	; 0x2a9e <LCD_voidShiftCursor+0x36>
    2a9e:	00 00       	nop
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	63 e0       	ldi	r22, 0x03	; 3
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2aaa:	8c 2f       	mov	r24, r28
    2aac:	0e 94 75 13 	call	0x26ea	; 0x26ea <PRV_voidWriteHalfPort>
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	63 e0       	ldi	r22, 0x03	; 3
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2aba:	8f e9       	ldi	r24, 0x9F	; 159
    2abc:	9f e0       	ldi	r25, 0x0F	; 15
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <LCD_voidShiftCursor+0x56>
    2ac2:	00 c0       	rjmp	.+0      	; 0x2ac4 <LCD_voidShiftCursor+0x5c>
    2ac4:	00 00       	nop
    2ac6:	40 e0       	ldi	r20, 0x00	; 0
    2ac8:	63 e0       	ldi	r22, 0x03	; 3
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <LCD_voidGoTOSpecificPosition>:
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	68 32       	cpi	r22, 0x28	; 40
    2ada:	a0 f4       	brcc	.+40     	; 0x2b04 <LCD_voidGoTOSpecificPosition+0x30>
    2adc:	c6 2f       	mov	r28, r22
    2ade:	d8 2f       	mov	r29, r24
    2ae0:	82 e0       	ldi	r24, 0x02	; 2
    2ae2:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    2ae6:	d1 30       	cpi	r29, 0x01	; 1
    2ae8:	19 f0       	breq	.+6      	; 0x2af0 <LCD_voidGoTOSpecificPosition+0x1c>
    2aea:	d2 30       	cpi	r29, 0x02	; 2
    2aec:	31 f0       	breq	.+12     	; 0x2afa <LCD_voidGoTOSpecificPosition+0x26>
    2aee:	0a c0       	rjmp	.+20     	; 0x2b04 <LCD_voidGoTOSpecificPosition+0x30>
    2af0:	8c 2f       	mov	r24, r28
    2af2:	80 68       	ori	r24, 0x80	; 128
    2af4:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    2af8:	05 c0       	rjmp	.+10     	; 0x2b04 <LCD_voidGoTOSpecificPosition+0x30>
    2afa:	80 e4       	ldi	r24, 0x40	; 64
    2afc:	8c 0f       	add	r24, r28
    2afe:	80 68       	ori	r24, 0x80	; 128
    2b00:	0e 94 ad 13 	call	0x275a	; 0x275a <LCD_voidSendCommand>
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	08 95       	ret

00002b0a <LCD_voidPwdEffect>:
    2b0a:	2f ef       	ldi	r18, 0xFF	; 255
    2b0c:	83 ec       	ldi	r24, 0xC3	; 195
    2b0e:	99 e0       	ldi	r25, 0x09	; 9
    2b10:	21 50       	subi	r18, 0x01	; 1
    2b12:	80 40       	sbci	r24, 0x00	; 0
    2b14:	90 40       	sbci	r25, 0x00	; 0
    2b16:	e1 f7       	brne	.-8      	; 0x2b10 <LCD_voidPwdEffect+0x6>
    2b18:	00 c0       	rjmp	.+0      	; 0x2b1a <LCD_voidPwdEffect+0x10>
    2b1a:	00 00       	nop
    2b1c:	80 e1       	ldi	r24, 0x10	; 16
    2b1e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_voidShiftCursor>
    2b22:	8a e2       	ldi	r24, 0x2A	; 42
    2b24:	0e 94 45 14 	call	0x288a	; 0x288a <LCD_voidDisplayChar>
    2b28:	08 95       	ret

00002b2a <LED_voidInit>:
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2b30:	08 95       	ret

00002b32 <LED_voidOn>:
    2b32:	41 30       	cpi	r20, 0x01	; 1
    2b34:	19 f0       	breq	.+6      	; 0x2b3c <LED_voidOn+0xa>
    2b36:	42 30       	cpi	r20, 0x02	; 2
    2b38:	29 f0       	breq	.+10     	; 0x2b44 <LED_voidOn+0x12>
    2b3a:	08 95       	ret
    2b3c:	41 e0       	ldi	r20, 0x01	; 1
    2b3e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2b42:	08 95       	ret
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2b4a:	08 95       	ret

00002b4c <LED_voidOff>:
    2b4c:	41 30       	cpi	r20, 0x01	; 1
    2b4e:	19 f0       	breq	.+6      	; 0x2b56 <LED_voidOff+0xa>
    2b50:	42 30       	cpi	r20, 0x02	; 2
    2b52:	29 f0       	breq	.+10     	; 0x2b5e <LED_voidOff+0x12>
    2b54:	08 95       	ret
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2b5c:	08 95       	ret
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    2b64:	08 95       	ret

00002b66 <SERVO_voidInit>:
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 42 16 	call	0x2c84	; 0x2c84 <DIO_voidSetPinDirection>
    2b6c:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <PWM_voidInitChannel_1A>
    2b70:	08 95       	ret

00002b72 <SERVO_voidStartByAngle>:
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e2       	ldi	r20, 0x20	; 32
    2b78:	50 e4       	ldi	r21, 0x40	; 64
    2b7a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__mulsf3>
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 ec       	ldi	r19, 0xC0	; 192
    2b82:	48 e2       	ldi	r20, 0x28	; 40
    2b84:	54 e4       	ldi	r21, 0x44	; 68
    2b86:	0e 94 92 1a 	call	0x3524	; 0x3524 <__addsf3>
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	44 eb       	ldi	r20, 0xB4	; 180
    2b90:	52 e4       	ldi	r21, 0x42	; 66
    2b92:	0e 94 03 1b 	call	0x3606	; 0x3606 <__divsf3>
    2b96:	ab 01       	movw	r20, r22
    2b98:	bc 01       	movw	r22, r24
    2b9a:	82 e3       	ldi	r24, 0x32	; 50
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 2b 18 	call	0x3056	; 0x3056 <PWM_voidGenerateChannel_1B>
    2ba2:	08 95       	ret

00002ba4 <main>:
 u8 usertype =HOME_NO_LOGIN;

int main()
{

	APP_init();
    2ba4:	0e 94 b3 00 	call	0x166	; 0x166 <APP_init>
	

	
	while(1)
	{
		LCD_voidClear();
    2ba8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <LCD_voidClear>
		Reset_AllKPDValues();
    2bac:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Reset_AllKPDValues>
		WelcomeScreenRemote();
    2bb0:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <WelcomeScreenRemote>
		WelcomeScreenLocal();
    2bb4:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <WelcomeScreenLocal>
		GetUserType();
    2bb8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <GetUserType>
		HOME_voidFireAnALarm(usertype);
    2bbc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usertype>
    2bc0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <HOME_voidFireAnALarm>
		TMR2_voidStart();
    2bc4:	0e 94 37 19 	call	0x326e	; 0x326e <TMR2_voidStart>
	
		// HOME_voidChangeUserNameAndPass();
		
			if (usertype == HOME_REMOTE_ADMIN)
    2bc8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <usertype>
    2bcc:	83 30       	cpi	r24, 0x03	; 3
    2bce:	19 f4       	brne	.+6      	; 0x2bd6 <main+0x32>
			{
				KPD_Interface_RemoteAdmin();
    2bd0:	0e 94 22 05 	call	0xa44	; 0xa44 <KPD_Interface_RemoteAdmin>
    2bd4:	09 c0       	rjmp	.+18     	; 0x2be8 <main+0x44>
			}
			else if (usertype == HOME_REMOTE_USER)
    2bd6:	84 30       	cpi	r24, 0x04	; 4
    2bd8:	19 f4       	brne	.+6      	; 0x2be0 <main+0x3c>
			{
				KPD_Interface_RemoteUser();
    2bda:	0e 94 a2 09 	call	0x1344	; 0x1344 <KPD_Interface_RemoteUser>
    2bde:	04 c0       	rjmp	.+8      	; 0x2be8 <main+0x44>
			}

			else if (usertype == HOME_LOCAL_USER)
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	11 f4       	brne	.+4      	; 0x2be8 <main+0x44>
			{
				KPD_Interface_Localuser();
    2be4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <KPD_Interface_Localuser>
			}

			TMR2_voidStop();
    2be8:	0e 94 45 19 	call	0x328a	; 0x328a <TMR2_voidStop>
		// 	break;
		// }
		
		
		
	}
    2bec:	dd cf       	rjmp	.-70     	; 0x2ba8 <main+0x4>

00002bee <ADC_voidInit>:
    2bee:	82 30       	cpi	r24, 0x02	; 2
    2bf0:	59 f0       	breq	.+22     	; 0x2c08 <ADC_voidInit+0x1a>
    2bf2:	83 30       	cpi	r24, 0x03	; 3
    2bf4:	81 f0       	breq	.+32     	; 0x2c16 <ADC_voidInit+0x28>
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	a1 f4       	brne	.+40     	; 0x2c22 <ADC_voidInit+0x34>
    2bfa:	87 b1       	in	r24, 0x07	; 7
    2bfc:	80 64       	ori	r24, 0x40	; 64
    2bfe:	87 b9       	out	0x07, r24	; 7
    2c00:	87 b1       	in	r24, 0x07	; 7
    2c02:	8f 77       	andi	r24, 0x7F	; 127
    2c04:	87 b9       	out	0x07, r24	; 7
    2c06:	0d c0       	rjmp	.+26     	; 0x2c22 <ADC_voidInit+0x34>
    2c08:	87 b1       	in	r24, 0x07	; 7
    2c0a:	8f 7b       	andi	r24, 0xBF	; 191
    2c0c:	87 b9       	out	0x07, r24	; 7
    2c0e:	87 b1       	in	r24, 0x07	; 7
    2c10:	8f 77       	andi	r24, 0x7F	; 127
    2c12:	87 b9       	out	0x07, r24	; 7
    2c14:	06 c0       	rjmp	.+12     	; 0x2c22 <ADC_voidInit+0x34>
    2c16:	87 b1       	in	r24, 0x07	; 7
    2c18:	80 64       	ori	r24, 0x40	; 64
    2c1a:	87 b9       	out	0x07, r24	; 7
    2c1c:	87 b1       	in	r24, 0x07	; 7
    2c1e:	80 68       	ori	r24, 0x80	; 128
    2c20:	87 b9       	out	0x07, r24	; 7
    2c22:	87 b1       	in	r24, 0x07	; 7
    2c24:	8f 7d       	andi	r24, 0xDF	; 223
    2c26:	87 b9       	out	0x07, r24	; 7
    2c28:	86 b1       	in	r24, 0x06	; 6
    2c2a:	8f 7d       	andi	r24, 0xDF	; 223
    2c2c:	86 b9       	out	0x06, r24	; 6
    2c2e:	86 b1       	in	r24, 0x06	; 6
    2c30:	87 7f       	andi	r24, 0xF7	; 247
    2c32:	86 b9       	out	0x06, r24	; 6
    2c34:	86 b1       	in	r24, 0x06	; 6
    2c36:	84 60       	ori	r24, 0x04	; 4
    2c38:	86 b9       	out	0x06, r24	; 6
    2c3a:	86 b1       	in	r24, 0x06	; 6
    2c3c:	82 60       	ori	r24, 0x02	; 2
    2c3e:	86 b9       	out	0x06, r24	; 6
    2c40:	86 b1       	in	r24, 0x06	; 6
    2c42:	81 60       	ori	r24, 0x01	; 1
    2c44:	86 b9       	out	0x06, r24	; 6
    2c46:	86 b1       	in	r24, 0x06	; 6
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	86 b9       	out	0x06, r24	; 6
    2c4c:	08 95       	ret

00002c4e <ADC_voidGetDigitalValue>:
    2c4e:	61 15       	cp	r22, r1
    2c50:	71 05       	cpc	r23, r1
    2c52:	b9 f0       	breq	.+46     	; 0x2c82 <ADC_voidGetDigitalValue+0x34>
    2c54:	97 b1       	in	r25, 0x07	; 7
    2c56:	90 7e       	andi	r25, 0xE0	; 224
    2c58:	97 b9       	out	0x07, r25	; 7
    2c5a:	97 b1       	in	r25, 0x07	; 7
    2c5c:	89 2b       	or	r24, r25
    2c5e:	87 b9       	out	0x07, r24	; 7
    2c60:	86 b1       	in	r24, 0x06	; 6
    2c62:	80 64       	ori	r24, 0x40	; 64
    2c64:	86 b9       	out	0x06, r24	; 6
    2c66:	34 9b       	sbis	0x06, 4	; 6
    2c68:	fe cf       	rjmp	.-4      	; 0x2c66 <ADC_voidGetDigitalValue+0x18>
    2c6a:	84 b1       	in	r24, 0x04	; 4
    2c6c:	95 b1       	in	r25, 0x05	; 5
    2c6e:	96 95       	lsr	r25
    2c70:	87 95       	ror	r24
    2c72:	96 95       	lsr	r25
    2c74:	87 95       	ror	r24
    2c76:	fb 01       	movw	r30, r22
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	86 b1       	in	r24, 0x06	; 6
    2c7e:	80 61       	ori	r24, 0x10	; 16
    2c80:	86 b9       	out	0x06, r24	; 6
    2c82:	08 95       	ret

00002c84 <DIO_voidSetPinDirection>:
    2c84:	84 30       	cpi	r24, 0x04	; 4
    2c86:	08 f0       	brcs	.+2      	; 0x2c8a <DIO_voidSetPinDirection+0x6>
    2c88:	7c c0       	rjmp	.+248    	; 0x2d82 <DIO_voidSetPinDirection+0xfe>
    2c8a:	68 30       	cpi	r22, 0x08	; 8
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <DIO_voidSetPinDirection+0xc>
    2c8e:	79 c0       	rjmp	.+242    	; 0x2d82 <DIO_voidSetPinDirection+0xfe>
    2c90:	42 30       	cpi	r20, 0x02	; 2
    2c92:	08 f0       	brcs	.+2      	; 0x2c96 <DIO_voidSetPinDirection+0x12>
    2c94:	76 c0       	rjmp	.+236    	; 0x2d82 <DIO_voidSetPinDirection+0xfe>
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	19 f1       	breq	.+70     	; 0x2ce0 <DIO_voidSetPinDirection+0x5c>
    2c9a:	30 f0       	brcs	.+12     	; 0x2ca8 <DIO_voidSetPinDirection+0x24>
    2c9c:	82 30       	cpi	r24, 0x02	; 2
    2c9e:	e1 f1       	breq	.+120    	; 0x2d18 <DIO_voidSetPinDirection+0x94>
    2ca0:	83 30       	cpi	r24, 0x03	; 3
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <DIO_voidSetPinDirection+0x22>
    2ca4:	54 c0       	rjmp	.+168    	; 0x2d4e <DIO_voidSetPinDirection+0xca>
    2ca6:	08 95       	ret
    2ca8:	44 23       	and	r20, r20
    2caa:	71 f0       	breq	.+28     	; 0x2cc8 <DIO_voidSetPinDirection+0x44>
    2cac:	41 30       	cpi	r20, 0x01	; 1
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <DIO_voidSetPinDirection+0x2e>
    2cb0:	68 c0       	rjmp	.+208    	; 0x2d82 <DIO_voidSetPinDirection+0xfe>
    2cb2:	2a b3       	in	r18, 0x1a	; 26
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <DIO_voidSetPinDirection+0x3a>
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	6a 95       	dec	r22
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <DIO_voidSetPinDirection+0x36>
    2cc2:	82 2b       	or	r24, r18
    2cc4:	8a bb       	out	0x1a, r24	; 26
    2cc6:	08 95       	ret
    2cc8:	2a b3       	in	r18, 0x1a	; 26
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <DIO_voidSetPinDirection+0x50>
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	6a 95       	dec	r22
    2cd6:	e2 f7       	brpl	.-8      	; 0x2cd0 <DIO_voidSetPinDirection+0x4c>
    2cd8:	80 95       	com	r24
    2cda:	82 23       	and	r24, r18
    2cdc:	8a bb       	out	0x1a, r24	; 26
    2cde:	08 95       	ret
    2ce0:	44 23       	and	r20, r20
    2ce2:	71 f0       	breq	.+28     	; 0x2d00 <DIO_voidSetPinDirection+0x7c>
    2ce4:	41 30       	cpi	r20, 0x01	; 1
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <DIO_voidSetPinDirection+0x66>
    2ce8:	4c c0       	rjmp	.+152    	; 0x2d82 <DIO_voidSetPinDirection+0xfe>
    2cea:	27 b3       	in	r18, 0x17	; 23
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <DIO_voidSetPinDirection+0x72>
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	6a 95       	dec	r22
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <DIO_voidSetPinDirection+0x6e>
    2cfa:	82 2b       	or	r24, r18
    2cfc:	87 bb       	out	0x17, r24	; 23
    2cfe:	08 95       	ret
    2d00:	27 b3       	in	r18, 0x17	; 23
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <DIO_voidSetPinDirection+0x88>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	6a 95       	dec	r22
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <DIO_voidSetPinDirection+0x84>
    2d10:	80 95       	com	r24
    2d12:	82 23       	and	r24, r18
    2d14:	87 bb       	out	0x17, r24	; 23
    2d16:	08 95       	ret
    2d18:	44 23       	and	r20, r20
    2d1a:	69 f0       	breq	.+26     	; 0x2d36 <DIO_voidSetPinDirection+0xb2>
    2d1c:	41 30       	cpi	r20, 0x01	; 1
    2d1e:	89 f5       	brne	.+98     	; 0x2d82 <DIO_voidSetPinDirection+0xfe>
    2d20:	24 b3       	in	r18, 0x14	; 20
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <DIO_voidSetPinDirection+0xa8>
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	6a 95       	dec	r22
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <DIO_voidSetPinDirection+0xa4>
    2d30:	82 2b       	or	r24, r18
    2d32:	84 bb       	out	0x14, r24	; 20
    2d34:	08 95       	ret
    2d36:	24 b3       	in	r18, 0x14	; 20
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <DIO_voidSetPinDirection+0xbe>
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	6a 95       	dec	r22
    2d44:	e2 f7       	brpl	.-8      	; 0x2d3e <DIO_voidSetPinDirection+0xba>
    2d46:	80 95       	com	r24
    2d48:	82 23       	and	r24, r18
    2d4a:	84 bb       	out	0x14, r24	; 20
    2d4c:	08 95       	ret
    2d4e:	44 23       	and	r20, r20
    2d50:	69 f0       	breq	.+26     	; 0x2d6c <DIO_voidSetPinDirection+0xe8>
    2d52:	41 30       	cpi	r20, 0x01	; 1
    2d54:	b1 f4       	brne	.+44     	; 0x2d82 <DIO_voidSetPinDirection+0xfe>
    2d56:	21 b3       	in	r18, 0x11	; 17
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <DIO_voidSetPinDirection+0xde>
    2d5e:	88 0f       	add	r24, r24
    2d60:	99 1f       	adc	r25, r25
    2d62:	6a 95       	dec	r22
    2d64:	e2 f7       	brpl	.-8      	; 0x2d5e <DIO_voidSetPinDirection+0xda>
    2d66:	82 2b       	or	r24, r18
    2d68:	81 bb       	out	0x11, r24	; 17
    2d6a:	08 95       	ret
    2d6c:	21 b3       	in	r18, 0x11	; 17
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	02 c0       	rjmp	.+4      	; 0x2d78 <DIO_voidSetPinDirection+0xf4>
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	6a 95       	dec	r22
    2d7a:	e2 f7       	brpl	.-8      	; 0x2d74 <DIO_voidSetPinDirection+0xf0>
    2d7c:	80 95       	com	r24
    2d7e:	82 23       	and	r24, r18
    2d80:	81 bb       	out	0x11, r24	; 17
    2d82:	08 95       	ret

00002d84 <DIO_voidSetPinValue>:
    2d84:	84 30       	cpi	r24, 0x04	; 4
    2d86:	08 f0       	brcs	.+2      	; 0x2d8a <DIO_voidSetPinValue+0x6>
    2d88:	7c c0       	rjmp	.+248    	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2d8a:	68 30       	cpi	r22, 0x08	; 8
    2d8c:	08 f0       	brcs	.+2      	; 0x2d90 <DIO_voidSetPinValue+0xc>
    2d8e:	79 c0       	rjmp	.+242    	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2d90:	42 30       	cpi	r20, 0x02	; 2
    2d92:	08 f0       	brcs	.+2      	; 0x2d96 <DIO_voidSetPinValue+0x12>
    2d94:	76 c0       	rjmp	.+236    	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	19 f1       	breq	.+70     	; 0x2de0 <DIO_voidSetPinValue+0x5c>
    2d9a:	30 f0       	brcs	.+12     	; 0x2da8 <DIO_voidSetPinValue+0x24>
    2d9c:	82 30       	cpi	r24, 0x02	; 2
    2d9e:	e1 f1       	breq	.+120    	; 0x2e18 <DIO_voidSetPinValue+0x94>
    2da0:	83 30       	cpi	r24, 0x03	; 3
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <DIO_voidSetPinValue+0x22>
    2da4:	54 c0       	rjmp	.+168    	; 0x2e4e <DIO_voidSetPinValue+0xca>
    2da6:	08 95       	ret
    2da8:	44 23       	and	r20, r20
    2daa:	71 f0       	breq	.+28     	; 0x2dc8 <DIO_voidSetPinValue+0x44>
    2dac:	41 30       	cpi	r20, 0x01	; 1
    2dae:	09 f0       	breq	.+2      	; 0x2db2 <DIO_voidSetPinValue+0x2e>
    2db0:	68 c0       	rjmp	.+208    	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2db2:	2b b3       	in	r18, 0x1b	; 27
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <DIO_voidSetPinValue+0x3a>
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	6a 95       	dec	r22
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <DIO_voidSetPinValue+0x36>
    2dc2:	82 2b       	or	r24, r18
    2dc4:	8b bb       	out	0x1b, r24	; 27
    2dc6:	08 95       	ret
    2dc8:	2b b3       	in	r18, 0x1b	; 27
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <DIO_voidSetPinValue+0x50>
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	6a 95       	dec	r22
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <DIO_voidSetPinValue+0x4c>
    2dd8:	80 95       	com	r24
    2dda:	82 23       	and	r24, r18
    2ddc:	8b bb       	out	0x1b, r24	; 27
    2dde:	08 95       	ret
    2de0:	44 23       	and	r20, r20
    2de2:	71 f0       	breq	.+28     	; 0x2e00 <DIO_voidSetPinValue+0x7c>
    2de4:	41 30       	cpi	r20, 0x01	; 1
    2de6:	09 f0       	breq	.+2      	; 0x2dea <DIO_voidSetPinValue+0x66>
    2de8:	4c c0       	rjmp	.+152    	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2dea:	28 b3       	in	r18, 0x18	; 24
    2dec:	81 e0       	ldi	r24, 0x01	; 1
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <DIO_voidSetPinValue+0x72>
    2df2:	88 0f       	add	r24, r24
    2df4:	99 1f       	adc	r25, r25
    2df6:	6a 95       	dec	r22
    2df8:	e2 f7       	brpl	.-8      	; 0x2df2 <DIO_voidSetPinValue+0x6e>
    2dfa:	82 2b       	or	r24, r18
    2dfc:	88 bb       	out	0x18, r24	; 24
    2dfe:	08 95       	ret
    2e00:	28 b3       	in	r18, 0x18	; 24
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <DIO_voidSetPinValue+0x88>
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	6a 95       	dec	r22
    2e0e:	e2 f7       	brpl	.-8      	; 0x2e08 <DIO_voidSetPinValue+0x84>
    2e10:	80 95       	com	r24
    2e12:	82 23       	and	r24, r18
    2e14:	88 bb       	out	0x18, r24	; 24
    2e16:	08 95       	ret
    2e18:	44 23       	and	r20, r20
    2e1a:	69 f0       	breq	.+26     	; 0x2e36 <DIO_voidSetPinValue+0xb2>
    2e1c:	41 30       	cpi	r20, 0x01	; 1
    2e1e:	89 f5       	brne	.+98     	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2e20:	25 b3       	in	r18, 0x15	; 21
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <DIO_voidSetPinValue+0xa8>
    2e28:	88 0f       	add	r24, r24
    2e2a:	99 1f       	adc	r25, r25
    2e2c:	6a 95       	dec	r22
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <DIO_voidSetPinValue+0xa4>
    2e30:	82 2b       	or	r24, r18
    2e32:	85 bb       	out	0x15, r24	; 21
    2e34:	08 95       	ret
    2e36:	25 b3       	in	r18, 0x15	; 21
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <DIO_voidSetPinValue+0xbe>
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	6a 95       	dec	r22
    2e44:	e2 f7       	brpl	.-8      	; 0x2e3e <DIO_voidSetPinValue+0xba>
    2e46:	80 95       	com	r24
    2e48:	82 23       	and	r24, r18
    2e4a:	85 bb       	out	0x15, r24	; 21
    2e4c:	08 95       	ret
    2e4e:	44 23       	and	r20, r20
    2e50:	69 f0       	breq	.+26     	; 0x2e6c <DIO_voidSetPinValue+0xe8>
    2e52:	41 30       	cpi	r20, 0x01	; 1
    2e54:	b1 f4       	brne	.+44     	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2e56:	22 b3       	in	r18, 0x12	; 18
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <DIO_voidSetPinValue+0xde>
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	6a 95       	dec	r22
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <DIO_voidSetPinValue+0xda>
    2e66:	82 2b       	or	r24, r18
    2e68:	82 bb       	out	0x12, r24	; 18
    2e6a:	08 95       	ret
    2e6c:	22 b3       	in	r18, 0x12	; 18
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <DIO_voidSetPinValue+0xf4>
    2e74:	88 0f       	add	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	6a 95       	dec	r22
    2e7a:	e2 f7       	brpl	.-8      	; 0x2e74 <DIO_voidSetPinValue+0xf0>
    2e7c:	80 95       	com	r24
    2e7e:	82 23       	and	r24, r18
    2e80:	82 bb       	out	0x12, r24	; 18
    2e82:	08 95       	ret

00002e84 <DIO_voidGetPinValue>:
    2e84:	84 30       	cpi	r24, 0x04	; 4
    2e86:	c0 f5       	brcc	.+112    	; 0x2ef8 <DIO_voidGetPinValue+0x74>
    2e88:	68 30       	cpi	r22, 0x08	; 8
    2e8a:	b0 f5       	brcc	.+108    	; 0x2ef8 <DIO_voidGetPinValue+0x74>
    2e8c:	41 15       	cp	r20, r1
    2e8e:	51 05       	cpc	r21, r1
    2e90:	99 f1       	breq	.+102    	; 0x2ef8 <DIO_voidGetPinValue+0x74>
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	89 f0       	breq	.+34     	; 0x2eb8 <DIO_voidGetPinValue+0x34>
    2e96:	28 f0       	brcs	.+10     	; 0x2ea2 <DIO_voidGetPinValue+0x1e>
    2e98:	82 30       	cpi	r24, 0x02	; 2
    2e9a:	c9 f0       	breq	.+50     	; 0x2ece <DIO_voidGetPinValue+0x4a>
    2e9c:	83 30       	cpi	r24, 0x03	; 3
    2e9e:	11 f1       	breq	.+68     	; 0x2ee4 <DIO_voidGetPinValue+0x60>
    2ea0:	08 95       	ret
    2ea2:	89 b3       	in	r24, 0x19	; 25
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <DIO_voidGetPinValue+0x28>
    2ea8:	95 95       	asr	r25
    2eaa:	87 95       	ror	r24
    2eac:	6a 95       	dec	r22
    2eae:	e2 f7       	brpl	.-8      	; 0x2ea8 <DIO_voidGetPinValue+0x24>
    2eb0:	81 70       	andi	r24, 0x01	; 1
    2eb2:	fa 01       	movw	r30, r20
    2eb4:	80 83       	st	Z, r24
    2eb6:	08 95       	ret
    2eb8:	86 b3       	in	r24, 0x16	; 22
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <DIO_voidGetPinValue+0x3e>
    2ebe:	95 95       	asr	r25
    2ec0:	87 95       	ror	r24
    2ec2:	6a 95       	dec	r22
    2ec4:	e2 f7       	brpl	.-8      	; 0x2ebe <DIO_voidGetPinValue+0x3a>
    2ec6:	81 70       	andi	r24, 0x01	; 1
    2ec8:	fa 01       	movw	r30, r20
    2eca:	80 83       	st	Z, r24
    2ecc:	08 95       	ret
    2ece:	83 b3       	in	r24, 0x13	; 19
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <DIO_voidGetPinValue+0x54>
    2ed4:	95 95       	asr	r25
    2ed6:	87 95       	ror	r24
    2ed8:	6a 95       	dec	r22
    2eda:	e2 f7       	brpl	.-8      	; 0x2ed4 <DIO_voidGetPinValue+0x50>
    2edc:	81 70       	andi	r24, 0x01	; 1
    2ede:	fa 01       	movw	r30, r20
    2ee0:	80 83       	st	Z, r24
    2ee2:	08 95       	ret
    2ee4:	80 b3       	in	r24, 0x10	; 16
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	02 c0       	rjmp	.+4      	; 0x2eee <DIO_voidGetPinValue+0x6a>
    2eea:	95 95       	asr	r25
    2eec:	87 95       	ror	r24
    2eee:	6a 95       	dec	r22
    2ef0:	e2 f7       	brpl	.-8      	; 0x2eea <DIO_voidGetPinValue+0x66>
    2ef2:	81 70       	andi	r24, 0x01	; 1
    2ef4:	fa 01       	movw	r30, r20
    2ef6:	80 83       	st	Z, r24
    2ef8:	08 95       	ret

00002efa <DIO_voidActivePinInPullUpResistance>:
    2efa:	84 30       	cpi	r24, 0x04	; 4
    2efc:	a8 f5       	brcc	.+106    	; 0x2f68 <DIO_voidActivePinInPullUpResistance+0x6e>
    2efe:	68 30       	cpi	r22, 0x08	; 8
    2f00:	98 f5       	brcc	.+102    	; 0x2f68 <DIO_voidActivePinInPullUpResistance+0x6e>
    2f02:	81 30       	cpi	r24, 0x01	; 1
    2f04:	89 f0       	breq	.+34     	; 0x2f28 <DIO_voidActivePinInPullUpResistance+0x2e>
    2f06:	28 f0       	brcs	.+10     	; 0x2f12 <DIO_voidActivePinInPullUpResistance+0x18>
    2f08:	82 30       	cpi	r24, 0x02	; 2
    2f0a:	c9 f0       	breq	.+50     	; 0x2f3e <DIO_voidActivePinInPullUpResistance+0x44>
    2f0c:	83 30       	cpi	r24, 0x03	; 3
    2f0e:	11 f1       	breq	.+68     	; 0x2f54 <DIO_voidActivePinInPullUpResistance+0x5a>
    2f10:	08 95       	ret
    2f12:	2b b3       	in	r18, 0x1b	; 27
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	02 c0       	rjmp	.+4      	; 0x2f1e <DIO_voidActivePinInPullUpResistance+0x24>
    2f1a:	88 0f       	add	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	6a 95       	dec	r22
    2f20:	e2 f7       	brpl	.-8      	; 0x2f1a <DIO_voidActivePinInPullUpResistance+0x20>
    2f22:	82 2b       	or	r24, r18
    2f24:	8b bb       	out	0x1b, r24	; 27
    2f26:	08 95       	ret
    2f28:	28 b3       	in	r18, 0x18	; 24
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	02 c0       	rjmp	.+4      	; 0x2f34 <DIO_voidActivePinInPullUpResistance+0x3a>
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	6a 95       	dec	r22
    2f36:	e2 f7       	brpl	.-8      	; 0x2f30 <DIO_voidActivePinInPullUpResistance+0x36>
    2f38:	82 2b       	or	r24, r18
    2f3a:	88 bb       	out	0x18, r24	; 24
    2f3c:	08 95       	ret
    2f3e:	25 b3       	in	r18, 0x15	; 21
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	02 c0       	rjmp	.+4      	; 0x2f4a <DIO_voidActivePinInPullUpResistance+0x50>
    2f46:	88 0f       	add	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	6a 95       	dec	r22
    2f4c:	e2 f7       	brpl	.-8      	; 0x2f46 <DIO_voidActivePinInPullUpResistance+0x4c>
    2f4e:	82 2b       	or	r24, r18
    2f50:	85 bb       	out	0x15, r24	; 21
    2f52:	08 95       	ret
    2f54:	22 b3       	in	r18, 0x12	; 18
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	02 c0       	rjmp	.+4      	; 0x2f60 <DIO_voidActivePinInPullUpResistance+0x66>
    2f5c:	88 0f       	add	r24, r24
    2f5e:	99 1f       	adc	r25, r25
    2f60:	6a 95       	dec	r22
    2f62:	e2 f7       	brpl	.-8      	; 0x2f5c <DIO_voidActivePinInPullUpResistance+0x62>
    2f64:	82 2b       	or	r24, r18
    2f66:	82 bb       	out	0x12, r24	; 18
    2f68:	08 95       	ret

00002f6a <GI_voidEnable>:
    2f6a:	8f b7       	in	r24, 0x3f	; 63
    2f6c:	80 68       	ori	r24, 0x80	; 128
    2f6e:	8f bf       	out	0x3f, r24	; 63
    2f70:	08 95       	ret

00002f72 <PWM_voidInitChannel_1A>:
    2f72:	8e b5       	in	r24, 0x2e	; 46
    2f74:	80 61       	ori	r24, 0x10	; 16
    2f76:	8e bd       	out	0x2e, r24	; 46
    2f78:	8e b5       	in	r24, 0x2e	; 46
    2f7a:	88 60       	ori	r24, 0x08	; 8
    2f7c:	8e bd       	out	0x2e, r24	; 46
    2f7e:	8f b5       	in	r24, 0x2f	; 47
    2f80:	82 60       	ori	r24, 0x02	; 2
    2f82:	8f bd       	out	0x2f, r24	; 47
    2f84:	8f b5       	in	r24, 0x2f	; 47
    2f86:	8e 7f       	andi	r24, 0xFE	; 254
    2f88:	8f bd       	out	0x2f, r24	; 47
    2f8a:	8f b5       	in	r24, 0x2f	; 47
    2f8c:	80 68       	ori	r24, 0x80	; 128
    2f8e:	8f bd       	out	0x2f, r24	; 47
    2f90:	8f b5       	in	r24, 0x2f	; 47
    2f92:	8f 7b       	andi	r24, 0xBF	; 191
    2f94:	8f bd       	out	0x2f, r24	; 47
    2f96:	08 95       	ret

00002f98 <PWM_voidInitChannel_1B>:
    2f98:	8e b5       	in	r24, 0x2e	; 46
    2f9a:	80 61       	ori	r24, 0x10	; 16
    2f9c:	8e bd       	out	0x2e, r24	; 46
    2f9e:	8e b5       	in	r24, 0x2e	; 46
    2fa0:	88 60       	ori	r24, 0x08	; 8
    2fa2:	8e bd       	out	0x2e, r24	; 46
    2fa4:	8f b5       	in	r24, 0x2f	; 47
    2fa6:	82 60       	ori	r24, 0x02	; 2
    2fa8:	8f bd       	out	0x2f, r24	; 47
    2faa:	8f b5       	in	r24, 0x2f	; 47
    2fac:	8e 7f       	andi	r24, 0xFE	; 254
    2fae:	8f bd       	out	0x2f, r24	; 47
    2fb0:	8f b5       	in	r24, 0x2f	; 47
    2fb2:	80 62       	ori	r24, 0x20	; 32
    2fb4:	8f bd       	out	0x2f, r24	; 47
    2fb6:	8f b5       	in	r24, 0x2f	; 47
    2fb8:	8f 7e       	andi	r24, 0xEF	; 239
    2fba:	8f bd       	out	0x2f, r24	; 47
    2fbc:	08 95       	ret

00002fbe <PWM_voidGenerateChannel_1A>:
    2fbe:	cf 92       	push	r12
    2fc0:	df 92       	push	r13
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	ec 01       	movw	r28, r24
    2fcc:	6a 01       	movw	r12, r20
    2fce:	7b 01       	movw	r14, r22
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	48 ec       	ldi	r20, 0xC8	; 200
    2fd6:	52 e4       	ldi	r21, 0x42	; 66
    2fd8:	c7 01       	movw	r24, r14
    2fda:	b6 01       	movw	r22, r12
    2fdc:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <__cmpsf2>
    2fe0:	18 16       	cp	r1, r24
    2fe2:	94 f1       	brlt	.+100    	; 0x3048 <PWM_voidGenerateChannel_1A+0x8a>
    2fe4:	9e 01       	movw	r18, r28
    2fe6:	40 e0       	ldi	r20, 0x00	; 0
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	60 e9       	ldi	r22, 0x90	; 144
    2fec:	70 ed       	ldi	r23, 0xD0	; 208
    2fee:	83 e0       	ldi	r24, 0x03	; 3
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodsi4>
    2ff6:	21 50       	subi	r18, 0x01	; 1
    2ff8:	31 09       	sbc	r19, r1
    2ffa:	37 bd       	out	0x27, r19	; 39
    2ffc:	26 bd       	out	0x26, r18	; 38
    2ffe:	66 b5       	in	r22, 0x26	; 38
    3000:	77 b5       	in	r23, 0x27	; 39
    3002:	6f 5f       	subi	r22, 0xFF	; 255
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    300e:	a7 01       	movw	r20, r14
    3010:	96 01       	movw	r18, r12
    3012:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__mulsf3>
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	48 ec       	ldi	r20, 0xC8	; 200
    301c:	52 e4       	ldi	r21, 0x42	; 66
    301e:	0e 94 03 1b 	call	0x3606	; 0x3606 <__divsf3>
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 91 1a 	call	0x3522	; 0x3522 <__subsf3>
    302e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__fixunssfsi>
    3032:	7b bd       	out	0x2b, r23	; 43
    3034:	6a bd       	out	0x2a, r22	; 42
    3036:	8e b5       	in	r24, 0x2e	; 46
    3038:	81 60       	ori	r24, 0x01	; 1
    303a:	8e bd       	out	0x2e, r24	; 46
    303c:	8e b5       	in	r24, 0x2e	; 46
    303e:	82 60       	ori	r24, 0x02	; 2
    3040:	8e bd       	out	0x2e, r24	; 46
    3042:	8e b5       	in	r24, 0x2e	; 46
    3044:	8b 7f       	andi	r24, 0xFB	; 251
    3046:	8e bd       	out	0x2e, r24	; 46
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	ff 90       	pop	r15
    304e:	ef 90       	pop	r14
    3050:	df 90       	pop	r13
    3052:	cf 90       	pop	r12
    3054:	08 95       	ret

00003056 <PWM_voidGenerateChannel_1B>:
    3056:	cf 92       	push	r12
    3058:	df 92       	push	r13
    305a:	ef 92       	push	r14
    305c:	ff 92       	push	r15
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	ec 01       	movw	r28, r24
    3064:	6a 01       	movw	r12, r20
    3066:	7b 01       	movw	r14, r22
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	48 ec       	ldi	r20, 0xC8	; 200
    306e:	52 e4       	ldi	r21, 0x42	; 66
    3070:	c7 01       	movw	r24, r14
    3072:	b6 01       	movw	r22, r12
    3074:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <__cmpsf2>
    3078:	18 16       	cp	r1, r24
    307a:	94 f1       	brlt	.+100    	; 0x30e0 <PWM_voidGenerateChannel_1B+0x8a>
    307c:	9e 01       	movw	r18, r28
    307e:	40 e0       	ldi	r20, 0x00	; 0
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	60 e9       	ldi	r22, 0x90	; 144
    3084:	70 ed       	ldi	r23, 0xD0	; 208
    3086:	83 e0       	ldi	r24, 0x03	; 3
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__udivmodsi4>
    308e:	21 50       	subi	r18, 0x01	; 1
    3090:	31 09       	sbc	r19, r1
    3092:	37 bd       	out	0x27, r19	; 39
    3094:	26 bd       	out	0x26, r18	; 38
    3096:	66 b5       	in	r22, 0x26	; 38
    3098:	77 b5       	in	r23, 0x27	; 39
    309a:	6f 5f       	subi	r22, 0xFF	; 255
    309c:	7f 4f       	sbci	r23, 0xFF	; 255
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	0e 94 a4 1b 	call	0x3748	; 0x3748 <__floatunsisf>
    30a6:	a7 01       	movw	r20, r14
    30a8:	96 01       	movw	r18, r12
    30aa:	0e 94 56 1c 	call	0x38ac	; 0x38ac <__mulsf3>
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	48 ec       	ldi	r20, 0xC8	; 200
    30b4:	52 e4       	ldi	r21, 0x42	; 66
    30b6:	0e 94 03 1b 	call	0x3606	; 0x3606 <__divsf3>
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e8       	ldi	r20, 0x80	; 128
    30c0:	5f e3       	ldi	r21, 0x3F	; 63
    30c2:	0e 94 91 1a 	call	0x3522	; 0x3522 <__subsf3>
    30c6:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__fixunssfsi>
    30ca:	79 bd       	out	0x29, r23	; 41
    30cc:	68 bd       	out	0x28, r22	; 40
    30ce:	8e b5       	in	r24, 0x2e	; 46
    30d0:	81 60       	ori	r24, 0x01	; 1
    30d2:	8e bd       	out	0x2e, r24	; 46
    30d4:	8e b5       	in	r24, 0x2e	; 46
    30d6:	82 60       	ori	r24, 0x02	; 2
    30d8:	8e bd       	out	0x2e, r24	; 46
    30da:	8e b5       	in	r24, 0x2e	; 46
    30dc:	8b 7f       	andi	r24, 0xFB	; 251
    30de:	8e bd       	out	0x2e, r24	; 46
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	ff 90       	pop	r15
    30e6:	ef 90       	pop	r14
    30e8:	df 90       	pop	r13
    30ea:	cf 90       	pop	r12
    30ec:	08 95       	ret

000030ee <TMR0_voidInit>:
    30ee:	83 b7       	in	r24, 0x33	; 51
    30f0:	8f 7b       	andi	r24, 0xBF	; 191
    30f2:	83 bf       	out	0x33, r24	; 51
    30f4:	83 b7       	in	r24, 0x33	; 51
    30f6:	88 60       	ori	r24, 0x08	; 8
    30f8:	83 bf       	out	0x33, r24	; 51
    30fa:	83 b7       	in	r24, 0x33	; 51
    30fc:	8f 7e       	andi	r24, 0xEF	; 239
    30fe:	83 bf       	out	0x33, r24	; 51
    3100:	83 b7       	in	r24, 0x33	; 51
    3102:	8f 7d       	andi	r24, 0xDF	; 223
    3104:	83 bf       	out	0x33, r24	; 51
    3106:	89 b7       	in	r24, 0x39	; 57
    3108:	82 60       	ori	r24, 0x02	; 2
    310a:	89 bf       	out	0x39, r24	; 57
    310c:	89 ef       	ldi	r24, 0xF9	; 249
    310e:	8c bf       	out	0x3c, r24	; 60
    3110:	08 95       	ret

00003112 <TMR0_voidStart>:
    3112:	83 b7       	in	r24, 0x33	; 51
    3114:	81 60       	ori	r24, 0x01	; 1
    3116:	83 bf       	out	0x33, r24	; 51
    3118:	83 b7       	in	r24, 0x33	; 51
    311a:	82 60       	ori	r24, 0x02	; 2
    311c:	83 bf       	out	0x33, r24	; 51
    311e:	83 b7       	in	r24, 0x33	; 51
    3120:	8b 7f       	andi	r24, 0xFB	; 251
    3122:	83 bf       	out	0x33, r24	; 51
    3124:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <local_u16Counter+0x1>
    3128:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <local_u16Counter>
    312c:	08 95       	ret

0000312e <TMR0_voidStop>:
    312e:	83 b7       	in	r24, 0x33	; 51
    3130:	8e 7f       	andi	r24, 0xFE	; 254
    3132:	83 bf       	out	0x33, r24	; 51
    3134:	83 b7       	in	r24, 0x33	; 51
    3136:	8d 7f       	andi	r24, 0xFD	; 253
    3138:	83 bf       	out	0x33, r24	; 51
    313a:	83 b7       	in	r24, 0x33	; 51
    313c:	8b 7f       	andi	r24, 0xFB	; 251
    313e:	83 bf       	out	0x33, r24	; 51
    3140:	08 95       	ret

00003142 <TMR0_SetCallBackCTC>:
    3142:	00 97       	sbiw	r24, 0x00	; 0
    3144:	21 f0       	breq	.+8      	; 0x314e <TMR0_SetCallBackCTC+0xc>
    3146:	90 93 d0 04 	sts	0x04D0, r25	; 0x8004d0 <PRV_pFunCallBackCTC+0x1>
    314a:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <PRV_pFunCallBackCTC>
    314e:	08 95       	ret

00003150 <TMR0clear_flag>:
    3150:	88 b7       	in	r24, 0x38	; 56
    3152:	82 60       	ori	r24, 0x02	; 2
    3154:	88 bf       	out	0x38, r24	; 56
    3156:	88 b7       	in	r24, 0x38	; 56
    3158:	81 60       	ori	r24, 0x01	; 1
    315a:	88 bf       	out	0x38, r24	; 56
    315c:	08 95       	ret

0000315e <__vector_11>:
    315e:	1f 92       	push	r1
    3160:	0f 92       	push	r0
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	0f 92       	push	r0
    3166:	11 24       	eor	r1, r1
    3168:	2f 93       	push	r18
    316a:	3f 93       	push	r19
    316c:	4f 93       	push	r20
    316e:	5f 93       	push	r21
    3170:	6f 93       	push	r22
    3172:	7f 93       	push	r23
    3174:	8f 93       	push	r24
    3176:	9f 93       	push	r25
    3178:	af 93       	push	r26
    317a:	bf 93       	push	r27
    317c:	ef 93       	push	r30
    317e:	ff 93       	push	r31
    3180:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <local_u16Counter>
    3184:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <local_u16Counter+0x1>
    3188:	01 96       	adiw	r24, 0x01	; 1
    318a:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <local_u16Counter+0x1>
    318e:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <local_u16Counter>
    3192:	88 3e       	cpi	r24, 0xE8	; 232
    3194:	93 40       	sbci	r25, 0x03	; 3
    3196:	69 f4       	brne	.+26     	; 0x31b2 <__vector_11+0x54>
    3198:	81 e7       	ldi	r24, 0x71	; 113
    319a:	82 bf       	out	0x32, r24	; 50
    319c:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <local_u16Counter+0x1>
    31a0:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <local_u16Counter>
    31a4:	e0 91 d1 04 	lds	r30, 0x04D1	; 0x8004d1 <PRV_pFunCallBackOVF>
    31a8:	f0 91 d2 04 	lds	r31, 0x04D2	; 0x8004d2 <PRV_pFunCallBackOVF+0x1>
    31ac:	30 97       	sbiw	r30, 0x00	; 0
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <__vector_11+0x54>
    31b0:	09 95       	icall
    31b2:	ff 91       	pop	r31
    31b4:	ef 91       	pop	r30
    31b6:	bf 91       	pop	r27
    31b8:	af 91       	pop	r26
    31ba:	9f 91       	pop	r25
    31bc:	8f 91       	pop	r24
    31be:	7f 91       	pop	r23
    31c0:	6f 91       	pop	r22
    31c2:	5f 91       	pop	r21
    31c4:	4f 91       	pop	r20
    31c6:	3f 91       	pop	r19
    31c8:	2f 91       	pop	r18
    31ca:	0f 90       	pop	r0
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	0f 90       	pop	r0
    31d0:	1f 90       	pop	r1
    31d2:	18 95       	reti

000031d4 <__vector_10>:
    31d4:	1f 92       	push	r1
    31d6:	0f 92       	push	r0
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	0f 92       	push	r0
    31dc:	11 24       	eor	r1, r1
    31de:	2f 93       	push	r18
    31e0:	3f 93       	push	r19
    31e2:	4f 93       	push	r20
    31e4:	5f 93       	push	r21
    31e6:	6f 93       	push	r22
    31e8:	7f 93       	push	r23
    31ea:	8f 93       	push	r24
    31ec:	9f 93       	push	r25
    31ee:	af 93       	push	r26
    31f0:	bf 93       	push	r27
    31f2:	ef 93       	push	r30
    31f4:	ff 93       	push	r31
    31f6:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <local_u16Counter>
    31fa:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <local_u16Counter+0x1>
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	90 93 ce 04 	sts	0x04CE, r25	; 0x8004ce <local_u16Counter+0x1>
    3204:	80 93 cd 04 	sts	0x04CD, r24	; 0x8004cd <local_u16Counter>
    3208:	88 38       	cpi	r24, 0x88	; 136
    320a:	93 41       	sbci	r25, 0x13	; 19
    320c:	69 f4       	brne	.+26     	; 0x3228 <__vector_10+0x54>
    320e:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <local_u16Counter+0x1>
    3212:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <local_u16Counter>
    3216:	e0 91 cf 04 	lds	r30, 0x04CF	; 0x8004cf <PRV_pFunCallBackCTC>
    321a:	f0 91 d0 04 	lds	r31, 0x04D0	; 0x8004d0 <PRV_pFunCallBackCTC+0x1>
    321e:	30 97       	sbiw	r30, 0x00	; 0
    3220:	19 f0       	breq	.+6      	; 0x3228 <__vector_10+0x54>
    3222:	09 95       	icall
    3224:	0e 94 a8 18 	call	0x3150	; 0x3150 <TMR0clear_flag>
    3228:	ff 91       	pop	r31
    322a:	ef 91       	pop	r30
    322c:	bf 91       	pop	r27
    322e:	af 91       	pop	r26
    3230:	9f 91       	pop	r25
    3232:	8f 91       	pop	r24
    3234:	7f 91       	pop	r23
    3236:	6f 91       	pop	r22
    3238:	5f 91       	pop	r21
    323a:	4f 91       	pop	r20
    323c:	3f 91       	pop	r19
    323e:	2f 91       	pop	r18
    3240:	0f 90       	pop	r0
    3242:	0f be       	out	0x3f, r0	; 63
    3244:	0f 90       	pop	r0
    3246:	1f 90       	pop	r1
    3248:	18 95       	reti

0000324a <TMR2_voidInit>:
    324a:	85 b5       	in	r24, 0x25	; 37
    324c:	8f 7b       	andi	r24, 0xBF	; 191
    324e:	85 bd       	out	0x25, r24	; 37
    3250:	85 b5       	in	r24, 0x25	; 37
    3252:	88 60       	ori	r24, 0x08	; 8
    3254:	85 bd       	out	0x25, r24	; 37
    3256:	85 b5       	in	r24, 0x25	; 37
    3258:	8f 7e       	andi	r24, 0xEF	; 239
    325a:	85 bd       	out	0x25, r24	; 37
    325c:	85 b5       	in	r24, 0x25	; 37
    325e:	8f 7d       	andi	r24, 0xDF	; 223
    3260:	85 bd       	out	0x25, r24	; 37
    3262:	89 b7       	in	r24, 0x39	; 57
    3264:	80 68       	ori	r24, 0x80	; 128
    3266:	89 bf       	out	0x39, r24	; 57
    3268:	89 ef       	ldi	r24, 0xF9	; 249
    326a:	83 bd       	out	0x23, r24	; 35
    326c:	08 95       	ret

0000326e <TMR2_voidStart>:
    326e:	85 b5       	in	r24, 0x25	; 37
    3270:	81 60       	ori	r24, 0x01	; 1
    3272:	85 bd       	out	0x25, r24	; 37
    3274:	85 b5       	in	r24, 0x25	; 37
    3276:	82 60       	ori	r24, 0x02	; 2
    3278:	85 bd       	out	0x25, r24	; 37
    327a:	85 b5       	in	r24, 0x25	; 37
    327c:	8b 7f       	andi	r24, 0xFB	; 251
    327e:	85 bd       	out	0x25, r24	; 37
    3280:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <local_u16Counter+0x1>
    3284:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <local_u16Counter>
    3288:	08 95       	ret

0000328a <TMR2_voidStop>:
    328a:	85 b5       	in	r24, 0x25	; 37
    328c:	8e 7f       	andi	r24, 0xFE	; 254
    328e:	85 bd       	out	0x25, r24	; 37
    3290:	85 b5       	in	r24, 0x25	; 37
    3292:	8d 7f       	andi	r24, 0xFD	; 253
    3294:	85 bd       	out	0x25, r24	; 37
    3296:	85 b5       	in	r24, 0x25	; 37
    3298:	8b 7f       	andi	r24, 0xFB	; 251
    329a:	85 bd       	out	0x25, r24	; 37
    329c:	08 95       	ret

0000329e <TMR2_SetCallBackCTC>:
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	21 f0       	breq	.+8      	; 0x32aa <TMR2_SetCallBackCTC+0xc>
    32a2:	90 93 d6 04 	sts	0x04D6, r25	; 0x8004d6 <PRV_pFunCallBackCTC+0x1>
    32a6:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <PRV_pFunCallBackCTC>
    32aa:	08 95       	ret

000032ac <TMR2_clear_flag>:
    32ac:	88 b7       	in	r24, 0x38	; 56
    32ae:	80 68       	ori	r24, 0x80	; 128
    32b0:	88 bf       	out	0x38, r24	; 56
    32b2:	88 b7       	in	r24, 0x38	; 56
    32b4:	80 64       	ori	r24, 0x40	; 64
    32b6:	88 bf       	out	0x38, r24	; 56
    32b8:	08 95       	ret

000032ba <__vector_5>:
    32ba:	1f 92       	push	r1
    32bc:	0f 92       	push	r0
    32be:	0f b6       	in	r0, 0x3f	; 63
    32c0:	0f 92       	push	r0
    32c2:	11 24       	eor	r1, r1
    32c4:	2f 93       	push	r18
    32c6:	3f 93       	push	r19
    32c8:	4f 93       	push	r20
    32ca:	5f 93       	push	r21
    32cc:	6f 93       	push	r22
    32ce:	7f 93       	push	r23
    32d0:	8f 93       	push	r24
    32d2:	9f 93       	push	r25
    32d4:	af 93       	push	r26
    32d6:	bf 93       	push	r27
    32d8:	ef 93       	push	r30
    32da:	ff 93       	push	r31
    32dc:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <local_u16Counter>
    32e0:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <local_u16Counter+0x1>
    32e4:	01 96       	adiw	r24, 0x01	; 1
    32e6:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <local_u16Counter+0x1>
    32ea:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <local_u16Counter>
    32ee:	88 3e       	cpi	r24, 0xE8	; 232
    32f0:	93 40       	sbci	r25, 0x03	; 3
    32f2:	69 f4       	brne	.+26     	; 0x330e <__vector_5+0x54>
    32f4:	81 e7       	ldi	r24, 0x71	; 113
    32f6:	84 bd       	out	0x24, r24	; 36
    32f8:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <local_u16Counter+0x1>
    32fc:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <local_u16Counter>
    3300:	e0 91 d7 04 	lds	r30, 0x04D7	; 0x8004d7 <PRV_pFunCallBackOVF>
    3304:	f0 91 d8 04 	lds	r31, 0x04D8	; 0x8004d8 <PRV_pFunCallBackOVF+0x1>
    3308:	30 97       	sbiw	r30, 0x00	; 0
    330a:	09 f0       	breq	.+2      	; 0x330e <__vector_5+0x54>
    330c:	09 95       	icall
    330e:	ff 91       	pop	r31
    3310:	ef 91       	pop	r30
    3312:	bf 91       	pop	r27
    3314:	af 91       	pop	r26
    3316:	9f 91       	pop	r25
    3318:	8f 91       	pop	r24
    331a:	7f 91       	pop	r23
    331c:	6f 91       	pop	r22
    331e:	5f 91       	pop	r21
    3320:	4f 91       	pop	r20
    3322:	3f 91       	pop	r19
    3324:	2f 91       	pop	r18
    3326:	0f 90       	pop	r0
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	0f 90       	pop	r0
    332c:	1f 90       	pop	r1
    332e:	18 95       	reti

00003330 <__vector_4>:
    3330:	1f 92       	push	r1
    3332:	0f 92       	push	r0
    3334:	0f b6       	in	r0, 0x3f	; 63
    3336:	0f 92       	push	r0
    3338:	11 24       	eor	r1, r1
    333a:	2f 93       	push	r18
    333c:	3f 93       	push	r19
    333e:	4f 93       	push	r20
    3340:	5f 93       	push	r21
    3342:	6f 93       	push	r22
    3344:	7f 93       	push	r23
    3346:	8f 93       	push	r24
    3348:	9f 93       	push	r25
    334a:	af 93       	push	r26
    334c:	bf 93       	push	r27
    334e:	ef 93       	push	r30
    3350:	ff 93       	push	r31
    3352:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <local_u16Counter>
    3356:	90 91 d4 04 	lds	r25, 0x04D4	; 0x8004d4 <local_u16Counter+0x1>
    335a:	01 96       	adiw	r24, 0x01	; 1
    335c:	90 93 d4 04 	sts	0x04D4, r25	; 0x8004d4 <local_u16Counter+0x1>
    3360:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <local_u16Counter>
    3364:	88 38       	cpi	r24, 0x88	; 136
    3366:	93 41       	sbci	r25, 0x13	; 19
    3368:	69 f4       	brne	.+26     	; 0x3384 <__vector_4+0x54>
    336a:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <local_u16Counter+0x1>
    336e:	10 92 d3 04 	sts	0x04D3, r1	; 0x8004d3 <local_u16Counter>
    3372:	e0 91 d5 04 	lds	r30, 0x04D5	; 0x8004d5 <PRV_pFunCallBackCTC>
    3376:	f0 91 d6 04 	lds	r31, 0x04D6	; 0x8004d6 <PRV_pFunCallBackCTC+0x1>
    337a:	30 97       	sbiw	r30, 0x00	; 0
    337c:	19 f0       	breq	.+6      	; 0x3384 <__vector_4+0x54>
    337e:	09 95       	icall
    3380:	0e 94 56 19 	call	0x32ac	; 0x32ac <TMR2_clear_flag>
    3384:	ff 91       	pop	r31
    3386:	ef 91       	pop	r30
    3388:	bf 91       	pop	r27
    338a:	af 91       	pop	r26
    338c:	9f 91       	pop	r25
    338e:	8f 91       	pop	r24
    3390:	7f 91       	pop	r23
    3392:	6f 91       	pop	r22
    3394:	5f 91       	pop	r21
    3396:	4f 91       	pop	r20
    3398:	3f 91       	pop	r19
    339a:	2f 91       	pop	r18
    339c:	0f 90       	pop	r0
    339e:	0f be       	out	0x3f, r0	; 63
    33a0:	0f 90       	pop	r0
    33a2:	1f 90       	pop	r1
    33a4:	18 95       	reti

000033a6 <TWI_voidInitMaster>:
    33a6:	8c e0       	ldi	r24, 0x0C	; 12
    33a8:	80 b9       	out	0x00, r24	; 0
    33aa:	81 b1       	in	r24, 0x01	; 1
    33ac:	8d 7f       	andi	r24, 0xFD	; 253
    33ae:	81 b9       	out	0x01, r24	; 1
    33b0:	81 b1       	in	r24, 0x01	; 1
    33b2:	8e 7f       	andi	r24, 0xFE	; 254
    33b4:	81 b9       	out	0x01, r24	; 1
    33b6:	86 b7       	in	r24, 0x36	; 54
    33b8:	84 60       	ori	r24, 0x04	; 4
    33ba:	86 bf       	out	0x36, r24	; 54
    33bc:	08 95       	ret

000033be <TWI_voidSendStartCondition>:
    33be:	86 b7       	in	r24, 0x36	; 54
    33c0:	80 62       	ori	r24, 0x20	; 32
    33c2:	86 bf       	out	0x36, r24	; 54
    33c4:	86 b7       	in	r24, 0x36	; 54
    33c6:	80 68       	ori	r24, 0x80	; 128
    33c8:	86 bf       	out	0x36, r24	; 54
    33ca:	06 b6       	in	r0, 0x36	; 54
    33cc:	07 fe       	sbrs	r0, 7
    33ce:	fd cf       	rjmp	.-6      	; 0x33ca <TWI_voidSendStartCondition+0xc>
    33d0:	81 b1       	in	r24, 0x01	; 1
    33d2:	88 7f       	andi	r24, 0xF8	; 248
    33d4:	88 30       	cpi	r24, 0x08	; 8
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <TWI_voidSendStartCondition+0x12>
    33d8:	08 95       	ret

000033da <TWI_voidSendRepeatedStartCondition>:
    33da:	86 b7       	in	r24, 0x36	; 54
    33dc:	80 62       	ori	r24, 0x20	; 32
    33de:	86 bf       	out	0x36, r24	; 54
    33e0:	86 b7       	in	r24, 0x36	; 54
    33e2:	80 68       	ori	r24, 0x80	; 128
    33e4:	86 bf       	out	0x36, r24	; 54
    33e6:	06 b6       	in	r0, 0x36	; 54
    33e8:	07 fe       	sbrs	r0, 7
    33ea:	fd cf       	rjmp	.-6      	; 0x33e6 <TWI_voidSendRepeatedStartCondition+0xc>
    33ec:	81 b1       	in	r24, 0x01	; 1
    33ee:	88 7f       	andi	r24, 0xF8	; 248
    33f0:	80 31       	cpi	r24, 0x10	; 16
    33f2:	e1 f7       	brne	.-8      	; 0x33ec <TWI_voidSendRepeatedStartCondition+0x12>
    33f4:	08 95       	ret

000033f6 <TWI_voidSendStopCondition>:
    33f6:	86 b7       	in	r24, 0x36	; 54
    33f8:	80 61       	ori	r24, 0x10	; 16
    33fa:	86 bf       	out	0x36, r24	; 54
    33fc:	86 b7       	in	r24, 0x36	; 54
    33fe:	80 68       	ori	r24, 0x80	; 128
    3400:	86 bf       	out	0x36, r24	; 54
    3402:	08 95       	ret

00003404 <TWI_voidSendSlaveAddWithWrite>:
    3404:	88 23       	and	r24, r24
    3406:	94 f0       	brlt	.+36     	; 0x342c <TWI_voidSendSlaveAddWithWrite+0x28>
    3408:	88 0f       	add	r24, r24
    340a:	83 b9       	out	0x03, r24	; 3
    340c:	83 b1       	in	r24, 0x03	; 3
    340e:	8e 7f       	andi	r24, 0xFE	; 254
    3410:	83 b9       	out	0x03, r24	; 3
    3412:	86 b7       	in	r24, 0x36	; 54
    3414:	8f 7d       	andi	r24, 0xDF	; 223
    3416:	86 bf       	out	0x36, r24	; 54
    3418:	86 b7       	in	r24, 0x36	; 54
    341a:	80 68       	ori	r24, 0x80	; 128
    341c:	86 bf       	out	0x36, r24	; 54
    341e:	06 b6       	in	r0, 0x36	; 54
    3420:	07 fe       	sbrs	r0, 7
    3422:	fd cf       	rjmp	.-6      	; 0x341e <TWI_voidSendSlaveAddWithWrite+0x1a>
    3424:	81 b1       	in	r24, 0x01	; 1
    3426:	88 7f       	andi	r24, 0xF8	; 248
    3428:	88 31       	cpi	r24, 0x18	; 24
    342a:	e1 f7       	brne	.-8      	; 0x3424 <TWI_voidSendSlaveAddWithWrite+0x20>
    342c:	08 95       	ret

0000342e <TWI_voidSendSlaveAddWithRead>:
    342e:	88 23       	and	r24, r24
    3430:	94 f0       	brlt	.+36     	; 0x3456 <TWI_voidSendSlaveAddWithRead+0x28>
    3432:	88 0f       	add	r24, r24
    3434:	83 b9       	out	0x03, r24	; 3
    3436:	83 b1       	in	r24, 0x03	; 3
    3438:	81 60       	ori	r24, 0x01	; 1
    343a:	83 b9       	out	0x03, r24	; 3
    343c:	86 b7       	in	r24, 0x36	; 54
    343e:	8f 7d       	andi	r24, 0xDF	; 223
    3440:	86 bf       	out	0x36, r24	; 54
    3442:	86 b7       	in	r24, 0x36	; 54
    3444:	80 68       	ori	r24, 0x80	; 128
    3446:	86 bf       	out	0x36, r24	; 54
    3448:	06 b6       	in	r0, 0x36	; 54
    344a:	07 fe       	sbrs	r0, 7
    344c:	fd cf       	rjmp	.-6      	; 0x3448 <TWI_voidSendSlaveAddWithRead+0x1a>
    344e:	81 b1       	in	r24, 0x01	; 1
    3450:	88 7f       	andi	r24, 0xF8	; 248
    3452:	80 34       	cpi	r24, 0x40	; 64
    3454:	e1 f7       	brne	.-8      	; 0x344e <TWI_voidSendSlaveAddWithRead+0x20>
    3456:	08 95       	ret

00003458 <TWI_voidTransmitMasterDataByte>:
    3458:	83 b9       	out	0x03, r24	; 3
    345a:	86 b7       	in	r24, 0x36	; 54
    345c:	80 68       	ori	r24, 0x80	; 128
    345e:	86 bf       	out	0x36, r24	; 54
    3460:	06 b6       	in	r0, 0x36	; 54
    3462:	07 fe       	sbrs	r0, 7
    3464:	fd cf       	rjmp	.-6      	; 0x3460 <TWI_voidTransmitMasterDataByte+0x8>
    3466:	81 b1       	in	r24, 0x01	; 1
    3468:	88 7f       	andi	r24, 0xF8	; 248
    346a:	88 32       	cpi	r24, 0x28	; 40
    346c:	e1 f7       	brne	.-8      	; 0x3466 <TWI_voidTransmitMasterDataByte+0xe>
    346e:	08 95       	ret

00003470 <TWI_voidRecieveMasterDataByteWithAch>:
    3470:	fc 01       	movw	r30, r24
    3472:	89 2b       	or	r24, r25
    3474:	91 f0       	breq	.+36     	; 0x349a <TWI_voidRecieveMasterDataByteWithAch+0x2a>
    3476:	96 b7       	in	r25, 0x36	; 54
    3478:	90 64       	ori	r25, 0x40	; 64
    347a:	96 bf       	out	0x36, r25	; 54
    347c:	96 b7       	in	r25, 0x36	; 54
    347e:	90 68       	ori	r25, 0x80	; 128
    3480:	96 bf       	out	0x36, r25	; 54
    3482:	06 b6       	in	r0, 0x36	; 54
    3484:	07 fe       	sbrs	r0, 7
    3486:	fd cf       	rjmp	.-6      	; 0x3482 <TWI_voidRecieveMasterDataByteWithAch+0x12>
    3488:	91 b1       	in	r25, 0x01	; 1
    348a:	98 7f       	andi	r25, 0xF8	; 248
    348c:	90 35       	cpi	r25, 0x50	; 80
    348e:	e1 f7       	brne	.-8      	; 0x3488 <TWI_voidRecieveMasterDataByteWithAch+0x18>
    3490:	83 b1       	in	r24, 0x03	; 3
    3492:	80 83       	st	Z, r24
    3494:	86 b7       	in	r24, 0x36	; 54
    3496:	8f 7b       	andi	r24, 0xBF	; 191
    3498:	86 bf       	out	0x36, r24	; 54
    349a:	08 95       	ret

0000349c <TWI_voidRecieveMasterDataByteWithNAch>:
    349c:	fc 01       	movw	r30, r24
    349e:	89 2b       	or	r24, r25
    34a0:	61 f0       	breq	.+24     	; 0x34ba <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
    34a2:	96 b7       	in	r25, 0x36	; 54
    34a4:	90 68       	ori	r25, 0x80	; 128
    34a6:	96 bf       	out	0x36, r25	; 54
    34a8:	06 b6       	in	r0, 0x36	; 54
    34aa:	07 fe       	sbrs	r0, 7
    34ac:	fd cf       	rjmp	.-6      	; 0x34a8 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
    34ae:	91 b1       	in	r25, 0x01	; 1
    34b0:	98 7f       	andi	r25, 0xF8	; 248
    34b2:	98 35       	cpi	r25, 0x58	; 88
    34b4:	e1 f7       	brne	.-8      	; 0x34ae <TWI_voidRecieveMasterDataByteWithNAch+0x12>
    34b6:	83 b1       	in	r24, 0x03	; 3
    34b8:	80 83       	st	Z, r24
    34ba:	08 95       	ret

000034bc <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    34bc:	8b b1       	in	r24, 0x0b	; 11
    34be:	8d 7f       	andi	r24, 0xFD	; 253
    34c0:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    34c2:	87 e6       	ldi	r24, 0x67	; 103
    34c4:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    34c6:	8a b1       	in	r24, 0x0a	; 10
    34c8:	8b 7f       	andi	r24, 0xFB	; 251
    34ca:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    34cc:	86 e8       	ldi	r24, 0x86	; 134
    34ce:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    34d0:	8a b1       	in	r24, 0x0a	; 10
    34d2:	80 61       	ori	r24, 0x10	; 16
    34d4:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    34d6:	8a b1       	in	r24, 0x0a	; 10
    34d8:	88 60       	ori	r24, 0x08	; 8
    34da:	8a b9       	out	0x0a, r24	; 10
    34dc:	08 95       	ret

000034de <UART_voidTxChar>:


void UART_voidTxChar(u8 copy_u8TxData)
{
	/*write data to data register*/
	UDR_REG=copy_u8TxData;
    34de:	8c b9       	out	0x0c, r24	; 12
	
	/*busy wait for data moved from data register to shift register*/
	while(0==GET_BIT(UCSRA_REG,UDRE));
    34e0:	5d 9b       	sbis	0x0b, 5	; 11
    34e2:	fe cf       	rjmp	.-4      	; 0x34e0 <UART_voidTxChar+0x2>
	
}
    34e4:	08 95       	ret

000034e6 <UART_voidRxChar>:



void UART_voidRxChar(u8* copy_pu8RxData)
{
	if(copy_pu8RxData!=NULL)
    34e6:	00 97       	sbiw	r24, 0x00	; 0
    34e8:	29 f0       	breq	.+10     	; 0x34f4 <UART_voidRxChar+0xe>
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC));
    34ea:	5f 9b       	sbis	0x0b, 7	; 11
    34ec:	fe cf       	rjmp	.-4      	; 0x34ea <UART_voidRxChar+0x4>
		
		/*Read data to data register*/
		*copy_pu8RxData=UDR_REG;
    34ee:	2c b1       	in	r18, 0x0c	; 12
    34f0:	fc 01       	movw	r30, r24
    34f2:	20 83       	st	Z, r18
    34f4:	08 95       	ret

000034f6 <UART_voidTxString>:
		//error state
	}
}

void UART_voidTxString	(u8* copy_pu8TxString)
{
    34f6:	0f 93       	push	r16
    34f8:	1f 93       	push	r17
    34fa:	cf 93       	push	r28
	
	if(copy_pu8TxString!=NULL)
    34fc:	00 97       	sbiw	r24, 0x00	; 0
    34fe:	29 f4       	brne	.+10     	; 0x350a <UART_voidTxString+0x14>
    3500:	0c c0       	rjmp	.+24     	; 0x351a <UART_voidTxString+0x24>
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
		{
			/*send data[i]*/
			UART_voidTxChar(copy_pu8TxString[Local_u8Counter]);
    3502:	0e 94 6f 1a 	call	0x34de	; 0x34de <UART_voidTxChar>
			
			/*increase counter*/
			Local_u8Counter++;
    3506:	cf 5f       	subi	r28, 0xFF	; 255
    3508:	02 c0       	rjmp	.+4      	; 0x350e <UART_voidTxString+0x18>
    350a:	8c 01       	movw	r16, r24
    350c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		/*Init counter*/
		u8 Local_u8Counter=0;
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
    350e:	f8 01       	movw	r30, r16
    3510:	ec 0f       	add	r30, r28
    3512:	f1 1d       	adc	r31, r1
    3514:	80 81       	ld	r24, Z
    3516:	81 11       	cpse	r24, r1
    3518:	f4 cf       	rjmp	.-24     	; 0x3502 <UART_voidTxString+0xc>
	{
		//error state
	}
	
	
}
    351a:	cf 91       	pop	r28
    351c:	1f 91       	pop	r17
    351e:	0f 91       	pop	r16
    3520:	08 95       	ret

00003522 <__subsf3>:
    3522:	50 58       	subi	r21, 0x80	; 128

00003524 <__addsf3>:
    3524:	bb 27       	eor	r27, r27
    3526:	aa 27       	eor	r26, r26
    3528:	0e 94 a9 1a 	call	0x3552	; 0x3552 <__addsf3x>
    352c:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__fp_round>
    3530:	0e 94 0e 1c 	call	0x381c	; 0x381c <__fp_pscA>
    3534:	38 f0       	brcs	.+14     	; 0x3544 <__addsf3+0x20>
    3536:	0e 94 15 1c 	call	0x382a	; 0x382a <__fp_pscB>
    353a:	20 f0       	brcs	.+8      	; 0x3544 <__addsf3+0x20>
    353c:	39 f4       	brne	.+14     	; 0x354c <__addsf3+0x28>
    353e:	9f 3f       	cpi	r25, 0xFF	; 255
    3540:	19 f4       	brne	.+6      	; 0x3548 <__addsf3+0x24>
    3542:	26 f4       	brtc	.+8      	; 0x354c <__addsf3+0x28>
    3544:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_nan>
    3548:	0e f4       	brtc	.+2      	; 0x354c <__addsf3+0x28>
    354a:	e0 95       	com	r30
    354c:	e7 fb       	bst	r30, 7
    354e:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__fp_inf>

00003552 <__addsf3x>:
    3552:	e9 2f       	mov	r30, r25
    3554:	0e 94 2d 1c 	call	0x385a	; 0x385a <__fp_split3>
    3558:	58 f3       	brcs	.-42     	; 0x3530 <__addsf3+0xc>
    355a:	ba 17       	cp	r27, r26
    355c:	62 07       	cpc	r22, r18
    355e:	73 07       	cpc	r23, r19
    3560:	84 07       	cpc	r24, r20
    3562:	95 07       	cpc	r25, r21
    3564:	20 f0       	brcs	.+8      	; 0x356e <__addsf3x+0x1c>
    3566:	79 f4       	brne	.+30     	; 0x3586 <__addsf3x+0x34>
    3568:	a6 f5       	brtc	.+104    	; 0x35d2 <__addsf3x+0x80>
    356a:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__fp_zero>
    356e:	0e f4       	brtc	.+2      	; 0x3572 <__addsf3x+0x20>
    3570:	e0 95       	com	r30
    3572:	0b 2e       	mov	r0, r27
    3574:	ba 2f       	mov	r27, r26
    3576:	a0 2d       	mov	r26, r0
    3578:	0b 01       	movw	r0, r22
    357a:	b9 01       	movw	r22, r18
    357c:	90 01       	movw	r18, r0
    357e:	0c 01       	movw	r0, r24
    3580:	ca 01       	movw	r24, r20
    3582:	a0 01       	movw	r20, r0
    3584:	11 24       	eor	r1, r1
    3586:	ff 27       	eor	r31, r31
    3588:	59 1b       	sub	r21, r25
    358a:	99 f0       	breq	.+38     	; 0x35b2 <__addsf3x+0x60>
    358c:	59 3f       	cpi	r21, 0xF9	; 249
    358e:	50 f4       	brcc	.+20     	; 0x35a4 <__addsf3x+0x52>
    3590:	50 3e       	cpi	r21, 0xE0	; 224
    3592:	68 f1       	brcs	.+90     	; 0x35ee <__addsf3x+0x9c>
    3594:	1a 16       	cp	r1, r26
    3596:	f0 40       	sbci	r31, 0x00	; 0
    3598:	a2 2f       	mov	r26, r18
    359a:	23 2f       	mov	r18, r19
    359c:	34 2f       	mov	r19, r20
    359e:	44 27       	eor	r20, r20
    35a0:	58 5f       	subi	r21, 0xF8	; 248
    35a2:	f3 cf       	rjmp	.-26     	; 0x358a <__addsf3x+0x38>
    35a4:	46 95       	lsr	r20
    35a6:	37 95       	ror	r19
    35a8:	27 95       	ror	r18
    35aa:	a7 95       	ror	r26
    35ac:	f0 40       	sbci	r31, 0x00	; 0
    35ae:	53 95       	inc	r21
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <__addsf3x+0x52>
    35b2:	7e f4       	brtc	.+30     	; 0x35d2 <__addsf3x+0x80>
    35b4:	1f 16       	cp	r1, r31
    35b6:	ba 0b       	sbc	r27, r26
    35b8:	62 0b       	sbc	r22, r18
    35ba:	73 0b       	sbc	r23, r19
    35bc:	84 0b       	sbc	r24, r20
    35be:	ba f0       	brmi	.+46     	; 0x35ee <__addsf3x+0x9c>
    35c0:	91 50       	subi	r25, 0x01	; 1
    35c2:	a1 f0       	breq	.+40     	; 0x35ec <__addsf3x+0x9a>
    35c4:	ff 0f       	add	r31, r31
    35c6:	bb 1f       	adc	r27, r27
    35c8:	66 1f       	adc	r22, r22
    35ca:	77 1f       	adc	r23, r23
    35cc:	88 1f       	adc	r24, r24
    35ce:	c2 f7       	brpl	.-16     	; 0x35c0 <__addsf3x+0x6e>
    35d0:	0e c0       	rjmp	.+28     	; 0x35ee <__addsf3x+0x9c>
    35d2:	ba 0f       	add	r27, r26
    35d4:	62 1f       	adc	r22, r18
    35d6:	73 1f       	adc	r23, r19
    35d8:	84 1f       	adc	r24, r20
    35da:	48 f4       	brcc	.+18     	; 0x35ee <__addsf3x+0x9c>
    35dc:	87 95       	ror	r24
    35de:	77 95       	ror	r23
    35e0:	67 95       	ror	r22
    35e2:	b7 95       	ror	r27
    35e4:	f7 95       	ror	r31
    35e6:	9e 3f       	cpi	r25, 0xFE	; 254
    35e8:	08 f0       	brcs	.+2      	; 0x35ec <__addsf3x+0x9a>
    35ea:	b0 cf       	rjmp	.-160    	; 0x354c <__addsf3+0x28>
    35ec:	93 95       	inc	r25
    35ee:	88 0f       	add	r24, r24
    35f0:	08 f0       	brcs	.+2      	; 0x35f4 <__addsf3x+0xa2>
    35f2:	99 27       	eor	r25, r25
    35f4:	ee 0f       	add	r30, r30
    35f6:	97 95       	ror	r25
    35f8:	87 95       	ror	r24
    35fa:	08 95       	ret

000035fc <__cmpsf2>:
    35fc:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <__fp_cmp>
    3600:	08 f4       	brcc	.+2      	; 0x3604 <__cmpsf2+0x8>
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	08 95       	ret

00003606 <__divsf3>:
    3606:	0e 94 17 1b 	call	0x362e	; 0x362e <__divsf3x>
    360a:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__fp_round>
    360e:	0e 94 15 1c 	call	0x382a	; 0x382a <__fp_pscB>
    3612:	58 f0       	brcs	.+22     	; 0x362a <__divsf3+0x24>
    3614:	0e 94 0e 1c 	call	0x381c	; 0x381c <__fp_pscA>
    3618:	40 f0       	brcs	.+16     	; 0x362a <__divsf3+0x24>
    361a:	29 f4       	brne	.+10     	; 0x3626 <__divsf3+0x20>
    361c:	5f 3f       	cpi	r21, 0xFF	; 255
    361e:	29 f0       	breq	.+10     	; 0x362a <__divsf3+0x24>
    3620:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__fp_inf>
    3624:	51 11       	cpse	r21, r1
    3626:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__fp_szero>
    362a:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_nan>

0000362e <__divsf3x>:
    362e:	0e 94 2d 1c 	call	0x385a	; 0x385a <__fp_split3>
    3632:	68 f3       	brcs	.-38     	; 0x360e <__divsf3+0x8>

00003634 <__divsf3_pse>:
    3634:	99 23       	and	r25, r25
    3636:	b1 f3       	breq	.-20     	; 0x3624 <__divsf3+0x1e>
    3638:	55 23       	and	r21, r21
    363a:	91 f3       	breq	.-28     	; 0x3620 <__divsf3+0x1a>
    363c:	95 1b       	sub	r25, r21
    363e:	55 0b       	sbc	r21, r21
    3640:	bb 27       	eor	r27, r27
    3642:	aa 27       	eor	r26, r26
    3644:	62 17       	cp	r22, r18
    3646:	73 07       	cpc	r23, r19
    3648:	84 07       	cpc	r24, r20
    364a:	38 f0       	brcs	.+14     	; 0x365a <__divsf3_pse+0x26>
    364c:	9f 5f       	subi	r25, 0xFF	; 255
    364e:	5f 4f       	sbci	r21, 0xFF	; 255
    3650:	22 0f       	add	r18, r18
    3652:	33 1f       	adc	r19, r19
    3654:	44 1f       	adc	r20, r20
    3656:	aa 1f       	adc	r26, r26
    3658:	a9 f3       	breq	.-22     	; 0x3644 <__divsf3_pse+0x10>
    365a:	35 d0       	rcall	.+106    	; 0x36c6 <__divsf3_pse+0x92>
    365c:	0e 2e       	mov	r0, r30
    365e:	3a f0       	brmi	.+14     	; 0x366e <__divsf3_pse+0x3a>
    3660:	e0 e8       	ldi	r30, 0x80	; 128
    3662:	32 d0       	rcall	.+100    	; 0x36c8 <__divsf3_pse+0x94>
    3664:	91 50       	subi	r25, 0x01	; 1
    3666:	50 40       	sbci	r21, 0x00	; 0
    3668:	e6 95       	lsr	r30
    366a:	00 1c       	adc	r0, r0
    366c:	ca f7       	brpl	.-14     	; 0x3660 <__divsf3_pse+0x2c>
    366e:	2b d0       	rcall	.+86     	; 0x36c6 <__divsf3_pse+0x92>
    3670:	fe 2f       	mov	r31, r30
    3672:	29 d0       	rcall	.+82     	; 0x36c6 <__divsf3_pse+0x92>
    3674:	66 0f       	add	r22, r22
    3676:	77 1f       	adc	r23, r23
    3678:	88 1f       	adc	r24, r24
    367a:	bb 1f       	adc	r27, r27
    367c:	26 17       	cp	r18, r22
    367e:	37 07       	cpc	r19, r23
    3680:	48 07       	cpc	r20, r24
    3682:	ab 07       	cpc	r26, r27
    3684:	b0 e8       	ldi	r27, 0x80	; 128
    3686:	09 f0       	breq	.+2      	; 0x368a <__divsf3_pse+0x56>
    3688:	bb 0b       	sbc	r27, r27
    368a:	80 2d       	mov	r24, r0
    368c:	bf 01       	movw	r22, r30
    368e:	ff 27       	eor	r31, r31
    3690:	93 58       	subi	r25, 0x83	; 131
    3692:	5f 4f       	sbci	r21, 0xFF	; 255
    3694:	3a f0       	brmi	.+14     	; 0x36a4 <__divsf3_pse+0x70>
    3696:	9e 3f       	cpi	r25, 0xFE	; 254
    3698:	51 05       	cpc	r21, r1
    369a:	78 f0       	brcs	.+30     	; 0x36ba <__divsf3_pse+0x86>
    369c:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__fp_inf>
    36a0:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__fp_szero>
    36a4:	5f 3f       	cpi	r21, 0xFF	; 255
    36a6:	e4 f3       	brlt	.-8      	; 0x36a0 <__divsf3_pse+0x6c>
    36a8:	98 3e       	cpi	r25, 0xE8	; 232
    36aa:	d4 f3       	brlt	.-12     	; 0x36a0 <__divsf3_pse+0x6c>
    36ac:	86 95       	lsr	r24
    36ae:	77 95       	ror	r23
    36b0:	67 95       	ror	r22
    36b2:	b7 95       	ror	r27
    36b4:	f7 95       	ror	r31
    36b6:	9f 5f       	subi	r25, 0xFF	; 255
    36b8:	c9 f7       	brne	.-14     	; 0x36ac <__divsf3_pse+0x78>
    36ba:	88 0f       	add	r24, r24
    36bc:	91 1d       	adc	r25, r1
    36be:	96 95       	lsr	r25
    36c0:	87 95       	ror	r24
    36c2:	97 f9       	bld	r25, 7
    36c4:	08 95       	ret
    36c6:	e1 e0       	ldi	r30, 0x01	; 1
    36c8:	66 0f       	add	r22, r22
    36ca:	77 1f       	adc	r23, r23
    36cc:	88 1f       	adc	r24, r24
    36ce:	bb 1f       	adc	r27, r27
    36d0:	62 17       	cp	r22, r18
    36d2:	73 07       	cpc	r23, r19
    36d4:	84 07       	cpc	r24, r20
    36d6:	ba 07       	cpc	r27, r26
    36d8:	20 f0       	brcs	.+8      	; 0x36e2 <__divsf3_pse+0xae>
    36da:	62 1b       	sub	r22, r18
    36dc:	73 0b       	sbc	r23, r19
    36de:	84 0b       	sbc	r24, r20
    36e0:	ba 0b       	sbc	r27, r26
    36e2:	ee 1f       	adc	r30, r30
    36e4:	88 f7       	brcc	.-30     	; 0x36c8 <__divsf3_pse+0x94>
    36e6:	e0 95       	com	r30
    36e8:	08 95       	ret

000036ea <__fixunssfsi>:
    36ea:	0e 94 35 1c 	call	0x386a	; 0x386a <__fp_splitA>
    36ee:	88 f0       	brcs	.+34     	; 0x3712 <__fixunssfsi+0x28>
    36f0:	9f 57       	subi	r25, 0x7F	; 127
    36f2:	98 f0       	brcs	.+38     	; 0x371a <__fixunssfsi+0x30>
    36f4:	b9 2f       	mov	r27, r25
    36f6:	99 27       	eor	r25, r25
    36f8:	b7 51       	subi	r27, 0x17	; 23
    36fa:	b0 f0       	brcs	.+44     	; 0x3728 <__fixunssfsi+0x3e>
    36fc:	e1 f0       	breq	.+56     	; 0x3736 <__fixunssfsi+0x4c>
    36fe:	66 0f       	add	r22, r22
    3700:	77 1f       	adc	r23, r23
    3702:	88 1f       	adc	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	1a f0       	brmi	.+6      	; 0x370e <__fixunssfsi+0x24>
    3708:	ba 95       	dec	r27
    370a:	c9 f7       	brne	.-14     	; 0x36fe <__fixunssfsi+0x14>
    370c:	14 c0       	rjmp	.+40     	; 0x3736 <__fixunssfsi+0x4c>
    370e:	b1 30       	cpi	r27, 0x01	; 1
    3710:	91 f0       	breq	.+36     	; 0x3736 <__fixunssfsi+0x4c>
    3712:	0e 94 4f 1c 	call	0x389e	; 0x389e <__fp_zero>
    3716:	b1 e0       	ldi	r27, 0x01	; 1
    3718:	08 95       	ret
    371a:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__fp_zero>
    371e:	67 2f       	mov	r22, r23
    3720:	78 2f       	mov	r23, r24
    3722:	88 27       	eor	r24, r24
    3724:	b8 5f       	subi	r27, 0xF8	; 248
    3726:	39 f0       	breq	.+14     	; 0x3736 <__fixunssfsi+0x4c>
    3728:	b9 3f       	cpi	r27, 0xF9	; 249
    372a:	cc f3       	brlt	.-14     	; 0x371e <__fixunssfsi+0x34>
    372c:	86 95       	lsr	r24
    372e:	77 95       	ror	r23
    3730:	67 95       	ror	r22
    3732:	b3 95       	inc	r27
    3734:	d9 f7       	brne	.-10     	; 0x372c <__fixunssfsi+0x42>
    3736:	3e f4       	brtc	.+14     	; 0x3746 <__fixunssfsi+0x5c>
    3738:	90 95       	com	r25
    373a:	80 95       	com	r24
    373c:	70 95       	com	r23
    373e:	61 95       	neg	r22
    3740:	7f 4f       	sbci	r23, 0xFF	; 255
    3742:	8f 4f       	sbci	r24, 0xFF	; 255
    3744:	9f 4f       	sbci	r25, 0xFF	; 255
    3746:	08 95       	ret

00003748 <__floatunsisf>:
    3748:	e8 94       	clt
    374a:	09 c0       	rjmp	.+18     	; 0x375e <__floatsisf+0x12>

0000374c <__floatsisf>:
    374c:	97 fb       	bst	r25, 7
    374e:	3e f4       	brtc	.+14     	; 0x375e <__floatsisf+0x12>
    3750:	90 95       	com	r25
    3752:	80 95       	com	r24
    3754:	70 95       	com	r23
    3756:	61 95       	neg	r22
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	8f 4f       	sbci	r24, 0xFF	; 255
    375c:	9f 4f       	sbci	r25, 0xFF	; 255
    375e:	99 23       	and	r25, r25
    3760:	a9 f0       	breq	.+42     	; 0x378c <__floatsisf+0x40>
    3762:	f9 2f       	mov	r31, r25
    3764:	96 e9       	ldi	r25, 0x96	; 150
    3766:	bb 27       	eor	r27, r27
    3768:	93 95       	inc	r25
    376a:	f6 95       	lsr	r31
    376c:	87 95       	ror	r24
    376e:	77 95       	ror	r23
    3770:	67 95       	ror	r22
    3772:	b7 95       	ror	r27
    3774:	f1 11       	cpse	r31, r1
    3776:	f8 cf       	rjmp	.-16     	; 0x3768 <__floatsisf+0x1c>
    3778:	fa f4       	brpl	.+62     	; 0x37b8 <__floatsisf+0x6c>
    377a:	bb 0f       	add	r27, r27
    377c:	11 f4       	brne	.+4      	; 0x3782 <__floatsisf+0x36>
    377e:	60 ff       	sbrs	r22, 0
    3780:	1b c0       	rjmp	.+54     	; 0x37b8 <__floatsisf+0x6c>
    3782:	6f 5f       	subi	r22, 0xFF	; 255
    3784:	7f 4f       	sbci	r23, 0xFF	; 255
    3786:	8f 4f       	sbci	r24, 0xFF	; 255
    3788:	9f 4f       	sbci	r25, 0xFF	; 255
    378a:	16 c0       	rjmp	.+44     	; 0x37b8 <__floatsisf+0x6c>
    378c:	88 23       	and	r24, r24
    378e:	11 f0       	breq	.+4      	; 0x3794 <__floatsisf+0x48>
    3790:	96 e9       	ldi	r25, 0x96	; 150
    3792:	11 c0       	rjmp	.+34     	; 0x37b6 <__floatsisf+0x6a>
    3794:	77 23       	and	r23, r23
    3796:	21 f0       	breq	.+8      	; 0x37a0 <__floatsisf+0x54>
    3798:	9e e8       	ldi	r25, 0x8E	; 142
    379a:	87 2f       	mov	r24, r23
    379c:	76 2f       	mov	r23, r22
    379e:	05 c0       	rjmp	.+10     	; 0x37aa <__floatsisf+0x5e>
    37a0:	66 23       	and	r22, r22
    37a2:	71 f0       	breq	.+28     	; 0x37c0 <__floatsisf+0x74>
    37a4:	96 e8       	ldi	r25, 0x86	; 134
    37a6:	86 2f       	mov	r24, r22
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	2a f0       	brmi	.+10     	; 0x37b8 <__floatsisf+0x6c>
    37ae:	9a 95       	dec	r25
    37b0:	66 0f       	add	r22, r22
    37b2:	77 1f       	adc	r23, r23
    37b4:	88 1f       	adc	r24, r24
    37b6:	da f7       	brpl	.-10     	; 0x37ae <__floatsisf+0x62>
    37b8:	88 0f       	add	r24, r24
    37ba:	96 95       	lsr	r25
    37bc:	87 95       	ror	r24
    37be:	97 f9       	bld	r25, 7
    37c0:	08 95       	ret

000037c2 <__fp_cmp>:
    37c2:	99 0f       	add	r25, r25
    37c4:	00 08       	sbc	r0, r0
    37c6:	55 0f       	add	r21, r21
    37c8:	aa 0b       	sbc	r26, r26
    37ca:	e0 e8       	ldi	r30, 0x80	; 128
    37cc:	fe ef       	ldi	r31, 0xFE	; 254
    37ce:	16 16       	cp	r1, r22
    37d0:	17 06       	cpc	r1, r23
    37d2:	e8 07       	cpc	r30, r24
    37d4:	f9 07       	cpc	r31, r25
    37d6:	c0 f0       	brcs	.+48     	; 0x3808 <__fp_cmp+0x46>
    37d8:	12 16       	cp	r1, r18
    37da:	13 06       	cpc	r1, r19
    37dc:	e4 07       	cpc	r30, r20
    37de:	f5 07       	cpc	r31, r21
    37e0:	98 f0       	brcs	.+38     	; 0x3808 <__fp_cmp+0x46>
    37e2:	62 1b       	sub	r22, r18
    37e4:	73 0b       	sbc	r23, r19
    37e6:	84 0b       	sbc	r24, r20
    37e8:	95 0b       	sbc	r25, r21
    37ea:	39 f4       	brne	.+14     	; 0x37fa <__fp_cmp+0x38>
    37ec:	0a 26       	eor	r0, r26
    37ee:	61 f0       	breq	.+24     	; 0x3808 <__fp_cmp+0x46>
    37f0:	23 2b       	or	r18, r19
    37f2:	24 2b       	or	r18, r20
    37f4:	25 2b       	or	r18, r21
    37f6:	21 f4       	brne	.+8      	; 0x3800 <__fp_cmp+0x3e>
    37f8:	08 95       	ret
    37fa:	0a 26       	eor	r0, r26
    37fc:	09 f4       	brne	.+2      	; 0x3800 <__fp_cmp+0x3e>
    37fe:	a1 40       	sbci	r26, 0x01	; 1
    3800:	a6 95       	lsr	r26
    3802:	8f ef       	ldi	r24, 0xFF	; 255
    3804:	81 1d       	adc	r24, r1
    3806:	81 1d       	adc	r24, r1
    3808:	08 95       	ret

0000380a <__fp_inf>:
    380a:	97 f9       	bld	r25, 7
    380c:	9f 67       	ori	r25, 0x7F	; 127
    380e:	80 e8       	ldi	r24, 0x80	; 128
    3810:	70 e0       	ldi	r23, 0x00	; 0
    3812:	60 e0       	ldi	r22, 0x00	; 0
    3814:	08 95       	ret

00003816 <__fp_nan>:
    3816:	9f ef       	ldi	r25, 0xFF	; 255
    3818:	80 ec       	ldi	r24, 0xC0	; 192
    381a:	08 95       	ret

0000381c <__fp_pscA>:
    381c:	00 24       	eor	r0, r0
    381e:	0a 94       	dec	r0
    3820:	16 16       	cp	r1, r22
    3822:	17 06       	cpc	r1, r23
    3824:	18 06       	cpc	r1, r24
    3826:	09 06       	cpc	r0, r25
    3828:	08 95       	ret

0000382a <__fp_pscB>:
    382a:	00 24       	eor	r0, r0
    382c:	0a 94       	dec	r0
    382e:	12 16       	cp	r1, r18
    3830:	13 06       	cpc	r1, r19
    3832:	14 06       	cpc	r1, r20
    3834:	05 06       	cpc	r0, r21
    3836:	08 95       	ret

00003838 <__fp_round>:
    3838:	09 2e       	mov	r0, r25
    383a:	03 94       	inc	r0
    383c:	00 0c       	add	r0, r0
    383e:	11 f4       	brne	.+4      	; 0x3844 <__fp_round+0xc>
    3840:	88 23       	and	r24, r24
    3842:	52 f0       	brmi	.+20     	; 0x3858 <__fp_round+0x20>
    3844:	bb 0f       	add	r27, r27
    3846:	40 f4       	brcc	.+16     	; 0x3858 <__fp_round+0x20>
    3848:	bf 2b       	or	r27, r31
    384a:	11 f4       	brne	.+4      	; 0x3850 <__fp_round+0x18>
    384c:	60 ff       	sbrs	r22, 0
    384e:	04 c0       	rjmp	.+8      	; 0x3858 <__fp_round+0x20>
    3850:	6f 5f       	subi	r22, 0xFF	; 255
    3852:	7f 4f       	sbci	r23, 0xFF	; 255
    3854:	8f 4f       	sbci	r24, 0xFF	; 255
    3856:	9f 4f       	sbci	r25, 0xFF	; 255
    3858:	08 95       	ret

0000385a <__fp_split3>:
    385a:	57 fd       	sbrc	r21, 7
    385c:	90 58       	subi	r25, 0x80	; 128
    385e:	44 0f       	add	r20, r20
    3860:	55 1f       	adc	r21, r21
    3862:	59 f0       	breq	.+22     	; 0x387a <__fp_splitA+0x10>
    3864:	5f 3f       	cpi	r21, 0xFF	; 255
    3866:	71 f0       	breq	.+28     	; 0x3884 <__fp_splitA+0x1a>
    3868:	47 95       	ror	r20

0000386a <__fp_splitA>:
    386a:	88 0f       	add	r24, r24
    386c:	97 fb       	bst	r25, 7
    386e:	99 1f       	adc	r25, r25
    3870:	61 f0       	breq	.+24     	; 0x388a <__fp_splitA+0x20>
    3872:	9f 3f       	cpi	r25, 0xFF	; 255
    3874:	79 f0       	breq	.+30     	; 0x3894 <__fp_splitA+0x2a>
    3876:	87 95       	ror	r24
    3878:	08 95       	ret
    387a:	12 16       	cp	r1, r18
    387c:	13 06       	cpc	r1, r19
    387e:	14 06       	cpc	r1, r20
    3880:	55 1f       	adc	r21, r21
    3882:	f2 cf       	rjmp	.-28     	; 0x3868 <__fp_split3+0xe>
    3884:	46 95       	lsr	r20
    3886:	f1 df       	rcall	.-30     	; 0x386a <__fp_splitA>
    3888:	08 c0       	rjmp	.+16     	; 0x389a <__fp_splitA+0x30>
    388a:	16 16       	cp	r1, r22
    388c:	17 06       	cpc	r1, r23
    388e:	18 06       	cpc	r1, r24
    3890:	99 1f       	adc	r25, r25
    3892:	f1 cf       	rjmp	.-30     	; 0x3876 <__fp_splitA+0xc>
    3894:	86 95       	lsr	r24
    3896:	71 05       	cpc	r23, r1
    3898:	61 05       	cpc	r22, r1
    389a:	08 94       	sec
    389c:	08 95       	ret

0000389e <__fp_zero>:
    389e:	e8 94       	clt

000038a0 <__fp_szero>:
    38a0:	bb 27       	eor	r27, r27
    38a2:	66 27       	eor	r22, r22
    38a4:	77 27       	eor	r23, r23
    38a6:	cb 01       	movw	r24, r22
    38a8:	97 f9       	bld	r25, 7
    38aa:	08 95       	ret

000038ac <__mulsf3>:
    38ac:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <__mulsf3x>
    38b0:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__fp_round>
    38b4:	0e 94 0e 1c 	call	0x381c	; 0x381c <__fp_pscA>
    38b8:	38 f0       	brcs	.+14     	; 0x38c8 <__mulsf3+0x1c>
    38ba:	0e 94 15 1c 	call	0x382a	; 0x382a <__fp_pscB>
    38be:	20 f0       	brcs	.+8      	; 0x38c8 <__mulsf3+0x1c>
    38c0:	95 23       	and	r25, r21
    38c2:	11 f0       	breq	.+4      	; 0x38c8 <__mulsf3+0x1c>
    38c4:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__fp_inf>
    38c8:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <__fp_nan>
    38cc:	11 24       	eor	r1, r1
    38ce:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__fp_szero>

000038d2 <__mulsf3x>:
    38d2:	0e 94 2d 1c 	call	0x385a	; 0x385a <__fp_split3>
    38d6:	70 f3       	brcs	.-36     	; 0x38b4 <__mulsf3+0x8>

000038d8 <__mulsf3_pse>:
    38d8:	95 9f       	mul	r25, r21
    38da:	c1 f3       	breq	.-16     	; 0x38cc <__mulsf3+0x20>
    38dc:	95 0f       	add	r25, r21
    38de:	50 e0       	ldi	r21, 0x00	; 0
    38e0:	55 1f       	adc	r21, r21
    38e2:	62 9f       	mul	r22, r18
    38e4:	f0 01       	movw	r30, r0
    38e6:	72 9f       	mul	r23, r18
    38e8:	bb 27       	eor	r27, r27
    38ea:	f0 0d       	add	r31, r0
    38ec:	b1 1d       	adc	r27, r1
    38ee:	63 9f       	mul	r22, r19
    38f0:	aa 27       	eor	r26, r26
    38f2:	f0 0d       	add	r31, r0
    38f4:	b1 1d       	adc	r27, r1
    38f6:	aa 1f       	adc	r26, r26
    38f8:	64 9f       	mul	r22, r20
    38fa:	66 27       	eor	r22, r22
    38fc:	b0 0d       	add	r27, r0
    38fe:	a1 1d       	adc	r26, r1
    3900:	66 1f       	adc	r22, r22
    3902:	82 9f       	mul	r24, r18
    3904:	22 27       	eor	r18, r18
    3906:	b0 0d       	add	r27, r0
    3908:	a1 1d       	adc	r26, r1
    390a:	62 1f       	adc	r22, r18
    390c:	73 9f       	mul	r23, r19
    390e:	b0 0d       	add	r27, r0
    3910:	a1 1d       	adc	r26, r1
    3912:	62 1f       	adc	r22, r18
    3914:	83 9f       	mul	r24, r19
    3916:	a0 0d       	add	r26, r0
    3918:	61 1d       	adc	r22, r1
    391a:	22 1f       	adc	r18, r18
    391c:	74 9f       	mul	r23, r20
    391e:	33 27       	eor	r19, r19
    3920:	a0 0d       	add	r26, r0
    3922:	61 1d       	adc	r22, r1
    3924:	23 1f       	adc	r18, r19
    3926:	84 9f       	mul	r24, r20
    3928:	60 0d       	add	r22, r0
    392a:	21 1d       	adc	r18, r1
    392c:	82 2f       	mov	r24, r18
    392e:	76 2f       	mov	r23, r22
    3930:	6a 2f       	mov	r22, r26
    3932:	11 24       	eor	r1, r1
    3934:	9f 57       	subi	r25, 0x7F	; 127
    3936:	50 40       	sbci	r21, 0x00	; 0
    3938:	9a f0       	brmi	.+38     	; 0x3960 <__mulsf3_pse+0x88>
    393a:	f1 f0       	breq	.+60     	; 0x3978 <__mulsf3_pse+0xa0>
    393c:	88 23       	and	r24, r24
    393e:	4a f0       	brmi	.+18     	; 0x3952 <__mulsf3_pse+0x7a>
    3940:	ee 0f       	add	r30, r30
    3942:	ff 1f       	adc	r31, r31
    3944:	bb 1f       	adc	r27, r27
    3946:	66 1f       	adc	r22, r22
    3948:	77 1f       	adc	r23, r23
    394a:	88 1f       	adc	r24, r24
    394c:	91 50       	subi	r25, 0x01	; 1
    394e:	50 40       	sbci	r21, 0x00	; 0
    3950:	a9 f7       	brne	.-22     	; 0x393c <__mulsf3_pse+0x64>
    3952:	9e 3f       	cpi	r25, 0xFE	; 254
    3954:	51 05       	cpc	r21, r1
    3956:	80 f0       	brcs	.+32     	; 0x3978 <__mulsf3_pse+0xa0>
    3958:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__fp_inf>
    395c:	0c 94 50 1c 	jmp	0x38a0	; 0x38a0 <__fp_szero>
    3960:	5f 3f       	cpi	r21, 0xFF	; 255
    3962:	e4 f3       	brlt	.-8      	; 0x395c <__mulsf3_pse+0x84>
    3964:	98 3e       	cpi	r25, 0xE8	; 232
    3966:	d4 f3       	brlt	.-12     	; 0x395c <__mulsf3_pse+0x84>
    3968:	86 95       	lsr	r24
    396a:	77 95       	ror	r23
    396c:	67 95       	ror	r22
    396e:	b7 95       	ror	r27
    3970:	f7 95       	ror	r31
    3972:	e7 95       	ror	r30
    3974:	9f 5f       	subi	r25, 0xFF	; 255
    3976:	c1 f7       	brne	.-16     	; 0x3968 <__mulsf3_pse+0x90>
    3978:	fe 2b       	or	r31, r30
    397a:	88 0f       	add	r24, r24
    397c:	91 1d       	adc	r25, r1
    397e:	96 95       	lsr	r25
    3980:	87 95       	ror	r24
    3982:	97 f9       	bld	r25, 7
    3984:	08 95       	ret

00003986 <__udivmodsi4>:
    3986:	a1 e2       	ldi	r26, 0x21	; 33
    3988:	1a 2e       	mov	r1, r26
    398a:	aa 1b       	sub	r26, r26
    398c:	bb 1b       	sub	r27, r27
    398e:	fd 01       	movw	r30, r26
    3990:	0d c0       	rjmp	.+26     	; 0x39ac <__udivmodsi4_ep>

00003992 <__udivmodsi4_loop>:
    3992:	aa 1f       	adc	r26, r26
    3994:	bb 1f       	adc	r27, r27
    3996:	ee 1f       	adc	r30, r30
    3998:	ff 1f       	adc	r31, r31
    399a:	a2 17       	cp	r26, r18
    399c:	b3 07       	cpc	r27, r19
    399e:	e4 07       	cpc	r30, r20
    39a0:	f5 07       	cpc	r31, r21
    39a2:	20 f0       	brcs	.+8      	; 0x39ac <__udivmodsi4_ep>
    39a4:	a2 1b       	sub	r26, r18
    39a6:	b3 0b       	sbc	r27, r19
    39a8:	e4 0b       	sbc	r30, r20
    39aa:	f5 0b       	sbc	r31, r21

000039ac <__udivmodsi4_ep>:
    39ac:	66 1f       	adc	r22, r22
    39ae:	77 1f       	adc	r23, r23
    39b0:	88 1f       	adc	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	1a 94       	dec	r1
    39b6:	69 f7       	brne	.-38     	; 0x3992 <__udivmodsi4_loop>
    39b8:	60 95       	com	r22
    39ba:	70 95       	com	r23
    39bc:	80 95       	com	r24
    39be:	90 95       	com	r25
    39c0:	9b 01       	movw	r18, r22
    39c2:	ac 01       	movw	r20, r24
    39c4:	bd 01       	movw	r22, r26
    39c6:	cf 01       	movw	r24, r30
    39c8:	08 95       	ret

000039ca <sprintf>:
    39ca:	ae e0       	ldi	r26, 0x0E	; 14
    39cc:	b0 e0       	ldi	r27, 0x00	; 0
    39ce:	eb ee       	ldi	r30, 0xEB	; 235
    39d0:	fc e1       	ldi	r31, 0x1C	; 28
    39d2:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <__prologue_saves__+0x1c>
    39d6:	0d 89       	ldd	r16, Y+21	; 0x15
    39d8:	1e 89       	ldd	r17, Y+22	; 0x16
    39da:	86 e0       	ldi	r24, 0x06	; 6
    39dc:	8c 83       	std	Y+4, r24	; 0x04
    39de:	1a 83       	std	Y+2, r17	; 0x02
    39e0:	09 83       	std	Y+1, r16	; 0x01
    39e2:	8f ef       	ldi	r24, 0xFF	; 255
    39e4:	9f e7       	ldi	r25, 0x7F	; 127
    39e6:	9e 83       	std	Y+6, r25	; 0x06
    39e8:	8d 83       	std	Y+5, r24	; 0x05
    39ea:	ae 01       	movw	r20, r28
    39ec:	47 5e       	subi	r20, 0xE7	; 231
    39ee:	5f 4f       	sbci	r21, 0xFF	; 255
    39f0:	6f 89       	ldd	r22, Y+23	; 0x17
    39f2:	78 8d       	ldd	r23, Y+24	; 0x18
    39f4:	ce 01       	movw	r24, r28
    39f6:	01 96       	adiw	r24, 0x01	; 1
    39f8:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <vfprintf>
    39fc:	ef 81       	ldd	r30, Y+7	; 0x07
    39fe:	f8 85       	ldd	r31, Y+8	; 0x08
    3a00:	e0 0f       	add	r30, r16
    3a02:	f1 1f       	adc	r31, r17
    3a04:	10 82       	st	Z, r1
    3a06:	2e 96       	adiw	r28, 0x0e	; 14
    3a08:	e4 e0       	ldi	r30, 0x04	; 4
    3a0a:	0c 94 c2 1f 	jmp	0x3f84	; 0x3f84 <__epilogue_restores__+0x1c>

00003a0e <vfprintf>:
    3a0e:	ab e0       	ldi	r26, 0x0B	; 11
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	ed e0       	ldi	r30, 0x0D	; 13
    3a14:	fd e1       	ldi	r31, 0x1D	; 29
    3a16:	0c 94 98 1f 	jmp	0x3f30	; 0x3f30 <__prologue_saves__>
    3a1a:	6c 01       	movw	r12, r24
    3a1c:	7b 01       	movw	r14, r22
    3a1e:	8a 01       	movw	r16, r20
    3a20:	fc 01       	movw	r30, r24
    3a22:	17 82       	std	Z+7, r1	; 0x07
    3a24:	16 82       	std	Z+6, r1	; 0x06
    3a26:	83 81       	ldd	r24, Z+3	; 0x03
    3a28:	81 ff       	sbrs	r24, 1
    3a2a:	cc c1       	rjmp	.+920    	; 0x3dc4 <vfprintf+0x3b6>
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	01 96       	adiw	r24, 0x01	; 1
    3a30:	3c 01       	movw	r6, r24
    3a32:	f6 01       	movw	r30, r12
    3a34:	93 81       	ldd	r25, Z+3	; 0x03
    3a36:	f7 01       	movw	r30, r14
    3a38:	93 fd       	sbrc	r25, 3
    3a3a:	85 91       	lpm	r24, Z+
    3a3c:	93 ff       	sbrs	r25, 3
    3a3e:	81 91       	ld	r24, Z+
    3a40:	7f 01       	movw	r14, r30
    3a42:	88 23       	and	r24, r24
    3a44:	09 f4       	brne	.+2      	; 0x3a48 <vfprintf+0x3a>
    3a46:	ba c1       	rjmp	.+884    	; 0x3dbc <vfprintf+0x3ae>
    3a48:	85 32       	cpi	r24, 0x25	; 37
    3a4a:	39 f4       	brne	.+14     	; 0x3a5a <vfprintf+0x4c>
    3a4c:	93 fd       	sbrc	r25, 3
    3a4e:	85 91       	lpm	r24, Z+
    3a50:	93 ff       	sbrs	r25, 3
    3a52:	81 91       	ld	r24, Z+
    3a54:	7f 01       	movw	r14, r30
    3a56:	85 32       	cpi	r24, 0x25	; 37
    3a58:	29 f4       	brne	.+10     	; 0x3a64 <vfprintf+0x56>
    3a5a:	b6 01       	movw	r22, r12
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3a62:	e7 cf       	rjmp	.-50     	; 0x3a32 <vfprintf+0x24>
    3a64:	91 2c       	mov	r9, r1
    3a66:	21 2c       	mov	r2, r1
    3a68:	31 2c       	mov	r3, r1
    3a6a:	ff e1       	ldi	r31, 0x1F	; 31
    3a6c:	f3 15       	cp	r31, r3
    3a6e:	d8 f0       	brcs	.+54     	; 0x3aa6 <vfprintf+0x98>
    3a70:	8b 32       	cpi	r24, 0x2B	; 43
    3a72:	79 f0       	breq	.+30     	; 0x3a92 <vfprintf+0x84>
    3a74:	38 f4       	brcc	.+14     	; 0x3a84 <vfprintf+0x76>
    3a76:	80 32       	cpi	r24, 0x20	; 32
    3a78:	79 f0       	breq	.+30     	; 0x3a98 <vfprintf+0x8a>
    3a7a:	83 32       	cpi	r24, 0x23	; 35
    3a7c:	a1 f4       	brne	.+40     	; 0x3aa6 <vfprintf+0x98>
    3a7e:	23 2d       	mov	r18, r3
    3a80:	20 61       	ori	r18, 0x10	; 16
    3a82:	1d c0       	rjmp	.+58     	; 0x3abe <vfprintf+0xb0>
    3a84:	8d 32       	cpi	r24, 0x2D	; 45
    3a86:	61 f0       	breq	.+24     	; 0x3aa0 <vfprintf+0x92>
    3a88:	80 33       	cpi	r24, 0x30	; 48
    3a8a:	69 f4       	brne	.+26     	; 0x3aa6 <vfprintf+0x98>
    3a8c:	23 2d       	mov	r18, r3
    3a8e:	21 60       	ori	r18, 0x01	; 1
    3a90:	16 c0       	rjmp	.+44     	; 0x3abe <vfprintf+0xb0>
    3a92:	83 2d       	mov	r24, r3
    3a94:	82 60       	ori	r24, 0x02	; 2
    3a96:	38 2e       	mov	r3, r24
    3a98:	e3 2d       	mov	r30, r3
    3a9a:	e4 60       	ori	r30, 0x04	; 4
    3a9c:	3e 2e       	mov	r3, r30
    3a9e:	2a c0       	rjmp	.+84     	; 0x3af4 <vfprintf+0xe6>
    3aa0:	f3 2d       	mov	r31, r3
    3aa2:	f8 60       	ori	r31, 0x08	; 8
    3aa4:	1d c0       	rjmp	.+58     	; 0x3ae0 <vfprintf+0xd2>
    3aa6:	37 fc       	sbrc	r3, 7
    3aa8:	2d c0       	rjmp	.+90     	; 0x3b04 <vfprintf+0xf6>
    3aaa:	20 ed       	ldi	r18, 0xD0	; 208
    3aac:	28 0f       	add	r18, r24
    3aae:	2a 30       	cpi	r18, 0x0A	; 10
    3ab0:	40 f0       	brcs	.+16     	; 0x3ac2 <vfprintf+0xb4>
    3ab2:	8e 32       	cpi	r24, 0x2E	; 46
    3ab4:	b9 f4       	brne	.+46     	; 0x3ae4 <vfprintf+0xd6>
    3ab6:	36 fc       	sbrc	r3, 6
    3ab8:	81 c1       	rjmp	.+770    	; 0x3dbc <vfprintf+0x3ae>
    3aba:	23 2d       	mov	r18, r3
    3abc:	20 64       	ori	r18, 0x40	; 64
    3abe:	32 2e       	mov	r3, r18
    3ac0:	19 c0       	rjmp	.+50     	; 0x3af4 <vfprintf+0xe6>
    3ac2:	36 fe       	sbrs	r3, 6
    3ac4:	06 c0       	rjmp	.+12     	; 0x3ad2 <vfprintf+0xc4>
    3ac6:	8a e0       	ldi	r24, 0x0A	; 10
    3ac8:	98 9e       	mul	r9, r24
    3aca:	20 0d       	add	r18, r0
    3acc:	11 24       	eor	r1, r1
    3ace:	92 2e       	mov	r9, r18
    3ad0:	11 c0       	rjmp	.+34     	; 0x3af4 <vfprintf+0xe6>
    3ad2:	ea e0       	ldi	r30, 0x0A	; 10
    3ad4:	2e 9e       	mul	r2, r30
    3ad6:	20 0d       	add	r18, r0
    3ad8:	11 24       	eor	r1, r1
    3ada:	22 2e       	mov	r2, r18
    3adc:	f3 2d       	mov	r31, r3
    3ade:	f0 62       	ori	r31, 0x20	; 32
    3ae0:	3f 2e       	mov	r3, r31
    3ae2:	08 c0       	rjmp	.+16     	; 0x3af4 <vfprintf+0xe6>
    3ae4:	8c 36       	cpi	r24, 0x6C	; 108
    3ae6:	21 f4       	brne	.+8      	; 0x3af0 <vfprintf+0xe2>
    3ae8:	83 2d       	mov	r24, r3
    3aea:	80 68       	ori	r24, 0x80	; 128
    3aec:	38 2e       	mov	r3, r24
    3aee:	02 c0       	rjmp	.+4      	; 0x3af4 <vfprintf+0xe6>
    3af0:	88 36       	cpi	r24, 0x68	; 104
    3af2:	41 f4       	brne	.+16     	; 0x3b04 <vfprintf+0xf6>
    3af4:	f7 01       	movw	r30, r14
    3af6:	93 fd       	sbrc	r25, 3
    3af8:	85 91       	lpm	r24, Z+
    3afa:	93 ff       	sbrs	r25, 3
    3afc:	81 91       	ld	r24, Z+
    3afe:	7f 01       	movw	r14, r30
    3b00:	81 11       	cpse	r24, r1
    3b02:	b3 cf       	rjmp	.-154    	; 0x3a6a <vfprintf+0x5c>
    3b04:	98 2f       	mov	r25, r24
    3b06:	9f 7d       	andi	r25, 0xDF	; 223
    3b08:	95 54       	subi	r25, 0x45	; 69
    3b0a:	93 30       	cpi	r25, 0x03	; 3
    3b0c:	28 f4       	brcc	.+10     	; 0x3b18 <vfprintf+0x10a>
    3b0e:	0c 5f       	subi	r16, 0xFC	; 252
    3b10:	1f 4f       	sbci	r17, 0xFF	; 255
    3b12:	9f e3       	ldi	r25, 0x3F	; 63
    3b14:	99 83       	std	Y+1, r25	; 0x01
    3b16:	0d c0       	rjmp	.+26     	; 0x3b32 <vfprintf+0x124>
    3b18:	83 36       	cpi	r24, 0x63	; 99
    3b1a:	31 f0       	breq	.+12     	; 0x3b28 <vfprintf+0x11a>
    3b1c:	83 37       	cpi	r24, 0x73	; 115
    3b1e:	71 f0       	breq	.+28     	; 0x3b3c <vfprintf+0x12e>
    3b20:	83 35       	cpi	r24, 0x53	; 83
    3b22:	09 f0       	breq	.+2      	; 0x3b26 <vfprintf+0x118>
    3b24:	59 c0       	rjmp	.+178    	; 0x3bd8 <vfprintf+0x1ca>
    3b26:	21 c0       	rjmp	.+66     	; 0x3b6a <vfprintf+0x15c>
    3b28:	f8 01       	movw	r30, r16
    3b2a:	80 81       	ld	r24, Z
    3b2c:	89 83       	std	Y+1, r24	; 0x01
    3b2e:	0e 5f       	subi	r16, 0xFE	; 254
    3b30:	1f 4f       	sbci	r17, 0xFF	; 255
    3b32:	88 24       	eor	r8, r8
    3b34:	83 94       	inc	r8
    3b36:	91 2c       	mov	r9, r1
    3b38:	53 01       	movw	r10, r6
    3b3a:	13 c0       	rjmp	.+38     	; 0x3b62 <vfprintf+0x154>
    3b3c:	28 01       	movw	r4, r16
    3b3e:	f2 e0       	ldi	r31, 0x02	; 2
    3b40:	4f 0e       	add	r4, r31
    3b42:	51 1c       	adc	r5, r1
    3b44:	f8 01       	movw	r30, r16
    3b46:	a0 80       	ld	r10, Z
    3b48:	b1 80       	ldd	r11, Z+1	; 0x01
    3b4a:	36 fe       	sbrs	r3, 6
    3b4c:	03 c0       	rjmp	.+6      	; 0x3b54 <vfprintf+0x146>
    3b4e:	69 2d       	mov	r22, r9
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	02 c0       	rjmp	.+4      	; 0x3b58 <vfprintf+0x14a>
    3b54:	6f ef       	ldi	r22, 0xFF	; 255
    3b56:	7f ef       	ldi	r23, 0xFF	; 255
    3b58:	c5 01       	movw	r24, r10
    3b5a:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <strnlen>
    3b5e:	4c 01       	movw	r8, r24
    3b60:	82 01       	movw	r16, r4
    3b62:	f3 2d       	mov	r31, r3
    3b64:	ff 77       	andi	r31, 0x7F	; 127
    3b66:	3f 2e       	mov	r3, r31
    3b68:	16 c0       	rjmp	.+44     	; 0x3b96 <vfprintf+0x188>
    3b6a:	28 01       	movw	r4, r16
    3b6c:	22 e0       	ldi	r18, 0x02	; 2
    3b6e:	42 0e       	add	r4, r18
    3b70:	51 1c       	adc	r5, r1
    3b72:	f8 01       	movw	r30, r16
    3b74:	a0 80       	ld	r10, Z
    3b76:	b1 80       	ldd	r11, Z+1	; 0x01
    3b78:	36 fe       	sbrs	r3, 6
    3b7a:	03 c0       	rjmp	.+6      	; 0x3b82 <vfprintf+0x174>
    3b7c:	69 2d       	mov	r22, r9
    3b7e:	70 e0       	ldi	r23, 0x00	; 0
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <vfprintf+0x178>
    3b82:	6f ef       	ldi	r22, 0xFF	; 255
    3b84:	7f ef       	ldi	r23, 0xFF	; 255
    3b86:	c5 01       	movw	r24, r10
    3b88:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <strnlen_P>
    3b8c:	4c 01       	movw	r8, r24
    3b8e:	f3 2d       	mov	r31, r3
    3b90:	f0 68       	ori	r31, 0x80	; 128
    3b92:	3f 2e       	mov	r3, r31
    3b94:	82 01       	movw	r16, r4
    3b96:	33 fc       	sbrc	r3, 3
    3b98:	1b c0       	rjmp	.+54     	; 0x3bd0 <vfprintf+0x1c2>
    3b9a:	82 2d       	mov	r24, r2
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	88 16       	cp	r8, r24
    3ba0:	99 06       	cpc	r9, r25
    3ba2:	b0 f4       	brcc	.+44     	; 0x3bd0 <vfprintf+0x1c2>
    3ba4:	b6 01       	movw	r22, r12
    3ba6:	80 e2       	ldi	r24, 0x20	; 32
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3bae:	2a 94       	dec	r2
    3bb0:	f4 cf       	rjmp	.-24     	; 0x3b9a <vfprintf+0x18c>
    3bb2:	f5 01       	movw	r30, r10
    3bb4:	37 fc       	sbrc	r3, 7
    3bb6:	85 91       	lpm	r24, Z+
    3bb8:	37 fe       	sbrs	r3, 7
    3bba:	81 91       	ld	r24, Z+
    3bbc:	5f 01       	movw	r10, r30
    3bbe:	b6 01       	movw	r22, r12
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3bc6:	21 10       	cpse	r2, r1
    3bc8:	2a 94       	dec	r2
    3bca:	21 e0       	ldi	r18, 0x01	; 1
    3bcc:	82 1a       	sub	r8, r18
    3bce:	91 08       	sbc	r9, r1
    3bd0:	81 14       	cp	r8, r1
    3bd2:	91 04       	cpc	r9, r1
    3bd4:	71 f7       	brne	.-36     	; 0x3bb2 <vfprintf+0x1a4>
    3bd6:	e8 c0       	rjmp	.+464    	; 0x3da8 <vfprintf+0x39a>
    3bd8:	84 36       	cpi	r24, 0x64	; 100
    3bda:	11 f0       	breq	.+4      	; 0x3be0 <vfprintf+0x1d2>
    3bdc:	89 36       	cpi	r24, 0x69	; 105
    3bde:	41 f5       	brne	.+80     	; 0x3c30 <vfprintf+0x222>
    3be0:	f8 01       	movw	r30, r16
    3be2:	37 fe       	sbrs	r3, 7
    3be4:	07 c0       	rjmp	.+14     	; 0x3bf4 <vfprintf+0x1e6>
    3be6:	60 81       	ld	r22, Z
    3be8:	71 81       	ldd	r23, Z+1	; 0x01
    3bea:	82 81       	ldd	r24, Z+2	; 0x02
    3bec:	93 81       	ldd	r25, Z+3	; 0x03
    3bee:	0c 5f       	subi	r16, 0xFC	; 252
    3bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf2:	08 c0       	rjmp	.+16     	; 0x3c04 <vfprintf+0x1f6>
    3bf4:	60 81       	ld	r22, Z
    3bf6:	71 81       	ldd	r23, Z+1	; 0x01
    3bf8:	07 2e       	mov	r0, r23
    3bfa:	00 0c       	add	r0, r0
    3bfc:	88 0b       	sbc	r24, r24
    3bfe:	99 0b       	sbc	r25, r25
    3c00:	0e 5f       	subi	r16, 0xFE	; 254
    3c02:	1f 4f       	sbci	r17, 0xFF	; 255
    3c04:	f3 2d       	mov	r31, r3
    3c06:	ff 76       	andi	r31, 0x6F	; 111
    3c08:	3f 2e       	mov	r3, r31
    3c0a:	97 ff       	sbrs	r25, 7
    3c0c:	09 c0       	rjmp	.+18     	; 0x3c20 <vfprintf+0x212>
    3c0e:	90 95       	com	r25
    3c10:	80 95       	com	r24
    3c12:	70 95       	com	r23
    3c14:	61 95       	neg	r22
    3c16:	7f 4f       	sbci	r23, 0xFF	; 255
    3c18:	8f 4f       	sbci	r24, 0xFF	; 255
    3c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1c:	f0 68       	ori	r31, 0x80	; 128
    3c1e:	3f 2e       	mov	r3, r31
    3c20:	2a e0       	ldi	r18, 0x0A	; 10
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	a3 01       	movw	r20, r6
    3c26:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__ultoa_invert>
    3c2a:	88 2e       	mov	r8, r24
    3c2c:	86 18       	sub	r8, r6
    3c2e:	45 c0       	rjmp	.+138    	; 0x3cba <vfprintf+0x2ac>
    3c30:	85 37       	cpi	r24, 0x75	; 117
    3c32:	31 f4       	brne	.+12     	; 0x3c40 <vfprintf+0x232>
    3c34:	23 2d       	mov	r18, r3
    3c36:	2f 7e       	andi	r18, 0xEF	; 239
    3c38:	b2 2e       	mov	r11, r18
    3c3a:	2a e0       	ldi	r18, 0x0A	; 10
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	25 c0       	rjmp	.+74     	; 0x3c8a <vfprintf+0x27c>
    3c40:	93 2d       	mov	r25, r3
    3c42:	99 7f       	andi	r25, 0xF9	; 249
    3c44:	b9 2e       	mov	r11, r25
    3c46:	8f 36       	cpi	r24, 0x6F	; 111
    3c48:	c1 f0       	breq	.+48     	; 0x3c7a <vfprintf+0x26c>
    3c4a:	18 f4       	brcc	.+6      	; 0x3c52 <vfprintf+0x244>
    3c4c:	88 35       	cpi	r24, 0x58	; 88
    3c4e:	79 f0       	breq	.+30     	; 0x3c6e <vfprintf+0x260>
    3c50:	b5 c0       	rjmp	.+362    	; 0x3dbc <vfprintf+0x3ae>
    3c52:	80 37       	cpi	r24, 0x70	; 112
    3c54:	19 f0       	breq	.+6      	; 0x3c5c <vfprintf+0x24e>
    3c56:	88 37       	cpi	r24, 0x78	; 120
    3c58:	21 f0       	breq	.+8      	; 0x3c62 <vfprintf+0x254>
    3c5a:	b0 c0       	rjmp	.+352    	; 0x3dbc <vfprintf+0x3ae>
    3c5c:	e9 2f       	mov	r30, r25
    3c5e:	e0 61       	ori	r30, 0x10	; 16
    3c60:	be 2e       	mov	r11, r30
    3c62:	b4 fe       	sbrs	r11, 4
    3c64:	0d c0       	rjmp	.+26     	; 0x3c80 <vfprintf+0x272>
    3c66:	fb 2d       	mov	r31, r11
    3c68:	f4 60       	ori	r31, 0x04	; 4
    3c6a:	bf 2e       	mov	r11, r31
    3c6c:	09 c0       	rjmp	.+18     	; 0x3c80 <vfprintf+0x272>
    3c6e:	34 fe       	sbrs	r3, 4
    3c70:	0a c0       	rjmp	.+20     	; 0x3c86 <vfprintf+0x278>
    3c72:	29 2f       	mov	r18, r25
    3c74:	26 60       	ori	r18, 0x06	; 6
    3c76:	b2 2e       	mov	r11, r18
    3c78:	06 c0       	rjmp	.+12     	; 0x3c86 <vfprintf+0x278>
    3c7a:	28 e0       	ldi	r18, 0x08	; 8
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	05 c0       	rjmp	.+10     	; 0x3c8a <vfprintf+0x27c>
    3c80:	20 e1       	ldi	r18, 0x10	; 16
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <vfprintf+0x27c>
    3c86:	20 e1       	ldi	r18, 0x10	; 16
    3c88:	32 e0       	ldi	r19, 0x02	; 2
    3c8a:	f8 01       	movw	r30, r16
    3c8c:	b7 fe       	sbrs	r11, 7
    3c8e:	07 c0       	rjmp	.+14     	; 0x3c9e <vfprintf+0x290>
    3c90:	60 81       	ld	r22, Z
    3c92:	71 81       	ldd	r23, Z+1	; 0x01
    3c94:	82 81       	ldd	r24, Z+2	; 0x02
    3c96:	93 81       	ldd	r25, Z+3	; 0x03
    3c98:	0c 5f       	subi	r16, 0xFC	; 252
    3c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9c:	06 c0       	rjmp	.+12     	; 0x3caa <vfprintf+0x29c>
    3c9e:	60 81       	ld	r22, Z
    3ca0:	71 81       	ldd	r23, Z+1	; 0x01
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	0e 5f       	subi	r16, 0xFE	; 254
    3ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    3caa:	a3 01       	movw	r20, r6
    3cac:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__ultoa_invert>
    3cb0:	88 2e       	mov	r8, r24
    3cb2:	86 18       	sub	r8, r6
    3cb4:	fb 2d       	mov	r31, r11
    3cb6:	ff 77       	andi	r31, 0x7F	; 127
    3cb8:	3f 2e       	mov	r3, r31
    3cba:	36 fe       	sbrs	r3, 6
    3cbc:	0d c0       	rjmp	.+26     	; 0x3cd8 <vfprintf+0x2ca>
    3cbe:	23 2d       	mov	r18, r3
    3cc0:	2e 7f       	andi	r18, 0xFE	; 254
    3cc2:	a2 2e       	mov	r10, r18
    3cc4:	89 14       	cp	r8, r9
    3cc6:	58 f4       	brcc	.+22     	; 0x3cde <vfprintf+0x2d0>
    3cc8:	34 fe       	sbrs	r3, 4
    3cca:	0b c0       	rjmp	.+22     	; 0x3ce2 <vfprintf+0x2d4>
    3ccc:	32 fc       	sbrc	r3, 2
    3cce:	09 c0       	rjmp	.+18     	; 0x3ce2 <vfprintf+0x2d4>
    3cd0:	83 2d       	mov	r24, r3
    3cd2:	8e 7e       	andi	r24, 0xEE	; 238
    3cd4:	a8 2e       	mov	r10, r24
    3cd6:	05 c0       	rjmp	.+10     	; 0x3ce2 <vfprintf+0x2d4>
    3cd8:	b8 2c       	mov	r11, r8
    3cda:	a3 2c       	mov	r10, r3
    3cdc:	03 c0       	rjmp	.+6      	; 0x3ce4 <vfprintf+0x2d6>
    3cde:	b8 2c       	mov	r11, r8
    3ce0:	01 c0       	rjmp	.+2      	; 0x3ce4 <vfprintf+0x2d6>
    3ce2:	b9 2c       	mov	r11, r9
    3ce4:	a4 fe       	sbrs	r10, 4
    3ce6:	0f c0       	rjmp	.+30     	; 0x3d06 <vfprintf+0x2f8>
    3ce8:	fe 01       	movw	r30, r28
    3cea:	e8 0d       	add	r30, r8
    3cec:	f1 1d       	adc	r31, r1
    3cee:	80 81       	ld	r24, Z
    3cf0:	80 33       	cpi	r24, 0x30	; 48
    3cf2:	21 f4       	brne	.+8      	; 0x3cfc <vfprintf+0x2ee>
    3cf4:	9a 2d       	mov	r25, r10
    3cf6:	99 7e       	andi	r25, 0xE9	; 233
    3cf8:	a9 2e       	mov	r10, r25
    3cfa:	09 c0       	rjmp	.+18     	; 0x3d0e <vfprintf+0x300>
    3cfc:	a2 fe       	sbrs	r10, 2
    3cfe:	06 c0       	rjmp	.+12     	; 0x3d0c <vfprintf+0x2fe>
    3d00:	b3 94       	inc	r11
    3d02:	b3 94       	inc	r11
    3d04:	04 c0       	rjmp	.+8      	; 0x3d0e <vfprintf+0x300>
    3d06:	8a 2d       	mov	r24, r10
    3d08:	86 78       	andi	r24, 0x86	; 134
    3d0a:	09 f0       	breq	.+2      	; 0x3d0e <vfprintf+0x300>
    3d0c:	b3 94       	inc	r11
    3d0e:	a3 fc       	sbrc	r10, 3
    3d10:	11 c0       	rjmp	.+34     	; 0x3d34 <vfprintf+0x326>
    3d12:	a0 fe       	sbrs	r10, 0
    3d14:	06 c0       	rjmp	.+12     	; 0x3d22 <vfprintf+0x314>
    3d16:	b2 14       	cp	r11, r2
    3d18:	88 f4       	brcc	.+34     	; 0x3d3c <vfprintf+0x32e>
    3d1a:	28 0c       	add	r2, r8
    3d1c:	92 2c       	mov	r9, r2
    3d1e:	9b 18       	sub	r9, r11
    3d20:	0e c0       	rjmp	.+28     	; 0x3d3e <vfprintf+0x330>
    3d22:	b2 14       	cp	r11, r2
    3d24:	60 f4       	brcc	.+24     	; 0x3d3e <vfprintf+0x330>
    3d26:	b6 01       	movw	r22, r12
    3d28:	80 e2       	ldi	r24, 0x20	; 32
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3d30:	b3 94       	inc	r11
    3d32:	f7 cf       	rjmp	.-18     	; 0x3d22 <vfprintf+0x314>
    3d34:	b2 14       	cp	r11, r2
    3d36:	18 f4       	brcc	.+6      	; 0x3d3e <vfprintf+0x330>
    3d38:	2b 18       	sub	r2, r11
    3d3a:	02 c0       	rjmp	.+4      	; 0x3d40 <vfprintf+0x332>
    3d3c:	98 2c       	mov	r9, r8
    3d3e:	21 2c       	mov	r2, r1
    3d40:	a4 fe       	sbrs	r10, 4
    3d42:	10 c0       	rjmp	.+32     	; 0x3d64 <vfprintf+0x356>
    3d44:	b6 01       	movw	r22, r12
    3d46:	80 e3       	ldi	r24, 0x30	; 48
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3d4e:	a2 fe       	sbrs	r10, 2
    3d50:	17 c0       	rjmp	.+46     	; 0x3d80 <vfprintf+0x372>
    3d52:	a1 fc       	sbrc	r10, 1
    3d54:	03 c0       	rjmp	.+6      	; 0x3d5c <vfprintf+0x34e>
    3d56:	88 e7       	ldi	r24, 0x78	; 120
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <vfprintf+0x352>
    3d5c:	88 e5       	ldi	r24, 0x58	; 88
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	b6 01       	movw	r22, r12
    3d62:	0c c0       	rjmp	.+24     	; 0x3d7c <vfprintf+0x36e>
    3d64:	8a 2d       	mov	r24, r10
    3d66:	86 78       	andi	r24, 0x86	; 134
    3d68:	59 f0       	breq	.+22     	; 0x3d80 <vfprintf+0x372>
    3d6a:	a1 fe       	sbrs	r10, 1
    3d6c:	02 c0       	rjmp	.+4      	; 0x3d72 <vfprintf+0x364>
    3d6e:	8b e2       	ldi	r24, 0x2B	; 43
    3d70:	01 c0       	rjmp	.+2      	; 0x3d74 <vfprintf+0x366>
    3d72:	80 e2       	ldi	r24, 0x20	; 32
    3d74:	a7 fc       	sbrc	r10, 7
    3d76:	8d e2       	ldi	r24, 0x2D	; 45
    3d78:	b6 01       	movw	r22, r12
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3d80:	89 14       	cp	r8, r9
    3d82:	38 f4       	brcc	.+14     	; 0x3d92 <vfprintf+0x384>
    3d84:	b6 01       	movw	r22, r12
    3d86:	80 e3       	ldi	r24, 0x30	; 48
    3d88:	90 e0       	ldi	r25, 0x00	; 0
    3d8a:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3d8e:	9a 94       	dec	r9
    3d90:	f7 cf       	rjmp	.-18     	; 0x3d80 <vfprintf+0x372>
    3d92:	8a 94       	dec	r8
    3d94:	f3 01       	movw	r30, r6
    3d96:	e8 0d       	add	r30, r8
    3d98:	f1 1d       	adc	r31, r1
    3d9a:	80 81       	ld	r24, Z
    3d9c:	b6 01       	movw	r22, r12
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3da4:	81 10       	cpse	r8, r1
    3da6:	f5 cf       	rjmp	.-22     	; 0x3d92 <vfprintf+0x384>
    3da8:	22 20       	and	r2, r2
    3daa:	09 f4       	brne	.+2      	; 0x3dae <vfprintf+0x3a0>
    3dac:	42 ce       	rjmp	.-892    	; 0x3a32 <vfprintf+0x24>
    3dae:	b6 01       	movw	r22, r12
    3db0:	80 e2       	ldi	r24, 0x20	; 32
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <fputc>
    3db8:	2a 94       	dec	r2
    3dba:	f6 cf       	rjmp	.-20     	; 0x3da8 <vfprintf+0x39a>
    3dbc:	f6 01       	movw	r30, r12
    3dbe:	86 81       	ldd	r24, Z+6	; 0x06
    3dc0:	97 81       	ldd	r25, Z+7	; 0x07
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <vfprintf+0x3ba>
    3dc4:	8f ef       	ldi	r24, 0xFF	; 255
    3dc6:	9f ef       	ldi	r25, 0xFF	; 255
    3dc8:	2b 96       	adiw	r28, 0x0b	; 11
    3dca:	e2 e1       	ldi	r30, 0x12	; 18
    3dcc:	0c 94 b4 1f 	jmp	0x3f68	; 0x3f68 <__epilogue_restores__>

00003dd0 <strnlen_P>:
    3dd0:	fc 01       	movw	r30, r24
    3dd2:	05 90       	lpm	r0, Z+
    3dd4:	61 50       	subi	r22, 0x01	; 1
    3dd6:	70 40       	sbci	r23, 0x00	; 0
    3dd8:	01 10       	cpse	r0, r1
    3dda:	d8 f7       	brcc	.-10     	; 0x3dd2 <strnlen_P+0x2>
    3ddc:	80 95       	com	r24
    3dde:	90 95       	com	r25
    3de0:	8e 0f       	add	r24, r30
    3de2:	9f 1f       	adc	r25, r31
    3de4:	08 95       	ret

00003de6 <strnlen>:
    3de6:	fc 01       	movw	r30, r24
    3de8:	61 50       	subi	r22, 0x01	; 1
    3dea:	70 40       	sbci	r23, 0x00	; 0
    3dec:	01 90       	ld	r0, Z+
    3dee:	01 10       	cpse	r0, r1
    3df0:	d8 f7       	brcc	.-10     	; 0x3de8 <strnlen+0x2>
    3df2:	80 95       	com	r24
    3df4:	90 95       	com	r25
    3df6:	8e 0f       	add	r24, r30
    3df8:	9f 1f       	adc	r25, r31
    3dfa:	08 95       	ret

00003dfc <fputc>:
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	cf 93       	push	r28
    3e02:	df 93       	push	r29
    3e04:	fb 01       	movw	r30, r22
    3e06:	23 81       	ldd	r18, Z+3	; 0x03
    3e08:	21 fd       	sbrc	r18, 1
    3e0a:	03 c0       	rjmp	.+6      	; 0x3e12 <fputc+0x16>
    3e0c:	8f ef       	ldi	r24, 0xFF	; 255
    3e0e:	9f ef       	ldi	r25, 0xFF	; 255
    3e10:	2c c0       	rjmp	.+88     	; 0x3e6a <fputc+0x6e>
    3e12:	22 ff       	sbrs	r18, 2
    3e14:	16 c0       	rjmp	.+44     	; 0x3e42 <fputc+0x46>
    3e16:	46 81       	ldd	r20, Z+6	; 0x06
    3e18:	57 81       	ldd	r21, Z+7	; 0x07
    3e1a:	24 81       	ldd	r18, Z+4	; 0x04
    3e1c:	35 81       	ldd	r19, Z+5	; 0x05
    3e1e:	42 17       	cp	r20, r18
    3e20:	53 07       	cpc	r21, r19
    3e22:	44 f4       	brge	.+16     	; 0x3e34 <fputc+0x38>
    3e24:	a0 81       	ld	r26, Z
    3e26:	b1 81       	ldd	r27, Z+1	; 0x01
    3e28:	9d 01       	movw	r18, r26
    3e2a:	2f 5f       	subi	r18, 0xFF	; 255
    3e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2e:	31 83       	std	Z+1, r19	; 0x01
    3e30:	20 83       	st	Z, r18
    3e32:	8c 93       	st	X, r24
    3e34:	26 81       	ldd	r18, Z+6	; 0x06
    3e36:	37 81       	ldd	r19, Z+7	; 0x07
    3e38:	2f 5f       	subi	r18, 0xFF	; 255
    3e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e3c:	37 83       	std	Z+7, r19	; 0x07
    3e3e:	26 83       	std	Z+6, r18	; 0x06
    3e40:	14 c0       	rjmp	.+40     	; 0x3e6a <fputc+0x6e>
    3e42:	8b 01       	movw	r16, r22
    3e44:	ec 01       	movw	r28, r24
    3e46:	fb 01       	movw	r30, r22
    3e48:	00 84       	ldd	r0, Z+8	; 0x08
    3e4a:	f1 85       	ldd	r31, Z+9	; 0x09
    3e4c:	e0 2d       	mov	r30, r0
    3e4e:	09 95       	icall
    3e50:	89 2b       	or	r24, r25
    3e52:	e1 f6       	brne	.-72     	; 0x3e0c <fputc+0x10>
    3e54:	d8 01       	movw	r26, r16
    3e56:	16 96       	adiw	r26, 0x06	; 6
    3e58:	8d 91       	ld	r24, X+
    3e5a:	9c 91       	ld	r25, X
    3e5c:	17 97       	sbiw	r26, 0x07	; 7
    3e5e:	01 96       	adiw	r24, 0x01	; 1
    3e60:	17 96       	adiw	r26, 0x07	; 7
    3e62:	9c 93       	st	X, r25
    3e64:	8e 93       	st	-X, r24
    3e66:	16 97       	sbiw	r26, 0x06	; 6
    3e68:	ce 01       	movw	r24, r28
    3e6a:	df 91       	pop	r29
    3e6c:	cf 91       	pop	r28
    3e6e:	1f 91       	pop	r17
    3e70:	0f 91       	pop	r16
    3e72:	08 95       	ret

00003e74 <__ultoa_invert>:
    3e74:	fa 01       	movw	r30, r20
    3e76:	aa 27       	eor	r26, r26
    3e78:	28 30       	cpi	r18, 0x08	; 8
    3e7a:	51 f1       	breq	.+84     	; 0x3ed0 <__ultoa_invert+0x5c>
    3e7c:	20 31       	cpi	r18, 0x10	; 16
    3e7e:	81 f1       	breq	.+96     	; 0x3ee0 <__ultoa_invert+0x6c>
    3e80:	e8 94       	clt
    3e82:	6f 93       	push	r22
    3e84:	6e 7f       	andi	r22, 0xFE	; 254
    3e86:	6e 5f       	subi	r22, 0xFE	; 254
    3e88:	7f 4f       	sbci	r23, 0xFF	; 255
    3e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8e:	af 4f       	sbci	r26, 0xFF	; 255
    3e90:	b1 e0       	ldi	r27, 0x01	; 1
    3e92:	3e d0       	rcall	.+124    	; 0x3f10 <__ultoa_invert+0x9c>
    3e94:	b4 e0       	ldi	r27, 0x04	; 4
    3e96:	3c d0       	rcall	.+120    	; 0x3f10 <__ultoa_invert+0x9c>
    3e98:	67 0f       	add	r22, r23
    3e9a:	78 1f       	adc	r23, r24
    3e9c:	89 1f       	adc	r24, r25
    3e9e:	9a 1f       	adc	r25, r26
    3ea0:	a1 1d       	adc	r26, r1
    3ea2:	68 0f       	add	r22, r24
    3ea4:	79 1f       	adc	r23, r25
    3ea6:	8a 1f       	adc	r24, r26
    3ea8:	91 1d       	adc	r25, r1
    3eaa:	a1 1d       	adc	r26, r1
    3eac:	6a 0f       	add	r22, r26
    3eae:	71 1d       	adc	r23, r1
    3eb0:	81 1d       	adc	r24, r1
    3eb2:	91 1d       	adc	r25, r1
    3eb4:	a1 1d       	adc	r26, r1
    3eb6:	20 d0       	rcall	.+64     	; 0x3ef8 <__ultoa_invert+0x84>
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <__ultoa_invert+0x48>
    3eba:	68 94       	set
    3ebc:	3f 91       	pop	r19
    3ebe:	2a e0       	ldi	r18, 0x0A	; 10
    3ec0:	26 9f       	mul	r18, r22
    3ec2:	11 24       	eor	r1, r1
    3ec4:	30 19       	sub	r19, r0
    3ec6:	30 5d       	subi	r19, 0xD0	; 208
    3ec8:	31 93       	st	Z+, r19
    3eca:	de f6       	brtc	.-74     	; 0x3e82 <__ultoa_invert+0xe>
    3ecc:	cf 01       	movw	r24, r30
    3ece:	08 95       	ret
    3ed0:	46 2f       	mov	r20, r22
    3ed2:	47 70       	andi	r20, 0x07	; 7
    3ed4:	40 5d       	subi	r20, 0xD0	; 208
    3ed6:	41 93       	st	Z+, r20
    3ed8:	b3 e0       	ldi	r27, 0x03	; 3
    3eda:	0f d0       	rcall	.+30     	; 0x3efa <__ultoa_invert+0x86>
    3edc:	c9 f7       	brne	.-14     	; 0x3ed0 <__ultoa_invert+0x5c>
    3ede:	f6 cf       	rjmp	.-20     	; 0x3ecc <__ultoa_invert+0x58>
    3ee0:	46 2f       	mov	r20, r22
    3ee2:	4f 70       	andi	r20, 0x0F	; 15
    3ee4:	40 5d       	subi	r20, 0xD0	; 208
    3ee6:	4a 33       	cpi	r20, 0x3A	; 58
    3ee8:	18 f0       	brcs	.+6      	; 0x3ef0 <__ultoa_invert+0x7c>
    3eea:	49 5d       	subi	r20, 0xD9	; 217
    3eec:	31 fd       	sbrc	r19, 1
    3eee:	40 52       	subi	r20, 0x20	; 32
    3ef0:	41 93       	st	Z+, r20
    3ef2:	02 d0       	rcall	.+4      	; 0x3ef8 <__ultoa_invert+0x84>
    3ef4:	a9 f7       	brne	.-22     	; 0x3ee0 <__ultoa_invert+0x6c>
    3ef6:	ea cf       	rjmp	.-44     	; 0x3ecc <__ultoa_invert+0x58>
    3ef8:	b4 e0       	ldi	r27, 0x04	; 4
    3efa:	a6 95       	lsr	r26
    3efc:	97 95       	ror	r25
    3efe:	87 95       	ror	r24
    3f00:	77 95       	ror	r23
    3f02:	67 95       	ror	r22
    3f04:	ba 95       	dec	r27
    3f06:	c9 f7       	brne	.-14     	; 0x3efa <__ultoa_invert+0x86>
    3f08:	00 97       	sbiw	r24, 0x00	; 0
    3f0a:	61 05       	cpc	r22, r1
    3f0c:	71 05       	cpc	r23, r1
    3f0e:	08 95       	ret
    3f10:	9b 01       	movw	r18, r22
    3f12:	ac 01       	movw	r20, r24
    3f14:	0a 2e       	mov	r0, r26
    3f16:	06 94       	lsr	r0
    3f18:	57 95       	ror	r21
    3f1a:	47 95       	ror	r20
    3f1c:	37 95       	ror	r19
    3f1e:	27 95       	ror	r18
    3f20:	ba 95       	dec	r27
    3f22:	c9 f7       	brne	.-14     	; 0x3f16 <__ultoa_invert+0xa2>
    3f24:	62 0f       	add	r22, r18
    3f26:	73 1f       	adc	r23, r19
    3f28:	84 1f       	adc	r24, r20
    3f2a:	95 1f       	adc	r25, r21
    3f2c:	a0 1d       	adc	r26, r0
    3f2e:	08 95       	ret

00003f30 <__prologue_saves__>:
    3f30:	2f 92       	push	r2
    3f32:	3f 92       	push	r3
    3f34:	4f 92       	push	r4
    3f36:	5f 92       	push	r5
    3f38:	6f 92       	push	r6
    3f3a:	7f 92       	push	r7
    3f3c:	8f 92       	push	r8
    3f3e:	9f 92       	push	r9
    3f40:	af 92       	push	r10
    3f42:	bf 92       	push	r11
    3f44:	cf 92       	push	r12
    3f46:	df 92       	push	r13
    3f48:	ef 92       	push	r14
    3f4a:	ff 92       	push	r15
    3f4c:	0f 93       	push	r16
    3f4e:	1f 93       	push	r17
    3f50:	cf 93       	push	r28
    3f52:	df 93       	push	r29
    3f54:	cd b7       	in	r28, 0x3d	; 61
    3f56:	de b7       	in	r29, 0x3e	; 62
    3f58:	ca 1b       	sub	r28, r26
    3f5a:	db 0b       	sbc	r29, r27
    3f5c:	0f b6       	in	r0, 0x3f	; 63
    3f5e:	f8 94       	cli
    3f60:	de bf       	out	0x3e, r29	; 62
    3f62:	0f be       	out	0x3f, r0	; 63
    3f64:	cd bf       	out	0x3d, r28	; 61
    3f66:	09 94       	ijmp

00003f68 <__epilogue_restores__>:
    3f68:	2a 88       	ldd	r2, Y+18	; 0x12
    3f6a:	39 88       	ldd	r3, Y+17	; 0x11
    3f6c:	48 88       	ldd	r4, Y+16	; 0x10
    3f6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f7e:	df 80       	ldd	r13, Y+7	; 0x07
    3f80:	ee 80       	ldd	r14, Y+6	; 0x06
    3f82:	fd 80       	ldd	r15, Y+5	; 0x05
    3f84:	0c 81       	ldd	r16, Y+4	; 0x04
    3f86:	1b 81       	ldd	r17, Y+3	; 0x03
    3f88:	aa 81       	ldd	r26, Y+2	; 0x02
    3f8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f8c:	ce 0f       	add	r28, r30
    3f8e:	d1 1d       	adc	r29, r1
    3f90:	0f b6       	in	r0, 0x3f	; 63
    3f92:	f8 94       	cli
    3f94:	de bf       	out	0x3e, r29	; 62
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	cd bf       	out	0x3d, r28	; 61
    3f9a:	ed 01       	movw	r28, r26
    3f9c:	08 95       	ret

00003f9e <_exit>:
    3f9e:	f8 94       	cli

00003fa0 <__stop_program>:
    3fa0:	ff cf       	rjmp	.-2      	; 0x3fa0 <__stop_program>
