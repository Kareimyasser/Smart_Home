
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003d0  00800060  00003c7a  00003d0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800430  00800430  000040de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000040de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000413c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000490  00000000  00000000  00004178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000732d  00000000  00000000  00004608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001381  00000000  00000000  0000b935  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003760  00000000  00000000  0000ccb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c24  00000000  00000000  00010418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001567  00000000  00000000  0001103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000312b  00000000  00000000  000125a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  000156ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__vector_4>
      14:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__vector_10>
      2c:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 36       	cpi	r26, 0x6A	; 106
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 14 	call	0x289a	; 0x289a <main>
      8a:	0c 94 3b 1e 	jmp	0x3c76	; 0x3c76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CheckTempForAc>:
    _delay_ms(1000);
}

void CheckTempForAc()
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
      92:	60 e3       	ldi	r22, 0x30	; 48
      94:	74 e0       	ldi	r23, 0x04	; 4
      96:	80 e0       	ldi	r24, 0x00	; 0
      98:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
	if (local_temp > 28)
      9c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <__data_end>
      a0:	8d 31       	cpi	r24, 0x1D	; 29
      a2:	30 f0       	brcs	.+12     	; 0xb0 <CheckTempForAc+0x1e>
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
      a4:	40 e0       	ldi	r20, 0x00	; 0
      a6:	62 e0       	ldi	r22, 0x02	; 2
      a8:	82 e0       	ldi	r24, 0x02	; 2
      aa:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
      ae:	08 95       	ret
		
	}
	else if (local_temp <21)
      b0:	85 31       	cpi	r24, 0x15	; 21
      b2:	28 f4       	brcc	.+10     	; 0xbe <CheckTempForAc+0x2c>
	
	{
		DIO_voidSetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	62 e0       	ldi	r22, 0x02	; 2
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
      be:	08 95       	ret

000000c0 <HOME_voidInit>:


void HOME_voidInit(void)
{
	    // initialize the LCD
    LCD_voidInit();
      c0:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_voidInit>
	// initialize the PWM
	PWM_voidInitChannel_1A();
      c4:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <PWM_voidInitChannel_1A>
	PWM_voidInitChannel_1B();
      c8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <PWM_voidInitChannel_1B>

	// initialize the EEPROM
	EEPROM_voidInit();
      cc:	0e 94 a2 10 	call	0x2144	; 0x2144 <EEPROM_voidInit>
	
	// initialize the Door_Servo
	SERVO_voidInit(DIO_PORTD,DIO_PIN4);
      d0:	64 e0       	ldi	r22, 0x04	; 4
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 2e 14 	call	0x285c	; 0x285c <SERVO_voidInit>
	// reset door angle to 0
	SERVO_voidStartByAngle(0);
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	70 e0       	ldi	r23, 0x00	; 0
      dc:	cb 01       	movw	r24, r22
      de:	0e 94 34 14 	call	0x2868	; 0x2868 <SERVO_voidStartByAngle>

	// initialize the KPD
    KPD_voidInit();
      e2:	0e 94 56 11 	call	0x22ac	; 0x22ac <KPD_voidInit>

	// initialize the Buzzer
	BUZZER_voidInit(DIO_PORTD,DIO_PIN6);
      e6:	66 e0       	ldi	r22, 0x06	; 6
      e8:	83 e0       	ldi	r24, 0x03	; 3
      ea:	0e 94 96 10 	call	0x212c	; 0x212c <BUZZER_voidInit>
	
    // initialize the Bluetooth
	BL_voidInit();
      ee:	0e 94 8a 10 	call	0x2114	; 0x2114 <BL_voidInit>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
      f2:	41 e0       	ldi	r20, 0x01	; 1
      f4:	61 e0       	ldi	r22, 0x01	; 1
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT);
      fc:	40 e0       	ldi	r20, 0x00	; 0
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	83 e0       	ldi	r24, 0x03	; 3
     102:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    //enable global interrupt
    GI_voidEnable();
     106:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <GI_voidEnable>
    //intializing timer by selecting mode and enable timer interrupt overflow and saving perload values
    TMR0_voidInit();
     10a:	0e 94 ed 16 	call	0x2dda	; 0x2dda <TMR0_voidInit>
    // initialize the LEDs(1-5)
	//LED 1
    LED_voidInit(DIO_PORTD, DIO_PIN3);
     10e:	63 e0       	ldi	r22, 0x03	; 3
     110:	83 e0       	ldi	r24, 0x03	; 3
     112:	0e 94 10 14 	call	0x2820	; 0x2820 <LED_voidInit>
	//LED 2
    LED_voidInit(DIO_PORTB, DIO_PIN0);
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 10 14 	call	0x2820	; 0x2820 <LED_voidInit>
	//LED 3
    LED_voidInit(DIO_PORTA, DIO_PIN2);
     11e:	62 e0       	ldi	r22, 0x02	; 2
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	0e 94 10 14 	call	0x2820	; 0x2820 <LED_voidInit>
	//LED 4
    LED_voidInit(DIO_PORTA, DIO_PIN3);
     126:	63 e0       	ldi	r22, 0x03	; 3
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 10 14 	call	0x2820	; 0x2820 <LED_voidInit>
	//LED 5
    LED_voidInit(DIO_PORTD, DIO_PIN2);
     12e:	62 e0       	ldi	r22, 0x02	; 2
     130:	83 e0       	ldi	r24, 0x03	; 3
     132:	0e 94 10 14 	call	0x2820	; 0x2820 <LED_voidInit>
	// Dimmer LED 6
	LED_voidInit(DIO_PORTD, DIO_PIN5);
     136:	65 e0       	ldi	r22, 0x05	; 5
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	0e 94 10 14 	call	0x2820	; 0x2820 <LED_voidInit>

	// initialize tmr2
	TMR2_voidInit();
     13e:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <TMR2_voidInit>
	TMR2_SetCallBackCTC(CheckTempForAc);
     142:	89 e4       	ldi	r24, 0x49	; 73
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <TMR2_SetCallBackCTC>
	TMR2_voidStart();
     14a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <TMR2_voidStart>
     14e:	08 95       	ret

00000150 <HOME_voidLocalGetUserAndPass>:

}


void HOME_voidLocalGetUserAndPass(u8* copy_pu8LocalUserName,u8* copy_pu8LocalUserPass)
{
     150:	cf 92       	push	r12
     152:	df 92       	push	r13
     154:	ef 92       	push	r14
     156:	ff 92       	push	r15
     158:	1f 93       	push	r17
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
	if((copy_pu8LocalUserName!=NULL)&&(copy_pu8LocalUserPass!=NULL))
     15e:	00 97       	sbiw	r24, 0x00	; 0
     160:	09 f4       	brne	.+2      	; 0x164 <HOME_voidLocalGetUserAndPass+0x14>
     162:	67 c0       	rjmp	.+206    	; 0x232 <HOME_voidLocalGetUserAndPass+0xe2>
     164:	61 15       	cp	r22, r1
     166:	71 05       	cpc	r23, r1
     168:	09 f4       	brne	.+2      	; 0x16c <HOME_voidLocalGetUserAndPass+0x1c>
     16a:	63 c0       	rjmp	.+198    	; 0x232 <HOME_voidLocalGetUserAndPass+0xe2>
     16c:	7b 01       	movw	r14, r22
     16e:	6c 01       	movw	r12, r24
	{
			
		u8 Local_u8UserNameLengthCounter,Local_u8UserPassCounter;
	
		//dis request for use name and pass
		LCD_voidClear();
     170:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Please Enter User");
     17c:	82 e7       	ldi	r24, 0x72	; 114
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
		LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"Name&Password");
     18c:	84 e8       	ldi	r24, 0x84	; 132
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     194:	2f ef       	ldi	r18, 0xFF	; 255
     196:	83 ed       	ldi	r24, 0xD3	; 211
     198:	90 e3       	ldi	r25, 0x30	; 48
     19a:	21 50       	subi	r18, 0x01	; 1
     19c:	80 40       	sbci	r24, 0x00	; 0
     19e:	90 40       	sbci	r25, 0x00	; 0
     1a0:	e1 f7       	brne	.-8      	; 0x19a <HOME_voidLocalGetUserAndPass+0x4a>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <HOME_voidLocalGetUserAndPass+0x54>
     1a4:	00 00       	nop
		_delay_ms(1000);
	
		//dis request for user name
		LCD_voidClear();
     1a6:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"User Name:");
     1b2:	84 ea       	ldi	r24, 0xA4	; 164
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     1ba:	10 e0       	ldi	r17, 0x00	; 0
     1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <HOME_voidLocalGetUserAndPass+0x90>
		{
		
		
			do
			{
				KPD_voidGetValue(&copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1be:	e6 01       	movw	r28, r12
     1c0:	c1 0f       	add	r28, r17
     1c2:	d1 1d       	adc	r29, r1
     1c4:	ce 01       	movw	r24, r28
     1c6:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
			
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
     1ca:	98 81       	ld	r25, Y
     1cc:	9f 3f       	cpi	r25, 0xFF	; 255
     1ce:	b9 f3       	breq	.-18     	; 0x1be <HOME_voidLocalGetUserAndPass+0x6e>
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
     1d0:	61 2f       	mov	r22, r17
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
     1d8:	88 81       	ld	r24, Y
     1da:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"User Name:");
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserNameLengthCounter++)
     1de:	1f 5f       	subi	r17, 0xFF	; 255
     1e0:	17 30       	cpi	r17, 0x07	; 7
     1e2:	68 f3       	brcs	.-38     	; 0x1be <HOME_voidLocalGetUserAndPass+0x6e>
			}while(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]== KPD_Not_Pressed);
		
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserNameLengthCounter);
			LCD_voidDisplayChar(copy_pu8LocalUserName[Local_u8UserNameLengthCounter]);
		}
		copy_pu8LocalUserName[Local_u8UserNameLengthCounter]='\0';
     1e4:	f6 01       	movw	r30, r12
     1e6:	e1 0f       	add	r30, r17
     1e8:	f1 1d       	adc	r31, r1
     1ea:	10 82       	st	Z, r1
		//display request for pass
		LCD_voidClear();
     1ec:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
		LCD_voidDisplayString((u8 *)"PASSWORD:");
     1f8:	82 e9       	ldi	r24, 0x92	; 146
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     200:	10 e0       	ldi	r17, 0x00	; 0
     202:	11 c0       	rjmp	.+34     	; 0x226 <HOME_voidLocalGetUserAndPass+0xd6>
			{
				do
				{
					KPD_voidGetValue(&copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     204:	e7 01       	movw	r28, r14
     206:	c1 0f       	add	r28, r17
     208:	d1 1d       	adc	r29, r1
     20a:	ce 01       	movw	r24, r28
     20c:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
				
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
     210:	88 81       	ld	r24, Y
     212:	8f 3f       	cpi	r24, 0xFF	; 255
     214:	b9 f3       	breq	.-18     	; 0x204 <HOME_voidLocalGetUserAndPass+0xb4>
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
     216:	61 2f       	mov	r22, r17
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
     21e:	88 81       	ld	r24, Y
     220:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidDisplayChar>
		LCD_voidClear();
		LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
		LCD_voidDisplayString((u8 *)"PASSWORD:");
	
		//loop for 8 digits user pass
			for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh-1;Local_u8UserPassCounter++)
     224:	1f 5f       	subi	r17, 0xFF	; 255
     226:	17 30       	cpi	r17, 0x07	; 7
     228:	68 f3       	brcs	.-38     	; 0x204 <HOME_voidLocalGetUserAndPass+0xb4>
				}while(copy_pu8LocalUserPass[Local_u8UserPassCounter]==KPD_Not_Pressed);
			
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,Local_u8UserPassCounter);
				LCD_voidDisplayChar(copy_pu8LocalUserPass[Local_u8UserPassCounter]);
			}
			copy_pu8LocalUserPass[Local_u8UserPassCounter]='\0';
     22a:	f7 01       	movw	r30, r14
     22c:	e1 0f       	add	r30, r17
     22e:	f1 1d       	adc	r31, r1
     230:	10 82       	st	Z, r1
		//error massage
	}
			
	
		
}
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	ff 90       	pop	r15
     23a:	ef 90       	pop	r14
     23c:	df 90       	pop	r13
     23e:	cf 90       	pop	r12
     240:	08 95       	ret

00000242 <HOME_voidRemoteGetUserAndPass>:



void HOME_voidRemoteGetUserAndPass(u8* copy_pu8RemoteUserName,u8* copy_pu8RemoteUserPass)
{
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
	if((copy_pu8RemoteUserName!=NULL)&&(copy_pu8RemoteUserPass!=NULL))
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	09 f4       	brne	.+2      	; 0x256 <HOME_voidRemoteGetUserAndPass+0x14>
     254:	64 c0       	rjmp	.+200    	; 0x31e <HOME_voidRemoteGetUserAndPass+0xdc>
     256:	61 15       	cp	r22, r1
     258:	71 05       	cpc	r23, r1
     25a:	09 f4       	brne	.+2      	; 0x25e <HOME_voidRemoteGetUserAndPass+0x1c>
     25c:	60 c0       	rjmp	.+192    	; 0x31e <HOME_voidRemoteGetUserAndPass+0xdc>
     25e:	8b 01       	movw	r16, r22
     260:	7c 01       	movw	r14, r24
		u8 Local_u8UserNameLengthCounter=0,Local_u8UserPassCounter=0;
	
		
	
		//dis request for user name
		BL_voidTxString	("User Name:");
     262:	84 ea       	ldi	r24, 0xA4	; 164
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
		BL_voidTxChar('\r');
     26a:	8d e0       	ldi	r24, 0x0D	; 13
     26c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     270:	c0 e0       	ldi	r28, 0x00	; 0
     272:	0b c0       	rjmp	.+22     	; 0x28a <HOME_voidRemoteGetUserAndPass+0x48>
		{
			
			
			BL_voidRxChar(&copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     274:	67 01       	movw	r12, r14
     276:	cc 0e       	add	r12, r28
     278:	d1 1c       	adc	r13, r1
     27a:	c6 01       	movw	r24, r12
     27c:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
			if(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]=='#')
     280:	f6 01       	movw	r30, r12
     282:	80 81       	ld	r24, Z
     284:	83 32       	cpi	r24, 0x23	; 35
     286:	19 f0       	breq	.+6      	; 0x28e <HOME_voidRemoteGetUserAndPass+0x4c>
		//dis request for user name
		BL_voidTxString	("User Name:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user name
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     288:	cf 5f       	subi	r28, 0xFF	; 255
     28a:	c8 30       	cpi	r28, 0x08	; 8
     28c:	98 f3       	brcs	.-26     	; 0x274 <HOME_voidRemoteGetUserAndPass+0x32>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
     28e:	f7 01       	movw	r30, r14
     290:	ec 0f       	add	r30, r28
     292:	f1 1d       	adc	r31, r1
     294:	10 82       	st	Z, r1
		BL_voidTxString("Entered User Name:");
     296:	8c e9       	ldi	r24, 0x9C	; 156
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
		BL_voidTxChar('\r');
     29e:	8d e0       	ldi	r24, 0x0D	; 13
     2a0:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     2a4:	c0 e0       	ldi	r28, 0x00	; 0
     2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <HOME_voidRemoteGetUserAndPass+0x74>
		{
			
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
     2a8:	f7 01       	movw	r30, r14
     2aa:	ec 0f       	add	r30, r28
     2ac:	f1 1d       	adc	r31, r1
     2ae:	80 81       	ld	r24, Z
     2b0:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
		copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]='\0';
		BL_voidTxString("Entered User Name:");
		BL_voidTxChar('\r');
		//loop for 8 digits user name
		
		for(Local_u8UserNameLengthCounter=0;Local_u8UserNameLengthCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserNameLengthCounter++)
     2b4:	cf 5f       	subi	r28, 0xFF	; 255
     2b6:	c8 30       	cpi	r28, 0x08	; 8
     2b8:	b8 f3       	brcs	.-18     	; 0x2a8 <HOME_voidRemoteGetUserAndPass+0x66>
			
			BL_voidTxChar(copy_pu8RemoteUserName[Local_u8UserNameLengthCounter]);	
			
		}
		
		BL_voidTxChar('\r');
     2ba:	8d e0       	ldi	r24, 0x0D	; 13
     2bc:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
		
		
		//display request for pass
		BL_voidTxString	("Password:");
     2c0:	8f ea       	ldi	r24, 0xAF	; 175
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
		BL_voidTxChar('\r');
     2c8:	8d e0       	ldi	r24, 0x0D	; 13
     2ca:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     2ce:	c0 e0       	ldi	r28, 0x00	; 0
     2d0:	0b c0       	rjmp	.+22     	; 0x2e8 <HOME_voidRemoteGetUserAndPass+0xa6>
		{
			
			BL_voidRxChar(&copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     2d2:	78 01       	movw	r14, r16
     2d4:	ec 0e       	add	r14, r28
     2d6:	f1 1c       	adc	r15, r1
     2d8:	c7 01       	movw	r24, r14
     2da:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
			if(copy_pu8RemoteUserPass[Local_u8UserPassCounter]=='#')
     2de:	f7 01       	movw	r30, r14
     2e0:	80 81       	ld	r24, Z
     2e2:	83 32       	cpi	r24, 0x23	; 35
     2e4:	19 f0       	breq	.+6      	; 0x2ec <HOME_voidRemoteGetUserAndPass+0xaa>
		//display request for pass
		BL_voidTxString	("Password:");
		BL_voidTxChar('\r');
	
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh+1;Local_u8UserPassCounter++)
     2e6:	cf 5f       	subi	r28, 0xFF	; 255
     2e8:	c9 30       	cpi	r28, 0x09	; 9
     2ea:	98 f3       	brcs	.-26     	; 0x2d2 <HOME_voidRemoteGetUserAndPass+0x90>
			{
				break;
			}
			
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
     2ec:	f8 01       	movw	r30, r16
     2ee:	ec 0f       	add	r30, r28
     2f0:	f1 1d       	adc	r31, r1
     2f2:	10 82       	st	Z, r1
		BL_voidTxString("Entered Pass:");
     2f4:	89 eb       	ldi	r24, 0xB9	; 185
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
		BL_voidTxChar('\r');
     2fc:	8d e0       	ldi	r24, 0x0D	; 13
     2fe:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     302:	c0 e0       	ldi	r28, 0x00	; 0
     304:	07 c0       	rjmp	.+14     	; 0x314 <HOME_voidRemoteGetUserAndPass+0xd2>
		{
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
     306:	f8 01       	movw	r30, r16
     308:	ec 0f       	add	r30, r28
     30a:	f1 1d       	adc	r31, r1
     30c:	80 81       	ld	r24, Z
     30e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
		}
		copy_pu8RemoteUserPass[Local_u8UserPassCounter]='\0';
		BL_voidTxString("Entered Pass:");
		BL_voidTxChar('\r');
		//loop for 8 digits user pass
		for(Local_u8UserPassCounter=0;Local_u8UserPassCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8UserPassCounter++)
     312:	cf 5f       	subi	r28, 0xFF	; 255
     314:	c8 30       	cpi	r28, 0x08	; 8
     316:	b8 f3       	brcs	.-18     	; 0x306 <HOME_voidRemoteGetUserAndPass+0xc4>
			
			BL_voidTxChar(copy_pu8RemoteUserPass[Local_u8UserPassCounter]);
		
		}

		BL_voidTxChar('\r');
     318:	8d e0       	ldi	r24, 0x0D	; 13
     31a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
		//error massage
	}
			
	
		
}
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	ff 90       	pop	r15
     326:	ef 90       	pop	r14
     328:	df 90       	pop	r13
     32a:	cf 90       	pop	r12
     32c:	08 95       	ret

0000032e <HOME_voidCheckUserAndPass>:


void HOME_voidCheckUserAndPass(u8 copy_u8AccessType,u8* copy_pu8UserStatus)
{
     32e:	8f 92       	push	r8
     330:	9f 92       	push	r9
     332:	af 92       	push	r10
     334:	bf 92       	push	r11
     336:	cf 92       	push	r12
     338:	df 92       	push	r13
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
     34a:	a0 97       	sbiw	r28, 0x20	; 32
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
	//page 12 to 21 for remote user name and password the first page for user name the followed by password
	//word 180 in eeprom is saved for alarm history
	
	
	//validate pointer
	if(copy_pu8UserStatus!=NULL)
     356:	61 15       	cp	r22, r1
     358:	71 05       	cpc	r23, r1
     35a:	09 f4       	brne	.+2      	; 0x35e <HOME_voidCheckUserAndPass+0x30>
     35c:	b6 c1       	rjmp	.+876    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
     35e:	4b 01       	movw	r8, r22
		u8 Local_u8TrailsCounter,Local_u8NameByteCheckCounter,Local_u8NameByteCheck=0,
		Local_u8PassByteCheckCounter,Local_u8PassByteCheck=0,Local_u8FireAnAlarm=0,Local_u8PagesCounter,
		Local_u8WrongUserNameCounter=0,Local_u8WrongUserPassCounter=0,LocaL_u8RightEntery=0;
		
		//first case for local access
		if(copy_u8AccessType==HOME_LOCAL_ACCESS)
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <HOME_voidCheckUserAndPass+0x38>
     364:	e8 c0       	rjmp	.+464    	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
     366:	d8 c0       	rjmp	.+432    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
     368:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
     36a:	be 01       	movw	r22, r28
     36c:	6f 5e       	subi	r22, 0xEF	; 239
     36e:	7f 4f       	sbci	r23, 0xFF	; 255
     370:	ce 01       	movw	r24, r28
     372:	49 96       	adiw	r24, 0x19	; 25
     374:	0e 94 a8 00 	call	0x150	; 0x150 <HOME_voidLocalGetUserAndPass>
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     378:	b1 2c       	mov	r11, r1
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     37a:	c1 2c       	mov	r12, r1
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	60 c0       	rjmp	.+192    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from eeprom for local sys
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
     380:	e0 2e       	mov	r14, r16
     382:	ee 0c       	add	r14, r14
     384:	ee 0c       	add	r14, r14
     386:	ee 0c       	add	r14, r14
     388:	ee 0c       	add	r14, r14
     38a:	f1 2c       	mov	r15, r1
     38c:	ae 01       	movw	r20, r28
     38e:	47 5f       	subi	r20, 0xF7	; 247
     390:	5f 4f       	sbci	r21, 0xFF	; 255
     392:	68 e0       	ldi	r22, 0x08	; 8
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	c7 01       	movw	r24, r14
     398:	0e 94 16 11 	call	0x222c	; 0x222c <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
     39c:	ae 01       	movw	r20, r28
     39e:	4f 5f       	subi	r20, 0xFF	; 255
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	68 e0       	ldi	r22, 0x08	; 8
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	c7 01       	movw	r24, r14
     3a8:	08 96       	adiw	r24, 0x08	; 8
     3aa:	0e 94 16 11 	call	0x222c	; 0x222c <EEPROM_voidSequentialRead>
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
				
				{
					Local_u8NameByteCheck=0;
     3ae:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	14 c0       	rjmp	.+40     	; 0x3dc <HOME_voidCheckUserAndPass+0xae>
					{
							
						if(local_u8EnteredLocalUserName[Local_u8NameByteCheckCounter]==local_u8StoredLocalUserName[Local_u8NameByteCheckCounter])
     3b4:	82 2f       	mov	r24, r18
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	e9 e1       	ldi	r30, 0x19	; 25
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	ec 0f       	add	r30, r28
     3be:	fd 1f       	adc	r31, r29
     3c0:	e8 0f       	add	r30, r24
     3c2:	f9 1f       	adc	r31, r25
     3c4:	30 81       	ld	r19, Z
     3c6:	e9 e0       	ldi	r30, 0x09	; 9
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	ec 0f       	add	r30, r28
     3cc:	fd 1f       	adc	r31, r29
     3ce:	e8 0f       	add	r30, r24
     3d0:	f9 1f       	adc	r31, r25
     3d2:	80 81       	ld	r24, Z
     3d4:	38 13       	cpse	r19, r24
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <HOME_voidCheckUserAndPass+0xac>
						{
							Local_u8NameByteCheck++;
     3d8:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8LocalUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserName);
					EEPROM_voidSequentialRead(Local_u8LocalUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredLocalUserPass);
					
					//check user name which is entered by is user is the same as the one from eeprom
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     3da:	2f 5f       	subi	r18, 0xFF	; 255
     3dc:	28 30       	cpi	r18, 0x08	; 8
     3de:	50 f3       	brcs	.-44     	; 0x3b4 <HOME_voidCheckUserAndPass+0x86>
						}
					}
					
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     3e0:	48 30       	cpi	r20, 0x08	; 8
     3e2:	61 f5       	brne	.+88     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     3e4:	15 c0       	rjmp	.+42     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							
							if(local_u8EnteredLocalUserPass[Local_u8PassByteCheckCounter]==local_u8StoredLocalUserPass[Local_u8PassByteCheckCounter])
     3e6:	82 2f       	mov	r24, r18
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	e1 e1       	ldi	r30, 0x11	; 17
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	ec 0f       	add	r30, r28
     3f0:	fd 1f       	adc	r31, r29
     3f2:	e8 0f       	add	r30, r24
     3f4:	f9 1f       	adc	r31, r25
     3f6:	30 81       	ld	r19, Z
     3f8:	e1 e0       	ldi	r30, 0x01	; 1
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ec 0f       	add	r30, r28
     3fe:	fd 1f       	adc	r31, r29
     400:	e8 0f       	add	r30, r24
     402:	f9 1f       	adc	r31, r25
     404:	80 81       	ld	r24, Z
     406:	38 13       	cpse	r19, r24
     408:	01 c0       	rjmp	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
							{
								Local_u8PassByteCheck++;
     40a:	4f 5f       	subi	r20, 0xFF	; 255
					
					//if the user name is right now we can check pass
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     40c:	2f 5f       	subi	r18, 0xFF	; 255
     40e:	02 c0       	rjmp	.+4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	20 e0       	ldi	r18, 0x00	; 0
     414:	28 30       	cpi	r18, 0x08	; 8
     416:	38 f3       	brcs	.-50     	; 0x3e6 <HOME_voidCheckUserAndPass+0xb8>
							}
									
						}
						
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     418:	48 30       	cpi	r20, 0x08	; 8
     41a:	71 f4       	brne	.+28     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     41c:	05 30       	cpi	r16, 0x05	; 5
     41e:	31 f4       	brne	.+12     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	f4 01       	movw	r30, r8
     424:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     426:	dd 24       	eor	r13, r13
     428:	d3 94       	inc	r13
     42a:	0d c0       	rjmp	.+26     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
							{
								*copy_pu8UserStatus=HOME_LOCAL_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_LOCAL_USER;
     42c:	82 e0       	ldi	r24, 0x02	; 2
     42e:	f4 01       	movw	r30, r8
     430:	80 83       	st	Z, r24
						//if the pass right now we difine the user type(admin or user)AD
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     432:	dd 24       	eor	r13, r13
     434:	d3 94       	inc	r13
     436:	07 c0       	rjmp	.+14     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     438:	b3 94       	inc	r11
     43a:	01 c0       	rjmp	.+2      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
						}
							
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     43c:	c3 94       	inc	r12
				
				//get user name and pass from KPD & LCD
				HOME_voidLocalGetUserAndPass(&local_u8EnteredLocalUserName,&local_u8EnteredLocalUserPass);
				
				//loop on all reserved local eeprom locations
				for(Local_u8PagesCounter=0;Local_u8PagesCounter<(HOME_MAX_NUM_OF_LOCAL_USER+1);Local_u8PagesCounter++)
     43e:	0f 5f       	subi	r16, 0xFF	; 255
     440:	06 30       	cpi	r16, 0x06	; 6
     442:	08 f4       	brcc	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	9d cf       	rjmp	.-198    	; 0x380 <HOME_voidCheckUserAndPass+0x52>
					}
				
				}
			
				//is the entery was right dis on LCD
				if(LocaL_u8RightEntery==1)
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	df 12       	cpse	r13, r31
     44a:	14 c0       	rjmp	.+40     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
				{
					LCD_voidClear();
     44c:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS PERMITED");
     458:	87 ec       	ldi	r24, 0xC7	; 199
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
     460:	2f ef       	ldi	r18, 0xFF	; 255
     462:	89 e6       	ldi	r24, 0x69	; 105
     464:	98 e1       	ldi	r25, 0x18	; 24
     466:	21 50       	subi	r18, 0x01	; 1
     468:	80 40       	sbci	r24, 0x00	; 0
     46a:	90 40       	sbci	r25, 0x00	; 0
     46c:	e1 f7       	brne	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     470:	00 00       	nop
     472:	58 c0       	rjmp	.+176    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
					_delay_ms(500);
					break;
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     474:	e6 e0       	ldi	r30, 0x06	; 6
     476:	ce 12       	cpse	r12, r30
     478:	26 c0       	rjmp	.+76     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
				{
					LCD_voidClear();
     47a:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     486:	87 ed       	ldi	r24, 0xD7	; 215
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong User Name");
     496:	85 ee       	ldi	r24, 0xE5	; 229
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     49e:	12 30       	cpi	r17, 0x02	; 2
     4a0:	c9 f1       	breq	.+114    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     4a2:	ff ef       	ldi	r31, 0xFF	; 255
     4a4:	23 ed       	ldi	r18, 0xD3	; 211
     4a6:	80 e3       	ldi	r24, 0x30	; 48
     4a8:	f1 50       	subi	r31, 0x01	; 1
     4aa:	20 40       	sbci	r18, 0x00	; 0
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b2:	00 00       	nop
					{	
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     4bc:	85 ef       	ldi	r24, 0xF5	; 245
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
     4c4:	27 c0       	rjmp	.+78     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     4c6:	bb 20       	and	r11, r11
     4c8:	29 f1       	breq	.+74     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
				{
					LCD_voidClear();
     4ca:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("ACCESS DENIED");
     4d6:	87 ed       	ldi	r24, 0xD7	; 215
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayString("Wrong Password");
     4e6:	86 e0       	ldi	r24, 0x06	; 6
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     4ee:	12 30       	cpi	r17, 0x02	; 2
     4f0:	89 f0       	breq	.+34     	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
     4f2:	9f ef       	ldi	r25, 0xFF	; 255
     4f4:	e3 ed       	ldi	r30, 0xD3	; 211
     4f6:	f0 e3       	ldi	r31, 0x30	; 48
     4f8:	91 50       	subi	r25, 0x01	; 1
     4fa:	e0 40       	sbci	r30, 0x00	; 0
     4fc:	f0 40       	sbci	r31, 0x00	; 0
     4fe:	e1 f7       	brne	.-8      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
     500:	00 c0       	rjmp	.+0      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
     502:	00 00       	nop
					{
						_delay_ms(1000);
						LCD_voidGoTOSpecificPosition(LCD_LINE_TWO,0);
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
						LCD_voidDisplayString("Please Try Again");
     50c:	85 ef       	ldi	r24, 0xF5	; 245
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
			u8 local_u8EnteredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredLocalUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredLocalUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8LocalUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     514:	1f 5f       	subi	r17, 0xFF	; 255
     516:	03 c0       	rjmp	.+6      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
     518:	d1 2c       	mov	r13, r1
     51a:	a1 2c       	mov	r10, r1
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	13 30       	cpi	r17, 0x03	; 3
     520:	08 f4       	brcc	.+2      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
     522:	22 cf       	rjmp	.-444    	; 0x368 <HOME_voidCheckUserAndPass+0x3a>
				}
				
			
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     524:	23 e0       	ldi	r18, 0x03	; 3
     526:	a2 12       	cpse	r10, r18
     528:	d0 c0       	rjmp	.+416    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
     52a:	d1 10       	cpse	r13, r1
     52c:	ce c0       	rjmp	.+412    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
			{
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     52e:	85 e0       	ldi	r24, 0x05	; 5
     530:	f4 01       	movw	r30, r8
     532:	80 83       	st	Z, r24
     534:	ca c0       	rjmp	.+404    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
			}
		}
		
		else if(copy_u8AccessType==HOME_REMOTE_ACCESS)
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	09 f0       	breq	.+2      	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     53a:	c7 c0       	rjmp	.+398    	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
     53c:	b8 c0       	rjmp	.+368    	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
     53e:	a3 94       	inc	r10
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
				
				
				//dis request for use name and pass
				BL_voidTxString	("Please Enter User Name & Password ");
     540:	85 e1       	ldi	r24, 0x15	; 21
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxString("\n");
     548:	88 e3       	ldi	r24, 0x38	; 56
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
     550:	be 01       	movw	r22, r28
     552:	6f 5e       	subi	r22, 0xEF	; 239
     554:	7f 4f       	sbci	r23, 0xFF	; 255
     556:	ce 01       	movw	r24, r28
     558:	49 96       	adiw	r24, 0x19	; 25
     55a:	0e 94 21 01 	call	0x242	; 0x242 <HOME_voidRemoteGetUserAndPass>
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
				Local_u8WrongUserPassCounter=0;
     55e:	b1 2c       	mov	r11, r1
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
			{
				
				Local_u8FireAnAlarm++;
				Local_u8WrongUserNameCounter=0;
     560:	c1 2c       	mov	r12, r1
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     562:	05 e0       	ldi	r16, 0x05	; 5
     564:	60 c0       	rjmp	.+192    	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
					Local_u8NameByteCheck=0;
					Local_u8PassByteCheck=0;
					
					//get user name and pass from EEPROM
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
     566:	e0 2e       	mov	r14, r16
     568:	ee 0c       	add	r14, r14
     56a:	ee 0c       	add	r14, r14
     56c:	ee 0c       	add	r14, r14
     56e:	ee 0c       	add	r14, r14
     570:	f1 2c       	mov	r15, r1
     572:	ae 01       	movw	r20, r28
     574:	47 5f       	subi	r20, 0xF7	; 247
     576:	5f 4f       	sbci	r21, 0xFF	; 255
     578:	68 e0       	ldi	r22, 0x08	; 8
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	c7 01       	movw	r24, r14
     57e:	0e 94 16 11 	call	0x222c	; 0x222c <EEPROM_voidSequentialRead>
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
     582:	ae 01       	movw	r20, r28
     584:	4f 5f       	subi	r20, 0xFF	; 255
     586:	5f 4f       	sbci	r21, 0xFF	; 255
     588:	68 e0       	ldi	r22, 0x08	; 8
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	c7 01       	movw	r24, r14
     58e:	08 96       	adiw	r24, 0x08	; 8
     590:	0e 94 16 11 	call	0x222c	; 0x222c <EEPROM_voidSequentialRead>
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
				{
					Local_u8NameByteCheck=0;
     594:	40 e0       	ldi	r20, 0x00	; 0
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	14 c0       	rjmp	.+40     	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
					{
						
						//check the byte stored with the entered	
						if(local_u8EnteredRemoteUserName[Local_u8NameByteCheckCounter]==local_u8StoredRemoteUserName[Local_u8NameByteCheckCounter])
     59a:	82 2f       	mov	r24, r18
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	e9 e1       	ldi	r30, 0x19	; 25
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ec 0f       	add	r30, r28
     5a4:	fd 1f       	adc	r31, r29
     5a6:	e8 0f       	add	r30, r24
     5a8:	f9 1f       	adc	r31, r25
     5aa:	30 81       	ld	r19, Z
     5ac:	e9 e0       	ldi	r30, 0x09	; 9
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	ec 0f       	add	r30, r28
     5b2:	fd 1f       	adc	r31, r29
     5b4:	e8 0f       	add	r30, r24
     5b6:	f9 1f       	adc	r31, r25
     5b8:	80 81       	ld	r24, Z
     5ba:	38 13       	cpse	r19, r24
     5bc:	01 c0       	rjmp	.+2      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
						{
							
							Local_u8NameByteCheck++;
     5be:	4f 5f       	subi	r20, 0xFF	; 255
					Local_u8RemoteUserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
					EEPROM_voidSequentialRead(Local_u8RemoteUserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserName);
					EEPROM_voidSequentialRead((Local_u8RemoteUserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8StoredRemoteUserPass);
					
					//loop on every byte of user name
					for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     5c0:	2f 5f       	subi	r18, 0xFF	; 255
     5c2:	28 30       	cpi	r18, 0x08	; 8
     5c4:	50 f3       	brcs	.-44     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
							
							
						}
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     5c6:	48 30       	cpi	r20, 0x08	; 8
     5c8:	61 f5       	brne	.+88     	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
     5ca:	15 c0       	rjmp	.+42     	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
						{
							//check the byte stored with the entered
							if(local_u8EnteredRemoteUserPass[Local_u8PassByteCheckCounter]==local_u8StoredRemoteUserPass[Local_u8PassByteCheckCounter])
     5cc:	82 2f       	mov	r24, r18
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	e1 e1       	ldi	r30, 0x11	; 17
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	ec 0f       	add	r30, r28
     5d6:	fd 1f       	adc	r31, r29
     5d8:	e8 0f       	add	r30, r24
     5da:	f9 1f       	adc	r31, r25
     5dc:	30 81       	ld	r19, Z
     5de:	e1 e0       	ldi	r30, 0x01	; 1
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	ec 0f       	add	r30, r28
     5e4:	fd 1f       	adc	r31, r29
     5e6:	e8 0f       	add	r30, r24
     5e8:	f9 1f       	adc	r31, r25
     5ea:	80 81       	ld	r24, Z
     5ec:	38 13       	cpse	r19, r24
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
							{
								Local_u8PassByteCheck++;
     5f0:	4f 5f       	subi	r20, 0xFF	; 255
					
					}
					if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
					{
						//loop on every byte of password
						for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     5f2:	2f 5f       	subi	r18, 0xFF	; 255
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	28 30       	cpi	r18, 0x08	; 8
     5fc:	38 f3       	brcs	.-50     	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
								
							}
									
						}
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     5fe:	48 30       	cpi	r20, 0x08	; 8
     600:	71 f4       	brne	.+28     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
							

							LocaL_u8RightEntery=1;
							
							//admin user name is saved at loc 240(page 30)
							if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     602:	05 30       	cpi	r16, 0x05	; 5
     604:	31 f4       	brne	.+12     	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
     606:	83 e0       	ldi	r24, 0x03	; 3
     608:	f4 01       	movw	r30, r8
     60a:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     60c:	dd 24       	eor	r13, r13
     60e:	d3 94       	inc	r13
     610:	0d c0       	rjmp	.+26     	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
							{
								*copy_pu8UserStatus=HOME_REMOTE_ADMIN;	
							}
							else
							{
								*copy_pu8UserStatus=HOME_REMOTE_USER;
     612:	84 e0       	ldi	r24, 0x04	; 4
     614:	f4 01       	movw	r30, r8
     616:	80 83       	st	Z, r24
						//check the entry is right or wrong
						if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
						{
							

							LocaL_u8RightEntery=1;
     618:	dd 24       	eor	r13, r13
     61a:	d3 94       	inc	r13
     61c:	07 c0       	rjmp	.+14     	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
							break;
							
						}
						else
						{
							Local_u8WrongUserPassCounter++;
     61e:	b3 94       	inc	r11
     620:	01 c0       	rjmp	.+2      	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
						
						
					}
					else
					{
						Local_u8WrongUserNameCounter++;
     622:	c3 94       	inc	r12
				
				//get user name and pass from BL
				HOME_voidRemoteGetUserAndPass(&local_u8EnteredRemoteUserName,&local_u8EnteredRemoteUserPass);
				
				//loop on every remote user
				for(Local_u8PagesCounter=HOME_MAX_NUM_OF_LOCAL_USER;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     624:	0f 5f       	subi	r16, 0xFF	; 255
     626:	0b 30       	cpi	r16, 0x0B	; 11
     628:	08 f4       	brcc	.+2      	; 0x62c <__EEPROM_REGION_LENGTH__+0x22c>
     62a:	9d cf       	rjmp	.-198    	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
						
					}
						
				}
				//case of wright entry
				if(LocaL_u8RightEntery==1)
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	df 12       	cpse	r13, r31
     630:	08 c0       	rjmp	.+16     	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
				{
					
					BL_voidTxString	("ACCESS PERMITED");
     632:	87 ec       	ldi	r24, 0xC7	; 199
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     63a:	8d e0       	ldi	r24, 0x0D	; 13
     63c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					break;
     640:	3c c0       	rjmp	.+120    	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
				}
				//is the entery was wrong 
				else if(Local_u8WrongUserNameCounter==(HOME_MAX_NUM_OF_LOCAL_USER+1))
     642:	26 e0       	ldi	r18, 0x06	; 6
     644:	c2 12       	cpse	r12, r18
     646:	18 c0       	rjmp	.+48     	; 0x678 <__EEPROM_REGION_LENGTH__+0x278>
				{
					BL_voidTxString	("ACCESS DENIED");
     648:	87 ed       	ldi	r24, 0xD7	; 215
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     650:	8d e0       	ldi	r24, 0x0D	; 13
     652:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidTxString	("Wrong User Name");
     656:	85 ee       	ldi	r24, 0xE5	; 229
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     65e:	8d e0       	ldi	r24, 0x0D	; 13
     660:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     664:	12 30       	cpi	r17, 0x02	; 2
     666:	09 f1       	breq	.+66     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
					{	
						
						BL_voidTxString	("Please Try Again");
     668:	85 ef       	ldi	r24, 0xF5	; 245
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
						BL_voidTxChar('\r');
     670:	8d e0       	ldi	r24, 0x0D	; 13
     672:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
     676:	19 c0       	rjmp	.+50     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
						
					}
				}
				//is the entery was wrong dis on LCD and hint the reason
				else if(Local_u8WrongUserPassCounter!=0)
     678:	bb 20       	and	r11, r11
     67a:	b9 f0       	breq	.+46     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
				{
					BL_voidTxString	("ACCESS DENIED");
     67c:	87 ed       	ldi	r24, 0xD7	; 215
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     684:	8d e0       	ldi	r24, 0x0D	; 13
     686:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidTxString	("Wrong Password");
     68a:	86 e0       	ldi	r24, 0x06	; 6
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     692:	8d e0       	ldi	r24, 0x0D	; 13
     694:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
										
					//dont display this message on trial 3
					if(Local_u8TrailsCounter!=(HOME_MAX_NUMBER_OF_TRIALS-1))
     698:	12 30       	cpi	r17, 0x02	; 2
     69a:	39 f0       	breq	.+14     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
					{
						BL_voidTxString	("Please Try Again");
     69c:	85 ef       	ldi	r24, 0xF5	; 245
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
						BL_voidTxChar('\r');
     6a4:	8d e0       	ldi	r24, 0x0D	; 13
     6a6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
			u8 local_u8EnteredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8EnteredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 local_u8StoredRemoteUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8StoredRemoteUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
			u8 Local_u8RemoteUserNameLocation;
			
			//every user have max of 3 trials for user name and pass
			for(Local_u8TrailsCounter=0;Local_u8TrailsCounter<HOME_MAX_NUMBER_OF_TRIALS;Local_u8TrailsCounter++)
     6aa:	1f 5f       	subi	r17, 0xFF	; 255
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
     6ae:	d1 2c       	mov	r13, r1
     6b0:	a1 2c       	mov	r10, r1
     6b2:	10 e0       	ldi	r17, 0x00	; 0
     6b4:	13 30       	cpi	r17, 0x03	; 3
     6b6:	08 f4       	brcc	.+2      	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
     6b8:	42 cf       	rjmp	.-380    	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
					}
				}
				
			}
			//check the alarm after the 3rd trial
			if((HOME_MAX_NUMBER_OF_TRIALS==Local_u8FireAnAlarm)&&(LocaL_u8RightEntery==0))
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	a8 12       	cpse	r10, r24
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
     6c0:	d1 10       	cpse	r13, r1
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
			{
				*copy_pu8UserStatus=HOME_LOGIN_FAILED;
     6c4:	85 e0       	ldi	r24, 0x05	; 5
     6c6:	f4 01       	movw	r30, r8
     6c8:	80 83       	st	Z, r24
	}
	else
	{
		//error massage
	}
}
     6ca:	a0 96       	adiw	r28, 0x20	; 32
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	ff 90       	pop	r15
     6e0:	ef 90       	pop	r14
     6e2:	df 90       	pop	r13
     6e4:	cf 90       	pop	r12
     6e6:	bf 90       	pop	r11
     6e8:	af 90       	pop	r10
     6ea:	9f 90       	pop	r9
     6ec:	8f 90       	pop	r8
     6ee:	08 95       	ret

000006f0 <HOME_voidChangeUserNameAndPass>:

void HOME_voidChangeUserNameAndPass(void)
{
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	e0 97       	sbiw	r28, 0x30	; 48
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
	
	
	//dis request for use name and pass
	BL_voidTxString	("Please Enter User Name & Password u want to change");
     70c:	8a e3       	ldi	r24, 0x3A	; 58
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxString("\r");
     714:	8d e6       	ldi	r24, 0x6D	; 109
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
     71c:	be 01       	movw	r22, r28
     71e:	67 5f       	subi	r22, 0xF7	; 247
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 21 01 	call	0x242	; 0x242 <HOME_voidRemoteGetUserAndPass>
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	51 c0       	rjmp	.+162    	; 0x7d0 <HOME_voidChangeUserNameAndPass+0xe0>
	{
		Local_u8NameByteCheck=0;
		Local_u8PassByteCheck=0;
		
		//skip admin page
		if(Local_u8PagesCounter==HOME_MAX_NUM_OF_LOCAL_USER)
     72e:	15 30       	cpi	r17, 0x05	; 5
     730:	09 f4       	brne	.+2      	; 0x734 <HOME_voidChangeUserNameAndPass+0x44>
     732:	4d c0       	rjmp	.+154    	; 0x7ce <HOME_voidChangeUserNameAndPass+0xde>
		{
			continue;
		}
		
		//get user name and pass from EEPROM
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
     734:	01 2f       	mov	r16, r17
     736:	02 95       	swap	r16
     738:	00 7f       	andi	r16, 0xF0	; 240
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
     73a:	e0 2e       	mov	r14, r16
     73c:	f1 2c       	mov	r15, r1
     73e:	ae 01       	movw	r20, r28
     740:	4f 5d       	subi	r20, 0xDF	; 223
     742:	5f 4f       	sbci	r21, 0xFF	; 255
     744:	68 e0       	ldi	r22, 0x08	; 8
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	c7 01       	movw	r24, r14
     74a:	0e 94 16 11 	call	0x222c	; 0x222c <EEPROM_voidSequentialRead>
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
     74e:	ae 01       	movw	r20, r28
     750:	47 5d       	subi	r20, 0xD7	; 215
     752:	5f 4f       	sbci	r21, 0xFF	; 255
     754:	68 e0       	ldi	r22, 0x08	; 8
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	c7 01       	movw	r24, r14
     75a:	08 96       	adiw	r24, 0x08	; 8
     75c:	0e 94 16 11 	call	0x222c	; 0x222c <EEPROM_voidSequentialRead>
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
	{
		Local_u8NameByteCheck=0;
     760:	40 e0       	ldi	r20, 0x00	; 0
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	14 c0       	rjmp	.+40     	; 0x78e <HOME_voidChangeUserNameAndPass+0x9e>
		{
			
			//check the byte stored with the entered	
			if(local_u8OldUserName[Local_u8NameByteCheckCounter]==local_u8SavedUserName[Local_u8NameByteCheckCounter])
     766:	82 2f       	mov	r24, r18
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	e8 0f       	add	r30, r24
     774:	f9 1f       	adc	r31, r25
     776:	30 81       	ld	r19, Z
     778:	e1 e2       	ldi	r30, 0x21	; 33
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ec 0f       	add	r30, r28
     77e:	fd 1f       	adc	r31, r29
     780:	e8 0f       	add	r30, r24
     782:	f9 1f       	adc	r31, r25
     784:	80 81       	ld	r24, Z
     786:	38 13       	cpse	r19, r24
     788:	01 c0       	rjmp	.+2      	; 0x78c <HOME_voidChangeUserNameAndPass+0x9c>
			{
				
				Local_u8NameByteCheck++;
     78a:	4f 5f       	subi	r20, 0xFF	; 255
		Local_u8UserNameLocation=(2*Local_u8PagesCounter)*HOME_USER_NAME_AND_PASS_MAX_LENGTh;
		EEPROM_voidSequentialRead(Local_u8UserNameLocation,HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserName);
		EEPROM_voidSequentialRead((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),HOME_USER_NAME_AND_PASS_MAX_LENGTh,&local_u8SavedUserPass);
		
		//loop on every byte of user name
		for(Local_u8NameByteCheckCounter=0;Local_u8NameByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8NameByteCheckCounter++)
     78c:	2f 5f       	subi	r18, 0xFF	; 255
     78e:	28 30       	cpi	r18, 0x08	; 8
     790:	50 f3       	brcs	.-44     	; 0x766 <HOME_voidChangeUserNameAndPass+0x76>
				
			}
			
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     792:	48 30       	cpi	r20, 0x08	; 8
     794:	e1 f4       	brne	.+56     	; 0x7ce <HOME_voidChangeUserNameAndPass+0xde>
     796:	15 c0       	rjmp	.+42     	; 0x7c2 <HOME_voidChangeUserNameAndPass+0xd2>
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
			{
				//check the byte stored with the entered
				if(local_u8OldUserPass[Local_u8PassByteCheckCounter]==local_u8SavedUserPass[Local_u8PassByteCheckCounter])
     798:	82 2f       	mov	r24, r18
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	e9 e0       	ldi	r30, 0x09	; 9
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	ec 0f       	add	r30, r28
     7a2:	fd 1f       	adc	r31, r29
     7a4:	e8 0f       	add	r30, r24
     7a6:	f9 1f       	adc	r31, r25
     7a8:	30 81       	ld	r19, Z
     7aa:	e9 e2       	ldi	r30, 0x29	; 41
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	ec 0f       	add	r30, r28
     7b0:	fd 1f       	adc	r31, r29
     7b2:	e8 0f       	add	r30, r24
     7b4:	f9 1f       	adc	r31, r25
     7b6:	80 81       	ld	r24, Z
     7b8:	38 13       	cpse	r19, r24
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <HOME_voidChangeUserNameAndPass+0xce>
				{
					Local_u8PassByteCheck++;
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
		}
	
		if(Local_u8NameByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
		{
			//loop on every byte of password
			for(Local_u8PassByteCheckCounter=0;Local_u8PassByteCheckCounter<HOME_USER_NAME_AND_PASS_MAX_LENGTh;Local_u8PassByteCheckCounter++)
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <HOME_voidChangeUserNameAndPass+0xd6>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	28 30       	cpi	r18, 0x08	; 8
     7c8:	38 f3       	brcs	.-50     	; 0x798 <HOME_voidChangeUserNameAndPass+0xa8>
				}
						
			}
			
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
     7ca:	48 30       	cpi	r20, 0x08	; 8
     7cc:	31 f0       	breq	.+12     	; 0x7da <HOME_voidChangeUserNameAndPass+0xea>
	
	//get user name and pass from BL
	HOME_voidRemoteGetUserAndPass(&local_u8OldUserName,&local_u8OldUserPass);
	
	//loop on every user except admin
	for(Local_u8PagesCounter=0;Local_u8PagesCounter<((HOME_MAX_NUM_OF_LOCAL_USER*2)+1);Local_u8PagesCounter++)
     7ce:	1f 5f       	subi	r17, 0xFF	; 255
     7d0:	1b 30       	cpi	r17, 0x0B	; 11
     7d2:	08 f4       	brcc	.+2      	; 0x7d6 <HOME_voidChangeUserNameAndPass+0xe6>
     7d4:	ac cf       	rjmp	.-168    	; 0x72e <HOME_voidChangeUserNameAndPass+0x3e>
{
	u8 local_u8OldUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8OldUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8TempUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8TempUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 local_u8SavedUserName[HOME_USER_NAME_AND_PASS_MAX_LENGTh],local_u8SavedUserPass[HOME_USER_NAME_AND_PASS_MAX_LENGTh];
	u8 Local_u8NameByteCheckCounter,Local_u8PagesCounter,Local_u8NameByteCheck,Local_u8PassByteCheck,Local_u8PassByteCheckCounter,
	Local_u8UserNameLocation,LocaL_u8RightEntery=0,Local_u8WrongUserPassCounter=0,Local_u8WrongUserNameCounter=0,Local_u8ReplaceCounter;
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	01 c0       	rjmp	.+2      	; 0x7dc <HOME_voidChangeUserNameAndPass+0xec>
			//check the entry is right or wrong
			if(Local_u8PassByteCheck==HOME_USER_NAME_AND_PASS_MAX_LENGTh)
			{
				
			
				LocaL_u8RightEntery=1;
     7da:	81 e0       	ldi	r24, 0x01	; 1
		}
			
	}
	
	//case of wright entry
	if(LocaL_u8RightEntery==1)
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	21 f5       	brne	.+72     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
	{
		
		BL_voidTxString	("Please Enter The new User And Pass");
     7e0:	8f e6       	ldi	r24, 0x6F	; 111
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
		BL_voidTxChar('\r');
     7e8:	8d e0       	ldi	r24, 0x0D	; 13
     7ea:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
		//get New user name and pass from BL
		HOME_voidRemoteGetUserAndPass(&local_u8TempUserName,&local_u8TempUserPass);
     7ee:	be 01       	movw	r22, r28
     7f0:	67 5e       	subi	r22, 0xE7	; 231
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	ce 01       	movw	r24, r28
     7f6:	41 96       	adiw	r24, 0x11	; 17
     7f8:	0e 94 21 01 	call	0x242	; 0x242 <HOME_voidRemoteGetUserAndPass>
		//write the new user name & pass in EEPROM
		EEPROM_voidWritePage(Local_u8UserNameLocation,&local_u8TempUserName);
     7fc:	10 e0       	ldi	r17, 0x00	; 0
     7fe:	be 01       	movw	r22, r28
     800:	6f 5e       	subi	r22, 0xEF	; 239
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	c8 01       	movw	r24, r16
     806:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>
		EEPROM_voidWritePage((Local_u8UserNameLocation+HOME_USER_NAME_AND_PASS_MAX_LENGTh),&local_u8TempUserPass);
     80a:	be 01       	movw	r22, r28
     80c:	67 5e       	subi	r22, 0xE7	; 231
     80e:	7f 4f       	sbci	r23, 0xFF	; 255
     810:	c8 01       	movw	r24, r16
     812:	08 96       	adiw	r24, 0x08	; 8
     814:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>
		BL_voidTxString	("User Data Changed Successfully");
     818:	82 e9       	ldi	r24, 0x92	; 146
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
		BL_voidTxChar('\r');
     820:	8d e0       	ldi	r24, 0x0D	; 13
     822:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
     826:	07 c0       	rjmp	.+14     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
	}
	//is the entery was wrong 
	else 
	{

		BL_voidTxString	("Wrong User Name or password");
     828:	81 eb       	ldi	r24, 0xB1	; 177
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
		BL_voidTxChar('\r');
     830:	8d e0       	ldi	r24, 0x0D	; 13
     832:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>

	}

	
	
}
     836:	e0 96       	adiw	r28, 0x30	; 48
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <HOME_voidFireAnALarm>:


void HOME_voidFireAnALarm(u8 copy_pu8UserStatus)
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
     854:	00 d0       	rcall	.+0      	; 0x856 <HOME_voidFireAnALarm+0x6>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8CheckAlarm,Local_u8ResetValue;
	
	// fire alarm if the user entry failed
	if(copy_pu8UserStatus==HOME_LOGIN_FAILED)
     85a:	85 30       	cpi	r24, 0x05	; 5
     85c:	29 f4       	brne	.+10     	; 0x868 <__stack+0x9>
	{
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_VALUE);
     85e:	6f ef       	ldi	r22, 0xFF	; 255
     860:	84 eb       	ldi	r24, 0xB4	; 180
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 a5 10 	call	0x214a	; 0x214a <EEPROM_voidWriteByte>
	}
	
	//check alarm status
	EEPROM_voidReadByte(HOME_ALARM_LOCATION,&Local_u8CheckAlarm);
     868:	be 01       	movw	r22, r28
     86a:	6f 5f       	subi	r22, 0xFF	; 255
     86c:	7f 4f       	sbci	r23, 0xFF	; 255
     86e:	84 eb       	ldi	r24, 0xB4	; 180
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 ee 10 	call	0x21dc	; 0x21dc <EEPROM_voidReadByte>
	
	//block system if there is an alarm
	if(Local_u8CheckAlarm==HOME_ALARM_VALUE)
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	29 f5       	brne	.+74     	; 0x8c6 <__stack+0x67>
	{
		while(1)
		{
			BL_voidTxString	("ACCESS DENIED");
     87c:	87 ed       	ldi	r24, 0xD7	; 215
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
			BL_voidTxChar('\r');
     884:	8d e0       	ldi	r24, 0x0D	; 13
     886:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>

			BUZZER_voidOn(DIO_PORTD,DIO_PIN6);
     88a:	66 e0       	ldi	r22, 0x06	; 6
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	0e 94 9a 10 	call	0x2134	; 0x2134 <BUZZER_voidOn>
			
			LCD_voidClear();
     892:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
			LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,0);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayString("ACCESS DENIED");
     89e:	87 ed       	ldi	r24, 0xD7	; 215
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
			
			//if the user enter # end alarm
			BL_voidRxChar(&Local_u8ResetValue);
     8a6:	ce 01       	movw	r24, r28
     8a8:	02 96       	adiw	r24, 0x02	; 2
     8aa:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
			if(Local_u8ResetValue=='#')
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	83 32       	cpi	r24, 0x23	; 35
     8b2:	21 f7       	brne	.-56     	; 0x87c <__stack+0x1d>
			{
				BUZZER_voidOff(DIO_PORTD,DIO_PIN6);
     8b4:	66 e0       	ldi	r22, 0x06	; 6
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	0e 94 9e 10 	call	0x213c	; 0x213c <BUZZER_voidOff>
				break;
			}
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	84 eb       	ldi	r24, 0xB4	; 180
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	0e 94 a5 10 	call	0x214a	; 0x214a <EEPROM_voidWriteByte>
	}
}
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <KPD_Interface_RemoteAdmin>:


void KPD_Interface_RemoteAdmin(void)
{
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
     8d0:	87 ec       	ldi	r24, 0xC7	; 199
     8d2:	9c e0       	ldi	r25, 0x0C	; 12
     8d4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
     8d8:	8d e0       	ldi	r24, 0x0D	; 13
     8da:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
     8de:	8d ec       	ldi	r24, 0xCD	; 205
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxChar('\r');
     8e6:	8d e0       	ldi	r24, 0x0D	; 13
     8e8:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
     8ec:	8a ed       	ldi	r24, 0xDA	; 218
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxChar('\r');
     8f4:	8d e0       	ldi	r24, 0x0D	; 13
     8f6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	BL_voidTxString("5- change username and password");
     8fa:	88 ee       	ldi	r24, 0xE8	; 232
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxChar('\r');
     902:	8d e0       	ldi	r24, 0x0D	; 13
     904:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	TMR0_voidStart();
     908:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
	BL_voidRxChar(&bluetooh_value);
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
	TMR0_voidStop();
     914:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
	switch (bluetooh_value)
     918:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     91c:	83 33       	cpi	r24, 0x33	; 51
     91e:	09 f4       	brne	.+2      	; 0x922 <KPD_Interface_RemoteAdmin+0x52>
     920:	56 c3       	rjmp	.+1708   	; 0xfce <KPD_Interface_RemoteAdmin+0x6fe>
     922:	30 f4       	brcc	.+12     	; 0x930 <KPD_Interface_RemoteAdmin+0x60>
     924:	81 33       	cpi	r24, 0x31	; 49
     926:	59 f0       	breq	.+22     	; 0x93e <KPD_Interface_RemoteAdmin+0x6e>
     928:	82 33       	cpi	r24, 0x32	; 50
     92a:	09 f4       	brne	.+2      	; 0x92e <KPD_Interface_RemoteAdmin+0x5e>
     92c:	3f c0       	rjmp	.+126    	; 0x9ac <KPD_Interface_RemoteAdmin+0xdc>
     92e:	08 95       	ret
     930:	84 33       	cpi	r24, 0x34	; 52
     932:	09 f4       	brne	.+2      	; 0x936 <KPD_Interface_RemoteAdmin+0x66>
     934:	78 c3       	rjmp	.+1776   	; 0x1026 <KPD_Interface_RemoteAdmin+0x756>
     936:	85 33       	cpi	r24, 0x35	; 53
     938:	09 f4       	brne	.+2      	; 0x93c <KPD_Interface_RemoteAdmin+0x6c>
     93a:	c7 c3       	rjmp	.+1934   	; 0x10ca <KPD_Interface_RemoteAdmin+0x7fa>
     93c:	08 95       	ret
	{
	case ('1'):
		BL_voidTxString("AC Is On/off");
     93e:	88 e0       	ldi	r24, 0x08	; 8
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
        BL_voidTxChar('\r');
     946:	8d e0       	ldi	r24, 0x0D	; 13
     948:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     94c:	60 e3       	ldi	r22, 0x30	; 48
     94e:	74 e0       	ldi	r23, 0x04	; 4
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
     956:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <__data_end>
     95a:	1f 92       	push	r1
     95c:	8f 93       	push	r24
     95e:	85 e1       	ldi	r24, 0x15	; 21
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	9f 93       	push	r25
     964:	8f 93       	push	r24
     966:	86 e5       	ldi	r24, 0x56	; 86
     968:	94 e0       	ldi	r25, 0x04	; 4
     96a:	9f 93       	push	r25
     96c:	8f 93       	push	r24
     96e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
				BL_voidTxString(tempString);
     972:	86 e5       	ldi	r24, 0x56	; 86
     974:	94 e0       	ldi	r25, 0x04	; 4
     976:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
     97a:	8d e0       	ldi	r24, 0x0D	; 13
     97c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				BL_voidTxString("0-go to home");
     980:	85 e2       	ldi	r24, 0x25	; 37
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
     988:	8d e0       	ldi	r24, 0x0D	; 13
     98a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				TMR0_voidStart();
     98e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
				BL_voidRxChar(&bluetooh_value);
     992:	80 e4       	ldi	r24, 0x40	; 64
     994:	94 e0       	ldi	r25, 0x04	; 4
     996:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
				TMR0_voidStop();
     99a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
				if (bluetooh_value=='0')
				{
					
				}
		break;
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	08 95       	ret
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
     9ac:	8d e0       	ldi	r24, 0x0D	; 13
     9ae:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
            BL_voidTxString("Choose light to");
     9b2:	82 e3       	ldi	r24, 0x32	; 50
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
            BL_voidTxChar('\r');
     9ba:	8d e0       	ldi	r24, 0x0D	; 13
     9bc:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
     9c0:	82 e4       	ldi	r24, 0x42	; 66
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
			BL_voidTxChar('\r');
     9c8:	8d e0       	ldi	r24, 0x0D	; 13
     9ca:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
			BL_voidTxChar('\r');
     9ce:	8d e0       	ldi	r24, 0x0D	; 13
     9d0:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
            TMR0_voidStart();
     9d4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
     9d8:	80 e4       	ldi	r24, 0x40	; 64
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
            TMR0_voidStop();
     9e0:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
            switch (bluetooh_value)
     9e4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     9e8:	83 33       	cpi	r24, 0x33	; 51
     9ea:	09 f4       	brne	.+2      	; 0x9ee <KPD_Interface_RemoteAdmin+0x11e>
     9ec:	a0 c0       	rjmp	.+320    	; 0xb2e <KPD_Interface_RemoteAdmin+0x25e>
     9ee:	30 f4       	brcc	.+12     	; 0x9fc <KPD_Interface_RemoteAdmin+0x12c>
     9f0:	81 33       	cpi	r24, 0x31	; 49
     9f2:	69 f0       	breq	.+26     	; 0xa0e <KPD_Interface_RemoteAdmin+0x13e>
     9f4:	82 33       	cpi	r24, 0x32	; 50
     9f6:	09 f4       	brne	.+2      	; 0x9fa <KPD_Interface_RemoteAdmin+0x12a>
     9f8:	50 c0       	rjmp	.+160    	; 0xa9a <KPD_Interface_RemoteAdmin+0x1ca>
     9fa:	08 95       	ret
     9fc:	85 33       	cpi	r24, 0x35	; 53
     9fe:	09 f4       	brne	.+2      	; 0xa02 <KPD_Interface_RemoteAdmin+0x132>
     a00:	2a c1       	rjmp	.+596    	; 0xc56 <KPD_Interface_RemoteAdmin+0x386>
     a02:	08 f4       	brcc	.+2      	; 0xa06 <KPD_Interface_RemoteAdmin+0x136>
     a04:	de c0       	rjmp	.+444    	; 0xbc2 <KPD_Interface_RemoteAdmin+0x2f2>
     a06:	86 33       	cpi	r24, 0x36	; 54
     a08:	09 f4       	brne	.+2      	; 0xa0c <KPD_Interface_RemoteAdmin+0x13c>
     a0a:	6f c1       	rjmp	.+734    	; 0xcea <KPD_Interface_RemoteAdmin+0x41a>
     a0c:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     a0e:	42 e3       	ldi	r20, 0x32	; 50
     a10:	54 e0       	ldi	r21, 0x04	; 4
     a12:	63 e0       	ldi	r22, 0x03	; 3
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     a1a:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	e9 f4       	brne	.+58     	; 0xa5c <KPD_Interface_RemoteAdmin+0x18c>
                {
                    BL_voidTxString("Light 1 is On");
     a22:	8f e4       	ldi	r24, 0x4F	; 79
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     a2a:	8d e0       	ldi	r24, 0x0D	; 13
     a2c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     a30:	8d e5       	ldi	r24, 0x5D	; 93
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     a38:	8d e0       	ldi	r24, 0x0D	; 13
     a3a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     a3e:	80 e4       	ldi	r24, 0x40	; 64
     a40:	94 e0       	ldi	r25, 0x04	; 4
     a42:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     a46:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     a4a:	81 33       	cpi	r24, 0x31	; 49
     a4c:	09 f0       	breq	.+2      	; 0xa50 <KPD_Interface_RemoteAdmin+0x180>
     a4e:	3f c3       	rjmp	.+1662   	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     a50:	41 e0       	ldi	r20, 0x01	; 1
     a52:	63 e0       	ldi	r22, 0x03	; 3
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
     a5a:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
     a5c:	81 11       	cpse	r24, r1
     a5e:	37 c3       	rjmp	.+1646   	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 1 is OFF");
     a60:	8e e6       	ldi	r24, 0x6E	; 110
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     a68:	8d e0       	ldi	r24, 0x0D	; 13
     a6a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     a6e:	8d e7       	ldi	r24, 0x7D	; 125
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     a76:	8d e0       	ldi	r24, 0x0D	; 13
     a78:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	94 e0       	ldi	r25, 0x04	; 4
     a80:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     a84:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     a88:	81 33       	cpi	r24, 0x31	; 49
     a8a:	09 f0       	breq	.+2      	; 0xa8e <KPD_Interface_RemoteAdmin+0x1be>
     a8c:	20 c3       	rjmp	.+1600   	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
     a98:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
     a9a:	42 e3       	ldi	r20, 0x32	; 50
     a9c:	54 e0       	ldi	r21, 0x04	; 4
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     aa6:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	f9 f4       	brne	.+62     	; 0xaec <KPD_Interface_RemoteAdmin+0x21c>
                {
                    BL_voidTxString("Light 2 is On");
     aae:	8d e8       	ldi	r24, 0x8D	; 141
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     ab6:	8d e0       	ldi	r24, 0x0D	; 13
     ab8:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     abc:	8d e5       	ldi	r24, 0x5D	; 93
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     ac4:	8d e0       	ldi	r24, 0x0D	; 13
     ac6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     aca:	80 e4       	ldi	r24, 0x40	; 64
     acc:	94 e0       	ldi	r25, 0x04	; 4
     ace:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     ad2:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     ad6:	81 33       	cpi	r24, 0x31	; 49
     ad8:	29 f4       	brne	.+10     	; 0xae4 <KPD_Interface_RemoteAdmin+0x214>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     ada:	41 e0       	ldi	r20, 0x01	; 1
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     aea:	08 95       	ret
                }
                else if (led_status == 0)
     aec:	81 11       	cpse	r24, r1
     aee:	ef c2       	rjmp	.+1502   	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 2 is OFF");
     af0:	8b e9       	ldi	r24, 0x9B	; 155
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     af8:	8d e0       	ldi	r24, 0x0D	; 13
     afa:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     afe:	8d e7       	ldi	r24, 0x7D	; 125
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     b06:	8d e0       	ldi	r24, 0x0D	; 13
     b08:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     b0c:	80 e4       	ldi	r24, 0x40	; 64
     b0e:	94 e0       	ldi	r25, 0x04	; 4
     b10:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
     b14:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     b18:	81 33       	cpi	r24, 0x31	; 49
     b1a:	29 f4       	brne	.+10     	; 0xb26 <KPD_Interface_RemoteAdmin+0x256>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
     b1c:	41 e0       	ldi	r20, 0x01	; 1
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     b2c:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     b2e:	42 e3       	ldi	r20, 0x32	; 50
     b30:	54 e0       	ldi	r21, 0x04	; 4
     b32:	62 e0       	ldi	r22, 0x02	; 2
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     b3a:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	f9 f4       	brne	.+62     	; 0xb80 <KPD_Interface_RemoteAdmin+0x2b0>
                {
                    BL_voidTxString("Light 3 is On");
     b42:	8a ea       	ldi	r24, 0xAA	; 170
     b44:	92 e0       	ldi	r25, 0x02	; 2
     b46:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     b4a:	8d e0       	ldi	r24, 0x0D	; 13
     b4c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     b50:	8d e5       	ldi	r24, 0x5D	; 93
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     b58:	8d e0       	ldi	r24, 0x0D	; 13
     b5a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     b5e:	80 e4       	ldi	r24, 0x40	; 64
     b60:	94 e0       	ldi	r25, 0x04	; 4
     b62:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     b66:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     b6a:	81 33       	cpi	r24, 0x31	; 49
     b6c:	29 f4       	brne	.+10     	; 0xb78 <KPD_Interface_RemoteAdmin+0x2a8>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     b7e:	08 95       	ret
                }
                else if (led_status == 0)
     b80:	81 11       	cpse	r24, r1
     b82:	a5 c2       	rjmp	.+1354   	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 3 is OFF");
     b84:	88 eb       	ldi	r24, 0xB8	; 184
     b86:	92 e0       	ldi	r25, 0x02	; 2
     b88:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     b8c:	8d e0       	ldi	r24, 0x0D	; 13
     b8e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     b92:	8d e7       	ldi	r24, 0x7D	; 125
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     b9a:	8d e0       	ldi	r24, 0x0D	; 13
     b9c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     ba0:	80 e4       	ldi	r24, 0x40	; 64
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     ba8:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     bac:	81 33       	cpi	r24, 0x31	; 49
     bae:	29 f4       	brne	.+10     	; 0xbba <KPD_Interface_RemoteAdmin+0x2ea>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     bb0:	41 e0       	ldi	r20, 0x01	; 1
     bb2:	62 e0       	ldi	r22, 0x02	; 2
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     bc0:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     bc2:	42 e3       	ldi	r20, 0x32	; 50
     bc4:	54 e0       	ldi	r21, 0x04	; 4
     bc6:	63 e0       	ldi	r22, 0x03	; 3
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     bce:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
     bd2:	81 30       	cpi	r24, 0x01	; 1
     bd4:	f9 f4       	brne	.+62     	; 0xc14 <KPD_Interface_RemoteAdmin+0x344>
                {
                    BL_voidTxString("Light 4 is On");
     bd6:	87 ec       	ldi	r24, 0xC7	; 199
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     bde:	8d e0       	ldi	r24, 0x0D	; 13
     be0:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     be4:	8d e5       	ldi	r24, 0x5D	; 93
     be6:	92 e0       	ldi	r25, 0x02	; 2
     be8:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     bec:	8d e0       	ldi	r24, 0x0D	; 13
     bee:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	94 e0       	ldi	r25, 0x04	; 4
     bf6:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     bfa:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     bfe:	81 33       	cpi	r24, 0x31	; 49
     c00:	29 f4       	brne	.+10     	; 0xc0c <KPD_Interface_RemoteAdmin+0x33c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	63 e0       	ldi	r22, 0x03	; 3
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     c12:	08 95       	ret
                }
                else if (led_status == 0)
     c14:	81 11       	cpse	r24, r1
     c16:	5b c2       	rjmp	.+1206   	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 4 is OFF");
     c18:	85 ed       	ldi	r24, 0xD5	; 213
     c1a:	92 e0       	ldi	r25, 0x02	; 2
     c1c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     c20:	8d e0       	ldi	r24, 0x0D	; 13
     c22:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     c26:	8d e7       	ldi	r24, 0x7D	; 125
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     c2e:	8d e0       	ldi	r24, 0x0D	; 13
     c30:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     c34:	80 e4       	ldi	r24, 0x40	; 64
     c36:	94 e0       	ldi	r25, 0x04	; 4
     c38:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     c3c:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     c40:	81 33       	cpi	r24, 0x31	; 49
     c42:	29 f4       	brne	.+10     	; 0xc4e <KPD_Interface_RemoteAdmin+0x37e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     c44:	41 e0       	ldi	r20, 0x01	; 1
     c46:	63 e0       	ldi	r22, 0x03	; 3
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     c54:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     c56:	42 e3       	ldi	r20, 0x32	; 50
     c58:	54 e0       	ldi	r21, 0x04	; 4
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
     c62:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	f9 f4       	brne	.+62     	; 0xca8 <KPD_Interface_RemoteAdmin+0x3d8>
                {
                    BL_voidTxString("Light 5 is On");
     c6a:	84 ee       	ldi	r24, 0xE4	; 228
     c6c:	92 e0       	ldi	r25, 0x02	; 2
     c6e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     c72:	8d e0       	ldi	r24, 0x0D	; 13
     c74:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
     c78:	8d e5       	ldi	r24, 0x5D	; 93
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     c80:	8d e0       	ldi	r24, 0x0D	; 13
     c82:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     c86:	80 e4       	ldi	r24, 0x40	; 64
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     c8e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     c92:	81 33       	cpi	r24, 0x31	; 49
     c94:	29 f4       	brne	.+10     	; 0xca0 <KPD_Interface_RemoteAdmin+0x3d0>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     ca6:	08 95       	ret
                }
                else if (led_status == 0)
     ca8:	81 11       	cpse	r24, r1
     caa:	11 c2       	rjmp	.+1058   	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 5 is OFF");
     cac:	82 ef       	ldi	r24, 0xF2	; 242
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     cb4:	8d e0       	ldi	r24, 0x0D	; 13
     cb6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
     cba:	8d e7       	ldi	r24, 0x7D	; 125
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     cc2:	8d e0       	ldi	r24, 0x0D	; 13
     cc4:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	94 e0       	ldi	r25, 0x04	; 4
     ccc:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
     cd0:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     cd4:	81 33       	cpi	r24, 0x31	; 49
     cd6:	29 f4       	brne	.+10     	; 0xce2 <KPD_Interface_RemoteAdmin+0x412>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	62 e0       	ldi	r22, 0x02	; 2
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
     ce8:	08 95       	ret

            case ('6'):
				
                
				
                if (dimmer_brightness > 0)
     cea:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     cee:	88 23       	and	r24, r24
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <KPD_Interface_RemoteAdmin+0x424>
     cf2:	b1 c0       	rjmp	.+354    	; 0xe56 <KPD_Interface_RemoteAdmin+0x586>
                {
					 BL_voidTxChar('\r');
     cf4:	8d e0       	ldi	r24, 0x0D	; 13
     cf6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	93 e0       	ldi	r25, 0x03	; 3
     cfe:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     d02:	8d e0       	ldi	r24, 0x0D	; 13
     d04:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     d08:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     d0c:	1f 92       	push	r1
     d0e:	8f 93       	push	r24
     d10:	8f e0       	ldi	r24, 0x0F	; 15
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	9f 93       	push	r25
     d16:	8f 93       	push	r24
     d18:	82 e4       	ldi	r24, 0x42	; 66
     d1a:	94 e0       	ldi	r25, 0x04	; 4
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
					BL_voidTxString(DimmerString);
     d24:	82 e4       	ldi	r24, 0x42	; 66
     d26:	94 e0       	ldi	r25, 0x04	; 4
     d28:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     d2c:	8d e0       	ldi	r24, 0x0D	; 13
     d2e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     d32:	8f e1       	ldi	r24, 0x1F	; 31
     d34:	93 e0       	ldi	r25, 0x03	; 3
     d36:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     d3a:	8d e0       	ldi	r24, 0x0D	; 13
     d3c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	94 e0       	ldi	r25, 0x04	; 4
     d44:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
					while (bluetooh_value != 0)
     d48:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	88 23       	and	r24, r24
     d5a:	09 f4       	brne	.+2      	; 0xd5e <KPD_Interface_RemoteAdmin+0x48e>
     d5c:	b8 c1       	rjmp	.+880    	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
					{
						if (bluetooh_value == '1')
     d5e:	81 33       	cpi	r24, 0x31	; 49
     d60:	09 f0       	breq	.+2      	; 0xd64 <KPD_Interface_RemoteAdmin+0x494>
     d62:	43 c0       	rjmp	.+134    	; 0xdea <KPD_Interface_RemoteAdmin+0x51a>
						{
							dimmer_brightness += 10;
     d64:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
     d68:	66 5f       	subi	r22, 0xF6	; 246
     d6a:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
     d78:	ab 01       	movw	r20, r22
     d7a:	bc 01       	movw	r22, r24
     d7c:	88 ee       	ldi	r24, 0xE8	; 232
     d7e:	93 e0       	ldi	r25, 0x03	; 3
     d80:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     d84:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     d88:	1f 92       	push	r1
     d8a:	8f 93       	push	r24
     d8c:	8f e0       	ldi	r24, 0x0F	; 15
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	82 e4       	ldi	r24, 0x42	; 66
     d96:	94 e0       	ldi	r25, 0x04	; 4
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
     da0:	82 e4       	ldi	r24, 0x42	; 66
     da2:	94 e0       	ldi	r25, 0x04	; 4
     da4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     da8:	8d e0       	ldi	r24, 0x0D	; 13
     daa:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     dae:	8f e1       	ldi	r24, 0x1F	; 31
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
     db6:	8d e0       	ldi	r24, 0x0D	; 13
     db8:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness > 100)
     dbc:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	85 36       	cpi	r24, 0x65	; 101
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <KPD_Interface_RemoteAdmin+0x502>
     dd0:	7e c1       	rjmp	.+764    	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
							{
								dimmer_brightness = 100;
     dd2:	84 e6       	ldi	r24, 0x64	; 100
     dd4:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	68 ec       	ldi	r22, 0xC8	; 200
     dde:	72 e4       	ldi	r23, 0x42	; 66
     de0:	88 ee       	ldi	r24, 0xE8	; 232
     de2:	93 e0       	ldi	r25, 0x03	; 3
     de4:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
     de8:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
     dea:	82 33       	cpi	r24, 0x32	; 50
     dec:	09 f0       	breq	.+2      	; 0xdf0 <KPD_Interface_RemoteAdmin+0x520>
     dee:	6f c1       	rjmp	.+734    	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
						{
							dimmer_brightness -= 10;
     df0:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
     df4:	6a 50       	subi	r22, 0x0A	; 10
     df6:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
     e04:	ab 01       	movw	r20, r22
     e06:	bc 01       	movw	r22, r24
     e08:	88 ee       	ldi	r24, 0xE8	; 232
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     e10:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     e14:	1f 92       	push	r1
     e16:	8f 93       	push	r24
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	93 e0       	ldi	r25, 0x03	; 3
     e1c:	9f 93       	push	r25
     e1e:	8f 93       	push	r24
     e20:	82 e4       	ldi	r24, 0x42	; 66
     e22:	94 e0       	ldi	r25, 0x04	; 4
     e24:	9f 93       	push	r25
     e26:	8f 93       	push	r24
     e28:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
     e2c:	82 e4       	ldi	r24, 0x42	; 66
     e2e:	94 e0       	ldi	r25, 0x04	; 4
     e30:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     e34:	8d e0       	ldi	r24, 0x0D	; 13
     e36:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     e3a:	8f e1       	ldi	r24, 0x1F	; 31
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
     e42:	8d e0       	ldi	r24, 0x0D	; 13
     e44:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
     e56:	81 11       	cpse	r24, r1
     e58:	3a c1       	rjmp	.+628    	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
                {
                    BL_voidTxString("Light 6 is OFF");
     e5a:	8f e2       	ldi	r24, 0x2F	; 47
     e5c:	93 e0       	ldi	r25, 0x03	; 3
     e5e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
     e62:	2f ef       	ldi	r18, 0xFF	; 255
     e64:	83 ed       	ldi	r24, 0xD3	; 211
     e66:	90 e3       	ldi	r25, 0x30	; 48
     e68:	21 50       	subi	r18, 0x01	; 1
     e6a:	80 40       	sbci	r24, 0x00	; 0
     e6c:	90 40       	sbci	r25, 0x00	; 0
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <KPD_Interface_RemoteAdmin+0x598>
     e70:	00 c0       	rjmp	.+0      	; 0xe72 <KPD_Interface_RemoteAdmin+0x5a2>
     e72:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
     e74:	8d e0       	ldi	r24, 0x0D	; 13
     e76:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     e7a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     e7e:	1f 92       	push	r1
     e80:	8f 93       	push	r24
     e82:	8f e0       	ldi	r24, 0x0F	; 15
     e84:	93 e0       	ldi	r25, 0x03	; 3
     e86:	9f 93       	push	r25
     e88:	8f 93       	push	r24
     e8a:	82 e4       	ldi	r24, 0x42	; 66
     e8c:	94 e0       	ldi	r25, 0x04	; 4
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
					BL_voidTxString(DimmerString);
     e96:	82 e4       	ldi	r24, 0x42	; 66
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
     e9e:	8d e0       	ldi	r24, 0x0D	; 13
     ea0:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
     ea4:	8f e1       	ldi	r24, 0x1F	; 31
     ea6:	93 e0       	ldi	r25, 0x03	; 3
     ea8:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
     eac:	8d e0       	ldi	r24, 0x0D	; 13
     eae:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
     eb2:	80 e4       	ldi	r24, 0x40	; 64
     eb4:	94 e0       	ldi	r25, 0x04	; 4
     eb6:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
					while (bluetooh_value != 0)
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	7e c0       	rjmp	.+252    	; 0xfc4 <KPD_Interface_RemoteAdmin+0x6f4>
					{
						if (bluetooh_value == '1')
     ec8:	81 33       	cpi	r24, 0x31	; 49
     eca:	09 f0       	breq	.+2      	; 0xece <KPD_Interface_RemoteAdmin+0x5fe>
     ecc:	43 c0       	rjmp	.+134    	; 0xf54 <KPD_Interface_RemoteAdmin+0x684>
						{
							dimmer_brightness += 10;
     ece:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
     ed2:	66 5f       	subi	r22, 0xF6	; 246
     ed4:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
     ee2:	ab 01       	movw	r20, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	88 ee       	ldi	r24, 0xE8	; 232
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     eee:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     ef2:	1f 92       	push	r1
     ef4:	8f 93       	push	r24
     ef6:	8f e0       	ldi	r24, 0x0F	; 15
     ef8:	93 e0       	ldi	r25, 0x03	; 3
     efa:	9f 93       	push	r25
     efc:	8f 93       	push	r24
     efe:	82 e4       	ldi	r24, 0x42	; 66
     f00:	94 e0       	ldi	r25, 0x04	; 4
     f02:	9f 93       	push	r25
     f04:	8f 93       	push	r24
     f06:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
     f0a:	82 e4       	ldi	r24, 0x42	; 66
     f0c:	94 e0       	ldi	r25, 0x04	; 4
     f0e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     f12:	8d e0       	ldi	r24, 0x0D	; 13
     f14:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     f18:	8f e1       	ldi	r24, 0x1F	; 31
     f1a:	93 e0       	ldi	r25, 0x03	; 3
     f1c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
     f20:	8d e0       	ldi	r24, 0x0D	; 13
     f22:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness > 100)
     f26:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	85 36       	cpi	r24, 0x65	; 101
     f38:	08 f4       	brcc	.+2      	; 0xf3c <KPD_Interface_RemoteAdmin+0x66c>
     f3a:	c9 c0       	rjmp	.+402    	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
							{
								dimmer_brightness = 100;
     f3c:	84 e6       	ldi	r24, 0x64	; 100
     f3e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	68 ec       	ldi	r22, 0xC8	; 200
     f48:	72 e4       	ldi	r23, 0x42	; 66
     f4a:	88 ee       	ldi	r24, 0xE8	; 232
     f4c:	93 e0       	ldi	r25, 0x03	; 3
     f4e:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
     f52:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
     f54:	82 33       	cpi	r24, 0x32	; 50
     f56:	99 f5       	brne	.+102    	; 0xfbe <KPD_Interface_RemoteAdmin+0x6ee>
						{
							dimmer_brightness -= 10;
     f58:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
     f5c:	6a 50       	subi	r22, 0x0A	; 10
     f5e:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
     f6c:	ab 01       	movw	r20, r22
     f6e:	bc 01       	movw	r22, r24
     f70:	88 ee       	ldi	r24, 0xE8	; 232
     f72:	93 e0       	ldi	r25, 0x03	; 3
     f74:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
     f78:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
     f7c:	1f 92       	push	r1
     f7e:	8f 93       	push	r24
     f80:	8f e0       	ldi	r24, 0x0F	; 15
     f82:	93 e0       	ldi	r25, 0x03	; 3
     f84:	9f 93       	push	r25
     f86:	8f 93       	push	r24
     f88:	82 e4       	ldi	r24, 0x42	; 66
     f8a:	94 e0       	ldi	r25, 0x04	; 4
     f8c:	9f 93       	push	r25
     f8e:	8f 93       	push	r24
     f90:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
     f94:	82 e4       	ldi	r24, 0x42	; 66
     f96:	94 e0       	ldi	r25, 0x04	; 4
     f98:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
     f9c:	8d e0       	ldi	r24, 0x0D	; 13
     f9e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
     fa2:	8f e1       	ldi	r24, 0x1F	; 31
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
     faa:	8d e0       	ldi	r24, 0x0D	; 13
     fac:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	08 95       	ret
						}
						else if (bluetooh_value == '0')
     fbe:	80 33       	cpi	r24, 0x30	; 48
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <KPD_Interface_RemoteAdmin+0x6f4>
     fc2:	85 c0       	rjmp	.+266    	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
     fc4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
     fc8:	81 11       	cpse	r24, r1
     fca:	7e cf       	rjmp	.-260    	; 0xec8 <KPD_Interface_RemoteAdmin+0x5f8>
     fcc:	08 95       	ret
			break;

			case ('3'):
			
				
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
     fce:	60 e3       	ldi	r22, 0x30	; 48
     fd0:	74 e0       	ldi	r23, 0x04	; 4
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
     fd8:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <__data_end>
     fdc:	1f 92       	push	r1
     fde:	8f 93       	push	r24
     fe0:	85 e1       	ldi	r24, 0x15	; 21
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	9f 93       	push	r25
     fe6:	8f 93       	push	r24
     fe8:	86 e5       	ldi	r24, 0x56	; 86
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	9f 93       	push	r25
     fee:	8f 93       	push	r24
     ff0:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
				BL_voidTxString(tempString);
     ff4:	86 e5       	ldi	r24, 0x56	; 86
     ff6:	94 e0       	ldi	r25, 0x04	; 4
     ff8:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
     ffc:	8d e0       	ldi	r24, 0x0D	; 13
     ffe:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    1002:	85 e2       	ldi	r24, 0x25	; 37
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
    100a:	8d e0       	ldi	r24, 0x0D	; 13
    100c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    1010:	80 e4       	ldi	r24, 0x40	; 64
    1012:	94 e0       	ldi	r25, 0x04	; 4
    1014:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
				if (bluetooh_value=='0')
				{
					
				}
				break;
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	08 95       	ret

			case ('4'):
				if (door_angle==0)
    1026:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <door_angle>
    102a:	81 11       	cpse	r24, r1
    102c:	27 c0       	rjmp	.+78     	; 0x107c <KPD_Interface_RemoteAdmin+0x7ac>
				{
					BL_voidTxString("Door is closed");
    102e:	8e e3       	ldi	r24, 0x3E	; 62
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1036:	8d e0       	ldi	r24, 0x0D	; 13
    1038:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidTxString("1-Open Door 0-Home");
    103c:	8d e4       	ldi	r24, 0x4D	; 77
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1044:	8d e0       	ldi	r24, 0x0D	; 13
    1046:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    104a:	80 e4       	ldi	r24, 0x40	; 64
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
					BL_voidTxChar('\r');
    1052:	8d e0       	ldi	r24, 0x0D	; 13
    1054:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					if (bluetooh_value=='1')
    1058:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    105c:	81 33       	cpi	r24, 0x31	; 49
    105e:	b9 f5       	brne	.+110    	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
					{
						BL_voidTxString("Door is opening");
    1060:	80 e6       	ldi	r24, 0x60	; 96
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
						SERVO_voidStartByAngle(90);
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	84 eb       	ldi	r24, 0xB4	; 180
    106e:	92 e4       	ldi	r25, 0x42	; 66
    1070:	0e 94 34 14 	call	0x2868	; 0x2868 <SERVO_voidStartByAngle>
						door_angle=90;
    1074:	8a e5       	ldi	r24, 0x5A	; 90
    1076:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <door_angle>
    107a:	08 95       	ret
						break;
					}
					break;

				}
				else if (door_angle==90)
    107c:	8a 35       	cpi	r24, 0x5A	; 90
    107e:	39 f5       	brne	.+78     	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
				{
					BL_voidTxString("Door is open");
    1080:	80 e7       	ldi	r24, 0x70	; 112
    1082:	93 e0       	ldi	r25, 0x03	; 3
    1084:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1088:	8d e0       	ldi	r24, 0x0D	; 13
    108a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidTxString("1-Close Door 0-Home");
    108e:	8d e7       	ldi	r24, 0x7D	; 125
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1096:	8d e0       	ldi	r24, 0x0D	; 13
    1098:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    109c:	80 e4       	ldi	r24, 0x40	; 64
    109e:	94 e0       	ldi	r25, 0x04	; 4
    10a0:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
					BL_voidTxChar('\r');
    10a4:	8d e0       	ldi	r24, 0x0D	; 13
    10a6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					if (bluetooh_value=='1')
    10aa:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    10ae:	81 33       	cpi	r24, 0x31	; 49
    10b0:	71 f4       	brne	.+28     	; 0x10ce <KPD_Interface_RemoteAdmin+0x7fe>
					{
						BL_voidTxString("Door is closing");
    10b2:	81 e9       	ldi	r24, 0x91	; 145
    10b4:	93 e0       	ldi	r25, 0x03	; 3
    10b6:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
						SERVO_voidStartByAngle(0);
    10ba:	60 e0       	ldi	r22, 0x00	; 0
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	cb 01       	movw	r24, r22
    10c0:	0e 94 34 14 	call	0x2868	; 0x2868 <SERVO_voidStartByAngle>
						door_angle=0;
    10c4:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <door_angle>
    10c8:	08 95       	ret
				}			
			break;


			case ('5'):
			HOME_voidChangeUserNameAndPass();
    10ca:	0e 94 78 03 	call	0x6f0	; 0x6f0 <HOME_voidChangeUserNameAndPass>
    10ce:	08 95       	ret

000010d0 <KPD_Interface_RemoteUser>:
	}


void KPD_Interface_RemoteUser(void)
{
	TMR0_SetCallBackCTC(&Idle_RemoteAction);
    10d0:	87 ec       	ldi	r24, 0xC7	; 199
    10d2:	9c e0       	ldi	r25, 0x0C	; 12
    10d4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TMR0_SetCallBackCTC>
	BL_voidTxChar('\r');
    10d8:	8d e0       	ldi	r24, 0x0D	; 13
    10da:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	BL_voidTxString("1-AC 2-light");
    10de:	8d ec       	ldi	r24, 0xCD	; 205
    10e0:	91 e0       	ldi	r25, 0x01	; 1
    10e2:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxChar('\r');
    10e6:	8d e0       	ldi	r24, 0x0D	; 13
    10e8:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	BL_voidTxString("3-temp 4-Door");
    10ec:	8a ed       	ldi	r24, 0xDA	; 218
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxChar('\r');
    10f4:	8d e0       	ldi	r24, 0x0D	; 13
    10f6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	TMR0_voidStart();
    10fa:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
	BL_voidRxChar(&bluetooh_value);
    10fe:	80 e4       	ldi	r24, 0x40	; 64
    1100:	94 e0       	ldi	r25, 0x04	; 4
    1102:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
	TMR0_voidStop();
    1106:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
	switch (bluetooh_value)
    110a:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    110e:	82 33       	cpi	r24, 0x32	; 50
    1110:	e9 f1       	breq	.+122    	; 0x118c <KPD_Interface_RemoteUser+0xbc>
    1112:	83 33       	cpi	r24, 0x33	; 51
    1114:	09 f4       	brne	.+2      	; 0x1118 <KPD_Interface_RemoteUser+0x48>
    1116:	4a c3       	rjmp	.+1684   	; 0x17ac <KPD_Interface_RemoteUser+0x6dc>
    1118:	81 33       	cpi	r24, 0x31	; 49
    111a:	09 f0       	breq	.+2      	; 0x111e <KPD_Interface_RemoteUser+0x4e>
    111c:	72 c3       	rjmp	.+1764   	; 0x1802 <KPD_Interface_RemoteUser+0x732>
	{
	case ('1'):
		BL_voidTxString("AC Is On/off");
    111e:	88 e0       	ldi	r24, 0x08	; 8
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
        BL_voidTxChar('\r');
    1126:	8d e0       	ldi	r24, 0x0D	; 13
    1128:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
        ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    112c:	60 e3       	ldi	r22, 0x30	; 48
    112e:	74 e0       	ldi	r23, 0x04	; 4
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    1136:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <__data_end>
    113a:	1f 92       	push	r1
    113c:	8f 93       	push	r24
    113e:	85 e1       	ldi	r24, 0x15	; 21
    1140:	92 e0       	ldi	r25, 0x02	; 2
    1142:	9f 93       	push	r25
    1144:	8f 93       	push	r24
    1146:	86 e5       	ldi	r24, 0x56	; 86
    1148:	94 e0       	ldi	r25, 0x04	; 4
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
				BL_voidTxString(tempString);
    1152:	86 e5       	ldi	r24, 0x56	; 86
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
    115a:	8d e0       	ldi	r24, 0x0D	; 13
    115c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    1160:	85 e2       	ldi	r24, 0x25	; 37
    1162:	92 e0       	ldi	r25, 0x02	; 2
    1164:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
    1168:	8d e0       	ldi	r24, 0x0D	; 13
    116a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				TMR0_voidStart();
    116e:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
				BL_voidRxChar(&bluetooh_value);
    1172:	80 e4       	ldi	r24, 0x40	; 64
    1174:	94 e0       	ldi	r25, 0x04	; 4
    1176:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
				TMR0_voidStop();
    117a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
				if (bluetooh_value=='0')
				{
					
				}
		break;
    117e:	0f 90       	pop	r0
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	08 95       	ret
	
	case ('2'):

       
	   		BL_voidTxChar('\r');     
    118c:	8d e0       	ldi	r24, 0x0D	; 13
    118e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
            BL_voidTxString("Choose light to");
    1192:	82 e3       	ldi	r24, 0x32	; 50
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
            BL_voidTxChar('\r');
    119a:	8d e0       	ldi	r24, 0x0D	; 13
    119c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
            BL_voidTxString("control(1-6)");
    11a0:	82 e4       	ldi	r24, 0x42	; 66
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
			BL_voidTxChar('\r');
    11a8:	8d e0       	ldi	r24, 0x0D	; 13
    11aa:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
			BL_voidTxChar('\r');
    11ae:	8d e0       	ldi	r24, 0x0D	; 13
    11b0:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
            TMR0_voidStart();
    11b4:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
			BL_voidRxChar(&bluetooh_value);
    11b8:	80 e4       	ldi	r24, 0x40	; 64
    11ba:	94 e0       	ldi	r25, 0x04	; 4
    11bc:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
            TMR0_voidStop();
    11c0:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
            switch (bluetooh_value)
    11c4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    11c8:	83 33       	cpi	r24, 0x33	; 51
    11ca:	09 f4       	brne	.+2      	; 0x11ce <KPD_Interface_RemoteUser+0xfe>
    11cc:	a0 c0       	rjmp	.+320    	; 0x130e <KPD_Interface_RemoteUser+0x23e>
    11ce:	30 f4       	brcc	.+12     	; 0x11dc <KPD_Interface_RemoteUser+0x10c>
    11d0:	81 33       	cpi	r24, 0x31	; 49
    11d2:	69 f0       	breq	.+26     	; 0x11ee <KPD_Interface_RemoteUser+0x11e>
    11d4:	82 33       	cpi	r24, 0x32	; 50
    11d6:	09 f4       	brne	.+2      	; 0x11da <KPD_Interface_RemoteUser+0x10a>
    11d8:	50 c0       	rjmp	.+160    	; 0x127a <KPD_Interface_RemoteUser+0x1aa>
    11da:	08 95       	ret
    11dc:	85 33       	cpi	r24, 0x35	; 53
    11de:	09 f4       	brne	.+2      	; 0x11e2 <KPD_Interface_RemoteUser+0x112>
    11e0:	2a c1       	rjmp	.+596    	; 0x1436 <KPD_Interface_RemoteUser+0x366>
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <KPD_Interface_RemoteUser+0x116>
    11e4:	de c0       	rjmp	.+444    	; 0x13a2 <KPD_Interface_RemoteUser+0x2d2>
    11e6:	86 33       	cpi	r24, 0x36	; 54
    11e8:	09 f4       	brne	.+2      	; 0x11ec <KPD_Interface_RemoteUser+0x11c>
    11ea:	6f c1       	rjmp	.+734    	; 0x14ca <KPD_Interface_RemoteUser+0x3fa>
    11ec:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    11ee:	42 e3       	ldi	r20, 0x32	; 50
    11f0:	54 e0       	ldi	r21, 0x04	; 4
    11f2:	63 e0       	ldi	r22, 0x03	; 3
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    11fa:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	e9 f4       	brne	.+58     	; 0x123c <KPD_Interface_RemoteUser+0x16c>
                {
                    BL_voidTxString("Light 1 is On");
    1202:	8f e4       	ldi	r24, 0x4F	; 79
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    120a:	8d e0       	ldi	r24, 0x0D	; 13
    120c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1210:	8d e5       	ldi	r24, 0x5D	; 93
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1218:	8d e0       	ldi	r24, 0x0D	; 13
    121a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    121e:	80 e4       	ldi	r24, 0x40	; 64
    1220:	94 e0       	ldi	r25, 0x04	; 4
    1222:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    1226:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    122a:	81 33       	cpi	r24, 0x31	; 49
    122c:	09 f0       	breq	.+2      	; 0x1230 <KPD_Interface_RemoteUser+0x160>
    122e:	e9 c2       	rjmp	.+1490   	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	63 e0       	ldi	r22, 0x03	; 3
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
    123a:	08 95       	ret
                    }
                    
					break;
                }
                else if (led_status == 0)
    123c:	81 11       	cpse	r24, r1
    123e:	e1 c2       	rjmp	.+1474   	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 1 is OFF");
    1240:	8e e6       	ldi	r24, 0x6E	; 110
    1242:	92 e0       	ldi	r25, 0x02	; 2
    1244:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1248:	8d e0       	ldi	r24, 0x0D	; 13
    124a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    124e:	8d e7       	ldi	r24, 0x7D	; 125
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1256:	8d e0       	ldi	r24, 0x0D	; 13
    1258:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    125c:	80 e4       	ldi	r24, 0x40	; 64
    125e:	94 e0       	ldi	r25, 0x04	; 4
    1260:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    1264:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    1268:	81 33       	cpi	r24, 0x31	; 49
    126a:	09 f0       	breq	.+2      	; 0x126e <KPD_Interface_RemoteUser+0x19e>
    126c:	ca c2       	rjmp	.+1428   	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    126e:	41 e0       	ldi	r20, 0x01	; 1
    1270:	63 e0       	ldi	r22, 0x03	; 3
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
    1278:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTB, DIO_PIN0, &led_status);
    127a:	42 e3       	ldi	r20, 0x32	; 50
    127c:	54 e0       	ldi	r21, 0x04	; 4
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    1286:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	f9 f4       	brne	.+62     	; 0x12cc <KPD_Interface_RemoteUser+0x1fc>
                {
                    BL_voidTxString("Light 2 is On");
    128e:	8d e8       	ldi	r24, 0x8D	; 141
    1290:	92 e0       	ldi	r25, 0x02	; 2
    1292:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1296:	8d e0       	ldi	r24, 0x0D	; 13
    1298:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    129c:	8d e5       	ldi	r24, 0x5D	; 93
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    12a4:	8d e0       	ldi	r24, 0x0D	; 13
    12a6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    12aa:	80 e4       	ldi	r24, 0x40	; 64
    12ac:	94 e0       	ldi	r25, 0x04	; 4
    12ae:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    12b2:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    12b6:	81 33       	cpi	r24, 0x31	; 49
    12b8:	29 f4       	brne	.+10     	; 0x12c4 <KPD_Interface_RemoteUser+0x1f4>
                    {
                        LED_voidOff(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    12ca:	08 95       	ret
                }
                else if (led_status == 0)
    12cc:	81 11       	cpse	r24, r1
    12ce:	99 c2       	rjmp	.+1330   	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 2 is OFF");
    12d0:	8b e9       	ldi	r24, 0x9B	; 155
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    12d8:	8d e0       	ldi	r24, 0x0D	; 13
    12da:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    12de:	8d e7       	ldi	r24, 0x7D	; 125
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    12e6:	8d e0       	ldi	r24, 0x0D	; 13
    12e8:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    12ec:	80 e4       	ldi	r24, 0x40	; 64
    12ee:	94 e0       	ldi	r25, 0x04	; 4
    12f0:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
                    if (bluetooh_value == '1')
    12f4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    12f8:	81 33       	cpi	r24, 0x31	; 49
    12fa:	29 f4       	brne	.+10     	; 0x1306 <KPD_Interface_RemoteUser+0x236>
                    {
                        LED_voidOn(DIO_PORTB, DIO_PIN0, LED_FORWARD_CONNECTION);
    12fc:	41 e0       	ldi	r20, 0x01	; 1
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    130c:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    130e:	42 e3       	ldi	r20, 0x32	; 50
    1310:	54 e0       	ldi	r21, 0x04	; 4
    1312:	62 e0       	ldi	r22, 0x02	; 2
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    131a:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	f9 f4       	brne	.+62     	; 0x1360 <KPD_Interface_RemoteUser+0x290>
                {
                    BL_voidTxString("Light 3 is On");
    1322:	8a ea       	ldi	r24, 0xAA	; 170
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    132a:	8d e0       	ldi	r24, 0x0D	; 13
    132c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1330:	8d e5       	ldi	r24, 0x5D	; 93
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1338:	8d e0       	ldi	r24, 0x0D	; 13
    133a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    133e:	80 e4       	ldi	r24, 0x40	; 64
    1340:	94 e0       	ldi	r25, 0x04	; 4
    1342:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1346:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    134a:	81 33       	cpi	r24, 0x31	; 49
    134c:	29 f4       	brne	.+10     	; 0x1358 <KPD_Interface_RemoteUser+0x288>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    134e:	41 e0       	ldi	r20, 0x01	; 1
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    135e:	08 95       	ret
                }
                else if (led_status == 0)
    1360:	81 11       	cpse	r24, r1
    1362:	4f c2       	rjmp	.+1182   	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 3 is OFF");
    1364:	88 eb       	ldi	r24, 0xB8	; 184
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    136c:	8d e0       	ldi	r24, 0x0D	; 13
    136e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1372:	8d e7       	ldi	r24, 0x7D	; 125
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    137a:	8d e0       	ldi	r24, 0x0D	; 13
    137c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1380:	80 e4       	ldi	r24, 0x40	; 64
    1382:	94 e0       	ldi	r25, 0x04	; 4
    1384:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    1388:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    138c:	81 33       	cpi	r24, 0x31	; 49
    138e:	29 f4       	brne	.+10     	; 0x139a <KPD_Interface_RemoteUser+0x2ca>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1390:	41 e0       	ldi	r20, 0x01	; 1
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    13a0:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    13a2:	42 e3       	ldi	r20, 0x32	; 50
    13a4:	54 e0       	ldi	r21, 0x04	; 4
    13a6:	63 e0       	ldi	r22, 0x03	; 3
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    13ae:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	f9 f4       	brne	.+62     	; 0x13f4 <KPD_Interface_RemoteUser+0x324>
                {
                    BL_voidTxString("Light 4 is On");
    13b6:	87 ec       	ldi	r24, 0xC7	; 199
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    13be:	8d e0       	ldi	r24, 0x0D	; 13
    13c0:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    13c4:	8d e5       	ldi	r24, 0x5D	; 93
    13c6:	92 e0       	ldi	r25, 0x02	; 2
    13c8:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    13cc:	8d e0       	ldi	r24, 0x0D	; 13
    13ce:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    13d2:	80 e4       	ldi	r24, 0x40	; 64
    13d4:	94 e0       	ldi	r25, 0x04	; 4
    13d6:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    13da:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    13de:	81 33       	cpi	r24, 0x31	; 49
    13e0:	29 f4       	brne	.+10     	; 0x13ec <KPD_Interface_RemoteUser+0x31c>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	63 e0       	ldi	r22, 0x03	; 3
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    13f2:	08 95       	ret
                }
                else if (led_status == 0)
    13f4:	81 11       	cpse	r24, r1
    13f6:	05 c2       	rjmp	.+1034   	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 4 is OFF");
    13f8:	85 ed       	ldi	r24, 0xD5	; 213
    13fa:	92 e0       	ldi	r25, 0x02	; 2
    13fc:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1400:	8d e0       	ldi	r24, 0x0D	; 13
    1402:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    1406:	8d e7       	ldi	r24, 0x7D	; 125
    1408:	92 e0       	ldi	r25, 0x02	; 2
    140a:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    140e:	8d e0       	ldi	r24, 0x0D	; 13
    1410:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1414:	80 e4       	ldi	r24, 0x40	; 64
    1416:	94 e0       	ldi	r25, 0x04	; 4
    1418:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    141c:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    1420:	81 33       	cpi	r24, 0x31	; 49
    1422:	29 f4       	brne	.+10     	; 0x142e <KPD_Interface_RemoteUser+0x35e>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	63 e0       	ldi	r22, 0x03	; 3
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    1434:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    1436:	42 e3       	ldi	r20, 0x32	; 50
    1438:	54 e0       	ldi	r21, 0x04	; 4
    143a:	62 e0       	ldi	r22, 0x02	; 2
    143c:	83 e0       	ldi	r24, 0x03	; 3
    143e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                
                if (led_status == 1)
    1442:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	f9 f4       	brne	.+62     	; 0x1488 <KPD_Interface_RemoteUser+0x3b8>
                {
                    BL_voidTxString("Light 5 is On");
    144a:	84 ee       	ldi	r24, 0xE4	; 228
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1452:	8d e0       	ldi	r24, 0x0D	; 13
    1454:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It Off");
    1458:	8d e5       	ldi	r24, 0x5D	; 93
    145a:	92 e0       	ldi	r25, 0x02	; 2
    145c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    1460:	8d e0       	ldi	r24, 0x0D	; 13
    1462:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1466:	80 e4       	ldi	r24, 0x40	; 64
    1468:	94 e0       	ldi	r25, 0x04	; 4
    146a:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    146e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    1472:	81 33       	cpi	r24, 0x31	; 49
    1474:	29 f4       	brne	.+10     	; 0x1480 <KPD_Interface_RemoteUser+0x3b0>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	62 e0       	ldi	r22, 0x02	; 2
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    1486:	08 95       	ret
                }
                else if (led_status == 0)
    1488:	81 11       	cpse	r24, r1
    148a:	bb c1       	rjmp	.+886    	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 5 is OFF");
    148c:	82 ef       	ldi	r24, 0xF2	; 242
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    1494:	8d e0       	ldi	r24, 0x0D	; 13
    1496:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1-To Turn It On");
    149a:	8d e7       	ldi	r24, 0x7D	; 125
    149c:	92 e0       	ldi	r25, 0x02	; 2
    149e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    14a2:	8d e0       	ldi	r24, 0x0D	; 13
    14a4:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    14a8:	80 e4       	ldi	r24, 0x40	; 64
    14aa:	94 e0       	ldi	r25, 0x04	; 4
    14ac:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>

                    if (bluetooh_value == '1')
    14b0:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    14b4:	81 33       	cpi	r24, 0x31	; 49
    14b6:	29 f4       	brne	.+10     	; 0x14c2 <KPD_Interface_RemoteUser+0x3f2>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    14b8:	41 e0       	ldi	r20, 0x01	; 1
    14ba:	62 e0       	ldi	r22, 0x02	; 2
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    bluetooh_value = KPD_Not_Pressed;
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <bluetooh_value>
    14c8:	08 95       	ret

            case ('6'):
				
                
				
                if (dimmer_brightness > 0)
    14ca:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    14ce:	88 23       	and	r24, r24
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <KPD_Interface_RemoteUser+0x404>
    14d2:	b1 c0       	rjmp	.+354    	; 0x1636 <KPD_Interface_RemoteUser+0x566>
                {
					 BL_voidTxChar('\r');
    14d4:	8d e0       	ldi	r24, 0x0D	; 13
    14d6:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("Light 6 is On");
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    14e2:	8d e0       	ldi	r24, 0x0D	; 13
    14e4:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    14e8:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    14ec:	1f 92       	push	r1
    14ee:	8f 93       	push	r24
    14f0:	8f e0       	ldi	r24, 0x0F	; 15
    14f2:	93 e0       	ldi	r25, 0x03	; 3
    14f4:	9f 93       	push	r25
    14f6:	8f 93       	push	r24
    14f8:	82 e4       	ldi	r24, 0x42	; 66
    14fa:	94 e0       	ldi	r25, 0x04	; 4
    14fc:	9f 93       	push	r25
    14fe:	8f 93       	push	r24
    1500:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
					BL_voidTxString(DimmerString);
    1504:	82 e4       	ldi	r24, 0x42	; 66
    1506:	94 e0       	ldi	r25, 0x04	; 4
    1508:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    150c:	8d e0       	ldi	r24, 0x0D	; 13
    150e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    1512:	8f e1       	ldi	r24, 0x1F	; 31
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    151a:	8d e0       	ldi	r24, 0x0D	; 13
    151c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1520:	80 e4       	ldi	r24, 0x40	; 64
    1522:	94 e0       	ldi	r25, 0x04	; 4
    1524:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
					while (bluetooh_value != 0)
    1528:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	88 23       	and	r24, r24
    153a:	09 f4       	brne	.+2      	; 0x153e <KPD_Interface_RemoteUser+0x46e>
    153c:	62 c1       	rjmp	.+708    	; 0x1802 <KPD_Interface_RemoteUser+0x732>
					{
						if (bluetooh_value == '1')
    153e:	81 33       	cpi	r24, 0x31	; 49
    1540:	09 f0       	breq	.+2      	; 0x1544 <KPD_Interface_RemoteUser+0x474>
    1542:	43 c0       	rjmp	.+134    	; 0x15ca <KPD_Interface_RemoteUser+0x4fa>
						{
							dimmer_brightness += 10;
    1544:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    1548:	66 5f       	subi	r22, 0xF6	; 246
    154a:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    1558:	ab 01       	movw	r20, r22
    155a:	bc 01       	movw	r22, r24
    155c:	88 ee       	ldi	r24, 0xE8	; 232
    155e:	93 e0       	ldi	r25, 0x03	; 3
    1560:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1564:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    1568:	1f 92       	push	r1
    156a:	8f 93       	push	r24
    156c:	8f e0       	ldi	r24, 0x0F	; 15
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	9f 93       	push	r25
    1572:	8f 93       	push	r24
    1574:	82 e4       	ldi	r24, 0x42	; 66
    1576:	94 e0       	ldi	r25, 0x04	; 4
    1578:	9f 93       	push	r25
    157a:	8f 93       	push	r24
    157c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
    1580:	82 e4       	ldi	r24, 0x42	; 66
    1582:	94 e0       	ldi	r25, 0x04	; 4
    1584:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1588:	8d e0       	ldi	r24, 0x0D	; 13
    158a:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    158e:	8f e1       	ldi	r24, 0x1F	; 31
    1590:	93 e0       	ldi	r25, 0x03	; 3
    1592:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
    1596:	8d e0       	ldi	r24, 0x0D	; 13
    1598:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness > 100)
    159c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	85 36       	cpi	r24, 0x65	; 101
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <KPD_Interface_RemoteUser+0x4e2>
    15b0:	28 c1       	rjmp	.+592    	; 0x1802 <KPD_Interface_RemoteUser+0x732>
							{
								dimmer_brightness = 100;
    15b2:	84 e6       	ldi	r24, 0x64	; 100
    15b4:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	68 ec       	ldi	r22, 0xC8	; 200
    15be:	72 e4       	ldi	r23, 0x42	; 66
    15c0:	88 ee       	ldi	r24, 0xE8	; 232
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
    15c8:	08 95       	ret
							}
							break;													
						}
						else if (bluetooh_value == '2')
    15ca:	82 33       	cpi	r24, 0x32	; 50
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <KPD_Interface_RemoteUser+0x500>
    15ce:	19 c1       	rjmp	.+562    	; 0x1802 <KPD_Interface_RemoteUser+0x732>
						{
							dimmer_brightness -= 10;
    15d0:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    15d4:	6a 50       	subi	r22, 0x0A	; 10
    15d6:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    15e4:	ab 01       	movw	r20, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	88 ee       	ldi	r24, 0xE8	; 232
    15ea:	93 e0       	ldi	r25, 0x03	; 3
    15ec:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    15f0:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    15f4:	1f 92       	push	r1
    15f6:	8f 93       	push	r24
    15f8:	8f e0       	ldi	r24, 0x0F	; 15
    15fa:	93 e0       	ldi	r25, 0x03	; 3
    15fc:	9f 93       	push	r25
    15fe:	8f 93       	push	r24
    1600:	82 e4       	ldi	r24, 0x42	; 66
    1602:	94 e0       	ldi	r25, 0x04	; 4
    1604:	9f 93       	push	r25
    1606:	8f 93       	push	r24
    1608:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
    160c:	82 e4       	ldi	r24, 0x42	; 66
    160e:	94 e0       	ldi	r25, 0x04	; 4
    1610:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    1614:	8d e0       	ldi	r24, 0x0D	; 13
    1616:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    161a:	8f e1       	ldi	r24, 0x1F	; 31
    161c:	93 e0       	ldi	r25, 0x03	; 3
    161e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
    1622:	8d e0       	ldi	r24, 0x0D	; 13
    1624:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	08 95       	ret
						break;					
	
					}
					
                }
                else if (dimmer_brightness == 0)
    1636:	81 11       	cpse	r24, r1
    1638:	e4 c0       	rjmp	.+456    	; 0x1802 <KPD_Interface_RemoteUser+0x732>
                {
                    BL_voidTxString("Light 6 is OFF");
    163a:	8f e2       	ldi	r24, 0x2F	; 47
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
    1642:	2f ef       	ldi	r18, 0xFF	; 255
    1644:	83 ed       	ldi	r24, 0xD3	; 211
    1646:	90 e3       	ldi	r25, 0x30	; 48
    1648:	21 50       	subi	r18, 0x01	; 1
    164a:	80 40       	sbci	r24, 0x00	; 0
    164c:	90 40       	sbci	r25, 0x00	; 0
    164e:	e1 f7       	brne	.-8      	; 0x1648 <KPD_Interface_RemoteUser+0x578>
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <KPD_Interface_RemoteUser+0x582>
    1652:	00 00       	nop
					_delay_ms(1000);
					BL_voidTxChar('\r');
    1654:	8d e0       	ldi	r24, 0x0D	; 13
    1656:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    165a:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    165e:	1f 92       	push	r1
    1660:	8f 93       	push	r24
    1662:	8f e0       	ldi	r24, 0x0F	; 15
    1664:	93 e0       	ldi	r25, 0x03	; 3
    1666:	9f 93       	push	r25
    1668:	8f 93       	push	r24
    166a:	82 e4       	ldi	r24, 0x42	; 66
    166c:	94 e0       	ldi	r25, 0x04	; 4
    166e:	9f 93       	push	r25
    1670:	8f 93       	push	r24
    1672:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
					BL_voidTxString(DimmerString);
    1676:	82 e4       	ldi	r24, 0x42	; 66
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    BL_voidTxChar('\r');
    167e:	8d e0       	ldi	r24, 0x0D	; 13
    1680:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    BL_voidTxString("1)+10 2)-10 0)H");
    1684:	8f e1       	ldi	r24, 0x1F	; 31
    1686:	93 e0       	ldi	r25, 0x03	; 3
    1688:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
					BL_voidTxChar('\r');
    168c:	8d e0       	ldi	r24, 0x0D	; 13
    168e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
					BL_voidRxChar(&bluetooh_value);
    1692:	80 e4       	ldi	r24, 0x40	; 64
    1694:	94 e0       	ldi	r25, 0x04	; 4
    1696:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
					while (bluetooh_value != 0)
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	7d c0       	rjmp	.+250    	; 0x17a2 <KPD_Interface_RemoteUser+0x6d2>
					{
						if (bluetooh_value == '1')
    16a8:	81 33       	cpi	r24, 0x31	; 49
    16aa:	09 f0       	breq	.+2      	; 0x16ae <KPD_Interface_RemoteUser+0x5de>
    16ac:	43 c0       	rjmp	.+134    	; 0x1734 <KPD_Interface_RemoteUser+0x664>
						{
							dimmer_brightness += 10;
    16ae:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    16b2:	66 5f       	subi	r22, 0xF6	; 246
    16b4:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    16c2:	ab 01       	movw	r20, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	88 ee       	ldi	r24, 0xE8	; 232
    16c8:	93 e0       	ldi	r25, 0x03	; 3
    16ca:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    16ce:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    16d2:	1f 92       	push	r1
    16d4:	8f 93       	push	r24
    16d6:	8f e0       	ldi	r24, 0x0F	; 15
    16d8:	93 e0       	ldi	r25, 0x03	; 3
    16da:	9f 93       	push	r25
    16dc:	8f 93       	push	r24
    16de:	82 e4       	ldi	r24, 0x42	; 66
    16e0:	94 e0       	ldi	r25, 0x04	; 4
    16e2:	9f 93       	push	r25
    16e4:	8f 93       	push	r24
    16e6:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
    16ea:	82 e4       	ldi	r24, 0x42	; 66
    16ec:	94 e0       	ldi	r25, 0x04	; 4
    16ee:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    16f2:	8d e0       	ldi	r24, 0x0D	; 13
    16f4:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    16f8:	8f e1       	ldi	r24, 0x1F	; 31
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
    1700:	8d e0       	ldi	r24, 0x0D	; 13
    1702:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness > 100)
    1706:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	85 36       	cpi	r24, 0x65	; 101
    1718:	08 f4       	brcc	.+2      	; 0x171c <KPD_Interface_RemoteUser+0x64c>
    171a:	73 c0       	rjmp	.+230    	; 0x1802 <KPD_Interface_RemoteUser+0x732>
							{
								dimmer_brightness = 100;
    171c:	84 e6       	ldi	r24, 0x64	; 100
    171e:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	68 ec       	ldi	r22, 0xC8	; 200
    1728:	72 e4       	ldi	r23, 0x42	; 66
    172a:	88 ee       	ldi	r24, 0xE8	; 232
    172c:	93 e0       	ldi	r25, 0x03	; 3
    172e:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
    1732:	08 95       	ret
							}
							break;
						
							
						}
						else if (bluetooh_value == '2')
    1734:	82 33       	cpi	r24, 0x32	; 50
    1736:	99 f5       	brne	.+102    	; 0x179e <KPD_Interface_RemoteUser+0x6ce>
						{
							dimmer_brightness -= 10;
    1738:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    173c:	6a 50       	subi	r22, 0x0A	; 10
    173e:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    174c:	ab 01       	movw	r20, r22
    174e:	bc 01       	movw	r22, r24
    1750:	88 ee       	ldi	r24, 0xE8	; 232
    1752:	93 e0       	ldi	r25, 0x03	; 3
    1754:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							sprintf(DimmerString, "Brightness: %d%", dimmer_brightness);
    1758:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    175c:	1f 92       	push	r1
    175e:	8f 93       	push	r24
    1760:	8f e0       	ldi	r24, 0x0F	; 15
    1762:	93 e0       	ldi	r25, 0x03	; 3
    1764:	9f 93       	push	r25
    1766:	8f 93       	push	r24
    1768:	82 e4       	ldi	r24, 0x42	; 66
    176a:	94 e0       	ldi	r25, 0x04	; 4
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
							BL_voidTxString(DimmerString);
    1774:	82 e4       	ldi	r24, 0x42	; 66
    1776:	94 e0       	ldi	r25, 0x04	; 4
    1778:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
                    		BL_voidTxChar('\r');
    177c:	8d e0       	ldi	r24, 0x0D	; 13
    177e:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
                    		BL_voidTxString("1)+10 2)-10 0)H");
    1782:	8f e1       	ldi	r24, 0x1F	; 31
    1784:	93 e0       	ldi	r25, 0x03	; 3
    1786:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
							BL_voidTxChar('\r');
    178a:	8d e0       	ldi	r24, 0x0D	; 13
    178c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							break;
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	08 95       	ret
						}
						else if (bluetooh_value == '0')
    179e:	80 33       	cpi	r24, 0x30	; 48
    17a0:	81 f1       	breq	.+96     	; 0x1802 <KPD_Interface_RemoteUser+0x732>
					BL_voidTxString(DimmerString);
                    BL_voidTxChar('\r');
                    BL_voidTxString("1)+10 2)-10 0)H");
					BL_voidTxChar('\r');
					BL_voidRxChar(&bluetooh_value);
					while (bluetooh_value != 0)
    17a2:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    17a6:	81 11       	cpse	r24, r1
    17a8:	7f cf       	rjmp	.-258    	; 0x16a8 <KPD_Interface_RemoteUser+0x5d8>
    17aa:	08 95       	ret
			break;

			case ('3'):
			
				
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    17ac:	60 e3       	ldi	r22, 0x30	; 48
    17ae:	74 e0       	ldi	r23, 0x04	; 4
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
				sprintf(tempString, "Room Temp: %d c", local_temp);
    17b6:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <__data_end>
    17ba:	1f 92       	push	r1
    17bc:	8f 93       	push	r24
    17be:	85 e1       	ldi	r24, 0x15	; 21
    17c0:	92 e0       	ldi	r25, 0x02	; 2
    17c2:	9f 93       	push	r25
    17c4:	8f 93       	push	r24
    17c6:	86 e5       	ldi	r24, 0x56	; 86
    17c8:	94 e0       	ldi	r25, 0x04	; 4
    17ca:	9f 93       	push	r25
    17cc:	8f 93       	push	r24
    17ce:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
				BL_voidTxString(tempString);
    17d2:	86 e5       	ldi	r24, 0x56	; 86
    17d4:	94 e0       	ldi	r25, 0x04	; 4
    17d6:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
    17da:	8d e0       	ldi	r24, 0x0D	; 13
    17dc:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				BL_voidTxString("0-go to home");
    17e0:	85 e2       	ldi	r24, 0x25	; 37
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
				BL_voidTxChar('\r');
    17e8:	8d e0       	ldi	r24, 0x0D	; 13
    17ea:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
				BL_voidRxChar(&bluetooh_value);	
    17ee:	80 e4       	ldi	r24, 0x40	; 64
    17f0:	94 e0       	ldi	r25, 0x04	; 4
    17f2:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
				{
					
				}

					
        break;
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	08 95       	ret

00001804 <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
    1804:	81 ea       	ldi	r24, 0xA1	; 161
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
    180c:	80 ec       	ldi	r24, 0xC0	; 192
    180e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
    1812:	82 eb       	ldi	r24, 0xB2	; 178
    1814:	93 e0       	ldi	r25, 0x03	; 3
    1816:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
    181a:	2f ef       	ldi	r18, 0xFF	; 255
    181c:	83 ed       	ldi	r24, 0xD3	; 211
    181e:	90 e3       	ldi	r25, 0x30	; 48
    1820:	21 50       	subi	r18, 0x01	; 1
    1822:	80 40       	sbci	r24, 0x00	; 0
    1824:	90 40       	sbci	r25, 0x00	; 0
    1826:	e1 f7       	brne	.-8      	; 0x1820 <WelcomeScreen+0x1c>
    1828:	00 c0       	rjmp	.+0      	; 0x182a <WelcomeScreen+0x26>
    182a:	00 00       	nop
    182c:	08 95       	ret

0000182e <APP_init>:




void APP_init(void)
{
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	e0 97       	sbiw	r28, 0x30	; 48
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
    1842:	0e 94 60 00 	call	0xc0	; 0xc0 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_INTRNAL);
    1846:	83 e0       	ldi	r24, 0x03	; 3
    1848:	0e 94 6d 14 	call	0x28da	; 0x28da <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>

	// AC PIN
	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	62 e0       	ldi	r22, 0x02	; 2
    185a:	82 e0       	ldi	r24, 0x02	; 2
    185c:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	//
	
	
	
	// display the welcome screen
	WelcomeScreen();
    1860:	0e 94 02 0c 	call	0x1804	; 0x1804 <WelcomeScreen>
	LCD_voidClear();
    1864:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>

	
	
	u8 testusername[8]="7654321";
    1868:	88 e0       	ldi	r24, 0x08	; 8
    186a:	e0 ec       	ldi	r30, 0xC0	; 192
    186c:	f3 e0       	ldi	r31, 0x03	; 3
    186e:	de 01       	movw	r26, r28
    1870:	11 96       	adiw	r26, 0x01	; 1
    1872:	01 90       	ld	r0, Z+
    1874:	0d 92       	st	X+, r0
    1876:	8a 95       	dec	r24
    1878:	e1 f7       	brne	.-8      	; 0x1872 <APP_init+0x44>
	u8 testuserpass[8]="7654321";
    187a:	88 e0       	ldi	r24, 0x08	; 8
    187c:	e0 ec       	ldi	r30, 0xC0	; 192
    187e:	f3 e0       	ldi	r31, 0x03	; 3
    1880:	de 01       	movw	r26, r28
    1882:	19 96       	adiw	r26, 0x09	; 9
    1884:	01 90       	ld	r0, Z+
    1886:	0d 92       	st	X+, r0
    1888:	8a 95       	dec	r24
    188a:	e1 f7       	brne	.-8      	; 0x1884 <APP_init+0x56>
	u8 testadminname[8]="1122334";
    188c:	88 e0       	ldi	r24, 0x08	; 8
    188e:	e8 ec       	ldi	r30, 0xC8	; 200
    1890:	f3 e0       	ldi	r31, 0x03	; 3
    1892:	de 01       	movw	r26, r28
    1894:	51 96       	adiw	r26, 0x11	; 17
    1896:	01 90       	ld	r0, Z+
    1898:	0d 92       	st	X+, r0
    189a:	8a 95       	dec	r24
    189c:	e1 f7       	brne	.-8      	; 0x1896 <APP_init+0x68>
	u8 testadminpass[8]="1122334";
    189e:	88 e0       	ldi	r24, 0x08	; 8
    18a0:	e8 ec       	ldi	r30, 0xC8	; 200
    18a2:	f3 e0       	ldi	r31, 0x03	; 3
    18a4:	de 01       	movw	r26, r28
    18a6:	59 96       	adiw	r26, 0x19	; 25
    18a8:	01 90       	ld	r0, Z+
    18aa:	0d 92       	st	X+, r0
    18ac:	8a 95       	dec	r24
    18ae:	e1 f7       	brne	.-8      	; 0x18a8 <APP_init+0x7a>
	u8 testusername1[8]="1002003";
    18b0:	88 e0       	ldi	r24, 0x08	; 8
    18b2:	e0 ed       	ldi	r30, 0xD0	; 208
    18b4:	f3 e0       	ldi	r31, 0x03	; 3
    18b6:	de 01       	movw	r26, r28
    18b8:	91 96       	adiw	r26, 0x21	; 33
    18ba:	01 90       	ld	r0, Z+
    18bc:	0d 92       	st	X+, r0
    18be:	8a 95       	dec	r24
    18c0:	e1 f7       	brne	.-8      	; 0x18ba <APP_init+0x8c>
	u8 testuserpass1[8]="1002003";
    18c2:	88 e0       	ldi	r24, 0x08	; 8
    18c4:	e0 ed       	ldi	r30, 0xD0	; 208
    18c6:	f3 e0       	ldi	r31, 0x03	; 3
    18c8:	de 01       	movw	r26, r28
    18ca:	99 96       	adiw	r26, 0x29	; 41
    18cc:	01 90       	ld	r0, Z+
    18ce:	0d 92       	st	X+, r0
    18d0:	8a 95       	dec	r24
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <APP_init+0x9e>
		
	
	EEPROM_voidWritePage(16,&testusername[0]);
    18d4:	be 01       	movw	r22, r28
    18d6:	6f 5f       	subi	r22, 0xFF	; 255
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	80 e1       	ldi	r24, 0x10	; 16
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
    18e2:	be 01       	movw	r22, r28
    18e4:	67 5f       	subi	r22, 0xF7	; 247
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	88 e1       	ldi	r24, 0x18	; 24
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(80,&testadminname[0]);
    18f0:	be 01       	movw	r22, r28
    18f2:	6f 5e       	subi	r22, 0xEF	; 239
    18f4:	7f 4f       	sbci	r23, 0xFF	; 255
    18f6:	80 e5       	ldi	r24, 0x50	; 80
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(88,&testadminpass[0]);
    18fe:	be 01       	movw	r22, r28
    1900:	67 5e       	subi	r22, 0xE7	; 231
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	88 e5       	ldi	r24, 0x58	; 88
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(96,&testusername1[0]);
    190c:	be 01       	movw	r22, r28
    190e:	6f 5d       	subi	r22, 0xDF	; 223
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	80 e6       	ldi	r24, 0x60	; 96
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>
	EEPROM_voidWritePage(104,&testuserpass1[0]);
    191a:	be 01       	movw	r22, r28
    191c:	67 5d       	subi	r22, 0xD7	; 215
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	88 e6       	ldi	r24, 0x68	; 104
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 c3 10 	call	0x2186	; 0x2186 <EEPROM_voidWritePage>

	
	HOME_voidCheckUserAndPass(HOME_REMOTE_ACCESS,&usertype);
    1928:	61 e4       	ldi	r22, 0x41	; 65
    192a:	74 e0       	ldi	r23, 0x04	; 4
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	0e 94 97 01 	call	0x32e	; 0x32e <HOME_voidCheckUserAndPass>
	// HOME_voidCheckUserAndPass(HOME_LOCAL_ACCESS,&usertype);
	HOME_voidFireAnALarm(usertype);
    1932:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <usertype>
    1936:	0e 94 28 04 	call	0x850	; 0x850 <HOME_voidFireAnALarm>





}
    193a:	e0 96       	adiw	r28, 0x30	; 48
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <Display_Remotetemp>:
    }
}

void Display_Remotetemp(void)
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp); 
    194c:	60 e3       	ldi	r22, 0x30	; 48
    194e:	74 e0       	ldi	r23, 0x04	; 4
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
	sprintf(tempString, "Room Temp: %d c", local_temp);
    1956:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <__data_end>
    195a:	1f 92       	push	r1
    195c:	8f 93       	push	r24
    195e:	85 e1       	ldi	r24, 0x15	; 21
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	9f 93       	push	r25
    1964:	8f 93       	push	r24
    1966:	86 e5       	ldi	r24, 0x56	; 86
    1968:	94 e0       	ldi	r25, 0x04	; 4
    196a:	9f 93       	push	r25
    196c:	8f 93       	push	r24
    196e:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <sprintf>
	BL_voidTxString(tempString);
    1972:	86 e5       	ldi	r24, 0x56	; 86
    1974:	94 e0       	ldi	r25, 0x04	; 4
    1976:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxChar('\r');
    197a:	8d e0       	ldi	r24, 0x0D	; 13
    197c:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	08 95       	ret

0000198e <Idle_RemoteAction>:



void Idle_RemoteAction()
{ 
    BL_voidTxChar('\r');
    198e:	8d e0       	ldi	r24, 0x0D	; 13
    1990:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	Display_Remotetemp();
    1994:	0e 94 a6 0c 	call	0x194c	; 0x194c <Display_Remotetemp>
	BL_voidTxString("0-Go to Home");
    1998:	88 ed       	ldi	r24, 0xD8	; 216
    199a:	93 e0       	ldi	r25, 0x03	; 3
    199c:	0e 94 93 10 	call	0x2126	; 0x2126 <BL_voidTxString>
	BL_voidTxChar('\r');
    19a0:	8d e0       	ldi	r24, 0x0D	; 13
    19a2:	0e 94 8d 10 	call	0x211a	; 0x211a <BL_voidTxChar>
	BL_voidRxChar(&bluetooh_value);
    19a6:	80 e4       	ldi	r24, 0x40	; 64
    19a8:	94 e0       	ldi	r25, 0x04	; 4
    19aa:	0e 94 90 10 	call	0x2120	; 0x2120 <BL_voidRxChar>
    if (bluetooh_value == '0')
    19ae:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <bluetooh_value>
    19b2:	80 33       	cpi	r24, 0x30	; 48
    19b4:	11 f4       	brne	.+4      	; 0x19ba <Idle_RemoteAction+0x2c>
    {
        TMR0clear_flag();
    19b6:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <TMR0clear_flag>
    19ba:	08 95       	ret

000019bc <Display_temp>:

}

void Display_temp(void)
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    19bc:	60 e3       	ldi	r22, 0x30	; 48
    19be:	74 e0       	ldi	r23, 0x04	; 4
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    19c6:	6b e0       	ldi	r22, 0x0B	; 11
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
    19ce:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <__data_end>
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
    19dc:	08 95       	ret

000019de <Idle_Action>:
	BL_voidTxChar('\r');
}

void Idle_Action()
{ 
    LCD_voidClear();
    19de:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
    19e2:	80 e8       	ldi	r24, 0x80	; 128
    19e4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
    19e8:	85 ee       	ldi	r24, 0xE5	; 229
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
	Display_temp();
    19f0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
    19f4:	80 ec       	ldi	r24, 0xC0	; 192
    19f6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
    19fa:	88 ed       	ldi	r24, 0xD8	; 216
    19fc:	93 e0       	ldi	r25, 0x03	; 3
    19fe:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
    1a04:	81 e6       	ldi	r24, 0x61	; 97
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
		Display_temp();
    1a0c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
    1a10:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1a14:	8f 3f       	cpi	r24, 0xFF	; 255
    1a16:	b1 f3       	breq	.-20     	; 0x1a04 <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
    1a18:	80 33       	cpi	r24, 0x30	; 48
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <Idle_Action+0x42>
    {
        LCD_voidClear();
    1a1c:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
    }
    TMR0clear_flag();
    1a20:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <TMR0clear_flag>
    LCD_voidClear();
    1a24:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
    1a28:	08 95       	ret

00001a2a <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
    1a2a:	8f ef       	ldi	r24, 0xFF	; 255
    1a2c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
    1a30:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
    1a34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
    1a38:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
    1a3c:	08 95       	ret

00001a3e <KPD_Interface_Localuser>:


void KPD_Interface_Localuser(void)
{

        Reset_AllKPDValues();
    1a3e:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&Idle_Action);
    1a42:	8f ee       	ldi	r24, 0xEF	; 239
    1a44:	9c e0       	ldi	r25, 0x0C	; 12
    1a46:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TMR0_SetCallBackCTC>

        TMR0_voidStart();
    1a4a:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
        LCD_voidClear();
    1a4e:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
    1a52:	8d ec       	ldi	r24, 0xCD	; 205
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
    1a5a:	80 ec       	ldi	r24, 0xC0	; 192
    1a5c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
    1a60:	8a ed       	ldi	r24, 0xDA	; 218
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
        Reset_AllKPDValues();
    1a68:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1a6c:	0c c0       	rjmp	.+24     	; 0x1a86 <KPD_Interface_Localuser+0x48>
        {
            if (local_KPDIdleValue == '0')
    1a6e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1a72:	80 33       	cpi	r24, 0x30	; 48
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <KPD_Interface_Localuser+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                break;
    1a7c:	08 c0       	rjmp	.+16     	; 0x1a8e <KPD_Interface_Localuser+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
    1a7e:	84 e6       	ldi	r24, 0x64	; 100
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
    1a86:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a8c:	81 f3       	breq	.-32     	; 0x1a6e <KPD_Interface_Localuser+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
    1a8e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
        switch (Local_copyKPDValue)
    1a92:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Local_copyKPDValue>
    1a96:	82 33       	cpi	r24, 0x32	; 50
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <KPD_Interface_Localuser+0x5e>
    1a9a:	45 c0       	rjmp	.+138    	; 0x1b26 <KPD_Interface_Localuser+0xe8>
    1a9c:	83 33       	cpi	r24, 0x33	; 51
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <KPD_Interface_Localuser+0x64>
    1aa0:	06 c3       	rjmp	.+1548   	; 0x20ae <KPD_Interface_Localuser+0x670>
    1aa2:	81 33       	cpi	r24, 0x31	; 49
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <KPD_Interface_Localuser+0x6a>
    1aa6:	35 c3       	rjmp	.+1642   	; 0x2112 <KPD_Interface_Localuser+0x6d4>
        {
        case ('1'):

            LCD_voidClear();
    1aa8:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off 0-H");
    1aac:	84 ef       	ldi	r24, 0xF4	; 244
    1aae:	93 e0       	ldi	r25, 0x03	; 3
    1ab0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1ab4:	80 ec       	ldi	r24, 0xC0	; 192
    1ab6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1aba:	60 e3       	ldi	r22, 0x30	; 48
    1abc:	74 e0       	ldi	r23, 0x04	; 4
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
    1ac4:	85 e0       	ldi	r24, 0x05	; 5
    1ac6:	94 e0       	ldi	r25, 0x04	; 4
    1ac8:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1acc:	6c e0       	ldi	r22, 0x0C	; 12
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
			LCD_voidDisplayNumber(local_temp);
    1ad4:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <__data_end>
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1ae2:	1c c0       	rjmp	.+56     	; 0x1b1c <KPD_Interface_Localuser+0xde>
			{
				KPD_voidGetValue(&local_KPDSelectValue);
    1ae4:	80 e6       	ldi	r24, 0x60	; 96
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    1aec:	60 e3       	ldi	r22, 0x30	; 48
    1aee:	74 e0       	ldi	r23, 0x04	; 4
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
				LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
    1af6:	6c e0       	ldi	r22, 0x0C	; 12
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    1afe:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <__data_end>
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
				if (local_KPDSelectValue == '0')
    1b0c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1b10:	80 33       	cpi	r24, 0x30	; 48
    1b12:	21 f4       	brne	.+8      	; 0x1b1c <KPD_Interface_Localuser+0xde>
				{
					local_KPDSelectValue = KPD_Not_Pressed;
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					break;
    1b1a:	08 95       	ret
            LCD_voidSendCommand(Write_SecondLine);
			ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
            LCD_voidDisplayStringDelay((u8 *)"Room Temp:  c");
			LCD_voidGoTOSpecificPosition(LCD_LINE_TWO, 12);
			LCD_voidDisplayNumber(local_temp);
			while (local_KPDSelectValue == KPD_Not_Pressed)
    1b1c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1b20:	8f 3f       	cpi	r24, 0xFF	; 255
    1b22:	01 f3       	breq	.-64     	; 0x1ae4 <KPD_Interface_Localuser+0xa6>
    1b24:	08 95       	ret
            break;
			

        case ('2'):

            LCD_voidClear();
    1b26:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
    1b2a:	82 e3       	ldi	r24, 0x32	; 50
    1b2c:	92 e0       	ldi	r25, 0x02	; 2
    1b2e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
    1b32:	80 ec       	ldi	r24, 0xC0	; 192
    1b34:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
    1b38:	82 e4       	ldi	r24, 0x42	; 66
    1b3a:	92 e0       	ldi	r25, 0x02	; 2
    1b3c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
    1b40:	8f ee       	ldi	r24, 0xEF	; 239
    1b42:	9c e0       	ldi	r25, 0x0C	; 12
    1b44:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <TMR0_SetCallBackCTC>
            TMR0_voidStart();
    1b48:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1b4c:	0c c0       	rjmp	.+24     	; 0x1b66 <KPD_Interface_Localuser+0x128>
            {
                KPD_voidGetValue(&local_lightNum);
    1b4e:	83 e6       	ldi	r24, 0x63	; 99
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
    1b56:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    1b5a:	80 33       	cpi	r24, 0x30	; 48
    1b5c:	21 f4       	brne	.+8      	; 0x1b66 <KPD_Interface_Localuser+0x128>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_KPDIdleValue>
                    break;
    1b64:	04 c0       	rjmp	.+8      	; 0x1b6e <KPD_Interface_Localuser+0x130>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
    1b66:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6c:	81 f3       	breq	.-32     	; 0x1b4e <KPD_Interface_Localuser+0x110>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
    1b6e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <TMR0_voidStop>
            switch (local_lightNum)
    1b72:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <local_lightNum>
    1b76:	83 33       	cpi	r24, 0x33	; 51
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <KPD_Interface_Localuser+0x13e>
    1b7a:	a6 c0       	rjmp	.+332    	; 0x1cc8 <KPD_Interface_Localuser+0x28a>
    1b7c:	30 f4       	brcc	.+12     	; 0x1b8a <KPD_Interface_Localuser+0x14c>
    1b7e:	81 33       	cpi	r24, 0x31	; 49
    1b80:	69 f0       	breq	.+26     	; 0x1b9c <KPD_Interface_Localuser+0x15e>
    1b82:	82 33       	cpi	r24, 0x32	; 50
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <KPD_Interface_Localuser+0x14a>
    1b86:	54 c0       	rjmp	.+168    	; 0x1c30 <KPD_Interface_Localuser+0x1f2>
    1b88:	08 95       	ret
    1b8a:	85 33       	cpi	r24, 0x35	; 53
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <KPD_Interface_Localuser+0x152>
    1b8e:	34 c1       	rjmp	.+616    	; 0x1df8 <KPD_Interface_Localuser+0x3ba>
    1b90:	08 f4       	brcc	.+2      	; 0x1b94 <KPD_Interface_Localuser+0x156>
    1b92:	e6 c0       	rjmp	.+460    	; 0x1d60 <KPD_Interface_Localuser+0x322>
    1b94:	86 33       	cpi	r24, 0x36	; 54
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <KPD_Interface_Localuser+0x15c>
    1b98:	7b c1       	rjmp	.+758    	; 0x1e90 <KPD_Interface_Localuser+0x452>
    1b9a:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
    1b9c:	42 e3       	ldi	r20, 0x32	; 50
    1b9e:	54 e0       	ldi	r21, 0x04	; 4
    1ba0:	63 e0       	ldi	r22, 0x03	; 3
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                LCD_voidClear();
    1ba8:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
                if (led_status == 1)
    1bac:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	f1 f4       	brne	.+60     	; 0x1bf0 <KPD_Interface_Localuser+0x1b2>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
    1bb4:	8f e4       	ldi	r24, 0x4F	; 79
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1bbc:	80 ec       	ldi	r24, 0xC0	; 192
    1bbe:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1bc2:	8d e5       	ldi	r24, 0x5D	; 93
    1bc4:	92 e0       	ldi	r25, 0x02	; 2
    1bc6:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <KPD_Interface_Localuser+0x196>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1bcc:	82 e6       	ldi	r24, 0x62	; 98
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1bd4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bda:	c1 f3       	breq	.-16     	; 0x1bcc <KPD_Interface_Localuser+0x18e>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1bdc:	81 33       	cpi	r24, 0x31	; 49
    1bde:	29 f4       	brne	.+10     	; 0x1bea <KPD_Interface_Localuser+0x1ac>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	63 e0       	ldi	r22, 0x03	; 3
    1be4:	83 e0       	ldi	r24, 0x03	; 3
    1be6:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
    1bea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <Reset_AllKPDValues>
					break;
    1bee:	08 95       	ret
                }
                else if (led_status == 0)
    1bf0:	81 11       	cpse	r24, r1
    1bf2:	8f c2       	rjmp	.+1310   	; 0x2112 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
    1bf4:	8e e6       	ldi	r24, 0x6E	; 110
    1bf6:	92 e0       	ldi	r25, 0x02	; 2
    1bf8:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1bfc:	80 ec       	ldi	r24, 0xC0	; 192
    1bfe:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1c02:	8d e7       	ldi	r24, 0x7D	; 125
    1c04:	92 e0       	ldi	r25, 0x02	; 2
    1c06:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <KPD_Interface_Localuser+0x1d6>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1c0c:	82 e6       	ldi	r24, 0x62	; 98
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1c14:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1c18:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1a:	c1 f3       	breq	.-16     	; 0x1c0c <KPD_Interface_Localuser+0x1ce>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1c1c:	81 33       	cpi	r24, 0x31	; 49
    1c1e:	29 f4       	brne	.+10     	; 0x1c2a <KPD_Interface_Localuser+0x1ec>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	63 e0       	ldi	r22, 0x03	; 3
    1c24:	83 e0       	ldi	r24, 0x03	; 3
    1c26:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    Reset_AllKPDValues();
    1c2a:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <Reset_AllKPDValues>
    1c2e:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
    1c30:	42 e3       	ldi	r20, 0x32	; 50
    1c32:	54 e0       	ldi	r21, 0x04	; 4
    1c34:	64 e0       	ldi	r22, 0x04	; 4
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                LCD_voidClear();
    1c3c:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
                if (led_status == 1)
    1c40:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	f9 f4       	brne	.+62     	; 0x1c86 <KPD_Interface_Localuser+0x248>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
    1c48:	8d e8       	ldi	r24, 0x8D	; 141
    1c4a:	92 e0       	ldi	r25, 0x02	; 2
    1c4c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1c50:	80 ec       	ldi	r24, 0xC0	; 192
    1c52:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1c56:	8d e5       	ldi	r24, 0x5D	; 93
    1c58:	92 e0       	ldi	r25, 0x02	; 2
    1c5a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <KPD_Interface_Localuser+0x22a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1c60:	82 e6       	ldi	r24, 0x62	; 98
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1c68:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1c6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c6e:	c1 f3       	breq	.-16     	; 0x1c60 <KPD_Interface_Localuser+0x222>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1c70:	81 33       	cpi	r24, 0x31	; 49
    1c72:	29 f4       	brne	.+10     	; 0x1c7e <KPD_Interface_Localuser+0x240>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	64 e0       	ldi	r22, 0x04	; 4
    1c78:	83 e0       	ldi	r24, 0x03	; 3
    1c7a:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1c84:	08 95       	ret
                }
                else if (led_status == 0)
    1c86:	81 11       	cpse	r24, r1
    1c88:	44 c2       	rjmp	.+1160   	; 0x2112 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
    1c8a:	8b e9       	ldi	r24, 0x9B	; 155
    1c8c:	92 e0       	ldi	r25, 0x02	; 2
    1c8e:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1c92:	80 ec       	ldi	r24, 0xC0	; 192
    1c94:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1c98:	8d e7       	ldi	r24, 0x7D	; 125
    1c9a:	92 e0       	ldi	r25, 0x02	; 2
    1c9c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <KPD_Interface_Localuser+0x26c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1ca2:	82 e6       	ldi	r24, 0x62	; 98
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1caa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1cae:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb0:	c1 f3       	breq	.-16     	; 0x1ca2 <KPD_Interface_Localuser+0x264>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
    1cb2:	81 33       	cpi	r24, 0x31	; 49
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <KPD_Interface_Localuser+0x282>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	64 e0       	ldi	r22, 0x04	; 4
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1cc6:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
    1cc8:	42 e3       	ldi	r20, 0x32	; 50
    1cca:	54 e0       	ldi	r21, 0x04	; 4
    1ccc:	62 e0       	ldi	r22, 0x02	; 2
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                LCD_voidClear();
    1cd4:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
                if (led_status == 1)
    1cd8:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	f9 f4       	brne	.+62     	; 0x1d1e <KPD_Interface_Localuser+0x2e0>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
    1ce0:	8a ea       	ldi	r24, 0xAA	; 170
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1ce8:	80 ec       	ldi	r24, 0xC0	; 192
    1cea:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1cee:	8d e5       	ldi	r24, 0x5D	; 93
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <KPD_Interface_Localuser+0x2c2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1cf8:	82 e6       	ldi	r24, 0x62	; 98
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1d00:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1d04:	8f 3f       	cpi	r24, 0xFF	; 255
    1d06:	c1 f3       	breq	.-16     	; 0x1cf8 <KPD_Interface_Localuser+0x2ba>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1d08:	81 33       	cpi	r24, 0x31	; 49
    1d0a:	29 f4       	brne	.+10     	; 0x1d16 <KPD_Interface_Localuser+0x2d8>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1d1c:	08 95       	ret
                }
                else if (led_status == 0)
    1d1e:	81 11       	cpse	r24, r1
    1d20:	f8 c1       	rjmp	.+1008   	; 0x2112 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
    1d22:	88 eb       	ldi	r24, 0xB8	; 184
    1d24:	92 e0       	ldi	r25, 0x02	; 2
    1d26:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1d2a:	80 ec       	ldi	r24, 0xC0	; 192
    1d2c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1d30:	8d e7       	ldi	r24, 0x7D	; 125
    1d32:	92 e0       	ldi	r25, 0x02	; 2
    1d34:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <KPD_Interface_Localuser+0x304>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1d3a:	82 e6       	ldi	r24, 0x62	; 98
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1d42:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1d46:	8f 3f       	cpi	r24, 0xFF	; 255
    1d48:	c1 f3       	breq	.-16     	; 0x1d3a <KPD_Interface_Localuser+0x2fc>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1d4a:	81 33       	cpi	r24, 0x31	; 49
    1d4c:	29 f4       	brne	.+10     	; 0x1d58 <KPD_Interface_Localuser+0x31a>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	62 e0       	ldi	r22, 0x02	; 2
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1d58:	8f ef       	ldi	r24, 0xFF	; 255
    1d5a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1d5e:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
    1d60:	42 e3       	ldi	r20, 0x32	; 50
    1d62:	54 e0       	ldi	r21, 0x04	; 4
    1d64:	63 e0       	ldi	r22, 0x03	; 3
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                LCD_voidClear();
    1d6c:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
                if (led_status == 1)
    1d70:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	f9 f4       	brne	.+62     	; 0x1db6 <KPD_Interface_Localuser+0x378>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
    1d78:	87 ec       	ldi	r24, 0xC7	; 199
    1d7a:	92 e0       	ldi	r25, 0x02	; 2
    1d7c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1d80:	80 ec       	ldi	r24, 0xC0	; 192
    1d82:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1d86:	8d e5       	ldi	r24, 0x5D	; 93
    1d88:	92 e0       	ldi	r25, 0x02	; 2
    1d8a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <KPD_Interface_Localuser+0x35a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1d90:	82 e6       	ldi	r24, 0x62	; 98
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1d98:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9e:	c1 f3       	breq	.-16     	; 0x1d90 <KPD_Interface_Localuser+0x352>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1da0:	81 33       	cpi	r24, 0x31	; 49
    1da2:	29 f4       	brne	.+10     	; 0x1dae <KPD_Interface_Localuser+0x370>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	63 e0       	ldi	r22, 0x03	; 3
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1dae:	8f ef       	ldi	r24, 0xFF	; 255
    1db0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1db4:	08 95       	ret
                }
                else if (led_status == 0)
    1db6:	81 11       	cpse	r24, r1
    1db8:	ac c1       	rjmp	.+856    	; 0x2112 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
    1dba:	85 ed       	ldi	r24, 0xD5	; 213
    1dbc:	92 e0       	ldi	r25, 0x02	; 2
    1dbe:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1dc2:	80 ec       	ldi	r24, 0xC0	; 192
    1dc4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1dc8:	8d e7       	ldi	r24, 0x7D	; 125
    1dca:	92 e0       	ldi	r25, 0x02	; 2
    1dcc:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <KPD_Interface_Localuser+0x39c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1dd2:	82 e6       	ldi	r24, 0x62	; 98
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1dda:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1dde:	8f 3f       	cpi	r24, 0xFF	; 255
    1de0:	c1 f3       	breq	.-16     	; 0x1dd2 <KPD_Interface_Localuser+0x394>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1de2:	81 33       	cpi	r24, 0x31	; 49
    1de4:	29 f4       	brne	.+10     	; 0x1df0 <KPD_Interface_Localuser+0x3b2>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	63 e0       	ldi	r22, 0x03	; 3
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1df0:	8f ef       	ldi	r24, 0xFF	; 255
    1df2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1df6:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
    1df8:	42 e3       	ldi	r20, 0x32	; 50
    1dfa:	54 e0       	ldi	r21, 0x04	; 4
    1dfc:	62 e0       	ldi	r22, 0x02	; 2
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
                LCD_voidClear();
    1e04:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
                if (led_status == 1)
    1e08:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	f9 f4       	brne	.+62     	; 0x1e4e <KPD_Interface_Localuser+0x410>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
    1e10:	84 ee       	ldi	r24, 0xE4	; 228
    1e12:	92 e0       	ldi	r25, 0x02	; 2
    1e14:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e18:	80 ec       	ldi	r24, 0xC0	; 192
    1e1a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
    1e1e:	8d e5       	ldi	r24, 0x5D	; 93
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <KPD_Interface_Localuser+0x3f2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e28:	82 e6       	ldi	r24, 0x62	; 98
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e34:	8f 3f       	cpi	r24, 0xFF	; 255
    1e36:	c1 f3       	breq	.-16     	; 0x1e28 <KPD_Interface_Localuser+0x3ea>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1e38:	81 33       	cpi	r24, 0x31	; 49
    1e3a:	29 f4       	brne	.+10     	; 0x1e46 <KPD_Interface_Localuser+0x408>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	62 e0       	ldi	r22, 0x02	; 2
    1e40:	83 e0       	ldi	r24, 0x03	; 3
    1e42:	0e 94 21 14 	call	0x2842	; 0x2842 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1e46:	8f ef       	ldi	r24, 0xFF	; 255
    1e48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1e4c:	08 95       	ret
                }
                else if (led_status == 0)
    1e4e:	81 11       	cpse	r24, r1
    1e50:	60 c1       	rjmp	.+704    	; 0x2112 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
    1e52:	82 ef       	ldi	r24, 0xF2	; 242
    1e54:	92 e0       	ldi	r25, 0x02	; 2
    1e56:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
    1e5a:	80 ec       	ldi	r24, 0xC0	; 192
    1e5c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
    1e60:	8d e7       	ldi	r24, 0x7D	; 125
    1e62:	92 e0       	ldi	r25, 0x02	; 2
    1e64:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <KPD_Interface_Localuser+0x434>
                    {
                        KPD_voidGetValue(&local_lightStatus);
    1e6a:	82 e6       	ldi	r24, 0x62	; 98
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
    1e72:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1e76:	8f 3f       	cpi	r24, 0xFF	; 255
    1e78:	c1 f3       	breq	.-16     	; 0x1e6a <KPD_Interface_Localuser+0x42c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
    1e7a:	81 33       	cpi	r24, 0x31	; 49
    1e7c:	29 f4       	brne	.+10     	; 0x1e88 <KPD_Interface_Localuser+0x44a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	0e 94 14 14 	call	0x2828	; 0x2828 <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightStatus>
    1e8e:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
    1e90:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
				
                if (dimmer_brightness > 0)
    1e94:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <KPD_Interface_Localuser+0x460>
    1e9c:	82 c0       	rjmp	.+260    	; 0x1fa2 <KPD_Interface_Localuser+0x564>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	93 e0       	ldi	r25, 0x03	; 3
    1ea2:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
    1ea6:	2f ef       	ldi	r18, 0xFF	; 255
    1ea8:	83 ed       	ldi	r24, 0xD3	; 211
    1eaa:	90 e3       	ldi	r25, 0x30	; 48
    1eac:	21 50       	subi	r18, 0x01	; 1
    1eae:	80 40       	sbci	r24, 0x00	; 0
    1eb0:	90 40       	sbci	r25, 0x00	; 0
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <KPD_Interface_Localuser+0x46e>
    1eb4:	00 c0       	rjmp	.+0      	; 0x1eb6 <KPD_Interface_Localuser+0x478>
    1eb6:	00 00       	nop
					_delay_ms(1000);
					LCD_voidClear();
    1eb8:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    1ebc:	83 e1       	ldi	r24, 0x13	; 19
    1ebe:	94 e0       	ldi	r25, 0x04	; 4
    1ec0:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1ec4:	6d e0       	ldi	r22, 0x0D	; 13
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    1ecc:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    1eda:	80 ec       	ldi	r24, 0xC0	; 192
    1edc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    1ee0:	8f e1       	ldi	r24, 0x1F	; 31
    1ee2:	93 e0       	ldi	r25, 0x03	; 3
    1ee4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    1ee8:	56 c0       	rjmp	.+172    	; 0x1f96 <KPD_Interface_Localuser+0x558>
					{
						KPD_voidGetValue(&local_lightStatus);
    1eea:	82 e6       	ldi	r24, 0x62	; 98
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    1ef2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1ef6:	81 33       	cpi	r24, 0x31	; 49
    1ef8:	59 f5       	brne	.+86     	; 0x1f50 <KPD_Interface_Localuser+0x512>
						{
							dimmer_brightness += 10;
    1efa:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    1efe:	66 5f       	subi	r22, 0xF6	; 246
    1f00:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    1f0e:	ab 01       	movw	r20, r22
    1f10:	bc 01       	movw	r22, r24
    1f12:	88 ee       	ldi	r24, 0xE8	; 232
    1f14:	93 e0       	ldi	r25, 0x03	; 3
    1f16:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1f1a:	6d e0       	ldi	r22, 0x0D	; 13
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    1f22:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    1f30:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    1f34:	85 36       	cpi	r24, 0x65	; 101
    1f36:	78 f1       	brcs	.+94     	; 0x1f96 <KPD_Interface_Localuser+0x558>
							{
								dimmer_brightness = 100;
    1f38:	84 e6       	ldi	r24, 0x64	; 100
    1f3a:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	50 e0       	ldi	r21, 0x00	; 0
    1f42:	68 ec       	ldi	r22, 0xC8	; 200
    1f44:	72 e4       	ldi	r23, 0x42	; 66
    1f46:	88 ee       	ldi	r24, 0xE8	; 232
    1f48:	93 e0       	ldi	r25, 0x03	; 3
    1f4a:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
    1f4e:	23 c0       	rjmp	.+70     	; 0x1f96 <KPD_Interface_Localuser+0x558>
							}
						
							
						}
						else if (local_lightStatus == '2')
    1f50:	82 33       	cpi	r24, 0x32	; 50
    1f52:	e1 f4       	brne	.+56     	; 0x1f8c <KPD_Interface_Localuser+0x54e>
						{
							dimmer_brightness -= 10;
    1f54:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    1f58:	6a 50       	subi	r22, 0x0A	; 10
    1f5a:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    1f68:	ab 01       	movw	r20, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	88 ee       	ldi	r24, 0xE8	; 232
    1f6e:	93 e0       	ldi	r25, 0x03	; 3
    1f70:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1f74:	6d e0       	ldi	r22, 0x0D	; 13
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    1f7c:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
    1f8a:	05 c0       	rjmp	.+10     	; 0x1f96 <KPD_Interface_Localuser+0x558>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    1f8c:	80 33       	cpi	r24, 0x30	; 48
    1f8e:	19 f4       	brne	.+6      	; 0x1f96 <KPD_Interface_Localuser+0x558>
						{
							LCD_voidClear();
    1f90:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
							break;
    1f94:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    1f96:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    1f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <KPD_Interface_Localuser+0x562>
    1f9e:	a5 cf       	rjmp	.-182    	; 0x1eea <KPD_Interface_Localuser+0x4ac>
    1fa0:	08 95       	ret
						}						
						
					}
					
                }
                else if (led_status == 0)
    1fa2:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <led_status>
    1fa6:	81 11       	cpse	r24, r1
    1fa8:	b4 c0       	rjmp	.+360    	; 0x2112 <KPD_Interface_Localuser+0x6d4>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
    1faa:	8f e2       	ldi	r24, 0x2F	; 47
    1fac:	93 e0       	ldi	r25, 0x03	; 3
    1fae:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
    1fb2:	2f ef       	ldi	r18, 0xFF	; 255
    1fb4:	83 ed       	ldi	r24, 0xD3	; 211
    1fb6:	90 e3       	ldi	r25, 0x30	; 48
    1fb8:	21 50       	subi	r18, 0x01	; 1
    1fba:	80 40       	sbci	r24, 0x00	; 0
    1fbc:	90 40       	sbci	r25, 0x00	; 0
    1fbe:	e1 f7       	brne	.-8      	; 0x1fb8 <KPD_Interface_Localuser+0x57a>
    1fc0:	00 c0       	rjmp	.+0      	; 0x1fc2 <KPD_Interface_Localuser+0x584>
    1fc2:	00 00       	nop
					_delay_ms(1000);
                    LCD_voidClear();
    1fc4:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
    1fc8:	83 e1       	ldi	r24, 0x13	; 19
    1fca:	94 e0       	ldi	r25, 0x04	; 4
    1fcc:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    1fd0:	6d e0       	ldi	r22, 0x0D	; 13
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
    1fd8:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
    1fe6:	80 ec       	ldi	r24, 0xC0	; 192
    1fe8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
    1fec:	8f e1       	ldi	r24, 0x1F	; 31
    1fee:	93 e0       	ldi	r25, 0x03	; 3
    1ff0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
    1ff4:	56 c0       	rjmp	.+172    	; 0x20a2 <KPD_Interface_Localuser+0x664>
					{
						KPD_voidGetValue(&local_lightStatus);
    1ff6:	82 e6       	ldi	r24, 0x62	; 98
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
						if (local_lightStatus == '1')
    1ffe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    2002:	81 33       	cpi	r24, 0x31	; 49
    2004:	59 f5       	brne	.+86     	; 0x205c <KPD_Interface_Localuser+0x61e>
						{
							dimmer_brightness += 10;
    2006:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    200a:	66 5f       	subi	r22, 0xF6	; 246
    200c:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    201a:	ab 01       	movw	r20, r22
    201c:	bc 01       	movw	r22, r24
    201e:	88 ee       	ldi	r24, 0xE8	; 232
    2020:	93 e0       	ldi	r25, 0x03	; 3
    2022:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    2026:	6d e0       	ldi	r22, 0x0D	; 13
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    202e:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
    203c:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <dimmer_brightness>
    2040:	85 36       	cpi	r24, 0x65	; 101
    2042:	78 f1       	brcs	.+94     	; 0x20a2 <KPD_Interface_Localuser+0x664>
							{
								dimmer_brightness = 100;
    2044:	84 e6       	ldi	r24, 0x64	; 100
    2046:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	50 e0       	ldi	r21, 0x00	; 0
    204e:	68 ec       	ldi	r22, 0xC8	; 200
    2050:	72 e4       	ldi	r23, 0x42	; 66
    2052:	88 ee       	ldi	r24, 0xE8	; 232
    2054:	93 e0       	ldi	r25, 0x03	; 3
    2056:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
    205a:	23 c0       	rjmp	.+70     	; 0x20a2 <KPD_Interface_Localuser+0x664>
							}
						
							
						}
						else if (local_lightStatus == '2')
    205c:	82 33       	cpi	r24, 0x32	; 50
    205e:	e1 f4       	brne	.+56     	; 0x2098 <KPD_Interface_Localuser+0x65a>
						{
							dimmer_brightness -= 10;
    2060:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    2064:	6a 50       	subi	r22, 0x0A	; 10
    2066:	60 93 31 04 	sts	0x0431, r22	; 0x800431 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    2074:	ab 01       	movw	r20, r22
    2076:	bc 01       	movw	r22, r24
    2078:	88 ee       	ldi	r24, 0xE8	; 232
    207a:	93 e0       	ldi	r25, 0x03	; 3
    207c:	0e 94 55 16 	call	0x2caa	; 0x2caa <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
    2080:	6d e0       	ldi	r22, 0x0D	; 13
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
    2088:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <dimmer_brightness>
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <KPD_Interface_Localuser+0x664>
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
						}
						else if (local_lightStatus == '0')
    2098:	80 33       	cpi	r24, 0x30	; 48
    209a:	19 f4       	brne	.+6      	; 0x20a2 <KPD_Interface_Localuser+0x664>
						{
							LCD_voidClear();
    209c:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
							break;
    20a0:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
    20a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightStatus>
    20a6:	8f 3f       	cpi	r24, 0xFF	; 255
    20a8:	09 f4       	brne	.+2      	; 0x20ac <KPD_Interface_Localuser+0x66e>
    20aa:	a5 cf       	rjmp	.-182    	; 0x1ff6 <KPD_Interface_Localuser+0x5b8>
    20ac:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
    20ae:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
    20b2:	60 e3       	ldi	r22, 0x30	; 48
    20b4:	74 e0       	ldi	r23, 0x04	; 4
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	0e 94 9d 14 	call	0x293a	; 0x293a <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
    20bc:	80 e8       	ldi	r24, 0x80	; 128
    20be:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
    20c2:	85 e0       	ldi	r24, 0x05	; 5
    20c4:	94 e0       	ldi	r25, 0x04	; 4
    20c6:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
    20ca:	6b e0       	ldi	r22, 0x0B	; 11
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
    20d2:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <__data_end>
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
    20e0:	83 e6       	ldi	r24, 0x63	; 99
    20e2:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
    20e6:	80 ec       	ldi	r24, 0xC0	; 192
    20e8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
    20ec:	85 e2       	ldi	r24, 0x25	; 37
    20ee:	92 e0       	ldi	r25, 0x02	; 2
    20f0:	0e 94 52 13 	call	0x26a4	; 0x26a4 <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
    20f4:	06 c0       	rjmp	.+12     	; 0x2102 <KPD_Interface_Localuser+0x6c4>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
    20f6:	81 e6       	ldi	r24, 0x61	; 97
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	0e 94 8a 11 	call	0x2314	; 0x2314 <KPD_voidGetValue>
					Display_temp();
    20fe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
    2102:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_KPDIdleValue>
    2106:	8f 3f       	cpi	r24, 0xFF	; 255
    2108:	b1 f3       	breq	.-20     	; 0x20f6 <KPD_Interface_Localuser+0x6b8>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
    210a:	80 33       	cpi	r24, 0x30	; 48
    210c:	11 f4       	brne	.+4      	; 0x2112 <KPD_Interface_Localuser+0x6d4>
				{
					LCD_voidClear();
    210e:	0e 94 c4 13 	call	0x2788	; 0x2788 <LCD_voidClear>
    2112:	08 95       	ret

00002114 <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
    2114:	0e 94 ca 18 	call	0x3194	; 0x3194 <UART_voidInit>
    2118:	08 95       	ret

0000211a <BL_voidTxChar>:
}


void BL_voidTxChar(u8 copy_u8BlTxData)
{
	UART_voidTxChar(copy_u8BlTxData);
    211a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <UART_voidTxChar>
    211e:	08 95       	ret

00002120 <BL_voidRxChar>:



void BL_voidRxChar(u8* copy_pu8BlRxData)
{
	UART_voidRxChar(copy_pu8BlRxData);
    2120:	0e 94 df 18 	call	0x31be	; 0x31be <UART_voidRxChar>
    2124:	08 95       	ret

00002126 <BL_voidTxString>:
}


void BL_voidTxString(u8* copy_pu8BlTxString)
{
	UART_voidTxString(copy_pu8BlTxString);
    2126:	0e 94 e7 18 	call	0x31ce	; 0x31ce <UART_voidTxString>
    212a:	08 95       	ret

0000212c <BUZZER_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void BUZZER_voidInit	(u8 copy_u8BuzzerPortId,u8 copy_u8BuzzerPinId)
{
	DIO_voidSetPinDirection(copy_u8BuzzerPortId,copy_u8BuzzerPinId,DIO_PIN_HIGH);
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    2132:	08 95       	ret

00002134 <BUZZER_voidOn>:
}
void BUZZER_voidOn		(u8 copy_u8LBuzzerPortId,u8 copy_u8BuzzerPinId)
{

		DIO_voidSetPinValue    (copy_u8LBuzzerPortId,copy_u8BuzzerPinId, DIO_PIN_HIGH);
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    213a:	08 95       	ret

0000213c <BUZZER_voidOff>:
}
void BUZZER_voidOff		(u8 copy_u8BuzzerPortId,u8 copy_u8BuzzerPinId)
{
		DIO_voidSetPinValue    (copy_u8BuzzerPortId,copy_u8BuzzerPinId, DIO_PIN_LOW);
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2142:	08 95       	ret

00002144 <EEPROM_voidInit>:
#include"EEPROM_interface.h"
#include"EEPROM_private.h"

void EEPROM_voidInit(void)
{
	TWI_voidInitMaster();
    2144:	0e 94 3f 18 	call	0x307e	; 0x307e <TWI_voidInitMaster>
    2148:	08 95       	ret

0000214a <EEPROM_voidWriteByte>:
}
void EEPROM_voidWriteByte(u16 copy_u16WordAdress,u8 copy_u8Data)
{
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	d8 2f       	mov	r29, r24
    2152:	c6 2f       	mov	r28, r22
	u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    2154:	19 2f       	mov	r17, r25
    2156:	10 65       	ori	r17, 0x50	; 80
	TWI_voidSendStartCondition();
    2158:	0e 94 4b 18 	call	0x3096	; 0x3096 <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    215c:	81 2f       	mov	r24, r17
    215e:	0e 94 6e 18 	call	0x30dc	; 0x30dc <TWI_voidSendSlaveAddWithWrite>
	TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    2162:	8d 2f       	mov	r24, r29
    2164:	0e 94 98 18 	call	0x3130	; 0x3130 <TWI_voidTransmitMasterDataByte>
	TWI_voidTransmitMasterDataByte(copy_u8Data);
    2168:	8c 2f       	mov	r24, r28
    216a:	0e 94 98 18 	call	0x3130	; 0x3130 <TWI_voidTransmitMasterDataByte>
	TWI_voidSendStopCondition();
    216e:	0e 94 67 18 	call	0x30ce	; 0x30ce <TWI_voidSendStopCondition>
    2172:	8f e1       	ldi	r24, 0x1F	; 31
    2174:	9e e4       	ldi	r25, 0x4E	; 78
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <EEPROM_voidWriteByte+0x2c>
    217a:	00 c0       	rjmp	.+0      	; 0x217c <EEPROM_voidWriteByte+0x32>
    217c:	00 00       	nop
	_delay_ms(5);
	
	
	
}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	08 95       	ret

00002186 <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	cf 93       	push	r28
    218c:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
    218e:	61 15       	cp	r22, r1
    2190:	71 05       	cpc	r23, r1
    2192:	f9 f0       	breq	.+62     	; 0x21d2 <EEPROM_voidWritePage+0x4c>
    2194:	8b 01       	movw	r16, r22
    2196:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    2198:	c9 2f       	mov	r28, r25
    219a:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
    219c:	0e 94 4b 18 	call	0x3096	; 0x3096 <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    21a0:	8c 2f       	mov	r24, r28
    21a2:	0e 94 6e 18 	call	0x30dc	; 0x30dc <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    21a6:	8d 2f       	mov	r24, r29
    21a8:	0e 94 98 18 	call	0x3130	; 0x3130 <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
    21ac:	c0 e0       	ldi	r28, 0x00	; 0
    21ae:	07 c0       	rjmp	.+14     	; 0x21be <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
    21b0:	f8 01       	movw	r30, r16
    21b2:	ec 0f       	add	r30, r28
    21b4:	f1 1d       	adc	r31, r1
    21b6:	80 81       	ld	r24, Z
    21b8:	0e 94 98 18 	call	0x3130	; 0x3130 <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
    21bc:	cf 5f       	subi	r28, 0xFF	; 255
    21be:	c8 30       	cpi	r28, 0x08	; 8
    21c0:	b8 f3       	brcs	.-18     	; 0x21b0 <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
    21c2:	0e 94 67 18 	call	0x30ce	; 0x30ce <TWI_voidSendStopCondition>
    21c6:	8f e1       	ldi	r24, 0x1F	; 31
    21c8:	9e e4       	ldi	r25, 0x4E	; 78
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <EEPROM_voidWritePage+0x44>
    21ce:	00 c0       	rjmp	.+0      	; 0x21d0 <EEPROM_voidWritePage+0x4a>
    21d0:	00 00       	nop
		{
			//error state
		}
		
		
	}
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <EEPROM_voidReadByte>:

void EEPROM_voidReadByte(u16 copy_u16WordAdress,u8* copy_pu8Data)
{
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
	if(copy_pu8Data!=NULL)
    21e4:	61 15       	cp	r22, r1
    21e6:	71 05       	cpc	r23, r1
    21e8:	e1 f0       	breq	.+56     	; 0x2222 <EEPROM_voidReadByte+0x46>
    21ea:	8b 01       	movw	r16, r22
    21ec:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    21ee:	c9 2f       	mov	r28, r25
    21f0:	c0 65       	ori	r28, 0x50	; 80
		TWI_voidSendStartCondition();
    21f2:	0e 94 4b 18 	call	0x3096	; 0x3096 <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    21f6:	8c 2f       	mov	r24, r28
    21f8:	0e 94 6e 18 	call	0x30dc	; 0x30dc <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    21fc:	8d 2f       	mov	r24, r29
    21fe:	0e 94 98 18 	call	0x3130	; 0x3130 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
    2202:	0e 94 59 18 	call	0x30b2	; 0x30b2 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
    2206:	8c 2f       	mov	r24, r28
    2208:	0e 94 83 18 	call	0x3106	; 0x3106 <TWI_voidSendSlaveAddWithRead>
		TWI_voidRecieveMasterDataByteWithNAch(copy_pu8Data);
    220c:	c8 01       	movw	r24, r16
    220e:	0e 94 ba 18 	call	0x3174	; 0x3174 <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
    2212:	0e 94 67 18 	call	0x30ce	; 0x30ce <TWI_voidSendStopCondition>
    2216:	8f e1       	ldi	r24, 0x1F	; 31
    2218:	9e e4       	ldi	r25, 0x4E	; 78
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <EEPROM_voidReadByte+0x3e>
    221e:	00 c0       	rjmp	.+0      	; 0x2220 <EEPROM_voidReadByte+0x44>
    2220:	00 00       	nop
	{
		//error
	}
	
	
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	08 95       	ret

0000222c <EEPROM_voidSequentialRead>:

void EEPROM_voidSequentialRead(u16 copy_u16WordAdress,u16 copy_u18NumOfDataBytes,u8* copy_pu8RxData)
{
    222c:	ef 92       	push	r14
    222e:	ff 92       	push	r15
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
	if((copy_pu8RxData !=NULL)&&copy_u18NumOfDataBytes<512)
    2238:	41 15       	cp	r20, r1
    223a:	51 05       	cpc	r21, r1
    223c:	81 f1       	breq	.+96     	; 0x229e <EEPROM_voidSequentialRead+0x72>
    223e:	61 15       	cp	r22, r1
    2240:	22 e0       	ldi	r18, 0x02	; 2
    2242:	72 07       	cpc	r23, r18
    2244:	60 f5       	brcc	.+88     	; 0x229e <EEPROM_voidSequentialRead+0x72>
    2246:	8a 01       	movw	r16, r20
    2248:	7b 01       	movw	r14, r22
    224a:	d8 2f       	mov	r29, r24
	{
		u8 Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
    224c:	c9 2f       	mov	r28, r25
    224e:	c0 65       	ori	r28, 0x50	; 80
		u16 Local_u16BytesCounter;
		TWI_voidSendStartCondition();
    2250:	0e 94 4b 18 	call	0x3096	; 0x3096 <TWI_voidSendStartCondition>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
    2254:	8c 2f       	mov	r24, r28
    2256:	0e 94 6e 18 	call	0x30dc	; 0x30dc <TWI_voidSendSlaveAddWithWrite>
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
    225a:	8d 2f       	mov	r24, r29
    225c:	0e 94 98 18 	call	0x3130	; 0x3130 <TWI_voidTransmitMasterDataByte>
		TWI_voidSendRepeatedStartCondition();
    2260:	0e 94 59 18 	call	0x30b2	; 0x30b2 <TWI_voidSendRepeatedStartCondition>
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
    2264:	8c 2f       	mov	r24, r28
    2266:	0e 94 83 18 	call	0x3106	; 0x3106 <TWI_voidSendSlaveAddWithRead>
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    226a:	c0 e0       	ldi	r28, 0x00	; 0
    226c:	d0 e0       	ldi	r29, 0x00	; 0
    226e:	06 c0       	rjmp	.+12     	; 0x227c <EEPROM_voidSequentialRead+0x50>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
    2270:	c8 01       	movw	r24, r16
    2272:	8c 0f       	add	r24, r28
    2274:	9d 1f       	adc	r25, r29
    2276:	0e 94 a4 18 	call	0x3148	; 0x3148 <TWI_voidRecieveMasterDataByteWithAch>
		TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
		TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
		TWI_voidSendRepeatedStartCondition();
		TWI_voidSendSlaveAddWithRead(Local_u8DeviceAddress);
		
		for(Local_u16BytesCounter=0;Local_u16BytesCounter<copy_u18NumOfDataBytes-1;Local_u16BytesCounter++)
    227a:	21 96       	adiw	r28, 0x01	; 1
    227c:	c7 01       	movw	r24, r14
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	c8 17       	cp	r28, r24
    2282:	d9 07       	cpc	r29, r25
    2284:	a8 f3       	brcs	.-22     	; 0x2270 <EEPROM_voidSequentialRead+0x44>
		{
			TWI_voidRecieveMasterDataByteWithAch(&copy_pu8RxData[Local_u16BytesCounter]);
			
		}
		
		TWI_voidRecieveMasterDataByteWithNAch(&copy_pu8RxData[copy_u18NumOfDataBytes-1]);
    2286:	80 0f       	add	r24, r16
    2288:	91 1f       	adc	r25, r17
    228a:	0e 94 ba 18 	call	0x3174	; 0x3174 <TWI_voidRecieveMasterDataByteWithNAch>
		TWI_voidSendStopCondition();
    228e:	0e 94 67 18 	call	0x30ce	; 0x30ce <TWI_voidSendStopCondition>
    2292:	8f e1       	ldi	r24, 0x1F	; 31
    2294:	9e e4       	ldi	r25, 0x4E	; 78
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <EEPROM_voidSequentialRead+0x6a>
    229a:	00 c0       	rjmp	.+0      	; 0x229c <EEPROM_voidSequentialRead+0x70>
    229c:	00 00       	nop
	{
		//error state
	}


    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	08 95       	ret

000022ac <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	64 e0       	ldi	r22, 0x04	; 4
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	65 e0       	ldi	r22, 0x05	; 5
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	66 e0       	ldi	r22, 0x06	; 6
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	63 e0       	ldi	r22, 0x03	; 3
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	64 e0       	ldi	r22, 0x04	; 4
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	65 e0       	ldi	r22, 0x05	; 5
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	66 e0       	ldi	r22, 0x06	; 6
    22ec:	82 e0       	ldi	r24, 0x02	; 2
    22ee:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
    22f2:	63 e0       	ldi	r22, 0x03	; 3
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
    22fa:	64 e0       	ldi	r22, 0x04	; 4
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
    2302:	65 e0       	ldi	r22, 0x05	; 5
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
    230a:	66 e0       	ldi	r22, 0x06	; 6
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <DIO_voidActivePinInPullUpResistance>
    2312:	08 95       	ret

00002314 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
    2314:	6f 92       	push	r6
    2316:	7f 92       	push	r7
    2318:	8f 92       	push	r8
    231a:	9f 92       	push	r9
    231c:	af 92       	push	r10
    231e:	bf 92       	push	r11
    2320:	cf 92       	push	r12
    2322:	df 92       	push	r13
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	cf 93       	push	r28
    232e:	df 93       	push	r29
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	6b 97       	sbiw	r28, 0x1b	; 27
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	f8 94       	cli
    233a:	de bf       	out	0x3e, r29	; 62
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	09 f4       	brne	.+2      	; 0x2346 <KPD_voidGetValue+0x32>
    2344:	7e c0       	rjmp	.+252    	; 0x2442 <KPD_voidGetValue+0x12e>
    2346:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	88 8f       	std	Y+24, r24	; 0x18
    234c:	89 8f       	std	Y+25, r24	; 0x19
    234e:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
    2350:	34 e0       	ldi	r19, 0x04	; 4
    2352:	3d 8b       	std	Y+21, r19	; 0x15
    2354:	25 e0       	ldi	r18, 0x05	; 5
    2356:	2e 8b       	std	Y+22, r18	; 0x16
    2358:	96 e0       	ldi	r25, 0x06	; 6
    235a:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	89 8b       	std	Y+17, r24	; 0x11
    2360:	8a 8b       	std	Y+18, r24	; 0x12
    2362:	8b 8b       	std	Y+19, r24	; 0x13
    2364:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
    2366:	83 e0       	ldi	r24, 0x03	; 3
    2368:	8d 87       	std	Y+13, r24	; 0x0d
    236a:	3e 87       	std	Y+14, r19	; 0x0e
    236c:	2f 87       	std	Y+15, r18	; 0x0f
    236e:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
    2370:	8c e0       	ldi	r24, 0x0C	; 12
    2372:	e6 e6       	ldi	r30, 0x66	; 102
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	de 01       	movw	r26, r28
    2378:	11 96       	adiw	r26, 0x01	; 1
    237a:	01 90       	ld	r0, Z+
    237c:	0d 92       	st	X+, r0
    237e:	8a 95       	dec	r24
    2380:	e1 f7       	brne	.-8      	; 0x237a <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
    2382:	8f ef       	ldi	r24, 0xFF	; 255
    2384:	f5 01       	movw	r30, r10
    2386:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    2388:	81 2c       	mov	r8, r1
    238a:	57 c0       	rjmp	.+174    	; 0x243a <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
    238c:	c8 2c       	mov	r12, r8
    238e:	d1 2c       	mov	r13, r1
    2390:	e5 e1       	ldi	r30, 0x15	; 21
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	ec 0f       	add	r30, r28
    2396:	fd 1f       	adc	r31, r29
    2398:	ec 0d       	add	r30, r12
    239a:	fd 1d       	adc	r31, r13
    239c:	60 80       	ld	r6, Z
    239e:	e8 e1       	ldi	r30, 0x18	; 24
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	ec 0f       	add	r30, r28
    23a4:	fd 1f       	adc	r31, r29
    23a6:	ec 0d       	add	r30, r12
    23a8:	fd 1d       	adc	r31, r13
    23aa:	70 80       	ld	r7, Z
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	66 2d       	mov	r22, r6
    23b0:	87 2d       	mov	r24, r7
    23b2:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    23b6:	10 e0       	ldi	r17, 0x00	; 0
    23b8:	38 c0       	rjmp	.+112    	; 0x242a <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    23ba:	e1 2e       	mov	r14, r17
    23bc:	f1 2c       	mov	r15, r1
    23be:	ed e0       	ldi	r30, 0x0D	; 13
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	ec 0f       	add	r30, r28
    23c4:	fd 1f       	adc	r31, r29
    23c6:	ee 0d       	add	r30, r14
    23c8:	ff 1d       	adc	r31, r15
    23ca:	00 81       	ld	r16, Z
    23cc:	e1 e1       	ldi	r30, 0x11	; 17
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	ec 0f       	add	r30, r28
    23d2:	fd 1f       	adc	r31, r29
    23d4:	ee 0d       	add	r30, r14
    23d6:	ff 1d       	adc	r31, r15
    23d8:	90 80       	ld	r9, Z
    23da:	ae 01       	movw	r20, r28
    23dc:	45 5e       	subi	r20, 0xE5	; 229
    23de:	5f 4f       	sbci	r21, 0xFF	; 255
    23e0:	60 2f       	mov	r22, r16
    23e2:	89 2d       	mov	r24, r9
    23e4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
    23e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ea:	81 11       	cpse	r24, r1
    23ec:	1d c0       	rjmp	.+58     	; 0x2428 <KPD_voidGetValue+0x114>
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
    23f0:	ae 01       	movw	r20, r28
    23f2:	45 5e       	subi	r20, 0xE5	; 229
    23f4:	5f 4f       	sbci	r21, 0xFF	; 255
    23f6:	60 2f       	mov	r22, r16
    23f8:	89 2d       	mov	r24, r9
    23fa:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
    23fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2400:	88 23       	and	r24, r24
    2402:	b1 f3       	breq	.-20     	; 0x23f0 <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2404:	c7 01       	movw	r24, r14
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	e8 0e       	add	r14, r24
    240c:	f9 1e       	adc	r15, r25
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	8c 0f       	add	r24, r28
    2414:	9d 1f       	adc	r25, r29
    2416:	e8 0e       	add	r14, r24
    2418:	f9 1e       	adc	r15, r25
    241a:	f7 01       	movw	r30, r14
    241c:	ec 0d       	add	r30, r12
    241e:	fd 1d       	adc	r31, r13
    2420:	80 81       	ld	r24, Z
    2422:	f5 01       	movw	r30, r10
    2424:	80 83       	st	Z, r24
    2426:	0d c0       	rjmp	.+26     	; 0x2442 <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
    2428:	1f 5f       	subi	r17, 0xFF	; 255
    242a:	14 30       	cpi	r17, 0x04	; 4
    242c:	30 f2       	brcs	.-116    	; 0x23ba <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	66 2d       	mov	r22, r6
    2432:	87 2d       	mov	r24, r7
    2434:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
    2438:	83 94       	inc	r8
    243a:	f2 e0       	ldi	r31, 0x02	; 2
    243c:	f8 15       	cp	r31, r8
    243e:	08 f0       	brcs	.+2      	; 0x2442 <KPD_voidGetValue+0x12e>
    2440:	a5 cf       	rjmp	.-182    	; 0x238c <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
    2442:	6b 96       	adiw	r28, 0x1b	; 27
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	9f 90       	pop	r9
    2464:	8f 90       	pop	r8
    2466:	7f 90       	pop	r7
    2468:	6f 90       	pop	r6
    246a:	08 95       	ret

0000246c <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
    246c:	cf 93       	push	r28
    246e:	c8 2f       	mov	r28, r24
    2470:	80 ff       	sbrs	r24, 0
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <PRV_voidWriteHalfPort+0x14>
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	64 e0       	ldi	r22, 0x04	; 4
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    247e:	05 c0       	rjmp	.+10     	; 0x248a <PRV_voidWriteHalfPort+0x1e>
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	64 e0       	ldi	r22, 0x04	; 4
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    248a:	c1 ff       	sbrs	r28, 1
    248c:	06 c0       	rjmp	.+12     	; 0x249a <PRV_voidWriteHalfPort+0x2e>
    248e:	41 e0       	ldi	r20, 0x01	; 1
    2490:	65 e0       	ldi	r22, 0x05	; 5
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2498:	05 c0       	rjmp	.+10     	; 0x24a4 <PRV_voidWriteHalfPort+0x38>
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	65 e0       	ldi	r22, 0x05	; 5
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    24a4:	c2 ff       	sbrs	r28, 2
    24a6:	06 c0       	rjmp	.+12     	; 0x24b4 <PRV_voidWriteHalfPort+0x48>
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	66 e0       	ldi	r22, 0x06	; 6
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    24b2:	05 c0       	rjmp	.+10     	; 0x24be <PRV_voidWriteHalfPort+0x52>
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	66 e0       	ldi	r22, 0x06	; 6
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    24be:	c3 ff       	sbrs	r28, 3
    24c0:	06 c0       	rjmp	.+12     	; 0x24ce <PRV_voidWriteHalfPort+0x62>
    24c2:	41 e0       	ldi	r20, 0x01	; 1
    24c4:	67 e0       	ldi	r22, 0x07	; 7
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    24cc:	05 c0       	rjmp	.+10     	; 0x24d8 <PRV_voidWriteHalfPort+0x6c>
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	67 e0       	ldi	r22, 0x07	; 7
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    24d8:	cf 91       	pop	r28
    24da:	08 95       	ret

000024dc <LCD_voidSendCommand>:
    24dc:	cf 93       	push	r28
    24de:	c8 2f       	mov	r28, r24
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	62 e0       	ldi	r22, 0x02	; 2
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    24f4:	8c 2f       	mov	r24, r28
    24f6:	82 95       	swap	r24
    24f8:	8f 70       	andi	r24, 0x0F	; 15
    24fa:	0e 94 36 12 	call	0x246c	; 0x246c <PRV_voidWriteHalfPort>
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	63 e0       	ldi	r22, 0x03	; 3
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2508:	8f e9       	ldi	r24, 0x9F	; 159
    250a:	9f e0       	ldi	r25, 0x0F	; 15
    250c:	01 97       	sbiw	r24, 0x01	; 1
    250e:	f1 f7       	brne	.-4      	; 0x250c <LCD_voidSendCommand+0x30>
    2510:	00 c0       	rjmp	.+0      	; 0x2512 <LCD_voidSendCommand+0x36>
    2512:	00 00       	nop
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	63 e0       	ldi	r22, 0x03	; 3
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    251e:	8c 2f       	mov	r24, r28
    2520:	0e 94 36 12 	call	0x246c	; 0x246c <PRV_voidWriteHalfPort>
    2524:	41 e0       	ldi	r20, 0x01	; 1
    2526:	63 e0       	ldi	r22, 0x03	; 3
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    252e:	8f e9       	ldi	r24, 0x9F	; 159
    2530:	9f e0       	ldi	r25, 0x0F	; 15
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_voidSendCommand+0x56>
    2536:	00 c0       	rjmp	.+0      	; 0x2538 <LCD_voidSendCommand+0x5c>
    2538:	00 00       	nop
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	63 e0       	ldi	r22, 0x03	; 3
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2544:	cf 91       	pop	r28
    2546:	08 95       	ret

00002548 <LCD_voidInit>:
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	61 e0       	ldi	r22, 0x01	; 1
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    2552:	41 e0       	ldi	r20, 0x01	; 1
    2554:	62 e0       	ldi	r22, 0x02	; 2
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	63 e0       	ldi	r22, 0x03	; 3
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    2566:	41 e0       	ldi	r20, 0x01	; 1
    2568:	64 e0       	ldi	r22, 0x04	; 4
    256a:	80 e0       	ldi	r24, 0x00	; 0
    256c:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	65 e0       	ldi	r22, 0x05	; 5
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	66 e0       	ldi	r22, 0x06	; 6
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	67 e0       	ldi	r22, 0x07	; 7
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    258e:	2f e7       	ldi	r18, 0x7F	; 127
    2590:	85 eb       	ldi	r24, 0xB5	; 181
    2592:	91 e0       	ldi	r25, 0x01	; 1
    2594:	21 50       	subi	r18, 0x01	; 1
    2596:	80 40       	sbci	r24, 0x00	; 0
    2598:	90 40       	sbci	r25, 0x00	; 0
    259a:	e1 f7       	brne	.-8      	; 0x2594 <LCD_voidInit+0x4c>
    259c:	00 c0       	rjmp	.+0      	; 0x259e <LCD_voidInit+0x56>
    259e:	00 00       	nop
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	61 e0       	ldi	r22, 0x01	; 1
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	62 e0       	ldi	r22, 0x02	; 2
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	0e 94 36 12 	call	0x246c	; 0x246c <PRV_voidWriteHalfPort>
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	63 e0       	ldi	r22, 0x03	; 3
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    25c4:	8f e9       	ldi	r24, 0x9F	; 159
    25c6:	9f e0       	ldi	r25, 0x0F	; 15
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_voidInit+0x80>
    25cc:	00 c0       	rjmp	.+0      	; 0x25ce <LCD_voidInit+0x86>
    25ce:	00 00       	nop
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	63 e0       	ldi	r22, 0x03	; 3
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    25da:	88 e2       	ldi	r24, 0x28	; 40
    25dc:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
    25e0:	90 ef       	ldi	r25, 0xF0	; 240
    25e2:	9a 95       	dec	r25
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_voidInit+0x9a>
    25e6:	8c e0       	ldi	r24, 0x0C	; 12
    25e8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
    25ec:	20 ef       	ldi	r18, 0xF0	; 240
    25ee:	2a 95       	dec	r18
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_voidInit+0xa6>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
    25f8:	8f e3       	ldi	r24, 0x3F	; 63
    25fa:	9f e1       	ldi	r25, 0x1F	; 31
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_voidInit+0xb4>
    2600:	00 c0       	rjmp	.+0      	; 0x2602 <LCD_voidInit+0xba>
    2602:	00 00       	nop
    2604:	86 e0       	ldi	r24, 0x06	; 6
    2606:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
    260a:	08 95       	ret

0000260c <LCD_voidDisplayChar>:
    260c:	cf 93       	push	r28
    260e:	c8 2f       	mov	r28, r24
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2624:	8c 2f       	mov	r24, r28
    2626:	82 95       	swap	r24
    2628:	8f 70       	andi	r24, 0x0F	; 15
    262a:	0e 94 36 12 	call	0x246c	; 0x246c <PRV_voidWriteHalfPort>
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	63 e0       	ldi	r22, 0x03	; 3
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2638:	8f e9       	ldi	r24, 0x9F	; 159
    263a:	9f e0       	ldi	r25, 0x0F	; 15
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <LCD_voidDisplayChar+0x30>
    2640:	00 c0       	rjmp	.+0      	; 0x2642 <LCD_voidDisplayChar+0x36>
    2642:	00 00       	nop
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	63 e0       	ldi	r22, 0x03	; 3
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    264e:	8c 2f       	mov	r24, r28
    2650:	0e 94 36 12 	call	0x246c	; 0x246c <PRV_voidWriteHalfPort>
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	63 e0       	ldi	r22, 0x03	; 3
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    265e:	8f e9       	ldi	r24, 0x9F	; 159
    2660:	9f e0       	ldi	r25, 0x0F	; 15
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_voidDisplayChar+0x56>
    2666:	00 c0       	rjmp	.+0      	; 0x2668 <LCD_voidDisplayChar+0x5c>
    2668:	00 00       	nop
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	63 e0       	ldi	r22, 0x03	; 3
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2674:	cf 91       	pop	r28
    2676:	08 95       	ret

00002678 <LCD_voidDisplayString>:
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	29 f4       	brne	.+10     	; 0x268c <LCD_voidDisplayString+0x14>
    2682:	0c c0       	rjmp	.+24     	; 0x269c <LCD_voidDisplayString+0x24>
    2684:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidDisplayChar>
    2688:	cf 5f       	subi	r28, 0xFF	; 255
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <LCD_voidDisplayString+0x18>
    268c:	8c 01       	movw	r16, r24
    268e:	c0 e0       	ldi	r28, 0x00	; 0
    2690:	f8 01       	movw	r30, r16
    2692:	ec 0f       	add	r30, r28
    2694:	f1 1d       	adc	r31, r1
    2696:	80 81       	ld	r24, Z
    2698:	81 11       	cpse	r24, r1
    269a:	f4 cf       	rjmp	.-24     	; 0x2684 <LCD_voidDisplayString+0xc>
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	08 95       	ret

000026a4 <LCD_voidDisplayStringDelay>:
    26a4:	0f 93       	push	r16
    26a6:	1f 93       	push	r17
    26a8:	cf 93       	push	r28
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	71 f4       	brne	.+28     	; 0x26ca <LCD_voidDisplayStringDelay+0x26>
    26ae:	15 c0       	rjmp	.+42     	; 0x26da <LCD_voidDisplayStringDelay+0x36>
    26b0:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidDisplayChar>
    26b4:	cf 5f       	subi	r28, 0xFF	; 255
    26b6:	2f ef       	ldi	r18, 0xFF	; 255
    26b8:	80 e7       	ldi	r24, 0x70	; 112
    26ba:	92 e0       	ldi	r25, 0x02	; 2
    26bc:	21 50       	subi	r18, 0x01	; 1
    26be:	80 40       	sbci	r24, 0x00	; 0
    26c0:	90 40       	sbci	r25, 0x00	; 0
    26c2:	e1 f7       	brne	.-8      	; 0x26bc <LCD_voidDisplayStringDelay+0x18>
    26c4:	00 c0       	rjmp	.+0      	; 0x26c6 <LCD_voidDisplayStringDelay+0x22>
    26c6:	00 00       	nop
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <LCD_voidDisplayStringDelay+0x2a>
    26ca:	8c 01       	movw	r16, r24
    26cc:	c0 e0       	ldi	r28, 0x00	; 0
    26ce:	f8 01       	movw	r30, r16
    26d0:	ec 0f       	add	r30, r28
    26d2:	f1 1d       	adc	r31, r1
    26d4:	80 81       	ld	r24, Z
    26d6:	81 11       	cpse	r24, r1
    26d8:	eb cf       	rjmp	.-42     	; 0x26b0 <LCD_voidDisplayStringDelay+0xc>
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	08 95       	ret

000026e2 <LCD_voidDisplayNumber>:
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <LCD_voidDisplayNumber+0xa>
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <LCD_voidDisplayNumber+0xc>
    26ee:	1f 92       	push	r1
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	26 2f       	mov	r18, r22
    26f6:	10 e0       	ldi	r17, 0x00	; 0
    26f8:	08 c0       	rjmp	.+16     	; 0x270a <LCD_voidDisplayNumber+0x28>
    26fa:	1f 5f       	subi	r17, 0xFF	; 255
    26fc:	ed ec       	ldi	r30, 0xCD	; 205
    26fe:	6e 9f       	mul	r22, r30
    2700:	61 2d       	mov	r22, r1
    2702:	11 24       	eor	r1, r1
    2704:	66 95       	lsr	r22
    2706:	66 95       	lsr	r22
    2708:	66 95       	lsr	r22
    270a:	61 11       	cpse	r22, r1
    270c:	f6 cf       	rjmp	.-20     	; 0x26fa <LCD_voidDisplayNumber+0x18>
    270e:	00 e0       	ldi	r16, 0x00	; 0
    2710:	1a c0       	rjmp	.+52     	; 0x2746 <LCD_voidDisplayNumber+0x64>
    2712:	62 2f       	mov	r22, r18
    2714:	2a e0       	ldi	r18, 0x0A	; 10
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	50 e0       	ldi	r21, 0x00	; 0
    271c:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>
    2720:	73 2f       	mov	r23, r19
    2722:	84 2f       	mov	r24, r20
    2724:	95 2f       	mov	r25, r21
    2726:	a0 2f       	mov	r26, r16
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	11 96       	adiw	r26, 0x01	; 1
    272c:	e1 2f       	mov	r30, r17
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	ea 1b       	sub	r30, r26
    2732:	fb 0b       	sbc	r31, r27
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	4c 0f       	add	r20, r28
    273a:	5d 1f       	adc	r21, r29
    273c:	e4 0f       	add	r30, r20
    273e:	f5 1f       	adc	r31, r21
    2740:	60 5d       	subi	r22, 0xD0	; 208
    2742:	60 83       	st	Z, r22
    2744:	0f 5f       	subi	r16, 0xFF	; 255
    2746:	01 17       	cp	r16, r17
    2748:	20 f3       	brcs	.-56     	; 0x2712 <LCD_voidDisplayNumber+0x30>
    274a:	e1 e0       	ldi	r30, 0x01	; 1
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	ec 0f       	add	r30, r28
    2750:	fd 1f       	adc	r31, r29
    2752:	e1 0f       	add	r30, r17
    2754:	f1 1d       	adc	r31, r1
    2756:	10 82       	st	Z, r1
    2758:	10 e0       	ldi	r17, 0x00	; 0
    275a:	03 c0       	rjmp	.+6      	; 0x2762 <LCD_voidDisplayNumber+0x80>
    275c:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidDisplayChar>
    2760:	1f 5f       	subi	r17, 0xFF	; 255
    2762:	e1 e0       	ldi	r30, 0x01	; 1
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	ec 0f       	add	r30, r28
    2768:	fd 1f       	adc	r31, r29
    276a:	e1 0f       	add	r30, r17
    276c:	f1 1d       	adc	r31, r1
    276e:	80 81       	ld	r24, Z
    2770:	81 11       	cpse	r24, r1
    2772:	f4 cf       	rjmp	.-24     	; 0x275c <LCD_voidDisplayNumber+0x7a>
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	0f 90       	pop	r0
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	1f 91       	pop	r17
    2784:	0f 91       	pop	r16
    2786:	08 95       	ret

00002788 <LCD_voidClear>:
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	61 e0       	ldi	r22, 0x01	; 1
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	62 e0       	ldi	r22, 0x02	; 2
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	0e 94 36 12 	call	0x246c	; 0x246c <PRV_voidWriteHalfPort>
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	63 e0       	ldi	r22, 0x03	; 3
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    27ac:	8f e9       	ldi	r24, 0x9F	; 159
    27ae:	9f e0       	ldi	r25, 0x0F	; 15
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_voidClear+0x28>
    27b4:	00 c0       	rjmp	.+0      	; 0x27b6 <LCD_voidClear+0x2e>
    27b6:	00 00       	nop
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	63 e0       	ldi	r22, 0x03	; 3
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	0e 94 36 12 	call	0x246c	; 0x246c <PRV_voidWriteHalfPort>
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	63 e0       	ldi	r22, 0x03	; 3
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    27d2:	8f e9       	ldi	r24, 0x9F	; 159
    27d4:	9f e0       	ldi	r25, 0x0F	; 15
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_voidClear+0x4e>
    27da:	00 c0       	rjmp	.+0      	; 0x27dc <LCD_voidClear+0x54>
    27dc:	00 00       	nop
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	63 e0       	ldi	r22, 0x03	; 3
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    27e8:	08 95       	ret

000027ea <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
    27ea:	cf 93       	push	r28
    27ec:	df 93       	push	r29
	if(copy_u8Position<40)
    27ee:	68 32       	cpi	r22, 0x28	; 40
    27f0:	a0 f4       	brcc	.+40     	; 0x281a <LCD_voidGoTOSpecificPosition+0x30>
    27f2:	c6 2f       	mov	r28, r22
    27f4:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
    27f6:	82 e0       	ldi	r24, 0x02	; 2
    27f8:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
    27fc:	d1 30       	cpi	r29, 0x01	; 1
    27fe:	19 f0       	breq	.+6      	; 0x2806 <LCD_voidGoTOSpecificPosition+0x1c>
    2800:	d2 30       	cpi	r29, 0x02	; 2
    2802:	31 f0       	breq	.+12     	; 0x2810 <LCD_voidGoTOSpecificPosition+0x26>
    2804:	0a c0       	rjmp	.+20     	; 0x281a <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
    2806:	8c 2f       	mov	r24, r28
    2808:	80 68       	ori	r24, 0x80	; 128
    280a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
		
			
			break;
    280e:	05 c0       	rjmp	.+10     	; 0x281a <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
    2810:	80 e4       	ldi	r24, 0x40	; 64
    2812:	8c 0f       	add	r24, r28
    2814:	80 68       	ori	r24, 0x80	; 128
    2816:	0e 94 6e 12 	call	0x24dc	; 0x24dc <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	08 95       	ret

00002820 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
    2820:	41 e0       	ldi	r20, 0x01	; 1
    2822:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
    2826:	08 95       	ret

00002828 <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    2828:	41 30       	cpi	r20, 0x01	; 1
    282a:	19 f0       	breq	.+6      	; 0x2832 <LED_voidOn+0xa>
    282c:	42 30       	cpi	r20, 0x02	; 2
    282e:	29 f0       	breq	.+10     	; 0x283a <LED_voidOn+0x12>
    2830:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
		break;
    2838:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    2840:	08 95       	ret

00002842 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
    2842:	41 30       	cpi	r20, 0x01	; 1
    2844:	19 f0       	breq	.+6      	; 0x284c <LED_voidOff+0xa>
    2846:	42 30       	cpi	r20, 0x02	; 2
    2848:	29 f0       	breq	.+10     	; 0x2854 <LED_voidOff+0x12>
    284a:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
    284c:	40 e0       	ldi	r20, 0x00	; 0
    284e:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
		break;
    2852:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
    2854:	41 e0       	ldi	r20, 0x01	; 1
    2856:	0e 94 38 15 	call	0x2a70	; 0x2a70 <DIO_voidSetPinValue>
    285a:	08 95       	ret

0000285c <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
    285c:	41 e0       	ldi	r20, 0x01	; 1
    285e:	0e 94 b8 14 	call	0x2970	; 0x2970 <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
    2862:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <PWM_voidInitChannel_1A>
    2866:	08 95       	ret

00002868 <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
    2868:	20 e0       	ldi	r18, 0x00	; 0
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	40 e2       	ldi	r20, 0x20	; 32
    286e:	50 e4       	ldi	r21, 0x40	; 64
    2870:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__mulsf3>
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 ec       	ldi	r19, 0xC0	; 192
    2878:	48 e2       	ldi	r20, 0x28	; 40
    287a:	54 e4       	ldi	r21, 0x44	; 68
    287c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <__addsf3>
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	44 eb       	ldi	r20, 0xB4	; 180
    2886:	52 e4       	ldi	r21, 0x42	; 66
    2888:	0e 94 6f 19 	call	0x32de	; 0x32de <__divsf3>
    288c:	ab 01       	movw	r20, r22
    288e:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1B(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
    2890:	82 e3       	ldi	r24, 0x32	; 50
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <PWM_voidGenerateChannel_1B>
    2898:	08 95       	ret

0000289a <main>:
extern u8 usertype;

int main()
{
	u8 suc;
	APP_init();
    289a:	0e 94 17 0c 	call	0x182e	; 0x182e <APP_init>
		//}
		
		
		
		// HOME_voidChangeUserNameAndPass();
		if (global_accessType ==accessPermited)
    289e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <global_accessType>
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	89 f4       	brne	.+34     	; 0x28c8 <main+0x2e>
		{
			if (usertype == HOME_REMOTE_ADMIN)
    28a6:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <usertype>
    28aa:	83 30       	cpi	r24, 0x03	; 3
    28ac:	19 f4       	brne	.+6      	; 0x28b4 <main+0x1a>
			{
				KPD_Interface_RemoteAdmin();
    28ae:	0e 94 68 04 	call	0x8d0	; 0x8d0 <KPD_Interface_RemoteAdmin>
    28b2:	f5 cf       	rjmp	.-22     	; 0x289e <main+0x4>
			}
			else if (usertype == HOME_REMOTE_USER)
    28b4:	84 30       	cpi	r24, 0x04	; 4
    28b6:	19 f4       	brne	.+6      	; 0x28be <main+0x24>
			{
				KPD_Interface_RemoteUser();
    28b8:	0e 94 68 08 	call	0x10d0	; 0x10d0 <KPD_Interface_RemoteUser>
    28bc:	f0 cf       	rjmp	.-32     	; 0x289e <main+0x4>
			}

			else if (usertype == HOME_LOCAL_USER)
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	71 f7       	brne	.-36     	; 0x289e <main+0x4>
			{
				KPD_Interface_Localuser();
    28c2:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <KPD_Interface_Localuser>
    28c6:	eb cf       	rjmp	.-42     	; 0x289e <main+0x4>
			}

			
		}
		else if (global_accessType ==accessDenied)
    28c8:	81 11       	cpse	r24, r1
    28ca:	e9 cf       	rjmp	.-46     	; 0x289e <main+0x4>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
    28cc:	82 e2       	ldi	r24, 0x22	; 34
    28ce:	94 e0       	ldi	r25, 0x04	; 4
    28d0:	0e 94 3c 13 	call	0x2678	; 0x2678 <LCD_voidDisplayString>
		}
		
		
		
	}
}
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	08 95       	ret

000028da <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
    28da:	82 30       	cpi	r24, 0x02	; 2
    28dc:	59 f0       	breq	.+22     	; 0x28f4 <ADC_voidInit+0x1a>
    28de:	83 30       	cpi	r24, 0x03	; 3
    28e0:	81 f0       	breq	.+32     	; 0x2902 <ADC_voidInit+0x28>
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	a1 f4       	brne	.+40     	; 0x290e <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
    28e6:	87 b1       	in	r24, 0x07	; 7
    28e8:	80 64       	ori	r24, 0x40	; 64
    28ea:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    28ec:	87 b1       	in	r24, 0x07	; 7
    28ee:	8f 77       	andi	r24, 0x7F	; 127
    28f0:	87 b9       	out	0x07, r24	; 7
		break;
    28f2:	0d c0       	rjmp	.+26     	; 0x290e <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
    28f4:	87 b1       	in	r24, 0x07	; 7
    28f6:	8f 7b       	andi	r24, 0xBF	; 191
    28f8:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    28fa:	87 b1       	in	r24, 0x07	; 7
    28fc:	8f 77       	andi	r24, 0x7F	; 127
    28fe:	87 b9       	out	0x07, r24	; 7
		break;
    2900:	06 c0       	rjmp	.+12     	; 0x290e <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
    2902:	87 b1       	in	r24, 0x07	; 7
    2904:	80 64       	ori	r24, 0x40	; 64
    2906:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
    2908:	87 b1       	in	r24, 0x07	; 7
    290a:	80 68       	ori	r24, 0x80	; 128
    290c:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
    290e:	87 b1       	in	r24, 0x07	; 7
    2910:	8f 7d       	andi	r24, 0xDF	; 223
    2912:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
    2914:	86 b1       	in	r24, 0x06	; 6
    2916:	8f 7d       	andi	r24, 0xDF	; 223
    2918:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
    291a:	86 b1       	in	r24, 0x06	; 6
    291c:	87 7f       	andi	r24, 0xF7	; 247
    291e:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
    2920:	86 b1       	in	r24, 0x06	; 6
    2922:	84 60       	ori	r24, 0x04	; 4
    2924:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
    2926:	86 b1       	in	r24, 0x06	; 6
    2928:	82 60       	ori	r24, 0x02	; 2
    292a:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
    292c:	86 b1       	in	r24, 0x06	; 6
    292e:	81 60       	ori	r24, 0x01	; 1
    2930:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
    2932:	86 b1       	in	r24, 0x06	; 6
    2934:	80 68       	ori	r24, 0x80	; 128
    2936:	86 b9       	out	0x06, r24	; 6
    2938:	08 95       	ret

0000293a <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
    293a:	61 15       	cp	r22, r1
    293c:	71 05       	cpc	r23, r1
    293e:	b9 f0       	breq	.+46     	; 0x296e <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
    2940:	97 b1       	in	r25, 0x07	; 7
    2942:	90 7e       	andi	r25, 0xE0	; 224
    2944:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
    2946:	97 b1       	in	r25, 0x07	; 7
    2948:	89 2b       	or	r24, r25
    294a:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
    294c:	86 b1       	in	r24, 0x06	; 6
    294e:	80 64       	ori	r24, 0x40	; 64
    2950:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
    2952:	34 9b       	sbis	0x06, 4	; 6
    2954:	fe cf       	rjmp	.-4      	; 0x2952 <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
    2956:	84 b1       	in	r24, 0x04	; 4
    2958:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
    295a:	96 95       	lsr	r25
    295c:	87 95       	ror	r24
    295e:	96 95       	lsr	r25
    2960:	87 95       	ror	r24
    2962:	fb 01       	movw	r30, r22
    2964:	91 83       	std	Z+1, r25	; 0x01
    2966:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
    2968:	86 b1       	in	r24, 0x06	; 6
    296a:	80 61       	ori	r24, 0x10	; 16
    296c:	86 b9       	out	0x06, r24	; 6
    296e:	08 95       	ret

00002970 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    2970:	84 30       	cpi	r24, 0x04	; 4
    2972:	08 f0       	brcs	.+2      	; 0x2976 <DIO_voidSetPinDirection+0x6>
    2974:	7c c0       	rjmp	.+248    	; 0x2a6e <DIO_voidSetPinDirection+0xfe>
    2976:	68 30       	cpi	r22, 0x08	; 8
    2978:	08 f0       	brcs	.+2      	; 0x297c <DIO_voidSetPinDirection+0xc>
    297a:	79 c0       	rjmp	.+242    	; 0x2a6e <DIO_voidSetPinDirection+0xfe>
    297c:	42 30       	cpi	r20, 0x02	; 2
    297e:	08 f0       	brcs	.+2      	; 0x2982 <DIO_voidSetPinDirection+0x12>
    2980:	76 c0       	rjmp	.+236    	; 0x2a6e <DIO_voidSetPinDirection+0xfe>
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	19 f1       	breq	.+70     	; 0x29cc <DIO_voidSetPinDirection+0x5c>
    2986:	30 f0       	brcs	.+12     	; 0x2994 <DIO_voidSetPinDirection+0x24>
    2988:	82 30       	cpi	r24, 0x02	; 2
    298a:	e1 f1       	breq	.+120    	; 0x2a04 <DIO_voidSetPinDirection+0x94>
    298c:	83 30       	cpi	r24, 0x03	; 3
    298e:	09 f4       	brne	.+2      	; 0x2992 <DIO_voidSetPinDirection+0x22>
    2990:	54 c0       	rjmp	.+168    	; 0x2a3a <DIO_voidSetPinDirection+0xca>
    2992:	08 95       	ret
    2994:	44 23       	and	r20, r20
    2996:	71 f0       	breq	.+28     	; 0x29b4 <DIO_voidSetPinDirection+0x44>
    2998:	41 30       	cpi	r20, 0x01	; 1
    299a:	09 f0       	breq	.+2      	; 0x299e <DIO_voidSetPinDirection+0x2e>
    299c:	68 c0       	rjmp	.+208    	; 0x2a6e <DIO_voidSetPinDirection+0xfe>
    299e:	2a b3       	in	r18, 0x1a	; 26
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <DIO_voidSetPinDirection+0x3a>
    29a6:	88 0f       	add	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	6a 95       	dec	r22
    29ac:	e2 f7       	brpl	.-8      	; 0x29a6 <DIO_voidSetPinDirection+0x36>
    29ae:	82 2b       	or	r24, r18
    29b0:	8a bb       	out	0x1a, r24	; 26
    29b2:	08 95       	ret
    29b4:	2a b3       	in	r18, 0x1a	; 26
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <DIO_voidSetPinDirection+0x50>
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	6a 95       	dec	r22
    29c2:	e2 f7       	brpl	.-8      	; 0x29bc <DIO_voidSetPinDirection+0x4c>
    29c4:	80 95       	com	r24
    29c6:	82 23       	and	r24, r18
    29c8:	8a bb       	out	0x1a, r24	; 26
    29ca:	08 95       	ret
    29cc:	44 23       	and	r20, r20
    29ce:	71 f0       	breq	.+28     	; 0x29ec <DIO_voidSetPinDirection+0x7c>
    29d0:	41 30       	cpi	r20, 0x01	; 1
    29d2:	09 f0       	breq	.+2      	; 0x29d6 <DIO_voidSetPinDirection+0x66>
    29d4:	4c c0       	rjmp	.+152    	; 0x2a6e <DIO_voidSetPinDirection+0xfe>
    29d6:	27 b3       	in	r18, 0x17	; 23
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <DIO_voidSetPinDirection+0x72>
    29de:	88 0f       	add	r24, r24
    29e0:	99 1f       	adc	r25, r25
    29e2:	6a 95       	dec	r22
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <DIO_voidSetPinDirection+0x6e>
    29e6:	82 2b       	or	r24, r18
    29e8:	87 bb       	out	0x17, r24	; 23
    29ea:	08 95       	ret
    29ec:	27 b3       	in	r18, 0x17	; 23
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <DIO_voidSetPinDirection+0x88>
    29f4:	88 0f       	add	r24, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	6a 95       	dec	r22
    29fa:	e2 f7       	brpl	.-8      	; 0x29f4 <DIO_voidSetPinDirection+0x84>
    29fc:	80 95       	com	r24
    29fe:	82 23       	and	r24, r18
    2a00:	87 bb       	out	0x17, r24	; 23
    2a02:	08 95       	ret
    2a04:	44 23       	and	r20, r20
    2a06:	69 f0       	breq	.+26     	; 0x2a22 <DIO_voidSetPinDirection+0xb2>
    2a08:	41 30       	cpi	r20, 0x01	; 1
    2a0a:	89 f5       	brne	.+98     	; 0x2a6e <DIO_voidSetPinDirection+0xfe>
    2a0c:	24 b3       	in	r18, 0x14	; 20
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <DIO_voidSetPinDirection+0xa8>
    2a14:	88 0f       	add	r24, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	6a 95       	dec	r22
    2a1a:	e2 f7       	brpl	.-8      	; 0x2a14 <DIO_voidSetPinDirection+0xa4>
    2a1c:	82 2b       	or	r24, r18
    2a1e:	84 bb       	out	0x14, r24	; 20
    2a20:	08 95       	ret
    2a22:	24 b3       	in	r18, 0x14	; 20
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <DIO_voidSetPinDirection+0xbe>
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	6a 95       	dec	r22
    2a30:	e2 f7       	brpl	.-8      	; 0x2a2a <DIO_voidSetPinDirection+0xba>
    2a32:	80 95       	com	r24
    2a34:	82 23       	and	r24, r18
    2a36:	84 bb       	out	0x14, r24	; 20
    2a38:	08 95       	ret
    2a3a:	44 23       	and	r20, r20
    2a3c:	69 f0       	breq	.+26     	; 0x2a58 <DIO_voidSetPinDirection+0xe8>
    2a3e:	41 30       	cpi	r20, 0x01	; 1
    2a40:	b1 f4       	brne	.+44     	; 0x2a6e <DIO_voidSetPinDirection+0xfe>
    2a42:	21 b3       	in	r18, 0x11	; 17
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <DIO_voidSetPinDirection+0xde>
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	6a 95       	dec	r22
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <DIO_voidSetPinDirection+0xda>
    2a52:	82 2b       	or	r24, r18
    2a54:	81 bb       	out	0x11, r24	; 17
    2a56:	08 95       	ret
    2a58:	21 b3       	in	r18, 0x11	; 17
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <DIO_voidSetPinDirection+0xf4>
    2a60:	88 0f       	add	r24, r24
    2a62:	99 1f       	adc	r25, r25
    2a64:	6a 95       	dec	r22
    2a66:	e2 f7       	brpl	.-8      	; 0x2a60 <DIO_voidSetPinDirection+0xf0>
    2a68:	80 95       	com	r24
    2a6a:	82 23       	and	r24, r18
    2a6c:	81 bb       	out	0x11, r24	; 17
    2a6e:	08 95       	ret

00002a70 <DIO_voidSetPinValue>:
    2a70:	84 30       	cpi	r24, 0x04	; 4
    2a72:	08 f0       	brcs	.+2      	; 0x2a76 <DIO_voidSetPinValue+0x6>
    2a74:	7c c0       	rjmp	.+248    	; 0x2b6e <DIO_voidSetPinValue+0xfe>
    2a76:	68 30       	cpi	r22, 0x08	; 8
    2a78:	08 f0       	brcs	.+2      	; 0x2a7c <DIO_voidSetPinValue+0xc>
    2a7a:	79 c0       	rjmp	.+242    	; 0x2b6e <DIO_voidSetPinValue+0xfe>
    2a7c:	42 30       	cpi	r20, 0x02	; 2
    2a7e:	08 f0       	brcs	.+2      	; 0x2a82 <DIO_voidSetPinValue+0x12>
    2a80:	76 c0       	rjmp	.+236    	; 0x2b6e <DIO_voidSetPinValue+0xfe>
    2a82:	81 30       	cpi	r24, 0x01	; 1
    2a84:	19 f1       	breq	.+70     	; 0x2acc <DIO_voidSetPinValue+0x5c>
    2a86:	30 f0       	brcs	.+12     	; 0x2a94 <DIO_voidSetPinValue+0x24>
    2a88:	82 30       	cpi	r24, 0x02	; 2
    2a8a:	e1 f1       	breq	.+120    	; 0x2b04 <DIO_voidSetPinValue+0x94>
    2a8c:	83 30       	cpi	r24, 0x03	; 3
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <DIO_voidSetPinValue+0x22>
    2a90:	54 c0       	rjmp	.+168    	; 0x2b3a <DIO_voidSetPinValue+0xca>
    2a92:	08 95       	ret
    2a94:	44 23       	and	r20, r20
    2a96:	71 f0       	breq	.+28     	; 0x2ab4 <DIO_voidSetPinValue+0x44>
    2a98:	41 30       	cpi	r20, 0x01	; 1
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <DIO_voidSetPinValue+0x2e>
    2a9c:	68 c0       	rjmp	.+208    	; 0x2b6e <DIO_voidSetPinValue+0xfe>
    2a9e:	2b b3       	in	r18, 0x1b	; 27
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <DIO_voidSetPinValue+0x3a>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	6a 95       	dec	r22
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <DIO_voidSetPinValue+0x36>
    2aae:	82 2b       	or	r24, r18
    2ab0:	8b bb       	out	0x1b, r24	; 27
    2ab2:	08 95       	ret
    2ab4:	2b b3       	in	r18, 0x1b	; 27
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	02 c0       	rjmp	.+4      	; 0x2ac0 <DIO_voidSetPinValue+0x50>
    2abc:	88 0f       	add	r24, r24
    2abe:	99 1f       	adc	r25, r25
    2ac0:	6a 95       	dec	r22
    2ac2:	e2 f7       	brpl	.-8      	; 0x2abc <DIO_voidSetPinValue+0x4c>
    2ac4:	80 95       	com	r24
    2ac6:	82 23       	and	r24, r18
    2ac8:	8b bb       	out	0x1b, r24	; 27
    2aca:	08 95       	ret
    2acc:	44 23       	and	r20, r20
    2ace:	71 f0       	breq	.+28     	; 0x2aec <DIO_voidSetPinValue+0x7c>
    2ad0:	41 30       	cpi	r20, 0x01	; 1
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <DIO_voidSetPinValue+0x66>
    2ad4:	4c c0       	rjmp	.+152    	; 0x2b6e <DIO_voidSetPinValue+0xfe>
    2ad6:	28 b3       	in	r18, 0x18	; 24
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <DIO_voidSetPinValue+0x72>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	6a 95       	dec	r22
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <DIO_voidSetPinValue+0x6e>
    2ae6:	82 2b       	or	r24, r18
    2ae8:	88 bb       	out	0x18, r24	; 24
    2aea:	08 95       	ret
    2aec:	28 b3       	in	r18, 0x18	; 24
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DIO_voidSetPinValue+0x88>
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	6a 95       	dec	r22
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <DIO_voidSetPinValue+0x84>
    2afc:	80 95       	com	r24
    2afe:	82 23       	and	r24, r18
    2b00:	88 bb       	out	0x18, r24	; 24
    2b02:	08 95       	ret
    2b04:	44 23       	and	r20, r20
    2b06:	69 f0       	breq	.+26     	; 0x2b22 <DIO_voidSetPinValue+0xb2>
    2b08:	41 30       	cpi	r20, 0x01	; 1
    2b0a:	89 f5       	brne	.+98     	; 0x2b6e <DIO_voidSetPinValue+0xfe>
    2b0c:	25 b3       	in	r18, 0x15	; 21
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <DIO_voidSetPinValue+0xa8>
    2b14:	88 0f       	add	r24, r24
    2b16:	99 1f       	adc	r25, r25
    2b18:	6a 95       	dec	r22
    2b1a:	e2 f7       	brpl	.-8      	; 0x2b14 <DIO_voidSetPinValue+0xa4>
    2b1c:	82 2b       	or	r24, r18
    2b1e:	85 bb       	out	0x15, r24	; 21
    2b20:	08 95       	ret
    2b22:	25 b3       	in	r18, 0x15	; 21
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <DIO_voidSetPinValue+0xbe>
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	6a 95       	dec	r22
    2b30:	e2 f7       	brpl	.-8      	; 0x2b2a <DIO_voidSetPinValue+0xba>
    2b32:	80 95       	com	r24
    2b34:	82 23       	and	r24, r18
    2b36:	85 bb       	out	0x15, r24	; 21
    2b38:	08 95       	ret
    2b3a:	44 23       	and	r20, r20
    2b3c:	69 f0       	breq	.+26     	; 0x2b58 <DIO_voidSetPinValue+0xe8>
    2b3e:	41 30       	cpi	r20, 0x01	; 1
    2b40:	b1 f4       	brne	.+44     	; 0x2b6e <DIO_voidSetPinValue+0xfe>
    2b42:	22 b3       	in	r18, 0x12	; 18
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <DIO_voidSetPinValue+0xde>
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	6a 95       	dec	r22
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <DIO_voidSetPinValue+0xda>
    2b52:	82 2b       	or	r24, r18
    2b54:	82 bb       	out	0x12, r24	; 18
    2b56:	08 95       	ret
    2b58:	22 b3       	in	r18, 0x12	; 18
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <DIO_voidSetPinValue+0xf4>
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	6a 95       	dec	r22
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <DIO_voidSetPinValue+0xf0>
    2b68:	80 95       	com	r24
    2b6a:	82 23       	and	r24, r18
    2b6c:	82 bb       	out	0x12, r24	; 18
    2b6e:	08 95       	ret

00002b70 <DIO_voidGetPinValue>:
    2b70:	84 30       	cpi	r24, 0x04	; 4
    2b72:	c0 f5       	brcc	.+112    	; 0x2be4 <DIO_voidGetPinValue+0x74>
    2b74:	68 30       	cpi	r22, 0x08	; 8
    2b76:	b0 f5       	brcc	.+108    	; 0x2be4 <DIO_voidGetPinValue+0x74>
    2b78:	41 15       	cp	r20, r1
    2b7a:	51 05       	cpc	r21, r1
    2b7c:	99 f1       	breq	.+102    	; 0x2be4 <DIO_voidGetPinValue+0x74>
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	89 f0       	breq	.+34     	; 0x2ba4 <DIO_voidGetPinValue+0x34>
    2b82:	28 f0       	brcs	.+10     	; 0x2b8e <DIO_voidGetPinValue+0x1e>
    2b84:	82 30       	cpi	r24, 0x02	; 2
    2b86:	c9 f0       	breq	.+50     	; 0x2bba <DIO_voidGetPinValue+0x4a>
    2b88:	83 30       	cpi	r24, 0x03	; 3
    2b8a:	11 f1       	breq	.+68     	; 0x2bd0 <DIO_voidGetPinValue+0x60>
    2b8c:	08 95       	ret
    2b8e:	89 b3       	in	r24, 0x19	; 25
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <DIO_voidGetPinValue+0x28>
    2b94:	95 95       	asr	r25
    2b96:	87 95       	ror	r24
    2b98:	6a 95       	dec	r22
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <DIO_voidGetPinValue+0x24>
    2b9c:	81 70       	andi	r24, 0x01	; 1
    2b9e:	fa 01       	movw	r30, r20
    2ba0:	80 83       	st	Z, r24
    2ba2:	08 95       	ret
    2ba4:	86 b3       	in	r24, 0x16	; 22
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <DIO_voidGetPinValue+0x3e>
    2baa:	95 95       	asr	r25
    2bac:	87 95       	ror	r24
    2bae:	6a 95       	dec	r22
    2bb0:	e2 f7       	brpl	.-8      	; 0x2baa <DIO_voidGetPinValue+0x3a>
    2bb2:	81 70       	andi	r24, 0x01	; 1
    2bb4:	fa 01       	movw	r30, r20
    2bb6:	80 83       	st	Z, r24
    2bb8:	08 95       	ret
    2bba:	83 b3       	in	r24, 0x13	; 19
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <DIO_voidGetPinValue+0x54>
    2bc0:	95 95       	asr	r25
    2bc2:	87 95       	ror	r24
    2bc4:	6a 95       	dec	r22
    2bc6:	e2 f7       	brpl	.-8      	; 0x2bc0 <DIO_voidGetPinValue+0x50>
    2bc8:	81 70       	andi	r24, 0x01	; 1
    2bca:	fa 01       	movw	r30, r20
    2bcc:	80 83       	st	Z, r24
    2bce:	08 95       	ret
    2bd0:	80 b3       	in	r24, 0x10	; 16
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	02 c0       	rjmp	.+4      	; 0x2bda <DIO_voidGetPinValue+0x6a>
    2bd6:	95 95       	asr	r25
    2bd8:	87 95       	ror	r24
    2bda:	6a 95       	dec	r22
    2bdc:	e2 f7       	brpl	.-8      	; 0x2bd6 <DIO_voidGetPinValue+0x66>
    2bde:	81 70       	andi	r24, 0x01	; 1
    2be0:	fa 01       	movw	r30, r20
    2be2:	80 83       	st	Z, r24
    2be4:	08 95       	ret

00002be6 <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    2be6:	84 30       	cpi	r24, 0x04	; 4
    2be8:	a8 f5       	brcc	.+106    	; 0x2c54 <DIO_voidActivePinInPullUpResistance+0x6e>
    2bea:	68 30       	cpi	r22, 0x08	; 8
    2bec:	98 f5       	brcc	.+102    	; 0x2c54 <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    2bee:	81 30       	cpi	r24, 0x01	; 1
    2bf0:	89 f0       	breq	.+34     	; 0x2c14 <DIO_voidActivePinInPullUpResistance+0x2e>
    2bf2:	28 f0       	brcs	.+10     	; 0x2bfe <DIO_voidActivePinInPullUpResistance+0x18>
    2bf4:	82 30       	cpi	r24, 0x02	; 2
    2bf6:	c9 f0       	breq	.+50     	; 0x2c2a <DIO_voidActivePinInPullUpResistance+0x44>
    2bf8:	83 30       	cpi	r24, 0x03	; 3
    2bfa:	11 f1       	breq	.+68     	; 0x2c40 <DIO_voidActivePinInPullUpResistance+0x5a>
    2bfc:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    2bfe:	2b b3       	in	r18, 0x1b	; 27
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	02 c0       	rjmp	.+4      	; 0x2c0a <DIO_voidActivePinInPullUpResistance+0x24>
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	6a 95       	dec	r22
    2c0c:	e2 f7       	brpl	.-8      	; 0x2c06 <DIO_voidActivePinInPullUpResistance+0x20>
    2c0e:	82 2b       	or	r24, r18
    2c10:	8b bb       	out	0x1b, r24	; 27
			break;
    2c12:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    2c14:	28 b3       	in	r18, 0x18	; 24
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <DIO_voidActivePinInPullUpResistance+0x3a>
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	6a 95       	dec	r22
    2c22:	e2 f7       	brpl	.-8      	; 0x2c1c <DIO_voidActivePinInPullUpResistance+0x36>
    2c24:	82 2b       	or	r24, r18
    2c26:	88 bb       	out	0x18, r24	; 24
			break;
    2c28:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    2c2a:	25 b3       	in	r18, 0x15	; 21
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	02 c0       	rjmp	.+4      	; 0x2c36 <DIO_voidActivePinInPullUpResistance+0x50>
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	6a 95       	dec	r22
    2c38:	e2 f7       	brpl	.-8      	; 0x2c32 <DIO_voidActivePinInPullUpResistance+0x4c>
    2c3a:	82 2b       	or	r24, r18
    2c3c:	85 bb       	out	0x15, r24	; 21
			break;
    2c3e:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    2c40:	22 b3       	in	r18, 0x12	; 18
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <DIO_voidActivePinInPullUpResistance+0x66>
    2c48:	88 0f       	add	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	6a 95       	dec	r22
    2c4e:	e2 f7       	brpl	.-8      	; 0x2c48 <DIO_voidActivePinInPullUpResistance+0x62>
    2c50:	82 2b       	or	r24, r18
    2c52:	82 bb       	out	0x12, r24	; 18
    2c54:	08 95       	ret

00002c56 <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    2c56:	8f b7       	in	r24, 0x3f	; 63
    2c58:	80 68       	ori	r24, 0x80	; 128
    2c5a:	8f bf       	out	0x3f, r24	; 63
    2c5c:	08 95       	ret

00002c5e <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel A)*/
	SET_BIT(TCCR1B_REG, WGM13);
    2c5e:	8e b5       	in	r24, 0x2e	; 46
    2c60:	80 61       	ori	r24, 0x10	; 16
    2c62:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    2c64:	8e b5       	in	r24, 0x2e	; 46
    2c66:	88 60       	ori	r24, 0x08	; 8
    2c68:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    2c6a:	8f b5       	in	r24, 0x2f	; 47
    2c6c:	82 60       	ori	r24, 0x02	; 2
    2c6e:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    2c70:	8f b5       	in	r24, 0x2f	; 47
    2c72:	8e 7f       	andi	r24, 0xFE	; 254
    2c74:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1A1);
    2c76:	8f b5       	in	r24, 0x2f	; 47
    2c78:	80 68       	ori	r24, 0x80	; 128
    2c7a:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0);
    2c7c:	8f b5       	in	r24, 0x2f	; 47
    2c7e:	8f 7b       	andi	r24, 0xBF	; 191
    2c80:	8f bd       	out	0x2f, r24	; 47
    2c82:	08 95       	ret

00002c84 <PWM_voidInitChannel_1B>:
}

void PWM_voidInitChannel_1B(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel B)*/
	SET_BIT(TCCR1B_REG, WGM13);
    2c84:	8e b5       	in	r24, 0x2e	; 46
    2c86:	80 61       	ori	r24, 0x10	; 16
    2c88:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    2c8a:	8e b5       	in	r24, 0x2e	; 46
    2c8c:	88 60       	ori	r24, 0x08	; 8
    2c8e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    2c90:	8f b5       	in	r24, 0x2f	; 47
    2c92:	82 60       	ori	r24, 0x02	; 2
    2c94:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    2c96:	8f b5       	in	r24, 0x2f	; 47
    2c98:	8e 7f       	andi	r24, 0xFE	; 254
    2c9a:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1B1);
    2c9c:	8f b5       	in	r24, 0x2f	; 47
    2c9e:	80 62       	ori	r24, 0x20	; 32
    2ca0:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1B0);
    2ca2:	8f b5       	in	r24, 0x2f	; 47
    2ca4:	8f 7e       	andi	r24, 0xEF	; 239
    2ca6:	8f bd       	out	0x2f, r24	; 47
    2ca8:	08 95       	ret

00002caa <PWM_voidGenerateChannel_1A>:
}


void PWM_voidGenerateChannel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    2caa:	cf 92       	push	r12
    2cac:	df 92       	push	r13
    2cae:	ef 92       	push	r14
    2cb0:	ff 92       	push	r15
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	ec 01       	movw	r28, r24
    2cb8:	6a 01       	movw	r12, r20
    2cba:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	48 ec       	ldi	r20, 0xC8	; 200
    2cc2:	52 e4       	ldi	r21, 0x42	; 66
    2cc4:	c7 01       	movw	r24, r14
    2cc6:	b6 01       	movw	r22, r12
    2cc8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__cmpsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	94 f1       	brlt	.+100    	; 0x2d34 <PWM_voidGenerateChannel_1A+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    2cd0:	9e 01       	movw	r18, r28
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	50 e0       	ldi	r21, 0x00	; 0
    2cd6:	60 e9       	ldi	r22, 0x90	; 144
    2cd8:	70 ed       	ldi	r23, 0xD0	; 208
    2cda:	83 e0       	ldi	r24, 0x03	; 3
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>
    2ce2:	21 50       	subi	r18, 0x01	; 1
    2ce4:	31 09       	sbc	r19, r1
    2ce6:	37 bd       	out	0x27, r19	; 39
    2ce8:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1A_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    2cea:	66 b5       	in	r22, 0x26	; 38
    2cec:	77 b5       	in	r23, 0x27	; 39
    2cee:	6f 5f       	subi	r22, 0xFF	; 255
    2cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    2cfa:	a7 01       	movw	r20, r14
    2cfc:	96 01       	movw	r18, r12
    2cfe:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__mulsf3>
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	48 ec       	ldi	r20, 0xC8	; 200
    2d08:	52 e4       	ldi	r21, 0x42	; 66
    2d0a:	0e 94 6f 19 	call	0x32de	; 0x32de <__divsf3>
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e8       	ldi	r20, 0x80	; 128
    2d14:	5f e3       	ldi	r21, 0x3F	; 63
    2d16:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__subsf3>
    2d1a:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fixunssfsi>
    2d1e:	7b bd       	out	0x2b, r23	; 43
    2d20:	6a bd       	out	0x2a, r22	; 42
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    2d22:	8e b5       	in	r24, 0x2e	; 46
    2d24:	81 60       	ori	r24, 0x01	; 1
    2d26:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    2d28:	8e b5       	in	r24, 0x2e	; 46
    2d2a:	82 60       	ori	r24, 0x02	; 2
    2d2c:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    2d2e:	8e b5       	in	r24, 0x2e	; 46
    2d30:	8b 7f       	andi	r24, 0xFB	; 251
    2d32:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
}
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	ff 90       	pop	r15
    2d3a:	ef 90       	pop	r14
    2d3c:	df 90       	pop	r13
    2d3e:	cf 90       	pop	r12
    2d40:	08 95       	ret

00002d42 <PWM_voidGenerateChannel_1B>:



void PWM_voidGenerateChannel_1B(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    2d42:	cf 92       	push	r12
    2d44:	df 92       	push	r13
    2d46:	ef 92       	push	r14
    2d48:	ff 92       	push	r15
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	ec 01       	movw	r28, r24
    2d50:	6a 01       	movw	r12, r20
    2d52:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	48 ec       	ldi	r20, 0xC8	; 200
    2d5a:	52 e4       	ldi	r21, 0x42	; 66
    2d5c:	c7 01       	movw	r24, r14
    2d5e:	b6 01       	movw	r22, r12
    2d60:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <__cmpsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	94 f1       	brlt	.+100    	; 0x2dcc <PWM_voidGenerateChannel_1B+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    2d68:	9e 01       	movw	r18, r28
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	60 e9       	ldi	r22, 0x90	; 144
    2d70:	70 ed       	ldi	r23, 0xD0	; 208
    2d72:	83 e0       	ldi	r24, 0x03	; 3
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>
    2d7a:	21 50       	subi	r18, 0x01	; 1
    2d7c:	31 09       	sbc	r19, r1
    2d7e:	37 bd       	out	0x27, r19	; 39
    2d80:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1B_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    2d82:	66 b5       	in	r22, 0x26	; 38
    2d84:	77 b5       	in	r23, 0x27	; 39
    2d86:	6f 5f       	subi	r22, 0xFF	; 255
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	0e 94 10 1a 	call	0x3420	; 0x3420 <__floatunsisf>
    2d92:	a7 01       	movw	r20, r14
    2d94:	96 01       	movw	r18, r12
    2d96:	0e 94 c2 1a 	call	0x3584	; 0x3584 <__mulsf3>
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	48 ec       	ldi	r20, 0xC8	; 200
    2da0:	52 e4       	ldi	r21, 0x42	; 66
    2da2:	0e 94 6f 19 	call	0x32de	; 0x32de <__divsf3>
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 e8       	ldi	r20, 0x80	; 128
    2dac:	5f e3       	ldi	r21, 0x3F	; 63
    2dae:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__subsf3>
    2db2:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <__fixunssfsi>
    2db6:	79 bd       	out	0x29, r23	; 41
    2db8:	68 bd       	out	0x28, r22	; 40
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    2dba:	8e b5       	in	r24, 0x2e	; 46
    2dbc:	81 60       	ori	r24, 0x01	; 1
    2dbe:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    2dc0:	8e b5       	in	r24, 0x2e	; 46
    2dc2:	82 60       	ori	r24, 0x02	; 2
    2dc4:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    2dc6:	8e b5       	in	r24, 0x2e	; 46
    2dc8:	8b 7f       	andi	r24, 0xFB	; 251
    2dca:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	ff 90       	pop	r15
    2dd2:	ef 90       	pop	r14
    2dd4:	df 90       	pop	r13
    2dd6:	cf 90       	pop	r12
    2dd8:	08 95       	ret

00002dda <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    2dda:	83 b7       	in	r24, 0x33	; 51
    2ddc:	8f 7b       	andi	r24, 0xBF	; 191
    2dde:	83 bf       	out	0x33, r24	; 51
    2de0:	83 b7       	in	r24, 0x33	; 51
    2de2:	88 60       	ori	r24, 0x08	; 8
    2de4:	83 bf       	out	0x33, r24	; 51
    2de6:	83 b7       	in	r24, 0x33	; 51
    2de8:	8f 7e       	andi	r24, 0xEF	; 239
    2dea:	83 bf       	out	0x33, r24	; 51
    2dec:	83 b7       	in	r24, 0x33	; 51
    2dee:	8f 7d       	andi	r24, 0xDF	; 223
    2df0:	83 bf       	out	0x33, r24	; 51
    2df2:	89 b7       	in	r24, 0x39	; 57
    2df4:	82 60       	ori	r24, 0x02	; 2
    2df6:	89 bf       	out	0x39, r24	; 57
    2df8:	89 ef       	ldi	r24, 0xF9	; 249
    2dfa:	8c bf       	out	0x3c, r24	; 60
    2dfc:	08 95       	ret

00002dfe <TMR0_voidStart>:
    2dfe:	83 b7       	in	r24, 0x33	; 51
    2e00:	81 60       	ori	r24, 0x01	; 1
    2e02:	83 bf       	out	0x33, r24	; 51
    2e04:	83 b7       	in	r24, 0x33	; 51
    2e06:	82 60       	ori	r24, 0x02	; 2
    2e08:	83 bf       	out	0x33, r24	; 51
    2e0a:	83 b7       	in	r24, 0x33	; 51
    2e0c:	8b 7f       	andi	r24, 0xFB	; 251
    2e0e:	83 bf       	out	0x33, r24	; 51
    2e10:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <local_u16Counter+0x1>
    2e14:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <local_u16Counter>
    2e18:	08 95       	ret

00002e1a <TMR0_voidStop>:
    2e1a:	83 b7       	in	r24, 0x33	; 51
    2e1c:	8e 7f       	andi	r24, 0xFE	; 254
    2e1e:	83 bf       	out	0x33, r24	; 51
    2e20:	83 b7       	in	r24, 0x33	; 51
    2e22:	8d 7f       	andi	r24, 0xFD	; 253
    2e24:	83 bf       	out	0x33, r24	; 51
    2e26:	83 b7       	in	r24, 0x33	; 51
    2e28:	8b 7f       	andi	r24, 0xFB	; 251
    2e2a:	83 bf       	out	0x33, r24	; 51
    2e2c:	08 95       	ret

00002e2e <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	21 f0       	breq	.+8      	; 0x2e3a <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    2e32:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <PRV_pFunCallBackCTC+0x1>
    2e36:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <PRV_pFunCallBackCTC>
    2e3a:	08 95       	ret

00002e3c <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    2e3c:	88 b7       	in	r24, 0x38	; 56
    2e3e:	82 60       	ori	r24, 0x02	; 2
    2e40:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    2e42:	88 b7       	in	r24, 0x38	; 56
    2e44:	81 60       	ori	r24, 0x01	; 1
    2e46:	88 bf       	out	0x38, r24	; 56
    2e48:	08 95       	ret

00002e4a <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    2e4a:	1f 92       	push	r1
    2e4c:	0f 92       	push	r0
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	0f 92       	push	r0
    2e52:	11 24       	eor	r1, r1
    2e54:	2f 93       	push	r18
    2e56:	3f 93       	push	r19
    2e58:	4f 93       	push	r20
    2e5a:	5f 93       	push	r21
    2e5c:	6f 93       	push	r22
    2e5e:	7f 93       	push	r23
    2e60:	8f 93       	push	r24
    2e62:	9f 93       	push	r25
    2e64:	af 93       	push	r26
    2e66:	bf 93       	push	r27
    2e68:	ef 93       	push	r30
    2e6a:	ff 93       	push	r31
	
	
	local_u16Counter++;
    2e6c:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <local_u16Counter>
    2e70:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <local_u16Counter+0x1>
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <local_u16Counter+0x1>
    2e7a:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    2e7e:	88 3e       	cpi	r24, 0xE8	; 232
    2e80:	93 40       	sbci	r25, 0x03	; 3
    2e82:	69 f4       	brne	.+26     	; 0x2e9e <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    2e84:	81 e7       	ldi	r24, 0x71	; 113
    2e86:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    2e88:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <local_u16Counter+0x1>
    2e8c:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    2e90:	e0 91 38 04 	lds	r30, 0x0438	; 0x800438 <PRV_pFunCallBackOVF>
    2e94:	f0 91 39 04 	lds	r31, 0x0439	; 0x800439 <PRV_pFunCallBackOVF+0x1>
    2e98:	30 97       	sbiw	r30, 0x00	; 0
    2e9a:	09 f0       	breq	.+2      	; 0x2e9e <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    2e9c:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    2e9e:	ff 91       	pop	r31
    2ea0:	ef 91       	pop	r30
    2ea2:	bf 91       	pop	r27
    2ea4:	af 91       	pop	r26
    2ea6:	9f 91       	pop	r25
    2ea8:	8f 91       	pop	r24
    2eaa:	7f 91       	pop	r23
    2eac:	6f 91       	pop	r22
    2eae:	5f 91       	pop	r21
    2eb0:	4f 91       	pop	r20
    2eb2:	3f 91       	pop	r19
    2eb4:	2f 91       	pop	r18
    2eb6:	0f 90       	pop	r0
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	0f 90       	pop	r0
    2ebc:	1f 90       	pop	r1
    2ebe:	18 95       	reti

00002ec0 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    2ec0:	1f 92       	push	r1
    2ec2:	0f 92       	push	r0
    2ec4:	0f b6       	in	r0, 0x3f	; 63
    2ec6:	0f 92       	push	r0
    2ec8:	11 24       	eor	r1, r1
    2eca:	2f 93       	push	r18
    2ecc:	3f 93       	push	r19
    2ece:	4f 93       	push	r20
    2ed0:	5f 93       	push	r21
    2ed2:	6f 93       	push	r22
    2ed4:	7f 93       	push	r23
    2ed6:	8f 93       	push	r24
    2ed8:	9f 93       	push	r25
    2eda:	af 93       	push	r26
    2edc:	bf 93       	push	r27
    2ede:	ef 93       	push	r30
    2ee0:	ff 93       	push	r31
	

	
	local_u16Counter++;
    2ee2:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <local_u16Counter>
    2ee6:	90 91 35 04 	lds	r25, 0x0435	; 0x800435 <local_u16Counter+0x1>
    2eea:	01 96       	adiw	r24, 0x01	; 1
    2eec:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <local_u16Counter+0x1>
    2ef0:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    2ef4:	88 38       	cpi	r24, 0x88	; 136
    2ef6:	93 41       	sbci	r25, 0x13	; 19
    2ef8:	69 f4       	brne	.+26     	; 0x2f14 <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    2efa:	10 92 35 04 	sts	0x0435, r1	; 0x800435 <local_u16Counter+0x1>
    2efe:	10 92 34 04 	sts	0x0434, r1	; 0x800434 <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    2f02:	e0 91 36 04 	lds	r30, 0x0436	; 0x800436 <PRV_pFunCallBackCTC>
    2f06:	f0 91 37 04 	lds	r31, 0x0437	; 0x800437 <PRV_pFunCallBackCTC+0x1>
    2f0a:	30 97       	sbiw	r30, 0x00	; 0
    2f0c:	19 f0       	breq	.+6      	; 0x2f14 <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    2f0e:	09 95       	icall
			TMR0clear_flag();
    2f10:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <TMR0clear_flag>
		{
				//error state
		}
	}
	
    2f14:	ff 91       	pop	r31
    2f16:	ef 91       	pop	r30
    2f18:	bf 91       	pop	r27
    2f1a:	af 91       	pop	r26
    2f1c:	9f 91       	pop	r25
    2f1e:	8f 91       	pop	r24
    2f20:	7f 91       	pop	r23
    2f22:	6f 91       	pop	r22
    2f24:	5f 91       	pop	r21
    2f26:	4f 91       	pop	r20
    2f28:	3f 91       	pop	r19
    2f2a:	2f 91       	pop	r18
    2f2c:	0f 90       	pop	r0
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	0f 90       	pop	r0
    2f32:	1f 90       	pop	r1
    2f34:	18 95       	reti

00002f36 <TMR2_voidInit>:

void TMR2_SetCallBackOVF(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    {
        PRV_pFunCallBackOVF=copy_pFunAction;
    2f36:	85 b5       	in	r24, 0x25	; 37
    2f38:	8f 7b       	andi	r24, 0xBF	; 191
    2f3a:	85 bd       	out	0x25, r24	; 37
    2f3c:	85 b5       	in	r24, 0x25	; 37
    2f3e:	88 60       	ori	r24, 0x08	; 8
    2f40:	85 bd       	out	0x25, r24	; 37
    2f42:	85 b5       	in	r24, 0x25	; 37
    2f44:	8f 7e       	andi	r24, 0xEF	; 239
    2f46:	85 bd       	out	0x25, r24	; 37
    2f48:	85 b5       	in	r24, 0x25	; 37
    2f4a:	8f 7d       	andi	r24, 0xDF	; 223
    2f4c:	85 bd       	out	0x25, r24	; 37
    2f4e:	89 b7       	in	r24, 0x39	; 57
    2f50:	80 68       	ori	r24, 0x80	; 128
    2f52:	89 bf       	out	0x39, r24	; 57
    2f54:	89 ef       	ldi	r24, 0xF9	; 249
    2f56:	83 bd       	out	0x23, r24	; 35
    2f58:	08 95       	ret

00002f5a <TMR2_voidStart>:
    2f5a:	85 b5       	in	r24, 0x25	; 37
    2f5c:	81 60       	ori	r24, 0x01	; 1
    2f5e:	85 bd       	out	0x25, r24	; 37
    2f60:	85 b5       	in	r24, 0x25	; 37
    2f62:	82 60       	ori	r24, 0x02	; 2
    2f64:	85 bd       	out	0x25, r24	; 37
    2f66:	85 b5       	in	r24, 0x25	; 37
    2f68:	8b 7f       	andi	r24, 0xFB	; 251
    2f6a:	85 bd       	out	0x25, r24	; 37
    2f6c:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <local_u16Counter+0x1>
    2f70:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <local_u16Counter>
    2f74:	08 95       	ret

00002f76 <TMR2_SetCallBackCTC>:
    }
}

void TMR2_SetCallBackCTC(void (*copy_pFunAction)(void))
{
    if(copy_pFunAction != NULL)
    2f76:	00 97       	sbiw	r24, 0x00	; 0
    2f78:	21 f0       	breq	.+8      	; 0x2f82 <TMR2_SetCallBackCTC+0xc>
    {
        PRV_pFunCallBackCTC=copy_pFunAction;
    2f7a:	90 93 3d 04 	sts	0x043D, r25	; 0x80043d <PRV_pFunCallBackCTC+0x1>
    2f7e:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <PRV_pFunCallBackCTC>
    2f82:	08 95       	ret

00002f84 <TMR2_clear_flag>:
    }
}

void TMR2_clear_flag(void)
{
    TIFR2_REG |= (1 << OCF2); 
    2f84:	88 b7       	in	r24, 0x38	; 56
    2f86:	80 68       	ori	r24, 0x80	; 128
    2f88:	88 bf       	out	0x38, r24	; 56
    SET_BIT(TIFR2_REG,TOV2);
    2f8a:	88 b7       	in	r24, 0x38	; 56
    2f8c:	80 64       	ori	r24, 0x40	; 64
    2f8e:	88 bf       	out	0x38, r24	; 56
    2f90:	08 95       	ret

00002f92 <__vector_5>:
}

void __vector_5(void)__attribute__((signal));
void __vector_5(void)
{
    2f92:	1f 92       	push	r1
    2f94:	0f 92       	push	r0
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	0f 92       	push	r0
    2f9a:	11 24       	eor	r1, r1
    2f9c:	2f 93       	push	r18
    2f9e:	3f 93       	push	r19
    2fa0:	4f 93       	push	r20
    2fa2:	5f 93       	push	r21
    2fa4:	6f 93       	push	r22
    2fa6:	7f 93       	push	r23
    2fa8:	8f 93       	push	r24
    2faa:	9f 93       	push	r25
    2fac:	af 93       	push	r26
    2fae:	bf 93       	push	r27
    2fb0:	ef 93       	push	r30
    2fb2:	ff 93       	push	r31
    local_u16Counter++;
    2fb4:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <local_u16Counter>
    2fb8:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <local_u16Counter+0x1>
    2fbc:	01 96       	adiw	r24, 0x01	; 1
    2fbe:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <local_u16Counter+0x1>
    2fc2:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <local_u16Counter>
    
    if(local_u16Counter==TMR2_OVERFLOW_COUNTER)
    2fc6:	88 3e       	cpi	r24, 0xE8	; 232
    2fc8:	93 40       	sbci	r25, 0x03	; 3
    2fca:	69 f4       	brne	.+26     	; 0x2fe6 <__vector_5+0x54>
    {
        /*put preload value in timer register*/
        TCNT2_REG=TMR2_PRELOAD_VALUE;
    2fcc:	81 e7       	ldi	r24, 0x71	; 113
    2fce:	84 bd       	out	0x24, r24	; 36
        
        /*CLR counter*/
        local_u16Counter=0;
    2fd0:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <local_u16Counter+0x1>
    2fd4:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <local_u16Counter>
        
        if(PRV_pFunCallBackOVF != NULL)
    2fd8:	e0 91 3e 04 	lds	r30, 0x043E	; 0x80043e <PRV_pFunCallBackOVF>
    2fdc:	f0 91 3f 04 	lds	r31, 0x043F	; 0x80043f <PRV_pFunCallBackOVF+0x1>
    2fe0:	30 97       	sbiw	r30, 0x00	; 0
    2fe2:	09 f0       	breq	.+2      	; 0x2fe6 <__vector_5+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackOVF();
    2fe4:	09 95       	icall
        else
        {
            //error state
        }
    }
}
    2fe6:	ff 91       	pop	r31
    2fe8:	ef 91       	pop	r30
    2fea:	bf 91       	pop	r27
    2fec:	af 91       	pop	r26
    2fee:	9f 91       	pop	r25
    2ff0:	8f 91       	pop	r24
    2ff2:	7f 91       	pop	r23
    2ff4:	6f 91       	pop	r22
    2ff6:	5f 91       	pop	r21
    2ff8:	4f 91       	pop	r20
    2ffa:	3f 91       	pop	r19
    2ffc:	2f 91       	pop	r18
    2ffe:	0f 90       	pop	r0
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	0f 90       	pop	r0
    3004:	1f 90       	pop	r1
    3006:	18 95       	reti

00003008 <__vector_4>:

void __vector_4(void)__attribute__((signal));
void __vector_4(void)
{
    3008:	1f 92       	push	r1
    300a:	0f 92       	push	r0
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	0f 92       	push	r0
    3010:	11 24       	eor	r1, r1
    3012:	2f 93       	push	r18
    3014:	3f 93       	push	r19
    3016:	4f 93       	push	r20
    3018:	5f 93       	push	r21
    301a:	6f 93       	push	r22
    301c:	7f 93       	push	r23
    301e:	8f 93       	push	r24
    3020:	9f 93       	push	r25
    3022:	af 93       	push	r26
    3024:	bf 93       	push	r27
    3026:	ef 93       	push	r30
    3028:	ff 93       	push	r31
    local_u16Counter++;
    302a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <local_u16Counter>
    302e:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <local_u16Counter+0x1>
    3032:	01 96       	adiw	r24, 0x01	; 1
    3034:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <local_u16Counter+0x1>
    3038:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <local_u16Counter>
    
    if(local_u16Counter==TMR2_CTC_COUNTER)
    303c:	88 38       	cpi	r24, 0x88	; 136
    303e:	93 41       	sbci	r25, 0x13	; 19
    3040:	69 f4       	brne	.+26     	; 0x305c <__vector_4+0x54>
    {
        /*CLR counter*/
        local_u16Counter=0;
    3042:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <local_u16Counter+0x1>
    3046:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <local_u16Counter>
        
        if(PRV_pFunCallBackCTC != NULL)
    304a:	e0 91 3c 04 	lds	r30, 0x043C	; 0x80043c <PRV_pFunCallBackCTC>
    304e:	f0 91 3d 04 	lds	r31, 0x043D	; 0x80043d <PRV_pFunCallBackCTC+0x1>
    3052:	30 97       	sbiw	r30, 0x00	; 0
    3054:	19 f0       	breq	.+6      	; 0x305c <__vector_4+0x54>
        {
            /*execute action*/
            PRV_pFunCallBackCTC();
    3056:	09 95       	icall
            TMR2_clear_flag();
    3058:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <TMR2_clear_flag>
        else
        {
            //error state
        }
    }
}
    305c:	ff 91       	pop	r31
    305e:	ef 91       	pop	r30
    3060:	bf 91       	pop	r27
    3062:	af 91       	pop	r26
    3064:	9f 91       	pop	r25
    3066:	8f 91       	pop	r24
    3068:	7f 91       	pop	r23
    306a:	6f 91       	pop	r22
    306c:	5f 91       	pop	r21
    306e:	4f 91       	pop	r20
    3070:	3f 91       	pop	r19
    3072:	2f 91       	pop	r18
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	0f 90       	pop	r0
    307a:	1f 90       	pop	r1
    307c:	18 95       	reti

0000307e <TWI_voidInitMaster>:



void TWI_voidInitMaster(void)
{
	TWBR_REG=12;
    307e:	8c e0       	ldi	r24, 0x0C	; 12
    3080:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR_REG,TWPS1);
    3082:	81 b1       	in	r24, 0x01	; 1
    3084:	8d 7f       	andi	r24, 0xFD	; 253
    3086:	81 b9       	out	0x01, r24	; 1
	CLR_BIT(TWSR_REG,TWPS0);
    3088:	81 b1       	in	r24, 0x01	; 1
    308a:	8e 7f       	andi	r24, 0xFE	; 254
    308c:	81 b9       	out	0x01, r24	; 1
	
	SET_BIT(TWCR_REG,TWEN);
    308e:	86 b7       	in	r24, 0x36	; 54
    3090:	84 60       	ori	r24, 0x04	; 4
    3092:	86 bf       	out	0x36, r24	; 54
    3094:	08 95       	ret

00003096 <TWI_voidSendStartCondition>:



void TWI_voidSendStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    3096:	86 b7       	in	r24, 0x36	; 54
    3098:	80 62       	ori	r24, 0x20	; 32
    309a:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    309c:	86 b7       	in	r24, 0x36	; 54
    309e:	80 68       	ori	r24, 0x80	; 128
    30a0:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    30a2:	06 b6       	in	r0, 0x36	; 54
    30a4:	07 fe       	sbrs	r0, 7
    30a6:	fd cf       	rjmp	.-6      	; 0x30a2 <TWI_voidSendStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_START_CONDITION_ACK);
    30a8:	81 b1       	in	r24, 0x01	; 1
    30aa:	88 7f       	andi	r24, 0xF8	; 248
    30ac:	88 30       	cpi	r24, 0x08	; 8
    30ae:	e1 f7       	brne	.-8      	; 0x30a8 <TWI_voidSendStartCondition+0x12>
}
    30b0:	08 95       	ret

000030b2 <TWI_voidSendRepeatedStartCondition>:



void TWI_voidSendRepeatedStartCondition(void)
{
	SET_BIT(TWCR_REG,TWSTA);
    30b2:	86 b7       	in	r24, 0x36	; 54
    30b4:	80 62       	ori	r24, 0x20	; 32
    30b6:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    30b8:	86 b7       	in	r24, 0x36	; 54
    30ba:	80 68       	ori	r24, 0x80	; 128
    30bc:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    30be:	06 b6       	in	r0, 0x36	; 54
    30c0:	07 fe       	sbrs	r0, 7
    30c2:	fd cf       	rjmp	.-6      	; 0x30be <TWI_voidSendRepeatedStartCondition+0xc>
	
	while(TWI_STATUS_VALUE != TWI_REP_START_CONDITION_ACK);
    30c4:	81 b1       	in	r24, 0x01	; 1
    30c6:	88 7f       	andi	r24, 0xF8	; 248
    30c8:	80 31       	cpi	r24, 0x10	; 16
    30ca:	e1 f7       	brne	.-8      	; 0x30c4 <TWI_voidSendRepeatedStartCondition+0x12>
}
    30cc:	08 95       	ret

000030ce <TWI_voidSendStopCondition>:



void TWI_voidSendStopCondition(void)
{
	SET_BIT(TWCR_REG, TWSTO);
    30ce:	86 b7       	in	r24, 0x36	; 54
    30d0:	80 61       	ori	r24, 0x10	; 16
    30d2:	86 bf       	out	0x36, r24	; 54
	
	SET_BIT(TWCR_REG,TWINT);
    30d4:	86 b7       	in	r24, 0x36	; 54
    30d6:	80 68       	ori	r24, 0x80	; 128
    30d8:	86 bf       	out	0x36, r24	; 54
    30da:	08 95       	ret

000030dc <TWI_voidSendSlaveAddWithWrite>:



void TWI_voidSendSlaveAddWithWrite(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    30dc:	88 23       	and	r24, r24
    30de:	94 f0       	brlt	.+36     	; 0x3104 <TWI_voidSendSlaveAddWithWrite+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    30e0:	88 0f       	add	r24, r24
    30e2:	83 b9       	out	0x03, r24	; 3
		CLR_BIT(TWDR_REG,TWD0);
    30e4:	83 b1       	in	r24, 0x03	; 3
    30e6:	8e 7f       	andi	r24, 0xFE	; 254
    30e8:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    30ea:	86 b7       	in	r24, 0x36	; 54
    30ec:	8f 7d       	andi	r24, 0xDF	; 223
    30ee:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    30f0:	86 b7       	in	r24, 0x36	; 54
    30f2:	80 68       	ori	r24, 0x80	; 128
    30f4:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    30f6:	06 b6       	in	r0, 0x36	; 54
    30f8:	07 fe       	sbrs	r0, 7
    30fa:	fd cf       	rjmp	.-6      	; 0x30f6 <TWI_voidSendSlaveAddWithWrite+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_WRITE_ACK);
    30fc:	81 b1       	in	r24, 0x01	; 1
    30fe:	88 7f       	andi	r24, 0xF8	; 248
    3100:	88 31       	cpi	r24, 0x18	; 24
    3102:	e1 f7       	brne	.-8      	; 0x30fc <TWI_voidSendSlaveAddWithWrite+0x20>
    3104:	08 95       	ret

00003106 <TWI_voidSendSlaveAddWithRead>:
	}
}

void TWI_voidSendSlaveAddWithRead(u8 copy_u8SlaveAdd)
{
	if(copy_u8SlaveAdd<128)
    3106:	88 23       	and	r24, r24
    3108:	94 f0       	brlt	.+36     	; 0x312e <TWI_voidSendSlaveAddWithRead+0x28>
	{
		TWDR_REG=(copy_u8SlaveAdd<<1);
    310a:	88 0f       	add	r24, r24
    310c:	83 b9       	out	0x03, r24	; 3
		SET_BIT(TWDR_REG,TWD0);
    310e:	83 b1       	in	r24, 0x03	; 3
    3110:	81 60       	ori	r24, 0x01	; 1
    3112:	83 b9       	out	0x03, r24	; 3
		
		CLR_BIT(TWCR_REG,TWSTA);
    3114:	86 b7       	in	r24, 0x36	; 54
    3116:	8f 7d       	andi	r24, 0xDF	; 223
    3118:	86 bf       	out	0x36, r24	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    311a:	86 b7       	in	r24, 0x36	; 54
    311c:	80 68       	ori	r24, 0x80	; 128
    311e:	86 bf       	out	0x36, r24	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    3120:	06 b6       	in	r0, 0x36	; 54
    3122:	07 fe       	sbrs	r0, 7
    3124:	fd cf       	rjmp	.-6      	; 0x3120 <TWI_voidSendSlaveAddWithRead+0x1a>
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    3126:	81 b1       	in	r24, 0x01	; 1
    3128:	88 7f       	andi	r24, 0xF8	; 248
    312a:	80 34       	cpi	r24, 0x40	; 64
    312c:	e1 f7       	brne	.-8      	; 0x3126 <TWI_voidSendSlaveAddWithRead+0x20>
    312e:	08 95       	ret

00003130 <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    3130:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    3132:	86 b7       	in	r24, 0x36	; 54
    3134:	80 68       	ori	r24, 0x80	; 128
    3136:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    3138:	06 b6       	in	r0, 0x36	; 54
    313a:	07 fe       	sbrs	r0, 7
    313c:	fd cf       	rjmp	.-6      	; 0x3138 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    313e:	81 b1       	in	r24, 0x01	; 1
    3140:	88 7f       	andi	r24, 0xF8	; 248
    3142:	88 32       	cpi	r24, 0x28	; 40
    3144:	e1 f7       	brne	.-8      	; 0x313e <TWI_voidTransmitMasterDataByte+0xe>
}
    3146:	08 95       	ret

00003148 <TWI_voidRecieveMasterDataByteWithAch>:




void TWI_voidRecieveMasterDataByteWithAch(u8* copy_pu8RxData)
{
    3148:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    314a:	89 2b       	or	r24, r25
    314c:	91 f0       	breq	.+36     	; 0x3172 <TWI_voidRecieveMasterDataByteWithAch+0x2a>
	{
		SET_BIT(TWCR_REG,TWEA);
    314e:	96 b7       	in	r25, 0x36	; 54
    3150:	90 64       	ori	r25, 0x40	; 64
    3152:	96 bf       	out	0x36, r25	; 54
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    3154:	96 b7       	in	r25, 0x36	; 54
    3156:	90 68       	ori	r25, 0x80	; 128
    3158:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    315a:	06 b6       	in	r0, 0x36	; 54
    315c:	07 fe       	sbrs	r0, 7
    315e:	fd cf       	rjmp	.-6      	; 0x315a <TWI_voidRecieveMasterDataByteWithAch+0x12>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_ACK);
    3160:	91 b1       	in	r25, 0x01	; 1
    3162:	98 7f       	andi	r25, 0xF8	; 248
    3164:	90 35       	cpi	r25, 0x50	; 80
    3166:	e1 f7       	brne	.-8      	; 0x3160 <TWI_voidRecieveMasterDataByteWithAch+0x18>
		
		*copy_pu8RxData=TWDR_REG;
    3168:	83 b1       	in	r24, 0x03	; 3
    316a:	80 83       	st	Z, r24
		
		CLR_BIT(TWCR_REG,TWEA);
    316c:	86 b7       	in	r24, 0x36	; 54
    316e:	8f 7b       	andi	r24, 0xBF	; 191
    3170:	86 bf       	out	0x36, r24	; 54
    3172:	08 95       	ret

00003174 <TWI_voidRecieveMasterDataByteWithNAch>:




void TWI_voidRecieveMasterDataByteWithNAch(u8* copy_pu8RxData)
{
    3174:	fc 01       	movw	r30, r24
	if(copy_pu8RxData!=NULL)
    3176:	89 2b       	or	r24, r25
    3178:	61 f0       	breq	.+24     	; 0x3192 <TWI_voidRecieveMasterDataByteWithNAch+0x1e>
	{
		
		
		
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
    317a:	96 b7       	in	r25, 0x36	; 54
    317c:	90 68       	ori	r25, 0x80	; 128
    317e:	96 bf       	out	0x36, r25	; 54
		
		while(0==GET_BIT(TWCR_REG,TWINT));
    3180:	06 b6       	in	r0, 0x36	; 54
    3182:	07 fe       	sbrs	r0, 7
    3184:	fd cf       	rjmp	.-6      	; 0x3180 <TWI_voidRecieveMasterDataByteWithNAch+0xc>
		
		while(TWI_STATUS_VALUE != TWI_MATER_DATA_RECIEVE_NACK);
    3186:	91 b1       	in	r25, 0x01	; 1
    3188:	98 7f       	andi	r25, 0xF8	; 248
    318a:	98 35       	cpi	r25, 0x58	; 88
    318c:	e1 f7       	brne	.-8      	; 0x3186 <TWI_voidRecieveMasterDataByteWithNAch+0x12>
		
		*copy_pu8RxData=TWDR_REG;
    318e:	83 b1       	in	r24, 0x03	; 3
    3190:	80 83       	st	Z, r24
    3192:	08 95       	ret

00003194 <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    3194:	8b b1       	in	r24, 0x0b	; 11
    3196:	8d 7f       	andi	r24, 0xFD	; 253
    3198:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    319a:	87 e6       	ldi	r24, 0x67	; 103
    319c:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    319e:	8a b1       	in	r24, 0x0a	; 10
    31a0:	8b 7f       	andi	r24, 0xFB	; 251
    31a2:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    31a4:	86 e8       	ldi	r24, 0x86	; 134
    31a6:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    31a8:	8a b1       	in	r24, 0x0a	; 10
    31aa:	80 61       	ori	r24, 0x10	; 16
    31ac:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    31ae:	8a b1       	in	r24, 0x0a	; 10
    31b0:	88 60       	ori	r24, 0x08	; 8
    31b2:	8a b9       	out	0x0a, r24	; 10
    31b4:	08 95       	ret

000031b6 <UART_voidTxChar>:


void UART_voidTxChar(u8 copy_u8TxData)
{
	/*write data to data register*/
	UDR_REG=copy_u8TxData;
    31b6:	8c b9       	out	0x0c, r24	; 12
	
	/*busy wait for data moved from data register to shift register*/
	while(0==GET_BIT(UCSRA_REG,UDRE));
    31b8:	5d 9b       	sbis	0x0b, 5	; 11
    31ba:	fe cf       	rjmp	.-4      	; 0x31b8 <UART_voidTxChar+0x2>
	
}
    31bc:	08 95       	ret

000031be <UART_voidRxChar>:



void UART_voidRxChar(u8* copy_pu8RxData)
{
	if(copy_pu8RxData!=NULL)
    31be:	00 97       	sbiw	r24, 0x00	; 0
    31c0:	29 f0       	breq	.+10     	; 0x31cc <UART_voidRxChar+0xe>
	{
		/*busy wait for unread data in data register*/
		while(0==GET_BIT(UCSRA_REG,RXC));
    31c2:	5f 9b       	sbis	0x0b, 7	; 11
    31c4:	fe cf       	rjmp	.-4      	; 0x31c2 <UART_voidRxChar+0x4>
		
		/*Read data to data register*/
		*copy_pu8RxData=UDR_REG;
    31c6:	2c b1       	in	r18, 0x0c	; 12
    31c8:	fc 01       	movw	r30, r24
    31ca:	20 83       	st	Z, r18
    31cc:	08 95       	ret

000031ce <UART_voidTxString>:
		//error state
	}
}

void UART_voidTxString	(u8* copy_pu8TxString)
{
    31ce:	0f 93       	push	r16
    31d0:	1f 93       	push	r17
    31d2:	cf 93       	push	r28
	
	if(copy_pu8TxString!=NULL)
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	29 f4       	brne	.+10     	; 0x31e2 <UART_voidTxString+0x14>
    31d8:	0c c0       	rjmp	.+24     	; 0x31f2 <UART_voidTxString+0x24>
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
		{
			/*send data[i]*/
			UART_voidTxChar(copy_pu8TxString[Local_u8Counter]);
    31da:	0e 94 db 18 	call	0x31b6	; 0x31b6 <UART_voidTxChar>
			
			/*increase counter*/
			Local_u8Counter++;
    31de:	cf 5f       	subi	r28, 0xFF	; 255
    31e0:	02 c0       	rjmp	.+4      	; 0x31e6 <UART_voidTxString+0x18>
    31e2:	8c 01       	movw	r16, r24
    31e4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		/*Init counter*/
		u8 Local_u8Counter=0;
		
		/*loop until Null char*/
		while( copy_pu8TxString[Local_u8Counter] != '\0')
    31e6:	f8 01       	movw	r30, r16
    31e8:	ec 0f       	add	r30, r28
    31ea:	f1 1d       	adc	r31, r1
    31ec:	80 81       	ld	r24, Z
    31ee:	81 11       	cpse	r24, r1
    31f0:	f4 cf       	rjmp	.-24     	; 0x31da <UART_voidTxString+0xc>
	{
		//error state
	}
	
	
}
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	0f 91       	pop	r16
    31f8:	08 95       	ret

000031fa <__subsf3>:
    31fa:	50 58       	subi	r21, 0x80	; 128

000031fc <__addsf3>:
    31fc:	bb 27       	eor	r27, r27
    31fe:	aa 27       	eor	r26, r26
    3200:	0e 94 15 19 	call	0x322a	; 0x322a <__addsf3x>
    3204:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_round>
    3208:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__fp_pscA>
    320c:	38 f0       	brcs	.+14     	; 0x321c <__addsf3+0x20>
    320e:	0e 94 81 1a 	call	0x3502	; 0x3502 <__fp_pscB>
    3212:	20 f0       	brcs	.+8      	; 0x321c <__addsf3+0x20>
    3214:	39 f4       	brne	.+14     	; 0x3224 <__addsf3+0x28>
    3216:	9f 3f       	cpi	r25, 0xFF	; 255
    3218:	19 f4       	brne	.+6      	; 0x3220 <__addsf3+0x24>
    321a:	26 f4       	brtc	.+8      	; 0x3224 <__addsf3+0x28>
    321c:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__fp_nan>
    3220:	0e f4       	brtc	.+2      	; 0x3224 <__addsf3+0x28>
    3222:	e0 95       	com	r30
    3224:	e7 fb       	bst	r30, 7
    3226:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__fp_inf>

0000322a <__addsf3x>:
    322a:	e9 2f       	mov	r30, r25
    322c:	0e 94 99 1a 	call	0x3532	; 0x3532 <__fp_split3>
    3230:	58 f3       	brcs	.-42     	; 0x3208 <__addsf3+0xc>
    3232:	ba 17       	cp	r27, r26
    3234:	62 07       	cpc	r22, r18
    3236:	73 07       	cpc	r23, r19
    3238:	84 07       	cpc	r24, r20
    323a:	95 07       	cpc	r25, r21
    323c:	20 f0       	brcs	.+8      	; 0x3246 <__addsf3x+0x1c>
    323e:	79 f4       	brne	.+30     	; 0x325e <__addsf3x+0x34>
    3240:	a6 f5       	brtc	.+104    	; 0x32aa <__addsf3x+0x80>
    3242:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__fp_zero>
    3246:	0e f4       	brtc	.+2      	; 0x324a <__addsf3x+0x20>
    3248:	e0 95       	com	r30
    324a:	0b 2e       	mov	r0, r27
    324c:	ba 2f       	mov	r27, r26
    324e:	a0 2d       	mov	r26, r0
    3250:	0b 01       	movw	r0, r22
    3252:	b9 01       	movw	r22, r18
    3254:	90 01       	movw	r18, r0
    3256:	0c 01       	movw	r0, r24
    3258:	ca 01       	movw	r24, r20
    325a:	a0 01       	movw	r20, r0
    325c:	11 24       	eor	r1, r1
    325e:	ff 27       	eor	r31, r31
    3260:	59 1b       	sub	r21, r25
    3262:	99 f0       	breq	.+38     	; 0x328a <__addsf3x+0x60>
    3264:	59 3f       	cpi	r21, 0xF9	; 249
    3266:	50 f4       	brcc	.+20     	; 0x327c <__addsf3x+0x52>
    3268:	50 3e       	cpi	r21, 0xE0	; 224
    326a:	68 f1       	brcs	.+90     	; 0x32c6 <__addsf3x+0x9c>
    326c:	1a 16       	cp	r1, r26
    326e:	f0 40       	sbci	r31, 0x00	; 0
    3270:	a2 2f       	mov	r26, r18
    3272:	23 2f       	mov	r18, r19
    3274:	34 2f       	mov	r19, r20
    3276:	44 27       	eor	r20, r20
    3278:	58 5f       	subi	r21, 0xF8	; 248
    327a:	f3 cf       	rjmp	.-26     	; 0x3262 <__addsf3x+0x38>
    327c:	46 95       	lsr	r20
    327e:	37 95       	ror	r19
    3280:	27 95       	ror	r18
    3282:	a7 95       	ror	r26
    3284:	f0 40       	sbci	r31, 0x00	; 0
    3286:	53 95       	inc	r21
    3288:	c9 f7       	brne	.-14     	; 0x327c <__addsf3x+0x52>
    328a:	7e f4       	brtc	.+30     	; 0x32aa <__addsf3x+0x80>
    328c:	1f 16       	cp	r1, r31
    328e:	ba 0b       	sbc	r27, r26
    3290:	62 0b       	sbc	r22, r18
    3292:	73 0b       	sbc	r23, r19
    3294:	84 0b       	sbc	r24, r20
    3296:	ba f0       	brmi	.+46     	; 0x32c6 <__addsf3x+0x9c>
    3298:	91 50       	subi	r25, 0x01	; 1
    329a:	a1 f0       	breq	.+40     	; 0x32c4 <__addsf3x+0x9a>
    329c:	ff 0f       	add	r31, r31
    329e:	bb 1f       	adc	r27, r27
    32a0:	66 1f       	adc	r22, r22
    32a2:	77 1f       	adc	r23, r23
    32a4:	88 1f       	adc	r24, r24
    32a6:	c2 f7       	brpl	.-16     	; 0x3298 <__addsf3x+0x6e>
    32a8:	0e c0       	rjmp	.+28     	; 0x32c6 <__addsf3x+0x9c>
    32aa:	ba 0f       	add	r27, r26
    32ac:	62 1f       	adc	r22, r18
    32ae:	73 1f       	adc	r23, r19
    32b0:	84 1f       	adc	r24, r20
    32b2:	48 f4       	brcc	.+18     	; 0x32c6 <__addsf3x+0x9c>
    32b4:	87 95       	ror	r24
    32b6:	77 95       	ror	r23
    32b8:	67 95       	ror	r22
    32ba:	b7 95       	ror	r27
    32bc:	f7 95       	ror	r31
    32be:	9e 3f       	cpi	r25, 0xFE	; 254
    32c0:	08 f0       	brcs	.+2      	; 0x32c4 <__addsf3x+0x9a>
    32c2:	b0 cf       	rjmp	.-160    	; 0x3224 <__addsf3+0x28>
    32c4:	93 95       	inc	r25
    32c6:	88 0f       	add	r24, r24
    32c8:	08 f0       	brcs	.+2      	; 0x32cc <__addsf3x+0xa2>
    32ca:	99 27       	eor	r25, r25
    32cc:	ee 0f       	add	r30, r30
    32ce:	97 95       	ror	r25
    32d0:	87 95       	ror	r24
    32d2:	08 95       	ret

000032d4 <__cmpsf2>:
    32d4:	0e 94 4d 1a 	call	0x349a	; 0x349a <__fp_cmp>
    32d8:	08 f4       	brcc	.+2      	; 0x32dc <__cmpsf2+0x8>
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	08 95       	ret

000032de <__divsf3>:
    32de:	0e 94 83 19 	call	0x3306	; 0x3306 <__divsf3x>
    32e2:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_round>
    32e6:	0e 94 81 1a 	call	0x3502	; 0x3502 <__fp_pscB>
    32ea:	58 f0       	brcs	.+22     	; 0x3302 <__divsf3+0x24>
    32ec:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__fp_pscA>
    32f0:	40 f0       	brcs	.+16     	; 0x3302 <__divsf3+0x24>
    32f2:	29 f4       	brne	.+10     	; 0x32fe <__divsf3+0x20>
    32f4:	5f 3f       	cpi	r21, 0xFF	; 255
    32f6:	29 f0       	breq	.+10     	; 0x3302 <__divsf3+0x24>
    32f8:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__fp_inf>
    32fc:	51 11       	cpse	r21, r1
    32fe:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__fp_szero>
    3302:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__fp_nan>

00003306 <__divsf3x>:
    3306:	0e 94 99 1a 	call	0x3532	; 0x3532 <__fp_split3>
    330a:	68 f3       	brcs	.-38     	; 0x32e6 <__divsf3+0x8>

0000330c <__divsf3_pse>:
    330c:	99 23       	and	r25, r25
    330e:	b1 f3       	breq	.-20     	; 0x32fc <__divsf3+0x1e>
    3310:	55 23       	and	r21, r21
    3312:	91 f3       	breq	.-28     	; 0x32f8 <__divsf3+0x1a>
    3314:	95 1b       	sub	r25, r21
    3316:	55 0b       	sbc	r21, r21
    3318:	bb 27       	eor	r27, r27
    331a:	aa 27       	eor	r26, r26
    331c:	62 17       	cp	r22, r18
    331e:	73 07       	cpc	r23, r19
    3320:	84 07       	cpc	r24, r20
    3322:	38 f0       	brcs	.+14     	; 0x3332 <__divsf3_pse+0x26>
    3324:	9f 5f       	subi	r25, 0xFF	; 255
    3326:	5f 4f       	sbci	r21, 0xFF	; 255
    3328:	22 0f       	add	r18, r18
    332a:	33 1f       	adc	r19, r19
    332c:	44 1f       	adc	r20, r20
    332e:	aa 1f       	adc	r26, r26
    3330:	a9 f3       	breq	.-22     	; 0x331c <__divsf3_pse+0x10>
    3332:	35 d0       	rcall	.+106    	; 0x339e <__divsf3_pse+0x92>
    3334:	0e 2e       	mov	r0, r30
    3336:	3a f0       	brmi	.+14     	; 0x3346 <__divsf3_pse+0x3a>
    3338:	e0 e8       	ldi	r30, 0x80	; 128
    333a:	32 d0       	rcall	.+100    	; 0x33a0 <__divsf3_pse+0x94>
    333c:	91 50       	subi	r25, 0x01	; 1
    333e:	50 40       	sbci	r21, 0x00	; 0
    3340:	e6 95       	lsr	r30
    3342:	00 1c       	adc	r0, r0
    3344:	ca f7       	brpl	.-14     	; 0x3338 <__divsf3_pse+0x2c>
    3346:	2b d0       	rcall	.+86     	; 0x339e <__divsf3_pse+0x92>
    3348:	fe 2f       	mov	r31, r30
    334a:	29 d0       	rcall	.+82     	; 0x339e <__divsf3_pse+0x92>
    334c:	66 0f       	add	r22, r22
    334e:	77 1f       	adc	r23, r23
    3350:	88 1f       	adc	r24, r24
    3352:	bb 1f       	adc	r27, r27
    3354:	26 17       	cp	r18, r22
    3356:	37 07       	cpc	r19, r23
    3358:	48 07       	cpc	r20, r24
    335a:	ab 07       	cpc	r26, r27
    335c:	b0 e8       	ldi	r27, 0x80	; 128
    335e:	09 f0       	breq	.+2      	; 0x3362 <__divsf3_pse+0x56>
    3360:	bb 0b       	sbc	r27, r27
    3362:	80 2d       	mov	r24, r0
    3364:	bf 01       	movw	r22, r30
    3366:	ff 27       	eor	r31, r31
    3368:	93 58       	subi	r25, 0x83	; 131
    336a:	5f 4f       	sbci	r21, 0xFF	; 255
    336c:	3a f0       	brmi	.+14     	; 0x337c <__divsf3_pse+0x70>
    336e:	9e 3f       	cpi	r25, 0xFE	; 254
    3370:	51 05       	cpc	r21, r1
    3372:	78 f0       	brcs	.+30     	; 0x3392 <__divsf3_pse+0x86>
    3374:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__fp_inf>
    3378:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__fp_szero>
    337c:	5f 3f       	cpi	r21, 0xFF	; 255
    337e:	e4 f3       	brlt	.-8      	; 0x3378 <__divsf3_pse+0x6c>
    3380:	98 3e       	cpi	r25, 0xE8	; 232
    3382:	d4 f3       	brlt	.-12     	; 0x3378 <__divsf3_pse+0x6c>
    3384:	86 95       	lsr	r24
    3386:	77 95       	ror	r23
    3388:	67 95       	ror	r22
    338a:	b7 95       	ror	r27
    338c:	f7 95       	ror	r31
    338e:	9f 5f       	subi	r25, 0xFF	; 255
    3390:	c9 f7       	brne	.-14     	; 0x3384 <__divsf3_pse+0x78>
    3392:	88 0f       	add	r24, r24
    3394:	91 1d       	adc	r25, r1
    3396:	96 95       	lsr	r25
    3398:	87 95       	ror	r24
    339a:	97 f9       	bld	r25, 7
    339c:	08 95       	ret
    339e:	e1 e0       	ldi	r30, 0x01	; 1
    33a0:	66 0f       	add	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	88 1f       	adc	r24, r24
    33a6:	bb 1f       	adc	r27, r27
    33a8:	62 17       	cp	r22, r18
    33aa:	73 07       	cpc	r23, r19
    33ac:	84 07       	cpc	r24, r20
    33ae:	ba 07       	cpc	r27, r26
    33b0:	20 f0       	brcs	.+8      	; 0x33ba <__divsf3_pse+0xae>
    33b2:	62 1b       	sub	r22, r18
    33b4:	73 0b       	sbc	r23, r19
    33b6:	84 0b       	sbc	r24, r20
    33b8:	ba 0b       	sbc	r27, r26
    33ba:	ee 1f       	adc	r30, r30
    33bc:	88 f7       	brcc	.-30     	; 0x33a0 <__divsf3_pse+0x94>
    33be:	e0 95       	com	r30
    33c0:	08 95       	ret

000033c2 <__fixunssfsi>:
    33c2:	0e 94 a1 1a 	call	0x3542	; 0x3542 <__fp_splitA>
    33c6:	88 f0       	brcs	.+34     	; 0x33ea <__fixunssfsi+0x28>
    33c8:	9f 57       	subi	r25, 0x7F	; 127
    33ca:	98 f0       	brcs	.+38     	; 0x33f2 <__fixunssfsi+0x30>
    33cc:	b9 2f       	mov	r27, r25
    33ce:	99 27       	eor	r25, r25
    33d0:	b7 51       	subi	r27, 0x17	; 23
    33d2:	b0 f0       	brcs	.+44     	; 0x3400 <__fixunssfsi+0x3e>
    33d4:	e1 f0       	breq	.+56     	; 0x340e <__fixunssfsi+0x4c>
    33d6:	66 0f       	add	r22, r22
    33d8:	77 1f       	adc	r23, r23
    33da:	88 1f       	adc	r24, r24
    33dc:	99 1f       	adc	r25, r25
    33de:	1a f0       	brmi	.+6      	; 0x33e6 <__fixunssfsi+0x24>
    33e0:	ba 95       	dec	r27
    33e2:	c9 f7       	brne	.-14     	; 0x33d6 <__fixunssfsi+0x14>
    33e4:	14 c0       	rjmp	.+40     	; 0x340e <__fixunssfsi+0x4c>
    33e6:	b1 30       	cpi	r27, 0x01	; 1
    33e8:	91 f0       	breq	.+36     	; 0x340e <__fixunssfsi+0x4c>
    33ea:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__fp_zero>
    33ee:	b1 e0       	ldi	r27, 0x01	; 1
    33f0:	08 95       	ret
    33f2:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__fp_zero>
    33f6:	67 2f       	mov	r22, r23
    33f8:	78 2f       	mov	r23, r24
    33fa:	88 27       	eor	r24, r24
    33fc:	b8 5f       	subi	r27, 0xF8	; 248
    33fe:	39 f0       	breq	.+14     	; 0x340e <__fixunssfsi+0x4c>
    3400:	b9 3f       	cpi	r27, 0xF9	; 249
    3402:	cc f3       	brlt	.-14     	; 0x33f6 <__fixunssfsi+0x34>
    3404:	86 95       	lsr	r24
    3406:	77 95       	ror	r23
    3408:	67 95       	ror	r22
    340a:	b3 95       	inc	r27
    340c:	d9 f7       	brne	.-10     	; 0x3404 <__fixunssfsi+0x42>
    340e:	3e f4       	brtc	.+14     	; 0x341e <__fixunssfsi+0x5c>
    3410:	90 95       	com	r25
    3412:	80 95       	com	r24
    3414:	70 95       	com	r23
    3416:	61 95       	neg	r22
    3418:	7f 4f       	sbci	r23, 0xFF	; 255
    341a:	8f 4f       	sbci	r24, 0xFF	; 255
    341c:	9f 4f       	sbci	r25, 0xFF	; 255
    341e:	08 95       	ret

00003420 <__floatunsisf>:
    3420:	e8 94       	clt
    3422:	09 c0       	rjmp	.+18     	; 0x3436 <__floatsisf+0x12>

00003424 <__floatsisf>:
    3424:	97 fb       	bst	r25, 7
    3426:	3e f4       	brtc	.+14     	; 0x3436 <__floatsisf+0x12>
    3428:	90 95       	com	r25
    342a:	80 95       	com	r24
    342c:	70 95       	com	r23
    342e:	61 95       	neg	r22
    3430:	7f 4f       	sbci	r23, 0xFF	; 255
    3432:	8f 4f       	sbci	r24, 0xFF	; 255
    3434:	9f 4f       	sbci	r25, 0xFF	; 255
    3436:	99 23       	and	r25, r25
    3438:	a9 f0       	breq	.+42     	; 0x3464 <__floatsisf+0x40>
    343a:	f9 2f       	mov	r31, r25
    343c:	96 e9       	ldi	r25, 0x96	; 150
    343e:	bb 27       	eor	r27, r27
    3440:	93 95       	inc	r25
    3442:	f6 95       	lsr	r31
    3444:	87 95       	ror	r24
    3446:	77 95       	ror	r23
    3448:	67 95       	ror	r22
    344a:	b7 95       	ror	r27
    344c:	f1 11       	cpse	r31, r1
    344e:	f8 cf       	rjmp	.-16     	; 0x3440 <__floatsisf+0x1c>
    3450:	fa f4       	brpl	.+62     	; 0x3490 <__floatsisf+0x6c>
    3452:	bb 0f       	add	r27, r27
    3454:	11 f4       	brne	.+4      	; 0x345a <__floatsisf+0x36>
    3456:	60 ff       	sbrs	r22, 0
    3458:	1b c0       	rjmp	.+54     	; 0x3490 <__floatsisf+0x6c>
    345a:	6f 5f       	subi	r22, 0xFF	; 255
    345c:	7f 4f       	sbci	r23, 0xFF	; 255
    345e:	8f 4f       	sbci	r24, 0xFF	; 255
    3460:	9f 4f       	sbci	r25, 0xFF	; 255
    3462:	16 c0       	rjmp	.+44     	; 0x3490 <__floatsisf+0x6c>
    3464:	88 23       	and	r24, r24
    3466:	11 f0       	breq	.+4      	; 0x346c <__floatsisf+0x48>
    3468:	96 e9       	ldi	r25, 0x96	; 150
    346a:	11 c0       	rjmp	.+34     	; 0x348e <__floatsisf+0x6a>
    346c:	77 23       	and	r23, r23
    346e:	21 f0       	breq	.+8      	; 0x3478 <__floatsisf+0x54>
    3470:	9e e8       	ldi	r25, 0x8E	; 142
    3472:	87 2f       	mov	r24, r23
    3474:	76 2f       	mov	r23, r22
    3476:	05 c0       	rjmp	.+10     	; 0x3482 <__floatsisf+0x5e>
    3478:	66 23       	and	r22, r22
    347a:	71 f0       	breq	.+28     	; 0x3498 <__floatsisf+0x74>
    347c:	96 e8       	ldi	r25, 0x86	; 134
    347e:	86 2f       	mov	r24, r22
    3480:	70 e0       	ldi	r23, 0x00	; 0
    3482:	60 e0       	ldi	r22, 0x00	; 0
    3484:	2a f0       	brmi	.+10     	; 0x3490 <__floatsisf+0x6c>
    3486:	9a 95       	dec	r25
    3488:	66 0f       	add	r22, r22
    348a:	77 1f       	adc	r23, r23
    348c:	88 1f       	adc	r24, r24
    348e:	da f7       	brpl	.-10     	; 0x3486 <__floatsisf+0x62>
    3490:	88 0f       	add	r24, r24
    3492:	96 95       	lsr	r25
    3494:	87 95       	ror	r24
    3496:	97 f9       	bld	r25, 7
    3498:	08 95       	ret

0000349a <__fp_cmp>:
    349a:	99 0f       	add	r25, r25
    349c:	00 08       	sbc	r0, r0
    349e:	55 0f       	add	r21, r21
    34a0:	aa 0b       	sbc	r26, r26
    34a2:	e0 e8       	ldi	r30, 0x80	; 128
    34a4:	fe ef       	ldi	r31, 0xFE	; 254
    34a6:	16 16       	cp	r1, r22
    34a8:	17 06       	cpc	r1, r23
    34aa:	e8 07       	cpc	r30, r24
    34ac:	f9 07       	cpc	r31, r25
    34ae:	c0 f0       	brcs	.+48     	; 0x34e0 <__fp_cmp+0x46>
    34b0:	12 16       	cp	r1, r18
    34b2:	13 06       	cpc	r1, r19
    34b4:	e4 07       	cpc	r30, r20
    34b6:	f5 07       	cpc	r31, r21
    34b8:	98 f0       	brcs	.+38     	; 0x34e0 <__fp_cmp+0x46>
    34ba:	62 1b       	sub	r22, r18
    34bc:	73 0b       	sbc	r23, r19
    34be:	84 0b       	sbc	r24, r20
    34c0:	95 0b       	sbc	r25, r21
    34c2:	39 f4       	brne	.+14     	; 0x34d2 <__fp_cmp+0x38>
    34c4:	0a 26       	eor	r0, r26
    34c6:	61 f0       	breq	.+24     	; 0x34e0 <__fp_cmp+0x46>
    34c8:	23 2b       	or	r18, r19
    34ca:	24 2b       	or	r18, r20
    34cc:	25 2b       	or	r18, r21
    34ce:	21 f4       	brne	.+8      	; 0x34d8 <__fp_cmp+0x3e>
    34d0:	08 95       	ret
    34d2:	0a 26       	eor	r0, r26
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <__fp_cmp+0x3e>
    34d6:	a1 40       	sbci	r26, 0x01	; 1
    34d8:	a6 95       	lsr	r26
    34da:	8f ef       	ldi	r24, 0xFF	; 255
    34dc:	81 1d       	adc	r24, r1
    34de:	81 1d       	adc	r24, r1
    34e0:	08 95       	ret

000034e2 <__fp_inf>:
    34e2:	97 f9       	bld	r25, 7
    34e4:	9f 67       	ori	r25, 0x7F	; 127
    34e6:	80 e8       	ldi	r24, 0x80	; 128
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	08 95       	ret

000034ee <__fp_nan>:
    34ee:	9f ef       	ldi	r25, 0xFF	; 255
    34f0:	80 ec       	ldi	r24, 0xC0	; 192
    34f2:	08 95       	ret

000034f4 <__fp_pscA>:
    34f4:	00 24       	eor	r0, r0
    34f6:	0a 94       	dec	r0
    34f8:	16 16       	cp	r1, r22
    34fa:	17 06       	cpc	r1, r23
    34fc:	18 06       	cpc	r1, r24
    34fe:	09 06       	cpc	r0, r25
    3500:	08 95       	ret

00003502 <__fp_pscB>:
    3502:	00 24       	eor	r0, r0
    3504:	0a 94       	dec	r0
    3506:	12 16       	cp	r1, r18
    3508:	13 06       	cpc	r1, r19
    350a:	14 06       	cpc	r1, r20
    350c:	05 06       	cpc	r0, r21
    350e:	08 95       	ret

00003510 <__fp_round>:
    3510:	09 2e       	mov	r0, r25
    3512:	03 94       	inc	r0
    3514:	00 0c       	add	r0, r0
    3516:	11 f4       	brne	.+4      	; 0x351c <__fp_round+0xc>
    3518:	88 23       	and	r24, r24
    351a:	52 f0       	brmi	.+20     	; 0x3530 <__fp_round+0x20>
    351c:	bb 0f       	add	r27, r27
    351e:	40 f4       	brcc	.+16     	; 0x3530 <__fp_round+0x20>
    3520:	bf 2b       	or	r27, r31
    3522:	11 f4       	brne	.+4      	; 0x3528 <__fp_round+0x18>
    3524:	60 ff       	sbrs	r22, 0
    3526:	04 c0       	rjmp	.+8      	; 0x3530 <__fp_round+0x20>
    3528:	6f 5f       	subi	r22, 0xFF	; 255
    352a:	7f 4f       	sbci	r23, 0xFF	; 255
    352c:	8f 4f       	sbci	r24, 0xFF	; 255
    352e:	9f 4f       	sbci	r25, 0xFF	; 255
    3530:	08 95       	ret

00003532 <__fp_split3>:
    3532:	57 fd       	sbrc	r21, 7
    3534:	90 58       	subi	r25, 0x80	; 128
    3536:	44 0f       	add	r20, r20
    3538:	55 1f       	adc	r21, r21
    353a:	59 f0       	breq	.+22     	; 0x3552 <__fp_splitA+0x10>
    353c:	5f 3f       	cpi	r21, 0xFF	; 255
    353e:	71 f0       	breq	.+28     	; 0x355c <__fp_splitA+0x1a>
    3540:	47 95       	ror	r20

00003542 <__fp_splitA>:
    3542:	88 0f       	add	r24, r24
    3544:	97 fb       	bst	r25, 7
    3546:	99 1f       	adc	r25, r25
    3548:	61 f0       	breq	.+24     	; 0x3562 <__fp_splitA+0x20>
    354a:	9f 3f       	cpi	r25, 0xFF	; 255
    354c:	79 f0       	breq	.+30     	; 0x356c <__fp_splitA+0x2a>
    354e:	87 95       	ror	r24
    3550:	08 95       	ret
    3552:	12 16       	cp	r1, r18
    3554:	13 06       	cpc	r1, r19
    3556:	14 06       	cpc	r1, r20
    3558:	55 1f       	adc	r21, r21
    355a:	f2 cf       	rjmp	.-28     	; 0x3540 <__fp_split3+0xe>
    355c:	46 95       	lsr	r20
    355e:	f1 df       	rcall	.-30     	; 0x3542 <__fp_splitA>
    3560:	08 c0       	rjmp	.+16     	; 0x3572 <__fp_splitA+0x30>
    3562:	16 16       	cp	r1, r22
    3564:	17 06       	cpc	r1, r23
    3566:	18 06       	cpc	r1, r24
    3568:	99 1f       	adc	r25, r25
    356a:	f1 cf       	rjmp	.-30     	; 0x354e <__fp_splitA+0xc>
    356c:	86 95       	lsr	r24
    356e:	71 05       	cpc	r23, r1
    3570:	61 05       	cpc	r22, r1
    3572:	08 94       	sec
    3574:	08 95       	ret

00003576 <__fp_zero>:
    3576:	e8 94       	clt

00003578 <__fp_szero>:
    3578:	bb 27       	eor	r27, r27
    357a:	66 27       	eor	r22, r22
    357c:	77 27       	eor	r23, r23
    357e:	cb 01       	movw	r24, r22
    3580:	97 f9       	bld	r25, 7
    3582:	08 95       	ret

00003584 <__mulsf3>:
    3584:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <__mulsf3x>
    3588:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <__fp_round>
    358c:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__fp_pscA>
    3590:	38 f0       	brcs	.+14     	; 0x35a0 <__mulsf3+0x1c>
    3592:	0e 94 81 1a 	call	0x3502	; 0x3502 <__fp_pscB>
    3596:	20 f0       	brcs	.+8      	; 0x35a0 <__mulsf3+0x1c>
    3598:	95 23       	and	r25, r21
    359a:	11 f0       	breq	.+4      	; 0x35a0 <__mulsf3+0x1c>
    359c:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__fp_inf>
    35a0:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__fp_nan>
    35a4:	11 24       	eor	r1, r1
    35a6:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__fp_szero>

000035aa <__mulsf3x>:
    35aa:	0e 94 99 1a 	call	0x3532	; 0x3532 <__fp_split3>
    35ae:	70 f3       	brcs	.-36     	; 0x358c <__mulsf3+0x8>

000035b0 <__mulsf3_pse>:
    35b0:	95 9f       	mul	r25, r21
    35b2:	c1 f3       	breq	.-16     	; 0x35a4 <__mulsf3+0x20>
    35b4:	95 0f       	add	r25, r21
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	55 1f       	adc	r21, r21
    35ba:	62 9f       	mul	r22, r18
    35bc:	f0 01       	movw	r30, r0
    35be:	72 9f       	mul	r23, r18
    35c0:	bb 27       	eor	r27, r27
    35c2:	f0 0d       	add	r31, r0
    35c4:	b1 1d       	adc	r27, r1
    35c6:	63 9f       	mul	r22, r19
    35c8:	aa 27       	eor	r26, r26
    35ca:	f0 0d       	add	r31, r0
    35cc:	b1 1d       	adc	r27, r1
    35ce:	aa 1f       	adc	r26, r26
    35d0:	64 9f       	mul	r22, r20
    35d2:	66 27       	eor	r22, r22
    35d4:	b0 0d       	add	r27, r0
    35d6:	a1 1d       	adc	r26, r1
    35d8:	66 1f       	adc	r22, r22
    35da:	82 9f       	mul	r24, r18
    35dc:	22 27       	eor	r18, r18
    35de:	b0 0d       	add	r27, r0
    35e0:	a1 1d       	adc	r26, r1
    35e2:	62 1f       	adc	r22, r18
    35e4:	73 9f       	mul	r23, r19
    35e6:	b0 0d       	add	r27, r0
    35e8:	a1 1d       	adc	r26, r1
    35ea:	62 1f       	adc	r22, r18
    35ec:	83 9f       	mul	r24, r19
    35ee:	a0 0d       	add	r26, r0
    35f0:	61 1d       	adc	r22, r1
    35f2:	22 1f       	adc	r18, r18
    35f4:	74 9f       	mul	r23, r20
    35f6:	33 27       	eor	r19, r19
    35f8:	a0 0d       	add	r26, r0
    35fa:	61 1d       	adc	r22, r1
    35fc:	23 1f       	adc	r18, r19
    35fe:	84 9f       	mul	r24, r20
    3600:	60 0d       	add	r22, r0
    3602:	21 1d       	adc	r18, r1
    3604:	82 2f       	mov	r24, r18
    3606:	76 2f       	mov	r23, r22
    3608:	6a 2f       	mov	r22, r26
    360a:	11 24       	eor	r1, r1
    360c:	9f 57       	subi	r25, 0x7F	; 127
    360e:	50 40       	sbci	r21, 0x00	; 0
    3610:	9a f0       	brmi	.+38     	; 0x3638 <__mulsf3_pse+0x88>
    3612:	f1 f0       	breq	.+60     	; 0x3650 <__mulsf3_pse+0xa0>
    3614:	88 23       	and	r24, r24
    3616:	4a f0       	brmi	.+18     	; 0x362a <__mulsf3_pse+0x7a>
    3618:	ee 0f       	add	r30, r30
    361a:	ff 1f       	adc	r31, r31
    361c:	bb 1f       	adc	r27, r27
    361e:	66 1f       	adc	r22, r22
    3620:	77 1f       	adc	r23, r23
    3622:	88 1f       	adc	r24, r24
    3624:	91 50       	subi	r25, 0x01	; 1
    3626:	50 40       	sbci	r21, 0x00	; 0
    3628:	a9 f7       	brne	.-22     	; 0x3614 <__mulsf3_pse+0x64>
    362a:	9e 3f       	cpi	r25, 0xFE	; 254
    362c:	51 05       	cpc	r21, r1
    362e:	80 f0       	brcs	.+32     	; 0x3650 <__mulsf3_pse+0xa0>
    3630:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <__fp_inf>
    3634:	0c 94 bc 1a 	jmp	0x3578	; 0x3578 <__fp_szero>
    3638:	5f 3f       	cpi	r21, 0xFF	; 255
    363a:	e4 f3       	brlt	.-8      	; 0x3634 <__mulsf3_pse+0x84>
    363c:	98 3e       	cpi	r25, 0xE8	; 232
    363e:	d4 f3       	brlt	.-12     	; 0x3634 <__mulsf3_pse+0x84>
    3640:	86 95       	lsr	r24
    3642:	77 95       	ror	r23
    3644:	67 95       	ror	r22
    3646:	b7 95       	ror	r27
    3648:	f7 95       	ror	r31
    364a:	e7 95       	ror	r30
    364c:	9f 5f       	subi	r25, 0xFF	; 255
    364e:	c1 f7       	brne	.-16     	; 0x3640 <__mulsf3_pse+0x90>
    3650:	fe 2b       	or	r31, r30
    3652:	88 0f       	add	r24, r24
    3654:	91 1d       	adc	r25, r1
    3656:	96 95       	lsr	r25
    3658:	87 95       	ror	r24
    365a:	97 f9       	bld	r25, 7
    365c:	08 95       	ret

0000365e <__udivmodsi4>:
    365e:	a1 e2       	ldi	r26, 0x21	; 33
    3660:	1a 2e       	mov	r1, r26
    3662:	aa 1b       	sub	r26, r26
    3664:	bb 1b       	sub	r27, r27
    3666:	fd 01       	movw	r30, r26
    3668:	0d c0       	rjmp	.+26     	; 0x3684 <__udivmodsi4_ep>

0000366a <__udivmodsi4_loop>:
    366a:	aa 1f       	adc	r26, r26
    366c:	bb 1f       	adc	r27, r27
    366e:	ee 1f       	adc	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	a2 17       	cp	r26, r18
    3674:	b3 07       	cpc	r27, r19
    3676:	e4 07       	cpc	r30, r20
    3678:	f5 07       	cpc	r31, r21
    367a:	20 f0       	brcs	.+8      	; 0x3684 <__udivmodsi4_ep>
    367c:	a2 1b       	sub	r26, r18
    367e:	b3 0b       	sbc	r27, r19
    3680:	e4 0b       	sbc	r30, r20
    3682:	f5 0b       	sbc	r31, r21

00003684 <__udivmodsi4_ep>:
    3684:	66 1f       	adc	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	88 1f       	adc	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	1a 94       	dec	r1
    368e:	69 f7       	brne	.-38     	; 0x366a <__udivmodsi4_loop>
    3690:	60 95       	com	r22
    3692:	70 95       	com	r23
    3694:	80 95       	com	r24
    3696:	90 95       	com	r25
    3698:	9b 01       	movw	r18, r22
    369a:	ac 01       	movw	r20, r24
    369c:	bd 01       	movw	r22, r26
    369e:	cf 01       	movw	r24, r30
    36a0:	08 95       	ret

000036a2 <sprintf>:
    36a2:	ae e0       	ldi	r26, 0x0E	; 14
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	e7 e5       	ldi	r30, 0x57	; 87
    36a8:	fb e1       	ldi	r31, 0x1B	; 27
    36aa:	0c 94 12 1e 	jmp	0x3c24	; 0x3c24 <__prologue_saves__+0x1c>
    36ae:	0d 89       	ldd	r16, Y+21	; 0x15
    36b0:	1e 89       	ldd	r17, Y+22	; 0x16
    36b2:	86 e0       	ldi	r24, 0x06	; 6
    36b4:	8c 83       	std	Y+4, r24	; 0x04
    36b6:	1a 83       	std	Y+2, r17	; 0x02
    36b8:	09 83       	std	Y+1, r16	; 0x01
    36ba:	8f ef       	ldi	r24, 0xFF	; 255
    36bc:	9f e7       	ldi	r25, 0x7F	; 127
    36be:	9e 83       	std	Y+6, r25	; 0x06
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    36c2:	ae 01       	movw	r20, r28
    36c4:	47 5e       	subi	r20, 0xE7	; 231
    36c6:	5f 4f       	sbci	r21, 0xFF	; 255
    36c8:	6f 89       	ldd	r22, Y+23	; 0x17
    36ca:	78 8d       	ldd	r23, Y+24	; 0x18
    36cc:	ce 01       	movw	r24, r28
    36ce:	01 96       	adiw	r24, 0x01	; 1
    36d0:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <vfprintf>
    36d4:	ef 81       	ldd	r30, Y+7	; 0x07
    36d6:	f8 85       	ldd	r31, Y+8	; 0x08
    36d8:	e0 0f       	add	r30, r16
    36da:	f1 1f       	adc	r31, r17
    36dc:	10 82       	st	Z, r1
    36de:	2e 96       	adiw	r28, 0x0e	; 14
    36e0:	e4 e0       	ldi	r30, 0x04	; 4
    36e2:	0c 94 2e 1e 	jmp	0x3c5c	; 0x3c5c <__epilogue_restores__+0x1c>

000036e6 <vfprintf>:
    36e6:	ab e0       	ldi	r26, 0x0B	; 11
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	e9 e7       	ldi	r30, 0x79	; 121
    36ec:	fb e1       	ldi	r31, 0x1B	; 27
    36ee:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <__prologue_saves__>
    36f2:	6c 01       	movw	r12, r24
    36f4:	7b 01       	movw	r14, r22
    36f6:	8a 01       	movw	r16, r20
    36f8:	fc 01       	movw	r30, r24
    36fa:	17 82       	std	Z+7, r1	; 0x07
    36fc:	16 82       	std	Z+6, r1	; 0x06
    36fe:	83 81       	ldd	r24, Z+3	; 0x03
    3700:	81 ff       	sbrs	r24, 1
    3702:	cc c1       	rjmp	.+920    	; 0x3a9c <vfprintf+0x3b6>
    3704:	ce 01       	movw	r24, r28
    3706:	01 96       	adiw	r24, 0x01	; 1
    3708:	3c 01       	movw	r6, r24
    370a:	f6 01       	movw	r30, r12
    370c:	93 81       	ldd	r25, Z+3	; 0x03
    370e:	f7 01       	movw	r30, r14
    3710:	93 fd       	sbrc	r25, 3
    3712:	85 91       	lpm	r24, Z+
    3714:	93 ff       	sbrs	r25, 3
    3716:	81 91       	ld	r24, Z+
    3718:	7f 01       	movw	r14, r30
    371a:	88 23       	and	r24, r24
    371c:	09 f4       	brne	.+2      	; 0x3720 <vfprintf+0x3a>
    371e:	ba c1       	rjmp	.+884    	; 0x3a94 <vfprintf+0x3ae>
    3720:	85 32       	cpi	r24, 0x25	; 37
    3722:	39 f4       	brne	.+14     	; 0x3732 <vfprintf+0x4c>
    3724:	93 fd       	sbrc	r25, 3
    3726:	85 91       	lpm	r24, Z+
    3728:	93 ff       	sbrs	r25, 3
    372a:	81 91       	ld	r24, Z+
    372c:	7f 01       	movw	r14, r30
    372e:	85 32       	cpi	r24, 0x25	; 37
    3730:	29 f4       	brne	.+10     	; 0x373c <vfprintf+0x56>
    3732:	b6 01       	movw	r22, r12
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    373a:	e7 cf       	rjmp	.-50     	; 0x370a <vfprintf+0x24>
    373c:	91 2c       	mov	r9, r1
    373e:	21 2c       	mov	r2, r1
    3740:	31 2c       	mov	r3, r1
    3742:	ff e1       	ldi	r31, 0x1F	; 31
    3744:	f3 15       	cp	r31, r3
    3746:	d8 f0       	brcs	.+54     	; 0x377e <vfprintf+0x98>
    3748:	8b 32       	cpi	r24, 0x2B	; 43
    374a:	79 f0       	breq	.+30     	; 0x376a <vfprintf+0x84>
    374c:	38 f4       	brcc	.+14     	; 0x375c <vfprintf+0x76>
    374e:	80 32       	cpi	r24, 0x20	; 32
    3750:	79 f0       	breq	.+30     	; 0x3770 <vfprintf+0x8a>
    3752:	83 32       	cpi	r24, 0x23	; 35
    3754:	a1 f4       	brne	.+40     	; 0x377e <vfprintf+0x98>
    3756:	23 2d       	mov	r18, r3
    3758:	20 61       	ori	r18, 0x10	; 16
    375a:	1d c0       	rjmp	.+58     	; 0x3796 <vfprintf+0xb0>
    375c:	8d 32       	cpi	r24, 0x2D	; 45
    375e:	61 f0       	breq	.+24     	; 0x3778 <vfprintf+0x92>
    3760:	80 33       	cpi	r24, 0x30	; 48
    3762:	69 f4       	brne	.+26     	; 0x377e <vfprintf+0x98>
    3764:	23 2d       	mov	r18, r3
    3766:	21 60       	ori	r18, 0x01	; 1
    3768:	16 c0       	rjmp	.+44     	; 0x3796 <vfprintf+0xb0>
    376a:	83 2d       	mov	r24, r3
    376c:	82 60       	ori	r24, 0x02	; 2
    376e:	38 2e       	mov	r3, r24
    3770:	e3 2d       	mov	r30, r3
    3772:	e4 60       	ori	r30, 0x04	; 4
    3774:	3e 2e       	mov	r3, r30
    3776:	2a c0       	rjmp	.+84     	; 0x37cc <vfprintf+0xe6>
    3778:	f3 2d       	mov	r31, r3
    377a:	f8 60       	ori	r31, 0x08	; 8
    377c:	1d c0       	rjmp	.+58     	; 0x37b8 <vfprintf+0xd2>
    377e:	37 fc       	sbrc	r3, 7
    3780:	2d c0       	rjmp	.+90     	; 0x37dc <vfprintf+0xf6>
    3782:	20 ed       	ldi	r18, 0xD0	; 208
    3784:	28 0f       	add	r18, r24
    3786:	2a 30       	cpi	r18, 0x0A	; 10
    3788:	40 f0       	brcs	.+16     	; 0x379a <vfprintf+0xb4>
    378a:	8e 32       	cpi	r24, 0x2E	; 46
    378c:	b9 f4       	brne	.+46     	; 0x37bc <vfprintf+0xd6>
    378e:	36 fc       	sbrc	r3, 6
    3790:	81 c1       	rjmp	.+770    	; 0x3a94 <vfprintf+0x3ae>
    3792:	23 2d       	mov	r18, r3
    3794:	20 64       	ori	r18, 0x40	; 64
    3796:	32 2e       	mov	r3, r18
    3798:	19 c0       	rjmp	.+50     	; 0x37cc <vfprintf+0xe6>
    379a:	36 fe       	sbrs	r3, 6
    379c:	06 c0       	rjmp	.+12     	; 0x37aa <vfprintf+0xc4>
    379e:	8a e0       	ldi	r24, 0x0A	; 10
    37a0:	98 9e       	mul	r9, r24
    37a2:	20 0d       	add	r18, r0
    37a4:	11 24       	eor	r1, r1
    37a6:	92 2e       	mov	r9, r18
    37a8:	11 c0       	rjmp	.+34     	; 0x37cc <vfprintf+0xe6>
    37aa:	ea e0       	ldi	r30, 0x0A	; 10
    37ac:	2e 9e       	mul	r2, r30
    37ae:	20 0d       	add	r18, r0
    37b0:	11 24       	eor	r1, r1
    37b2:	22 2e       	mov	r2, r18
    37b4:	f3 2d       	mov	r31, r3
    37b6:	f0 62       	ori	r31, 0x20	; 32
    37b8:	3f 2e       	mov	r3, r31
    37ba:	08 c0       	rjmp	.+16     	; 0x37cc <vfprintf+0xe6>
    37bc:	8c 36       	cpi	r24, 0x6C	; 108
    37be:	21 f4       	brne	.+8      	; 0x37c8 <vfprintf+0xe2>
    37c0:	83 2d       	mov	r24, r3
    37c2:	80 68       	ori	r24, 0x80	; 128
    37c4:	38 2e       	mov	r3, r24
    37c6:	02 c0       	rjmp	.+4      	; 0x37cc <vfprintf+0xe6>
    37c8:	88 36       	cpi	r24, 0x68	; 104
    37ca:	41 f4       	brne	.+16     	; 0x37dc <vfprintf+0xf6>
    37cc:	f7 01       	movw	r30, r14
    37ce:	93 fd       	sbrc	r25, 3
    37d0:	85 91       	lpm	r24, Z+
    37d2:	93 ff       	sbrs	r25, 3
    37d4:	81 91       	ld	r24, Z+
    37d6:	7f 01       	movw	r14, r30
    37d8:	81 11       	cpse	r24, r1
    37da:	b3 cf       	rjmp	.-154    	; 0x3742 <vfprintf+0x5c>
    37dc:	98 2f       	mov	r25, r24
    37de:	9f 7d       	andi	r25, 0xDF	; 223
    37e0:	95 54       	subi	r25, 0x45	; 69
    37e2:	93 30       	cpi	r25, 0x03	; 3
    37e4:	28 f4       	brcc	.+10     	; 0x37f0 <vfprintf+0x10a>
    37e6:	0c 5f       	subi	r16, 0xFC	; 252
    37e8:	1f 4f       	sbci	r17, 0xFF	; 255
    37ea:	9f e3       	ldi	r25, 0x3F	; 63
    37ec:	99 83       	std	Y+1, r25	; 0x01
    37ee:	0d c0       	rjmp	.+26     	; 0x380a <vfprintf+0x124>
    37f0:	83 36       	cpi	r24, 0x63	; 99
    37f2:	31 f0       	breq	.+12     	; 0x3800 <vfprintf+0x11a>
    37f4:	83 37       	cpi	r24, 0x73	; 115
    37f6:	71 f0       	breq	.+28     	; 0x3814 <vfprintf+0x12e>
    37f8:	83 35       	cpi	r24, 0x53	; 83
    37fa:	09 f0       	breq	.+2      	; 0x37fe <vfprintf+0x118>
    37fc:	59 c0       	rjmp	.+178    	; 0x38b0 <vfprintf+0x1ca>
    37fe:	21 c0       	rjmp	.+66     	; 0x3842 <vfprintf+0x15c>
    3800:	f8 01       	movw	r30, r16
    3802:	80 81       	ld	r24, Z
    3804:	89 83       	std	Y+1, r24	; 0x01
    3806:	0e 5f       	subi	r16, 0xFE	; 254
    3808:	1f 4f       	sbci	r17, 0xFF	; 255
    380a:	88 24       	eor	r8, r8
    380c:	83 94       	inc	r8
    380e:	91 2c       	mov	r9, r1
    3810:	53 01       	movw	r10, r6
    3812:	13 c0       	rjmp	.+38     	; 0x383a <vfprintf+0x154>
    3814:	28 01       	movw	r4, r16
    3816:	f2 e0       	ldi	r31, 0x02	; 2
    3818:	4f 0e       	add	r4, r31
    381a:	51 1c       	adc	r5, r1
    381c:	f8 01       	movw	r30, r16
    381e:	a0 80       	ld	r10, Z
    3820:	b1 80       	ldd	r11, Z+1	; 0x01
    3822:	36 fe       	sbrs	r3, 6
    3824:	03 c0       	rjmp	.+6      	; 0x382c <vfprintf+0x146>
    3826:	69 2d       	mov	r22, r9
    3828:	70 e0       	ldi	r23, 0x00	; 0
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <vfprintf+0x14a>
    382c:	6f ef       	ldi	r22, 0xFF	; 255
    382e:	7f ef       	ldi	r23, 0xFF	; 255
    3830:	c5 01       	movw	r24, r10
    3832:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <strnlen>
    3836:	4c 01       	movw	r8, r24
    3838:	82 01       	movw	r16, r4
    383a:	f3 2d       	mov	r31, r3
    383c:	ff 77       	andi	r31, 0x7F	; 127
    383e:	3f 2e       	mov	r3, r31
    3840:	16 c0       	rjmp	.+44     	; 0x386e <vfprintf+0x188>
    3842:	28 01       	movw	r4, r16
    3844:	22 e0       	ldi	r18, 0x02	; 2
    3846:	42 0e       	add	r4, r18
    3848:	51 1c       	adc	r5, r1
    384a:	f8 01       	movw	r30, r16
    384c:	a0 80       	ld	r10, Z
    384e:	b1 80       	ldd	r11, Z+1	; 0x01
    3850:	36 fe       	sbrs	r3, 6
    3852:	03 c0       	rjmp	.+6      	; 0x385a <vfprintf+0x174>
    3854:	69 2d       	mov	r22, r9
    3856:	70 e0       	ldi	r23, 0x00	; 0
    3858:	02 c0       	rjmp	.+4      	; 0x385e <vfprintf+0x178>
    385a:	6f ef       	ldi	r22, 0xFF	; 255
    385c:	7f ef       	ldi	r23, 0xFF	; 255
    385e:	c5 01       	movw	r24, r10
    3860:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <strnlen_P>
    3864:	4c 01       	movw	r8, r24
    3866:	f3 2d       	mov	r31, r3
    3868:	f0 68       	ori	r31, 0x80	; 128
    386a:	3f 2e       	mov	r3, r31
    386c:	82 01       	movw	r16, r4
    386e:	33 fc       	sbrc	r3, 3
    3870:	1b c0       	rjmp	.+54     	; 0x38a8 <vfprintf+0x1c2>
    3872:	82 2d       	mov	r24, r2
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	88 16       	cp	r8, r24
    3878:	99 06       	cpc	r9, r25
    387a:	b0 f4       	brcc	.+44     	; 0x38a8 <vfprintf+0x1c2>
    387c:	b6 01       	movw	r22, r12
    387e:	80 e2       	ldi	r24, 0x20	; 32
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3886:	2a 94       	dec	r2
    3888:	f4 cf       	rjmp	.-24     	; 0x3872 <vfprintf+0x18c>
    388a:	f5 01       	movw	r30, r10
    388c:	37 fc       	sbrc	r3, 7
    388e:	85 91       	lpm	r24, Z+
    3890:	37 fe       	sbrs	r3, 7
    3892:	81 91       	ld	r24, Z+
    3894:	5f 01       	movw	r10, r30
    3896:	b6 01       	movw	r22, r12
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    389e:	21 10       	cpse	r2, r1
    38a0:	2a 94       	dec	r2
    38a2:	21 e0       	ldi	r18, 0x01	; 1
    38a4:	82 1a       	sub	r8, r18
    38a6:	91 08       	sbc	r9, r1
    38a8:	81 14       	cp	r8, r1
    38aa:	91 04       	cpc	r9, r1
    38ac:	71 f7       	brne	.-36     	; 0x388a <vfprintf+0x1a4>
    38ae:	e8 c0       	rjmp	.+464    	; 0x3a80 <vfprintf+0x39a>
    38b0:	84 36       	cpi	r24, 0x64	; 100
    38b2:	11 f0       	breq	.+4      	; 0x38b8 <vfprintf+0x1d2>
    38b4:	89 36       	cpi	r24, 0x69	; 105
    38b6:	41 f5       	brne	.+80     	; 0x3908 <vfprintf+0x222>
    38b8:	f8 01       	movw	r30, r16
    38ba:	37 fe       	sbrs	r3, 7
    38bc:	07 c0       	rjmp	.+14     	; 0x38cc <vfprintf+0x1e6>
    38be:	60 81       	ld	r22, Z
    38c0:	71 81       	ldd	r23, Z+1	; 0x01
    38c2:	82 81       	ldd	r24, Z+2	; 0x02
    38c4:	93 81       	ldd	r25, Z+3	; 0x03
    38c6:	0c 5f       	subi	r16, 0xFC	; 252
    38c8:	1f 4f       	sbci	r17, 0xFF	; 255
    38ca:	08 c0       	rjmp	.+16     	; 0x38dc <vfprintf+0x1f6>
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	07 2e       	mov	r0, r23
    38d2:	00 0c       	add	r0, r0
    38d4:	88 0b       	sbc	r24, r24
    38d6:	99 0b       	sbc	r25, r25
    38d8:	0e 5f       	subi	r16, 0xFE	; 254
    38da:	1f 4f       	sbci	r17, 0xFF	; 255
    38dc:	f3 2d       	mov	r31, r3
    38de:	ff 76       	andi	r31, 0x6F	; 111
    38e0:	3f 2e       	mov	r3, r31
    38e2:	97 ff       	sbrs	r25, 7
    38e4:	09 c0       	rjmp	.+18     	; 0x38f8 <vfprintf+0x212>
    38e6:	90 95       	com	r25
    38e8:	80 95       	com	r24
    38ea:	70 95       	com	r23
    38ec:	61 95       	neg	r22
    38ee:	7f 4f       	sbci	r23, 0xFF	; 255
    38f0:	8f 4f       	sbci	r24, 0xFF	; 255
    38f2:	9f 4f       	sbci	r25, 0xFF	; 255
    38f4:	f0 68       	ori	r31, 0x80	; 128
    38f6:	3f 2e       	mov	r3, r31
    38f8:	2a e0       	ldi	r18, 0x0A	; 10
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	a3 01       	movw	r20, r6
    38fe:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__ultoa_invert>
    3902:	88 2e       	mov	r8, r24
    3904:	86 18       	sub	r8, r6
    3906:	45 c0       	rjmp	.+138    	; 0x3992 <vfprintf+0x2ac>
    3908:	85 37       	cpi	r24, 0x75	; 117
    390a:	31 f4       	brne	.+12     	; 0x3918 <vfprintf+0x232>
    390c:	23 2d       	mov	r18, r3
    390e:	2f 7e       	andi	r18, 0xEF	; 239
    3910:	b2 2e       	mov	r11, r18
    3912:	2a e0       	ldi	r18, 0x0A	; 10
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	25 c0       	rjmp	.+74     	; 0x3962 <vfprintf+0x27c>
    3918:	93 2d       	mov	r25, r3
    391a:	99 7f       	andi	r25, 0xF9	; 249
    391c:	b9 2e       	mov	r11, r25
    391e:	8f 36       	cpi	r24, 0x6F	; 111
    3920:	c1 f0       	breq	.+48     	; 0x3952 <vfprintf+0x26c>
    3922:	18 f4       	brcc	.+6      	; 0x392a <vfprintf+0x244>
    3924:	88 35       	cpi	r24, 0x58	; 88
    3926:	79 f0       	breq	.+30     	; 0x3946 <vfprintf+0x260>
    3928:	b5 c0       	rjmp	.+362    	; 0x3a94 <vfprintf+0x3ae>
    392a:	80 37       	cpi	r24, 0x70	; 112
    392c:	19 f0       	breq	.+6      	; 0x3934 <vfprintf+0x24e>
    392e:	88 37       	cpi	r24, 0x78	; 120
    3930:	21 f0       	breq	.+8      	; 0x393a <vfprintf+0x254>
    3932:	b0 c0       	rjmp	.+352    	; 0x3a94 <vfprintf+0x3ae>
    3934:	e9 2f       	mov	r30, r25
    3936:	e0 61       	ori	r30, 0x10	; 16
    3938:	be 2e       	mov	r11, r30
    393a:	b4 fe       	sbrs	r11, 4
    393c:	0d c0       	rjmp	.+26     	; 0x3958 <vfprintf+0x272>
    393e:	fb 2d       	mov	r31, r11
    3940:	f4 60       	ori	r31, 0x04	; 4
    3942:	bf 2e       	mov	r11, r31
    3944:	09 c0       	rjmp	.+18     	; 0x3958 <vfprintf+0x272>
    3946:	34 fe       	sbrs	r3, 4
    3948:	0a c0       	rjmp	.+20     	; 0x395e <vfprintf+0x278>
    394a:	29 2f       	mov	r18, r25
    394c:	26 60       	ori	r18, 0x06	; 6
    394e:	b2 2e       	mov	r11, r18
    3950:	06 c0       	rjmp	.+12     	; 0x395e <vfprintf+0x278>
    3952:	28 e0       	ldi	r18, 0x08	; 8
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	05 c0       	rjmp	.+10     	; 0x3962 <vfprintf+0x27c>
    3958:	20 e1       	ldi	r18, 0x10	; 16
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <vfprintf+0x27c>
    395e:	20 e1       	ldi	r18, 0x10	; 16
    3960:	32 e0       	ldi	r19, 0x02	; 2
    3962:	f8 01       	movw	r30, r16
    3964:	b7 fe       	sbrs	r11, 7
    3966:	07 c0       	rjmp	.+14     	; 0x3976 <vfprintf+0x290>
    3968:	60 81       	ld	r22, Z
    396a:	71 81       	ldd	r23, Z+1	; 0x01
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	0c 5f       	subi	r16, 0xFC	; 252
    3972:	1f 4f       	sbci	r17, 0xFF	; 255
    3974:	06 c0       	rjmp	.+12     	; 0x3982 <vfprintf+0x29c>
    3976:	60 81       	ld	r22, Z
    3978:	71 81       	ldd	r23, Z+1	; 0x01
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	0e 5f       	subi	r16, 0xFE	; 254
    3980:	1f 4f       	sbci	r17, 0xFF	; 255
    3982:	a3 01       	movw	r20, r6
    3984:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <__ultoa_invert>
    3988:	88 2e       	mov	r8, r24
    398a:	86 18       	sub	r8, r6
    398c:	fb 2d       	mov	r31, r11
    398e:	ff 77       	andi	r31, 0x7F	; 127
    3990:	3f 2e       	mov	r3, r31
    3992:	36 fe       	sbrs	r3, 6
    3994:	0d c0       	rjmp	.+26     	; 0x39b0 <vfprintf+0x2ca>
    3996:	23 2d       	mov	r18, r3
    3998:	2e 7f       	andi	r18, 0xFE	; 254
    399a:	a2 2e       	mov	r10, r18
    399c:	89 14       	cp	r8, r9
    399e:	58 f4       	brcc	.+22     	; 0x39b6 <vfprintf+0x2d0>
    39a0:	34 fe       	sbrs	r3, 4
    39a2:	0b c0       	rjmp	.+22     	; 0x39ba <vfprintf+0x2d4>
    39a4:	32 fc       	sbrc	r3, 2
    39a6:	09 c0       	rjmp	.+18     	; 0x39ba <vfprintf+0x2d4>
    39a8:	83 2d       	mov	r24, r3
    39aa:	8e 7e       	andi	r24, 0xEE	; 238
    39ac:	a8 2e       	mov	r10, r24
    39ae:	05 c0       	rjmp	.+10     	; 0x39ba <vfprintf+0x2d4>
    39b0:	b8 2c       	mov	r11, r8
    39b2:	a3 2c       	mov	r10, r3
    39b4:	03 c0       	rjmp	.+6      	; 0x39bc <vfprintf+0x2d6>
    39b6:	b8 2c       	mov	r11, r8
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <vfprintf+0x2d6>
    39ba:	b9 2c       	mov	r11, r9
    39bc:	a4 fe       	sbrs	r10, 4
    39be:	0f c0       	rjmp	.+30     	; 0x39de <vfprintf+0x2f8>
    39c0:	fe 01       	movw	r30, r28
    39c2:	e8 0d       	add	r30, r8
    39c4:	f1 1d       	adc	r31, r1
    39c6:	80 81       	ld	r24, Z
    39c8:	80 33       	cpi	r24, 0x30	; 48
    39ca:	21 f4       	brne	.+8      	; 0x39d4 <vfprintf+0x2ee>
    39cc:	9a 2d       	mov	r25, r10
    39ce:	99 7e       	andi	r25, 0xE9	; 233
    39d0:	a9 2e       	mov	r10, r25
    39d2:	09 c0       	rjmp	.+18     	; 0x39e6 <vfprintf+0x300>
    39d4:	a2 fe       	sbrs	r10, 2
    39d6:	06 c0       	rjmp	.+12     	; 0x39e4 <vfprintf+0x2fe>
    39d8:	b3 94       	inc	r11
    39da:	b3 94       	inc	r11
    39dc:	04 c0       	rjmp	.+8      	; 0x39e6 <vfprintf+0x300>
    39de:	8a 2d       	mov	r24, r10
    39e0:	86 78       	andi	r24, 0x86	; 134
    39e2:	09 f0       	breq	.+2      	; 0x39e6 <vfprintf+0x300>
    39e4:	b3 94       	inc	r11
    39e6:	a3 fc       	sbrc	r10, 3
    39e8:	11 c0       	rjmp	.+34     	; 0x3a0c <vfprintf+0x326>
    39ea:	a0 fe       	sbrs	r10, 0
    39ec:	06 c0       	rjmp	.+12     	; 0x39fa <vfprintf+0x314>
    39ee:	b2 14       	cp	r11, r2
    39f0:	88 f4       	brcc	.+34     	; 0x3a14 <vfprintf+0x32e>
    39f2:	28 0c       	add	r2, r8
    39f4:	92 2c       	mov	r9, r2
    39f6:	9b 18       	sub	r9, r11
    39f8:	0e c0       	rjmp	.+28     	; 0x3a16 <vfprintf+0x330>
    39fa:	b2 14       	cp	r11, r2
    39fc:	60 f4       	brcc	.+24     	; 0x3a16 <vfprintf+0x330>
    39fe:	b6 01       	movw	r22, r12
    3a00:	80 e2       	ldi	r24, 0x20	; 32
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a08:	b3 94       	inc	r11
    3a0a:	f7 cf       	rjmp	.-18     	; 0x39fa <vfprintf+0x314>
    3a0c:	b2 14       	cp	r11, r2
    3a0e:	18 f4       	brcc	.+6      	; 0x3a16 <vfprintf+0x330>
    3a10:	2b 18       	sub	r2, r11
    3a12:	02 c0       	rjmp	.+4      	; 0x3a18 <vfprintf+0x332>
    3a14:	98 2c       	mov	r9, r8
    3a16:	21 2c       	mov	r2, r1
    3a18:	a4 fe       	sbrs	r10, 4
    3a1a:	10 c0       	rjmp	.+32     	; 0x3a3c <vfprintf+0x356>
    3a1c:	b6 01       	movw	r22, r12
    3a1e:	80 e3       	ldi	r24, 0x30	; 48
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a26:	a2 fe       	sbrs	r10, 2
    3a28:	17 c0       	rjmp	.+46     	; 0x3a58 <vfprintf+0x372>
    3a2a:	a1 fc       	sbrc	r10, 1
    3a2c:	03 c0       	rjmp	.+6      	; 0x3a34 <vfprintf+0x34e>
    3a2e:	88 e7       	ldi	r24, 0x78	; 120
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	02 c0       	rjmp	.+4      	; 0x3a38 <vfprintf+0x352>
    3a34:	88 e5       	ldi	r24, 0x58	; 88
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	b6 01       	movw	r22, r12
    3a3a:	0c c0       	rjmp	.+24     	; 0x3a54 <vfprintf+0x36e>
    3a3c:	8a 2d       	mov	r24, r10
    3a3e:	86 78       	andi	r24, 0x86	; 134
    3a40:	59 f0       	breq	.+22     	; 0x3a58 <vfprintf+0x372>
    3a42:	a1 fe       	sbrs	r10, 1
    3a44:	02 c0       	rjmp	.+4      	; 0x3a4a <vfprintf+0x364>
    3a46:	8b e2       	ldi	r24, 0x2B	; 43
    3a48:	01 c0       	rjmp	.+2      	; 0x3a4c <vfprintf+0x366>
    3a4a:	80 e2       	ldi	r24, 0x20	; 32
    3a4c:	a7 fc       	sbrc	r10, 7
    3a4e:	8d e2       	ldi	r24, 0x2D	; 45
    3a50:	b6 01       	movw	r22, r12
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a58:	89 14       	cp	r8, r9
    3a5a:	38 f4       	brcc	.+14     	; 0x3a6a <vfprintf+0x384>
    3a5c:	b6 01       	movw	r22, r12
    3a5e:	80 e3       	ldi	r24, 0x30	; 48
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a66:	9a 94       	dec	r9
    3a68:	f7 cf       	rjmp	.-18     	; 0x3a58 <vfprintf+0x372>
    3a6a:	8a 94       	dec	r8
    3a6c:	f3 01       	movw	r30, r6
    3a6e:	e8 0d       	add	r30, r8
    3a70:	f1 1d       	adc	r31, r1
    3a72:	80 81       	ld	r24, Z
    3a74:	b6 01       	movw	r22, r12
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a7c:	81 10       	cpse	r8, r1
    3a7e:	f5 cf       	rjmp	.-22     	; 0x3a6a <vfprintf+0x384>
    3a80:	22 20       	and	r2, r2
    3a82:	09 f4       	brne	.+2      	; 0x3a86 <vfprintf+0x3a0>
    3a84:	42 ce       	rjmp	.-892    	; 0x370a <vfprintf+0x24>
    3a86:	b6 01       	movw	r22, r12
    3a88:	80 e2       	ldi	r24, 0x20	; 32
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <fputc>
    3a90:	2a 94       	dec	r2
    3a92:	f6 cf       	rjmp	.-20     	; 0x3a80 <vfprintf+0x39a>
    3a94:	f6 01       	movw	r30, r12
    3a96:	86 81       	ldd	r24, Z+6	; 0x06
    3a98:	97 81       	ldd	r25, Z+7	; 0x07
    3a9a:	02 c0       	rjmp	.+4      	; 0x3aa0 <vfprintf+0x3ba>
    3a9c:	8f ef       	ldi	r24, 0xFF	; 255
    3a9e:	9f ef       	ldi	r25, 0xFF	; 255
    3aa0:	2b 96       	adiw	r28, 0x0b	; 11
    3aa2:	e2 e1       	ldi	r30, 0x12	; 18
    3aa4:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__epilogue_restores__>

00003aa8 <strnlen_P>:
    3aa8:	fc 01       	movw	r30, r24
    3aaa:	05 90       	lpm	r0, Z+
    3aac:	61 50       	subi	r22, 0x01	; 1
    3aae:	70 40       	sbci	r23, 0x00	; 0
    3ab0:	01 10       	cpse	r0, r1
    3ab2:	d8 f7       	brcc	.-10     	; 0x3aaa <strnlen_P+0x2>
    3ab4:	80 95       	com	r24
    3ab6:	90 95       	com	r25
    3ab8:	8e 0f       	add	r24, r30
    3aba:	9f 1f       	adc	r25, r31
    3abc:	08 95       	ret

00003abe <strnlen>:
    3abe:	fc 01       	movw	r30, r24
    3ac0:	61 50       	subi	r22, 0x01	; 1
    3ac2:	70 40       	sbci	r23, 0x00	; 0
    3ac4:	01 90       	ld	r0, Z+
    3ac6:	01 10       	cpse	r0, r1
    3ac8:	d8 f7       	brcc	.-10     	; 0x3ac0 <strnlen+0x2>
    3aca:	80 95       	com	r24
    3acc:	90 95       	com	r25
    3ace:	8e 0f       	add	r24, r30
    3ad0:	9f 1f       	adc	r25, r31
    3ad2:	08 95       	ret

00003ad4 <fputc>:
    3ad4:	0f 93       	push	r16
    3ad6:	1f 93       	push	r17
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	fb 01       	movw	r30, r22
    3ade:	23 81       	ldd	r18, Z+3	; 0x03
    3ae0:	21 fd       	sbrc	r18, 1
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <fputc+0x16>
    3ae4:	8f ef       	ldi	r24, 0xFF	; 255
    3ae6:	9f ef       	ldi	r25, 0xFF	; 255
    3ae8:	2c c0       	rjmp	.+88     	; 0x3b42 <fputc+0x6e>
    3aea:	22 ff       	sbrs	r18, 2
    3aec:	16 c0       	rjmp	.+44     	; 0x3b1a <fputc+0x46>
    3aee:	46 81       	ldd	r20, Z+6	; 0x06
    3af0:	57 81       	ldd	r21, Z+7	; 0x07
    3af2:	24 81       	ldd	r18, Z+4	; 0x04
    3af4:	35 81       	ldd	r19, Z+5	; 0x05
    3af6:	42 17       	cp	r20, r18
    3af8:	53 07       	cpc	r21, r19
    3afa:	44 f4       	brge	.+16     	; 0x3b0c <fputc+0x38>
    3afc:	a0 81       	ld	r26, Z
    3afe:	b1 81       	ldd	r27, Z+1	; 0x01
    3b00:	9d 01       	movw	r18, r26
    3b02:	2f 5f       	subi	r18, 0xFF	; 255
    3b04:	3f 4f       	sbci	r19, 0xFF	; 255
    3b06:	31 83       	std	Z+1, r19	; 0x01
    3b08:	20 83       	st	Z, r18
    3b0a:	8c 93       	st	X, r24
    3b0c:	26 81       	ldd	r18, Z+6	; 0x06
    3b0e:	37 81       	ldd	r19, Z+7	; 0x07
    3b10:	2f 5f       	subi	r18, 0xFF	; 255
    3b12:	3f 4f       	sbci	r19, 0xFF	; 255
    3b14:	37 83       	std	Z+7, r19	; 0x07
    3b16:	26 83       	std	Z+6, r18	; 0x06
    3b18:	14 c0       	rjmp	.+40     	; 0x3b42 <fputc+0x6e>
    3b1a:	8b 01       	movw	r16, r22
    3b1c:	ec 01       	movw	r28, r24
    3b1e:	fb 01       	movw	r30, r22
    3b20:	00 84       	ldd	r0, Z+8	; 0x08
    3b22:	f1 85       	ldd	r31, Z+9	; 0x09
    3b24:	e0 2d       	mov	r30, r0
    3b26:	09 95       	icall
    3b28:	89 2b       	or	r24, r25
    3b2a:	e1 f6       	brne	.-72     	; 0x3ae4 <fputc+0x10>
    3b2c:	d8 01       	movw	r26, r16
    3b2e:	16 96       	adiw	r26, 0x06	; 6
    3b30:	8d 91       	ld	r24, X+
    3b32:	9c 91       	ld	r25, X
    3b34:	17 97       	sbiw	r26, 0x07	; 7
    3b36:	01 96       	adiw	r24, 0x01	; 1
    3b38:	17 96       	adiw	r26, 0x07	; 7
    3b3a:	9c 93       	st	X, r25
    3b3c:	8e 93       	st	-X, r24
    3b3e:	16 97       	sbiw	r26, 0x06	; 6
    3b40:	ce 01       	movw	r24, r28
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
    3b4a:	08 95       	ret

00003b4c <__ultoa_invert>:
    3b4c:	fa 01       	movw	r30, r20
    3b4e:	aa 27       	eor	r26, r26
    3b50:	28 30       	cpi	r18, 0x08	; 8
    3b52:	51 f1       	breq	.+84     	; 0x3ba8 <__ultoa_invert+0x5c>
    3b54:	20 31       	cpi	r18, 0x10	; 16
    3b56:	81 f1       	breq	.+96     	; 0x3bb8 <__ultoa_invert+0x6c>
    3b58:	e8 94       	clt
    3b5a:	6f 93       	push	r22
    3b5c:	6e 7f       	andi	r22, 0xFE	; 254
    3b5e:	6e 5f       	subi	r22, 0xFE	; 254
    3b60:	7f 4f       	sbci	r23, 0xFF	; 255
    3b62:	8f 4f       	sbci	r24, 0xFF	; 255
    3b64:	9f 4f       	sbci	r25, 0xFF	; 255
    3b66:	af 4f       	sbci	r26, 0xFF	; 255
    3b68:	b1 e0       	ldi	r27, 0x01	; 1
    3b6a:	3e d0       	rcall	.+124    	; 0x3be8 <__ultoa_invert+0x9c>
    3b6c:	b4 e0       	ldi	r27, 0x04	; 4
    3b6e:	3c d0       	rcall	.+120    	; 0x3be8 <__ultoa_invert+0x9c>
    3b70:	67 0f       	add	r22, r23
    3b72:	78 1f       	adc	r23, r24
    3b74:	89 1f       	adc	r24, r25
    3b76:	9a 1f       	adc	r25, r26
    3b78:	a1 1d       	adc	r26, r1
    3b7a:	68 0f       	add	r22, r24
    3b7c:	79 1f       	adc	r23, r25
    3b7e:	8a 1f       	adc	r24, r26
    3b80:	91 1d       	adc	r25, r1
    3b82:	a1 1d       	adc	r26, r1
    3b84:	6a 0f       	add	r22, r26
    3b86:	71 1d       	adc	r23, r1
    3b88:	81 1d       	adc	r24, r1
    3b8a:	91 1d       	adc	r25, r1
    3b8c:	a1 1d       	adc	r26, r1
    3b8e:	20 d0       	rcall	.+64     	; 0x3bd0 <__ultoa_invert+0x84>
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <__ultoa_invert+0x48>
    3b92:	68 94       	set
    3b94:	3f 91       	pop	r19
    3b96:	2a e0       	ldi	r18, 0x0A	; 10
    3b98:	26 9f       	mul	r18, r22
    3b9a:	11 24       	eor	r1, r1
    3b9c:	30 19       	sub	r19, r0
    3b9e:	30 5d       	subi	r19, 0xD0	; 208
    3ba0:	31 93       	st	Z+, r19
    3ba2:	de f6       	brtc	.-74     	; 0x3b5a <__ultoa_invert+0xe>
    3ba4:	cf 01       	movw	r24, r30
    3ba6:	08 95       	ret
    3ba8:	46 2f       	mov	r20, r22
    3baa:	47 70       	andi	r20, 0x07	; 7
    3bac:	40 5d       	subi	r20, 0xD0	; 208
    3bae:	41 93       	st	Z+, r20
    3bb0:	b3 e0       	ldi	r27, 0x03	; 3
    3bb2:	0f d0       	rcall	.+30     	; 0x3bd2 <__ultoa_invert+0x86>
    3bb4:	c9 f7       	brne	.-14     	; 0x3ba8 <__ultoa_invert+0x5c>
    3bb6:	f6 cf       	rjmp	.-20     	; 0x3ba4 <__ultoa_invert+0x58>
    3bb8:	46 2f       	mov	r20, r22
    3bba:	4f 70       	andi	r20, 0x0F	; 15
    3bbc:	40 5d       	subi	r20, 0xD0	; 208
    3bbe:	4a 33       	cpi	r20, 0x3A	; 58
    3bc0:	18 f0       	brcs	.+6      	; 0x3bc8 <__ultoa_invert+0x7c>
    3bc2:	49 5d       	subi	r20, 0xD9	; 217
    3bc4:	31 fd       	sbrc	r19, 1
    3bc6:	40 52       	subi	r20, 0x20	; 32
    3bc8:	41 93       	st	Z+, r20
    3bca:	02 d0       	rcall	.+4      	; 0x3bd0 <__ultoa_invert+0x84>
    3bcc:	a9 f7       	brne	.-22     	; 0x3bb8 <__ultoa_invert+0x6c>
    3bce:	ea cf       	rjmp	.-44     	; 0x3ba4 <__ultoa_invert+0x58>
    3bd0:	b4 e0       	ldi	r27, 0x04	; 4
    3bd2:	a6 95       	lsr	r26
    3bd4:	97 95       	ror	r25
    3bd6:	87 95       	ror	r24
    3bd8:	77 95       	ror	r23
    3bda:	67 95       	ror	r22
    3bdc:	ba 95       	dec	r27
    3bde:	c9 f7       	brne	.-14     	; 0x3bd2 <__ultoa_invert+0x86>
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	61 05       	cpc	r22, r1
    3be4:	71 05       	cpc	r23, r1
    3be6:	08 95       	ret
    3be8:	9b 01       	movw	r18, r22
    3bea:	ac 01       	movw	r20, r24
    3bec:	0a 2e       	mov	r0, r26
    3bee:	06 94       	lsr	r0
    3bf0:	57 95       	ror	r21
    3bf2:	47 95       	ror	r20
    3bf4:	37 95       	ror	r19
    3bf6:	27 95       	ror	r18
    3bf8:	ba 95       	dec	r27
    3bfa:	c9 f7       	brne	.-14     	; 0x3bee <__ultoa_invert+0xa2>
    3bfc:	62 0f       	add	r22, r18
    3bfe:	73 1f       	adc	r23, r19
    3c00:	84 1f       	adc	r24, r20
    3c02:	95 1f       	adc	r25, r21
    3c04:	a0 1d       	adc	r26, r0
    3c06:	08 95       	ret

00003c08 <__prologue_saves__>:
    3c08:	2f 92       	push	r2
    3c0a:	3f 92       	push	r3
    3c0c:	4f 92       	push	r4
    3c0e:	5f 92       	push	r5
    3c10:	6f 92       	push	r6
    3c12:	7f 92       	push	r7
    3c14:	8f 92       	push	r8
    3c16:	9f 92       	push	r9
    3c18:	af 92       	push	r10
    3c1a:	bf 92       	push	r11
    3c1c:	cf 92       	push	r12
    3c1e:	df 92       	push	r13
    3c20:	ef 92       	push	r14
    3c22:	ff 92       	push	r15
    3c24:	0f 93       	push	r16
    3c26:	1f 93       	push	r17
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
    3c30:	ca 1b       	sub	r28, r26
    3c32:	db 0b       	sbc	r29, r27
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	f8 94       	cli
    3c38:	de bf       	out	0x3e, r29	; 62
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	cd bf       	out	0x3d, r28	; 61
    3c3e:	09 94       	ijmp

00003c40 <__epilogue_restores__>:
    3c40:	2a 88       	ldd	r2, Y+18	; 0x12
    3c42:	39 88       	ldd	r3, Y+17	; 0x11
    3c44:	48 88       	ldd	r4, Y+16	; 0x10
    3c46:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c48:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c50:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c52:	b9 84       	ldd	r11, Y+9	; 0x09
    3c54:	c8 84       	ldd	r12, Y+8	; 0x08
    3c56:	df 80       	ldd	r13, Y+7	; 0x07
    3c58:	ee 80       	ldd	r14, Y+6	; 0x06
    3c5a:	fd 80       	ldd	r15, Y+5	; 0x05
    3c5c:	0c 81       	ldd	r16, Y+4	; 0x04
    3c5e:	1b 81       	ldd	r17, Y+3	; 0x03
    3c60:	aa 81       	ldd	r26, Y+2	; 0x02
    3c62:	b9 81       	ldd	r27, Y+1	; 0x01
    3c64:	ce 0f       	add	r28, r30
    3c66:	d1 1d       	adc	r29, r1
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
    3c72:	ed 01       	movw	r28, r26
    3c74:	08 95       	ret

00003c76 <_exit>:
    3c76:	f8 94       	cli

00003c78 <__stop_program>:
    3c78:	ff cf       	rjmp	.-2      	; 0x3c78 <__stop_program>
