
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000338  00800060  00001b90  00001c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800398  00800398  00001f5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00001fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e7b  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001219  00000000  00000000  0000721b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002975  00000000  00000000  00008434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  0000adac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001389  00000000  00000000  0000b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027fb  00000000  00000000  0000ca21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000f21c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_10>
      2c:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 07 	call	0xfbe	; 0xfbe <main>
      8a:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HOME_voidInit>:
			
		}
		//clear alarm byte
		EEPROM_voidWriteByte(HOME_ALARM_LOCATION,HOME_ALARM_CLEAR_VALUE);
	}
}
      92:	0e 94 36 06 	call	0xc6c	; 0xc6c <LCD_voidInit>
      96:	0e 94 b3 09 	call	0x1366	; 0x1366 <PWM_voidInitChannel_1A>
      9a:	0e 94 c6 09 	call	0x138c	; 0x138c <PWM_voidInitChannel_1B>
      9e:	0e 94 ba 04 	call	0x974	; 0x974 <EEPROM_voidInit>
      a2:	64 e0       	ldi	r22, 0x04	; 4
      a4:	83 e0       	ldi	r24, 0x03	; 3
      a6:	0e 94 c0 07 	call	0xf80	; 0xf80 <SERVO_voidInit>
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	cb 01       	movw	r24, r22
      b0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <SERVO_voidStartByAngle>
      b4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <KPD_voidInit>
      b8:	0e 94 b7 04 	call	0x96e	; 0x96e <BL_voidInit>
      bc:	41 e0       	ldi	r20, 0x01	; 1
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	83 e0       	ldi	r24, 0x03	; 3
      c2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	83 e0       	ldi	r24, 0x03	; 3
      cc:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
      d0:	0e 94 af 09 	call	0x135e	; 0x135e <GI_voidEnable>
      d4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <TMR0_voidInit>
      d8:	63 e0       	ldi	r22, 0x03	; 3
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 a2 07 	call	0xf44	; 0xf44 <LED_voidInit>
      e0:	60 e0       	ldi	r22, 0x00	; 0
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 a2 07 	call	0xf44	; 0xf44 <LED_voidInit>
      e8:	62 e0       	ldi	r22, 0x02	; 2
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	0e 94 a2 07 	call	0xf44	; 0xf44 <LED_voidInit>
      f0:	63 e0       	ldi	r22, 0x03	; 3
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	0e 94 a2 07 	call	0xf44	; 0xf44 <LED_voidInit>
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	83 e0       	ldi	r24, 0x03	; 3
      fc:	0e 94 a2 07 	call	0xf44	; 0xf44 <LED_voidInit>
     100:	65 e0       	ldi	r22, 0x05	; 5
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	0e 94 a2 07 	call	0xf44	; 0xf44 <LED_voidInit>
     108:	08 95       	ret

0000010a <WelcomeScreen>:
    
}

void WelcomeScreen()
{
    LCD_voidDisplayStringDelay((u8 *)" Welcome to your");
     10a:	8a ec       	ldi	r24, 0xCA	; 202
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
    LCD_voidSendCommand(Write_SecondLine);
     112:	80 ec       	ldi	r24, 0xC0	; 192
     114:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
    LCD_voidDisplayStringDelay((u8 *)"   Smart Home");
     118:	8b ed       	ldi	r24, 0xDB	; 219
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	83 ed       	ldi	r24, 0xD3	; 211
     124:	90 e3       	ldi	r25, 0x30	; 48
     126:	21 50       	subi	r18, 0x01	; 1
     128:	80 40       	sbci	r24, 0x00	; 0
     12a:	90 40       	sbci	r25, 0x00	; 0
     12c:	e1 f7       	brne	.-8      	; 0x126 <WelcomeScreen+0x1c>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <WelcomeScreen+0x26>
     130:	00 00       	nop
     132:	08 95       	ret

00000134 <APP_init>:




void APP_init(void)
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	cd b7       	in	r28, 0x3d	; 61
     13a:	de b7       	in	r29, 0x3e	; 62
     13c:	e0 97       	sbiw	r28, 0x30	; 48
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	f8 94       	cli
     142:	de bf       	out	0x3e, r29	; 62
     144:	0f be       	out	0x3f, r0	; 63
     146:	cd bf       	out	0x3d, r28	; 61
    HOME_voidInit();
     148:	0e 94 49 00 	call	0x92	; 0x92 <HOME_voidInit>
	
    ADC_voidInit(ADC_REFERENCE_INTRNAL);
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <ADC_voidInit>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
     152:	40 e0       	ldi	r20, 0x00	; 0
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	80 e0       	ldi	r24, 0x00	; 0
     158:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	
	// display the welcome screen
	WelcomeScreen();
     15c:	0e 94 85 00 	call	0x10a	; 0x10a <WelcomeScreen>
	LCD_voidClear();
     160:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>

	
	
	u8 testusername[8]="7654321";
     164:	88 e0       	ldi	r24, 0x08	; 8
     166:	e9 ee       	ldi	r30, 0xE9	; 233
     168:	f1 e0       	ldi	r31, 0x01	; 1
     16a:	de 01       	movw	r26, r28
     16c:	11 96       	adiw	r26, 0x01	; 1
     16e:	01 90       	ld	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	8a 95       	dec	r24
     174:	e1 f7       	brne	.-8      	; 0x16e <APP_init+0x3a>
	u8 testuserpass[8]="7654321";
     176:	88 e0       	ldi	r24, 0x08	; 8
     178:	e9 ee       	ldi	r30, 0xE9	; 233
     17a:	f1 e0       	ldi	r31, 0x01	; 1
     17c:	de 01       	movw	r26, r28
     17e:	19 96       	adiw	r26, 0x09	; 9
     180:	01 90       	ld	r0, Z+
     182:	0d 92       	st	X+, r0
     184:	8a 95       	dec	r24
     186:	e1 f7       	brne	.-8      	; 0x180 <APP_init+0x4c>
	u8 testadminname[8]="1122334";
     188:	88 e0       	ldi	r24, 0x08	; 8
     18a:	e1 ef       	ldi	r30, 0xF1	; 241
     18c:	f1 e0       	ldi	r31, 0x01	; 1
     18e:	de 01       	movw	r26, r28
     190:	51 96       	adiw	r26, 0x11	; 17
     192:	01 90       	ld	r0, Z+
     194:	0d 92       	st	X+, r0
     196:	8a 95       	dec	r24
     198:	e1 f7       	brne	.-8      	; 0x192 <APP_init+0x5e>
	u8 testadminpass[8]="1122334";
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	e1 ef       	ldi	r30, 0xF1	; 241
     19e:	f1 e0       	ldi	r31, 0x01	; 1
     1a0:	de 01       	movw	r26, r28
     1a2:	59 96       	adiw	r26, 0x19	; 25
     1a4:	01 90       	ld	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	8a 95       	dec	r24
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <APP_init+0x70>
	u8 testusername1[8]="1002003";
     1ac:	88 e0       	ldi	r24, 0x08	; 8
     1ae:	e9 ef       	ldi	r30, 0xF9	; 249
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	de 01       	movw	r26, r28
     1b4:	91 96       	adiw	r26, 0x21	; 33
     1b6:	01 90       	ld	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	8a 95       	dec	r24
     1bc:	e1 f7       	brne	.-8      	; 0x1b6 <APP_init+0x82>
	u8 testuserpass1[8]="1002003";
     1be:	88 e0       	ldi	r24, 0x08	; 8
     1c0:	e9 ef       	ldi	r30, 0xF9	; 249
     1c2:	f1 e0       	ldi	r31, 0x01	; 1
     1c4:	de 01       	movw	r26, r28
     1c6:	99 96       	adiw	r26, 0x29	; 41
     1c8:	01 90       	ld	r0, Z+
     1ca:	0d 92       	st	X+, r0
     1cc:	8a 95       	dec	r24
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <APP_init+0x94>
	u8 usertype;	
	
	EEPROM_voidWritePage(16,&testusername[0]);
     1d0:	be 01       	movw	r22, r28
     1d2:	6f 5f       	subi	r22, 0xFF	; 255
     1d4:	7f 4f       	sbci	r23, 0xFF	; 255
     1d6:	80 e1       	ldi	r24, 0x10	; 16
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 bd 04 	call	0x97a	; 0x97a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(24,&testuserpass[0]);
     1de:	be 01       	movw	r22, r28
     1e0:	67 5f       	subi	r22, 0xF7	; 247
     1e2:	7f 4f       	sbci	r23, 0xFF	; 255
     1e4:	88 e1       	ldi	r24, 0x18	; 24
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 bd 04 	call	0x97a	; 0x97a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(80,&testadminname[0]);
     1ec:	be 01       	movw	r22, r28
     1ee:	6f 5e       	subi	r22, 0xEF	; 239
     1f0:	7f 4f       	sbci	r23, 0xFF	; 255
     1f2:	80 e5       	ldi	r24, 0x50	; 80
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 bd 04 	call	0x97a	; 0x97a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(88,&testadminpass[0]);
     1fa:	be 01       	movw	r22, r28
     1fc:	67 5e       	subi	r22, 0xE7	; 231
     1fe:	7f 4f       	sbci	r23, 0xFF	; 255
     200:	88 e5       	ldi	r24, 0x58	; 88
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 bd 04 	call	0x97a	; 0x97a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(96,&testusername1[0]);
     208:	be 01       	movw	r22, r28
     20a:	6f 5d       	subi	r22, 0xDF	; 223
     20c:	7f 4f       	sbci	r23, 0xFF	; 255
     20e:	80 e6       	ldi	r24, 0x60	; 96
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 bd 04 	call	0x97a	; 0x97a <EEPROM_voidWritePage>
	EEPROM_voidWritePage(104,&testuserpass1[0]);
     216:	be 01       	movw	r22, r28
     218:	67 5d       	subi	r22, 0xD7	; 215
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	88 e6       	ldi	r24, 0x68	; 104
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 bd 04 	call	0x97a	; 0x97a <EEPROM_voidWritePage>





}
     224:	e0 96       	adiw	r28, 0x30	; 48
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <Display_temp>:

}

void Display_temp(void)
{
	ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     236:	68 e9       	ldi	r22, 0x98	; 152
     238:	73 e0       	ldi	r23, 0x03	; 3
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	0e 94 21 08 	call	0x1042	; 0x1042 <ADC_voidGetDigitalValue>
	LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     240:	6b e0       	ldi	r22, 0x0B	; 11
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
	LCD_voidDisplayNumber(local_temp);
     248:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <__data_end>
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
     256:	08 95       	ret

00000258 <Idle_Action>:



void Idle_Action()
{ 
    LCD_voidClear();
     258:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
	LCD_voidSendCommand(Write_FirstLine);
     25c:	80 e8       	ldi	r24, 0x80	; 128
     25e:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	92 e0       	ldi	r25, 0x02	; 2
     266:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
	Display_temp();
     26a:	0e 94 1b 01 	call	0x236	; 0x236 <Display_temp>
	LCD_voidSendCommand(Write_SecondLine);
     26e:	80 ec       	ldi	r24, 0xC0	; 192
     270:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
	LCD_voidDisplayString("0-Go to Home");
     274:	80 e1       	ldi	r24, 0x10	; 16
     276:	92 e0       	ldi	r25, 0x02	; 2
     278:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     27c:	06 c0       	rjmp	.+12     	; 0x28a <Idle_Action+0x32>
    {
        KPD_voidGetValue(&local_KPDIdleValue);
     27e:	80 e6       	ldi	r24, 0x60	; 96
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
		Display_temp();
     286:	0e 94 1b 01 	call	0x236	; 0x236 <Display_temp>
	LCD_voidDisplayString((u8 *)"Room Temp:   c");
	Display_temp();
	LCD_voidSendCommand(Write_SecondLine);
	LCD_voidDisplayString("0-Go to Home");
	
    while (local_KPDIdleValue == KPD_Not_Pressed)
     28a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     28e:	8f 3f       	cpi	r24, 0xFF	; 255
     290:	b1 f3       	breq	.-20     	; 0x27e <Idle_Action+0x26>
        KPD_voidGetValue(&local_KPDIdleValue);
		Display_temp();

        
    }
    if (local_KPDIdleValue == '0')
     292:	80 33       	cpi	r24, 0x30	; 48
     294:	11 f4       	brne	.+4      	; 0x29a <Idle_Action+0x42>
    {
        LCD_voidClear();
     296:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
    }
    TMR0clear_flag();
     29a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <TMR0clear_flag>
    LCD_voidClear();
     29e:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
     2a2:	08 95       	ret

000002a4 <Reset_AllKPDValues>:

}

void Reset_AllKPDValues()
{
    Local_copyKPDValue = KPD_Not_Pressed;
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Local_copyKPDValue>
    local_lightNum = KPD_Not_Pressed;
     2aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <local_lightNum>
    local_lightStatus = KPD_Not_Pressed;
     2ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
	local_KPDIdleValue = KPD_Not_Pressed;
     2b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     2b6:	08 95       	ret

000002b8 <KPD_Interface_user>:


void KPD_Interface_user(void)
{

        Reset_AllKPDValues();
     2b8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Reset_AllKPDValues>

        TMR0_SetCallBackCTC(&Idle_Action);
     2bc:	8c e2       	ldi	r24, 0x2C	; 44
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 9b 0a 	call	0x1536	; 0x1536 <TMR0_SetCallBackCTC>

        TMR0_voidStart();
     2c4:	0e 94 83 0a 	call	0x1506	; 0x1506 <TMR0_voidStart>
        LCD_voidClear();
     2c8:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
        LCD_voidDisplayString((u8 *)"1-AC 2-light");
     2cc:	8d e1       	ldi	r24, 0x1D	; 29
     2ce:	92 e0       	ldi	r25, 0x02	; 2
     2d0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
        LCD_voidSendCommand(Write_SecondLine);
     2d4:	80 ec       	ldi	r24, 0xC0	; 192
     2d6:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
     2da:	8a e2       	ldi	r24, 0x2A	; 42
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
        Reset_AllKPDValues();
     2e2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Reset_AllKPDValues>

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     2e6:	0c c0       	rjmp	.+24     	; 0x300 <KPD_Interface_user+0x48>
        {
            if (local_KPDIdleValue == '0')
     2e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2ec:	80 33       	cpi	r24, 0x30	; 48
     2ee:	21 f4       	brne	.+8      	; 0x2f8 <KPD_Interface_user+0x40>
            {
                local_KPDIdleValue = KPD_Not_Pressed;
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                break;
     2f6:	08 c0       	rjmp	.+16     	; 0x308 <KPD_Interface_user+0x50>
            }
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
     2f8:	83 e6       	ldi	r24, 0x63	; 99
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
        LCD_voidSendCommand(Write_SecondLine);
        LCD_voidDisplayString((u8 *)"3-temp 4-Door");
        Reset_AllKPDValues();

        // busy wait for KPD
        while (Local_copyKPDValue == KPD_Not_Pressed)
     300:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_copyKPDValue>
     304:	8f 3f       	cpi	r24, 0xFF	; 255
     306:	81 f3       	breq	.-32     	; 0x2e8 <KPD_Interface_user+0x30>
            else
            {
                KPD_voidGetValue(&Local_copyKPDValue);
            }
        }
        TMR0_voidStop();
     308:	0e 94 91 0a 	call	0x1522	; 0x1522 <TMR0_voidStop>
        switch (Local_copyKPDValue)
     30c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_copyKPDValue>
     310:	82 33       	cpi	r24, 0x32	; 50
     312:	c9 f0       	breq	.+50     	; 0x346 <KPD_Interface_user+0x8e>
     314:	18 f4       	brcc	.+6      	; 0x31c <KPD_Interface_user+0x64>
     316:	81 33       	cpi	r24, 0x31	; 49
     318:	41 f0       	breq	.+16     	; 0x32a <KPD_Interface_user+0x72>
     31a:	08 95       	ret
     31c:	83 33       	cpi	r24, 0x33	; 51
     31e:	09 f4       	brne	.+2      	; 0x322 <KPD_Interface_user+0x6a>
     320:	d7 c2       	rjmp	.+1454   	; 0x8d0 <__stack+0x71>
     322:	84 33       	cpi	r24, 0x34	; 52
     324:	09 f4       	brne	.+2      	; 0x328 <KPD_Interface_user+0x70>
     326:	07 c3       	rjmp	.+1550   	; 0x936 <__stack+0xd7>
     328:	08 95       	ret
        {
        case ('1'):

            LCD_voidClear();
     32a:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"AC Is On/off");
     32e:	88 e3       	ldi	r24, 0x38	; 56
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     336:	80 ec       	ldi	r24, 0xC0	; 192
     338:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"Room Temp: 30c");
     33c:	85 e4       	ldi	r24, 0x45	; 69
     33e:	92 e0       	ldi	r25, 0x02	; 2
     340:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>

            break;
     344:	08 95       	ret
			

        case ('2'):

            LCD_voidClear();
     346:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
            LCD_voidDisplayStringDelay((u8 *)"Choose light to");
     34a:	84 e5       	ldi	r24, 0x54	; 84
     34c:	92 e0       	ldi	r25, 0x02	; 2
     34e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
            LCD_voidSendCommand(Write_SecondLine);
     352:	80 ec       	ldi	r24, 0xC0	; 192
     354:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");
     358:	84 e6       	ldi	r24, 0x64	; 100
     35a:	92 e0       	ldi	r25, 0x02	; 2
     35c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>

            TMR0_SetCallBackCTC(&Idle_Action);
     360:	8c e2       	ldi	r24, 0x2C	; 44
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 9b 0a 	call	0x1536	; 0x1536 <TMR0_SetCallBackCTC>
            TMR0_voidStart();
     368:	0e 94 83 0a 	call	0x1506	; 0x1506 <TMR0_voidStart>
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     36c:	0c c0       	rjmp	.+24     	; 0x386 <KPD_Interface_user+0xce>
            {
                KPD_voidGetValue(&local_lightNum);
     36e:	82 e6       	ldi	r24, 0x62	; 98
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                if(local_KPDIdleValue=='0')
     376:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     37a:	80 33       	cpi	r24, 0x30	; 48
     37c:	21 f4       	brne	.+8      	; 0x386 <KPD_Interface_user+0xce>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    break;
     384:	04 c0       	rjmp	.+8      	; 0x38e <KPD_Interface_user+0xd6>
            LCD_voidDisplayStringDelay((u8 *)"control(1-6)");

            TMR0_SetCallBackCTC(&Idle_Action);
            TMR0_voidStart();
            // busy wait for KPD
            while (local_lightNum == KPD_Not_Pressed)
     386:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightNum>
     38a:	8f 3f       	cpi	r24, 0xFF	; 255
     38c:	81 f3       	breq	.-32     	; 0x36e <KPD_Interface_user+0xb6>
                {
                    local_KPDIdleValue=KPD_Not_Pressed;
                    break;
                }
            }
            TMR0_voidStop();
     38e:	0e 94 91 0a 	call	0x1522	; 0x1522 <TMR0_voidStop>
            switch (local_lightNum)
     392:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <local_lightNum>
     396:	83 33       	cpi	r24, 0x33	; 51
     398:	09 f4       	brne	.+2      	; 0x39c <KPD_Interface_user+0xe4>
     39a:	a6 c0       	rjmp	.+332    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     39c:	30 f4       	brcc	.+12     	; 0x3aa <KPD_Interface_user+0xf2>
     39e:	81 33       	cpi	r24, 0x31	; 49
     3a0:	69 f0       	breq	.+26     	; 0x3bc <KPD_Interface_user+0x104>
     3a2:	82 33       	cpi	r24, 0x32	; 50
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <KPD_Interface_user+0xf0>
     3a6:	54 c0       	rjmp	.+168    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     3a8:	08 95       	ret
     3aa:	85 33       	cpi	r24, 0x35	; 53
     3ac:	09 f4       	brne	.+2      	; 0x3b0 <KPD_Interface_user+0xf8>
     3ae:	34 c1       	rjmp	.+616    	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
     3b0:	08 f4       	brcc	.+2      	; 0x3b4 <KPD_Interface_user+0xfc>
     3b2:	e6 c0       	rjmp	.+460    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
     3b4:	86 33       	cpi	r24, 0x36	; 54
     3b6:	09 f4       	brne	.+2      	; 0x3ba <KPD_Interface_user+0x102>
     3b8:	7b c1       	rjmp	.+758    	; 0x6b0 <__EEPROM_REGION_LENGTH__+0x2b0>
     3ba:	08 95       	ret
            {
            case ('1'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN3, &led_status);
     3bc:	4a e9       	ldi	r20, 0x9A	; 154
     3be:	53 e0       	ldi	r21, 0x03	; 3
     3c0:	63 e0       	ldi	r22, 0x03	; 3
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidGetPinValue>
                LCD_voidClear();
     3c8:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
                if (led_status == 1)
     3cc:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <led_status>
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	f1 f4       	brne	.+60     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
     3d4:	81 e7       	ldi	r24, 0x71	; 113
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     3dc:	80 ec       	ldi	r24, 0xC0	; 192
     3de:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     3e2:	8f e7       	ldi	r24, 0x7F	; 127
     3e4:	92 e0       	ldi	r25, 0x02	; 2
     3e6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <KPD_Interface_user+0x13c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     3ec:	81 e6       	ldi	r24, 0x61	; 97
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     3f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     3f8:	8f 3f       	cpi	r24, 0xFF	; 255
     3fa:	c1 f3       	breq	.-16     	; 0x3ec <KPD_Interface_user+0x134>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     3fc:	81 33       	cpi	r24, 0x31	; 49
     3fe:	29 f4       	brne	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	63 e0       	ldi	r22, 0x03	; 3
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	0e 94 b3 07 	call	0xf66	; 0xf66 <LED_voidOff>
                    }
                    Reset_AllKPDValues();
     40a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Reset_AllKPDValues>
					break;
     40e:	08 95       	ret
                }
                else if (led_status == 0)
     410:	81 11       	cpse	r24, r1
     412:	ac c2       	rjmp	.+1368   	; 0x96c <__stack+0x10d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
     414:	80 e9       	ldi	r24, 0x90	; 144
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     41c:	80 ec       	ldi	r24, 0xC0	; 192
     41e:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     422:	8f e9       	ldi	r24, 0x9F	; 159
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     42a:	04 c0       	rjmp	.+8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     42c:	81 e6       	ldi	r24, 0x61	; 97
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 1 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     434:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     438:	8f 3f       	cpi	r24, 0xFF	; 255
     43a:	c1 f3       	breq	.-16     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     43c:	81 33       	cpi	r24, 0x31	; 49
     43e:	29 f4       	brne	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN3, LED_FORWARD_CONNECTION);
     440:	41 e0       	ldi	r20, 0x01	; 1
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LED_voidOn>
                    }
                    Reset_AllKPDValues();
     44a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Reset_AllKPDValues>
     44e:	08 95       	ret
                }
                break;

            case ('2'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN4, &led_status);
     450:	4a e9       	ldi	r20, 0x9A	; 154
     452:	53 e0       	ldi	r21, 0x03	; 3
     454:	64 e0       	ldi	r22, 0x04	; 4
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidGetPinValue>
                LCD_voidClear();
     45c:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
                if (led_status == 1)
     460:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <led_status>
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	f9 f4       	brne	.+62     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
     468:	8f ea       	ldi	r24, 0xAF	; 175
     46a:	92 e0       	ldi	r25, 0x02	; 2
     46c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     470:	80 ec       	ldi	r24, 0xC0	; 192
     472:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     476:	8f e7       	ldi	r24, 0x7F	; 127
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     47e:	04 c0       	rjmp	.+8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     480:	81 e6       	ldi	r24, 0x61	; 97
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     488:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     48c:	8f 3f       	cpi	r24, 0xFF	; 255
     48e:	c1 f3       	breq	.-16     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     490:	81 33       	cpi	r24, 0x31	; 49
     492:	29 f4       	brne	.+10     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	64 e0       	ldi	r22, 0x04	; 4
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	0e 94 b3 07 	call	0xf66	; 0xf66 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     4a4:	08 95       	ret
                }
                else if (led_status == 0)
     4a6:	81 11       	cpse	r24, r1
     4a8:	61 c2       	rjmp	.+1218   	; 0x96c <__stack+0x10d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
     4aa:	8d eb       	ldi	r24, 0xBD	; 189
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     4b2:	80 ec       	ldi	r24, 0xC0	; 192
     4b4:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     4b8:	8f e9       	ldi	r24, 0x9F	; 159
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     4c0:	04 c0       	rjmp	.+8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     4c2:	81 e6       	ldi	r24, 0x61	; 97
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 2 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     4ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     4ce:	8f 3f       	cpi	r24, 0xFF	; 255
     4d0:	c1 f3       	breq	.-16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }
                    if (local_lightStatus == '1')
     4d2:	81 33       	cpi	r24, 0x31	; 49
     4d4:	29 f4       	brne	.+10     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN4, LED_FORWARD_CONNECTION);
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	64 e0       	ldi	r22, 0x04	; 4
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     4e6:	08 95       	ret
                }
                break;

            case ('3'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN2, &led_status);
     4e8:	4a e9       	ldi	r20, 0x9A	; 154
     4ea:	53 e0       	ldi	r21, 0x03	; 3
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidGetPinValue>
                LCD_voidClear();
     4f4:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
                if (led_status == 1)
     4f8:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <led_status>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	f9 f4       	brne	.+62     	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
     500:	8c ec       	ldi	r24, 0xCC	; 204
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     508:	80 ec       	ldi	r24, 0xC0	; 192
     50a:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     50e:	8f e7       	ldi	r24, 0x7F	; 127
     510:	92 e0       	ldi	r25, 0x02	; 2
     512:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     516:	04 c0       	rjmp	.+8      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     518:	81 e6       	ldi	r24, 0x61	; 97
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     520:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     524:	8f 3f       	cpi	r24, 0xFF	; 255
     526:	c1 f3       	breq	.-16     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     528:	81 33       	cpi	r24, 0x31	; 49
     52a:	29 f4       	brne	.+10     	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	62 e0       	ldi	r22, 0x02	; 2
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	0e 94 b3 07 	call	0xf66	; 0xf66 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     53c:	08 95       	ret
                }
                else if (led_status == 0)
     53e:	81 11       	cpse	r24, r1
     540:	15 c2       	rjmp	.+1066   	; 0x96c <__stack+0x10d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
     542:	8a ed       	ldi	r24, 0xDA	; 218
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     54a:	80 ec       	ldi	r24, 0xC0	; 192
     54c:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     550:	8f e9       	ldi	r24, 0x9F	; 159
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     558:	04 c0       	rjmp	.+8      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     55a:	81 e6       	ldi	r24, 0x61	; 97
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 3 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     562:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     566:	8f 3f       	cpi	r24, 0xFF	; 255
     568:	c1 f3       	breq	.-16     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     56a:	81 33       	cpi	r24, 0x31	; 49
     56c:	29 f4       	brne	.+10     	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN2, LED_FORWARD_CONNECTION);
     56e:	41 e0       	ldi	r20, 0x01	; 1
     570:	62 e0       	ldi	r22, 0x02	; 2
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     57e:	08 95       	ret
                }
                break;

            case ('4'):

                DIO_voidGetPinValue(DIO_PORTA, DIO_PIN3, &led_status);
     580:	4a e9       	ldi	r20, 0x9A	; 154
     582:	53 e0       	ldi	r21, 0x03	; 3
     584:	63 e0       	ldi	r22, 0x03	; 3
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidGetPinValue>
                LCD_voidClear();
     58c:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
                if (led_status == 1)
     590:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <led_status>
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	f9 f4       	brne	.+62     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
     598:	89 ee       	ldi	r24, 0xE9	; 233
     59a:	92 e0       	ldi	r25, 0x02	; 2
     59c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5a0:	80 ec       	ldi	r24, 0xC0	; 192
     5a2:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     5a6:	8f e7       	ldi	r24, 0x7F	; 127
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5b0:	81 e6       	ldi	r24, 0x61	; 97
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     5b8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     5bc:	8f 3f       	cpi	r24, 0xFF	; 255
     5be:	c1 f3       	breq	.-16     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     5c0:	81 33       	cpi	r24, 0x31	; 49
     5c2:	29 f4       	brne	.+10     	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
                    {
                        LED_voidOff(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	63 e0       	ldi	r22, 0x03	; 3
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 b3 07 	call	0xf66	; 0xf66 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     5d4:	08 95       	ret
                }
                else if (led_status == 0)
     5d6:	81 11       	cpse	r24, r1
     5d8:	c9 c1       	rjmp	.+914    	; 0x96c <__stack+0x10d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
     5da:	87 ef       	ldi	r24, 0xF7	; 247
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     5e2:	80 ec       	ldi	r24, 0xC0	; 192
     5e4:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     5e8:	8f e9       	ldi	r24, 0x9F	; 159
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     5f0:	04 c0       	rjmp	.+8      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     5f2:	81 e6       	ldi	r24, 0x61	; 97
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 4 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     5fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     5fe:	8f 3f       	cpi	r24, 0xFF	; 255
     600:	c1 f3       	breq	.-16     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     602:	81 33       	cpi	r24, 0x31	; 49
     604:	29 f4       	brne	.+10     	; 0x610 <__EEPROM_REGION_LENGTH__+0x210>
                    {
                        LED_voidOn(DIO_PORTA, DIO_PIN3, LED_FORWARD_CONNECTION);
     606:	41 e0       	ldi	r20, 0x01	; 1
     608:	63 e0       	ldi	r22, 0x03	; 3
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     616:	08 95       	ret
                }
                break;

            case ('5'):

                DIO_voidGetPinValue(DIO_PORTD, DIO_PIN2, &led_status);
     618:	4a e9       	ldi	r20, 0x9A	; 154
     61a:	53 e0       	ldi	r21, 0x03	; 3
     61c:	62 e0       	ldi	r22, 0x02	; 2
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidGetPinValue>
                LCD_voidClear();
     624:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
                if (led_status == 1)
     628:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <led_status>
     62c:	81 30       	cpi	r24, 0x01	; 1
     62e:	f9 f4       	brne	.+62     	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	93 e0       	ldi	r25, 0x03	; 3
     634:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     638:	80 ec       	ldi	r24, 0xC0	; 192
     63a:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
     63e:	8f e7       	ldi	r24, 0x7F	; 127
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     646:	04 c0       	rjmp	.+8      	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     648:	81 e6       	ldi	r24, 0x61	; 97
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                if (led_status == 1)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is On");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It Off");
                    while (local_lightStatus == KPD_Not_Pressed)
     650:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     654:	8f 3f       	cpi	r24, 0xFF	; 255
     656:	c1 f3       	breq	.-16     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     658:	81 33       	cpi	r24, 0x31	; 49
     65a:	29 f4       	brne	.+10     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
                    {
                        LED_voidOff(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     65c:	41 e0       	ldi	r20, 0x01	; 1
     65e:	62 e0       	ldi	r22, 0x02	; 2
     660:	83 e0       	ldi	r24, 0x03	; 3
     662:	0e 94 b3 07 	call	0xf66	; 0xf66 <LED_voidOff>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     66c:	08 95       	ret
                }
                else if (led_status == 0)
     66e:	81 11       	cpse	r24, r1
     670:	7d c1       	rjmp	.+762    	; 0x96c <__stack+0x10d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
     672:	84 e1       	ldi	r24, 0x14	; 20
     674:	93 e0       	ldi	r25, 0x03	; 3
     676:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    LCD_voidSendCommand(Write_SecondLine);
     67a:	80 ec       	ldi	r24, 0xC0	; 192
     67c:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
     680:	8f e9       	ldi	r24, 0x9F	; 159
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
                    while (local_lightStatus == KPD_Not_Pressed)
     688:	04 c0       	rjmp	.+8      	; 0x692 <__EEPROM_REGION_LENGTH__+0x292>
                    {
                        KPD_voidGetValue(&local_lightStatus);
     68a:	81 e6       	ldi	r24, 0x61	; 97
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
                else if (led_status == 0)
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 5 is OFF");
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1-To Turn It On");
                    while (local_lightStatus == KPD_Not_Pressed)
     692:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     696:	8f 3f       	cpi	r24, 0xFF	; 255
     698:	c1 f3       	breq	.-16     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
                    {
                        KPD_voidGetValue(&local_lightStatus);
                    }

                    if (local_lightStatus == '1')
     69a:	81 33       	cpi	r24, 0x31	; 49
     69c:	29 f4       	brne	.+10     	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
                    {
                        LED_voidOn(DIO_PORTD, DIO_PIN2, LED_FORWARD_CONNECTION);
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	62 e0       	ldi	r22, 0x02	; 2
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LED_voidOn>
                    }
                    local_lightStatus = KPD_Not_Pressed;
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <local_lightStatus>
     6ae:	08 95       	ret
                
			// if the user choose light 6 (DIMMER LED)

            case ('6'):

                LCD_voidClear();
     6b0:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
				
                if (dimmer_brightness > 0)
     6b4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <dimmer_brightness>
     6b8:	88 23       	and	r24, r24
     6ba:	09 f4       	brne	.+2      	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
     6bc:	82 c0       	rjmp	.+260    	; 0x7c2 <__EEPROM_REGION_LENGTH__+0x3c2>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is On");
     6be:	83 e2       	ldi	r24, 0x23	; 35
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	33 ed       	ldi	r19, 0xD3	; 211
     6ca:	80 e3       	ldi	r24, 0x30	; 48
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	30 40       	sbci	r19, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <__EEPROM_REGION_LENGTH__+0x2d6>
     6d6:	00 00       	nop
					_delay_ms(1000);
					LCD_voidClear();
     6d8:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
     6dc:	81 e3       	ldi	r24, 0x31	; 49
     6de:	93 e0       	ldi	r25, 0x03	; 3
     6e0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     6e4:	6d e0       	ldi	r22, 0x0D	; 13
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
     6ec:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
     6fa:	80 ec       	ldi	r24, 0xC0	; 192
     6fc:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
     700:	80 e4       	ldi	r24, 0x40	; 64
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
     708:	56 c0       	rjmp	.+172    	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
					readjust_brightness:
					while (local_lightStatus == KPD_Not_Pressed)
					{
						KPD_voidGetValue(&local_lightStatus);
     70a:	81 e6       	ldi	r24, 0x61	; 97
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
						if (local_lightStatus == '1')
     712:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     716:	81 33       	cpi	r24, 0x31	; 49
     718:	59 f5       	brne	.+86     	; 0x770 <__EEPROM_REGION_LENGTH__+0x370>
						{
							dimmer_brightness += 10;
     71a:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     71e:	66 5f       	subi	r22, 0xF6	; 246
     720:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
     72e:	ab 01       	movw	r20, r22
     730:	bc 01       	movw	r22, r24
     732:	88 ee       	ldi	r24, 0xE8	; 232
     734:	93 e0       	ldi	r25, 0x03	; 3
     736:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     73a:	6d e0       	ldi	r22, 0x0D	; 13
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     742:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
     750:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <dimmer_brightness>
     754:	85 36       	cpi	r24, 0x65	; 101
     756:	78 f1       	brcs	.+94     	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
							{
								dimmer_brightness = 100;
     758:	84 e6       	ldi	r24, 0x64	; 100
     75a:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	68 ec       	ldi	r22, 0xC8	; 200
     764:	72 e4       	ldi	r23, 0x42	; 66
     766:	88 ee       	ldi	r24, 0xE8	; 232
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <PWM_voidGenerateChannel_1A>
     76e:	23 c0       	rjmp	.+70     	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
							}
							goto readjust_brightness;
							
						}
						else if (local_lightStatus == '2')
     770:	82 33       	cpi	r24, 0x32	; 50
     772:	e1 f4       	brne	.+56     	; 0x7ac <__EEPROM_REGION_LENGTH__+0x3ac>
						{
							dimmer_brightness -= 10;
     774:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     778:	6a 50       	subi	r22, 0x0A	; 10
     77a:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
     788:	ab 01       	movw	r20, r22
     78a:	bc 01       	movw	r22, r24
     78c:	88 ee       	ldi	r24, 0xE8	; 232
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     794:	6d e0       	ldi	r22, 0x0D	; 13
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     79c:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							goto readjust_brightness;
     7aa:	05 c0       	rjmp	.+10     	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
						}
						else if (local_lightStatus == '0')
     7ac:	80 33       	cpi	r24, 0x30	; 48
     7ae:	19 f4       	brne	.+6      	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
						{
							LCD_voidClear();
     7b0:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
							break;
     7b4:	08 95       	ret
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					readjust_brightness:
					while (local_lightStatus == KPD_Not_Pressed)
     7b6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     7ba:	8f 3f       	cpi	r24, 0xFF	; 255
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <__EEPROM_REGION_LENGTH__+0x3c0>
     7be:	a5 cf       	rjmp	.-182    	; 0x70a <__EEPROM_REGION_LENGTH__+0x30a>
     7c0:	08 95       	ret
						}						
						
					}
					
                }
                else if (led_status == 0)
     7c2:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <led_status>
     7c6:	81 11       	cpse	r24, r1
     7c8:	d1 c0       	rjmp	.+418    	; 0x96c <__stack+0x10d>
                {
                    LCD_voidDisplayStringDelay((u8 *)"Light 6 is OFF");
     7ca:	80 e5       	ldi	r24, 0x50	; 80
     7cc:	93 e0       	ldi	r25, 0x03	; 3
     7ce:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
     7d2:	9f ef       	ldi	r25, 0xFF	; 255
     7d4:	23 ed       	ldi	r18, 0xD3	; 211
     7d6:	30 e3       	ldi	r19, 0x30	; 48
     7d8:	91 50       	subi	r25, 0x01	; 1
     7da:	20 40       	sbci	r18, 0x00	; 0
     7dc:	30 40       	sbci	r19, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <__EEPROM_REGION_LENGTH__+0x3d8>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <__EEPROM_REGION_LENGTH__+0x3e2>
     7e2:	00 00       	nop
					_delay_ms(1000);
                    LCD_voidClear();
     7e4:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
					LCD_voidDisplayString("Brightness:  %");
     7e8:	81 e3       	ldi	r24, 0x31	; 49
     7ea:	93 e0       	ldi	r25, 0x03	; 3
     7ec:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     7f0:	6d e0       	ldi	r22, 0x0D	; 13
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
					LCD_voidDisplayNumber(dimmer_brightness);
     7f8:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
                    LCD_voidSendCommand(Write_SecondLine);
     806:	80 ec       	ldi	r24, 0xC0	; 192
     808:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
					while (local_lightStatus == KPD_Not_Pressed)
     814:	57 c0       	rjmp	.+174    	; 0x8c4 <__stack+0x65>
					{
						KPD_voidGetValue(&local_lightStatus);
     816:	81 e6       	ldi	r24, 0x61	; 97
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
						if (local_lightStatus == '1')
     81e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     822:	81 33       	cpi	r24, 0x31	; 49
     824:	61 f5       	brne	.+88     	; 0x87e <__stack+0x1f>
						{
							dimmer_brightness += 10;
     826:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     82a:	66 5f       	subi	r22, 0xF6	; 246
     82c:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
     83a:	ab 01       	movw	r20, r22
     83c:	bc 01       	movw	r22, r24
     83e:	88 ee       	ldi	r24, 0xE8	; 232
     840:	93 e0       	ldi	r25, 0x03	; 3
     842:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     846:	6d e0       	ldi	r22, 0x0D	; 13
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     84e:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
							if (dimmer_brightness > 100)
     85c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <dimmer_brightness>
     860:	85 36       	cpi	r24, 0x65	; 101
     862:	08 f4       	brcc	.+2      	; 0x866 <__stack+0x7>
     864:	a8 cf       	rjmp	.-176    	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
							{
								dimmer_brightness = 100;
     866:	84 e6       	ldi	r24, 0x64	; 100
     868:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <dimmer_brightness>
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	68 ec       	ldi	r22, 0xC8	; 200
     872:	72 e4       	ldi	r23, 0x42	; 66
     874:	88 ee       	ldi	r24, 0xE8	; 232
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <PWM_voidGenerateChannel_1A>
     87c:	9c cf       	rjmp	.-200    	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
							}
							goto readjust_brightness;
						}
						else if (local_lightStatus == '2')
     87e:	82 33       	cpi	r24, 0x32	; 50
     880:	e1 f4       	brne	.+56     	; 0x8ba <__stack+0x5b>
						{
							dimmer_brightness -= 10;
     882:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     886:	6a 50       	subi	r22, 0x0A	; 10
     888:	60 93 99 03 	sts	0x0399, r22	; 0x800399 <dimmer_brightness>
							PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
     896:	ab 01       	movw	r20, r22
     898:	bc 01       	movw	r22, r24
     89a:	88 ee       	ldi	r24, 0xE8	; 232
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <PWM_voidGenerateChannel_1A>
							LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
     8a2:	6d e0       	ldi	r22, 0x0D	; 13
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
							LCD_voidDisplayNumber(dimmer_brightness);
     8aa:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <dimmer_brightness>
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
							if (dimmer_brightness < 0)
							{
								dimmer_brightness = 0;
								PWM_voidGenerateChannel_1A(1000, dimmer_brightness);
							}
							goto readjust_brightness;
     8b8:	7e cf       	rjmp	.-260    	; 0x7b6 <__EEPROM_REGION_LENGTH__+0x3b6>
						}
						else if (local_lightStatus == '0')
     8ba:	80 33       	cpi	r24, 0x30	; 48
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <__stack+0x65>
						{
							LCD_voidClear();
     8be:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
							break;
     8c2:	08 95       	ret
					LCD_voidDisplayString("Brightness:  %");
					LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,13);
					LCD_voidDisplayNumber(dimmer_brightness);
                    LCD_voidSendCommand(Write_SecondLine);
                    LCD_voidDisplayStringDelay((u8 *)"1)+10 2)-10 0)H");
					while (local_lightStatus == KPD_Not_Pressed)
     8c4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <local_lightStatus>
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	09 f4       	brne	.+2      	; 0x8ce <__stack+0x6f>
     8cc:	a4 cf       	rjmp	.-184    	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     8ce:	08 95       	ret
            }
			break;

			case ('3'):
			
				LCD_voidClear();
     8d0:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
				ADC_voidGetDigitalValue(ADC_CHANNEL_0, &local_temp);
     8d4:	68 e9       	ldi	r22, 0x98	; 152
     8d6:	73 e0       	ldi	r23, 0x03	; 3
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	0e 94 21 08 	call	0x1042	; 0x1042 <ADC_voidGetDigitalValue>
				LCD_voidSendCommand(Write_FirstLine);
     8de:	80 e8       	ldi	r24, 0x80	; 128
     8e0:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
				LCD_voidDisplayString((u8 *)"Room Temp:  c");
     8e4:	8f e5       	ldi	r24, 0x5F	; 95
     8e6:	93 e0       	ldi	r25, 0x03	; 3
     8e8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
     8ec:	6b e0       	ldi	r22, 0x0B	; 11
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_voidGoTOSpecificPosition>
				LCD_voidDisplayNumber(local_temp);
     8f4:	60 91 98 03 	lds	r22, 0x0398	; 0x800398 <__data_end>
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 03 07 	call	0xe06	; 0xe06 <LCD_voidDisplayNumber>
				LCD_voidDisplayChar('c');
     902:	83 e6       	ldi	r24, 0x63	; 99
     904:	0e 94 98 06 	call	0xd30	; 0xd30 <LCD_voidDisplayChar>
				LCD_voidSendCommand(Write_SecondLine);
     908:	80 ec       	ldi	r24, 0xC0	; 192
     90a:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
     90e:	8d e6       	ldi	r24, 0x6D	; 109
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <LCD_voidDisplayStringDelay>
				while(local_KPDIdleValue==KPD_Not_Pressed)
     916:	06 c0       	rjmp	.+12     	; 0x924 <__stack+0xc5>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
     918:	80 e6       	ldi	r24, 0x60	; 96
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 1c 05 	call	0xa38	; 0xa38 <KPD_voidGetValue>
					Display_temp();
     920:	0e 94 1b 01 	call	0x236	; 0x236 <Display_temp>
				LCD_voidGoTOSpecificPosition(LCD_LINE_ONE,11);
				LCD_voidDisplayNumber(local_temp);
				LCD_voidDisplayChar('c');
				LCD_voidSendCommand(Write_SecondLine);
				LCD_voidDisplayStringDelay((u8 *)"0-go to home");
				while(local_KPDIdleValue==KPD_Not_Pressed)
     924:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     928:	8f 3f       	cpi	r24, 0xFF	; 255
     92a:	b1 f3       	breq	.-20     	; 0x918 <__stack+0xb9>
				{
					KPD_voidGetValue(&local_KPDIdleValue);
					Display_temp();
				}	
				if (local_KPDIdleValue=='0')
     92c:	80 33       	cpi	r24, 0x30	; 48
     92e:	f1 f4       	brne	.+60     	; 0x96c <__stack+0x10d>
				{
					LCD_voidClear();
     930:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
     934:	08 95       	ret
				}
			break;

			case ('4'):
			LCD_voidClear();
     936:	0e 94 56 07 	call	0xeac	; 0xeac <LCD_voidClear>
			LCD_voidDisplayString("Door is opening");
     93a:	8a e7       	ldi	r24, 0x7A	; 122
     93c:	93 e0       	ldi	r25, 0x03	; 3
     93e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
			SERVO_voidStartByAngle(90);
     942:	60 e0       	ldi	r22, 0x00	; 0
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	84 eb       	ldi	r24, 0xB4	; 180
     948:	92 e4       	ldi	r25, 0x42	; 66
     94a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <SERVO_voidStartByAngle>
     94e:	8a ea       	ldi	r24, 0xAA	; 170
     950:	96 ee       	ldi	r25, 0xE6	; 230
     952:	26 e9       	ldi	r18, 0x96	; 150
     954:	31 e0       	ldi	r19, 0x01	; 1
     956:	81 50       	subi	r24, 0x01	; 1
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	20 40       	sbci	r18, 0x00	; 0
     95c:	30 40       	sbci	r19, 0x00	; 0
     95e:	d9 f7       	brne	.-10     	; 0x956 <__stack+0xf7>
     960:	00 00       	nop
			_delay_ms(10000);
			SERVO_voidStartByAngle(0);
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	cb 01       	movw	r24, r22
     968:	0e 94 c6 07 	call	0xf8c	; 0xf8c <SERVO_voidStartByAngle>
     96c:	08 95       	ret

0000096e <BL_voidInit>:



void BL_voidInit(void)
{
	UART_voidInit();
     96e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <UART_voidInit>
     972:	08 95       	ret

00000974 <EEPROM_voidInit>:
	TWI_voidSendStopCondition();
	_delay_ms(5);
	
	
	
}
     974:	0e 94 1f 0b 	call	0x163e	; 0x163e <TWI_voidInitMaster>
     978:	08 95       	ret

0000097a <EEPROM_voidWritePage>:

	void EEPROM_voidWritePage(u16 copy_u16WordAdress,u8* copy_pu8TxData)
	{
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
		if(copy_pu8TxData!=NULL)
     982:	61 15       	cp	r22, r1
     984:	71 05       	cpc	r23, r1
     986:	f9 f0       	breq	.+62     	; 0x9c6 <EEPROM_voidWritePage+0x4c>
     988:	8b 01       	movw	r16, r22
     98a:	d8 2f       	mov	r29, r24
		{
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
     98c:	c9 2f       	mov	r28, r25
     98e:	c0 65       	ori	r28, 0x50	; 80
			TWI_voidSendStartCondition();
     990:	0e 94 2b 0b 	call	0x1656	; 0x1656 <TWI_voidSendStartCondition>
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
     994:	8c 2f       	mov	r24, r28
     996:	0e 94 40 0b 	call	0x1680	; 0x1680 <TWI_voidSendSlaveAddWithWrite>
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
     99a:	8d 2f       	mov	r24, r29
     99c:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_voidTransmitMasterDataByte>
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     9a0:	c0 e0       	ldi	r28, 0x00	; 0
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <EEPROM_voidWritePage+0x38>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
     9a4:	f8 01       	movw	r30, r16
     9a6:	ec 0f       	add	r30, r28
     9a8:	f1 1d       	adc	r31, r1
     9aa:	80 81       	ld	r24, Z
     9ac:	0e 94 55 0b 	call	0x16aa	; 0x16aa <TWI_voidTransmitMasterDataByte>
			u8 Local_u8WordCounter,Local_u8DeviceAddress = ( copy_u16WordAdress>>8)|EEPROM_FIXED_ADDRESS;
			TWI_voidSendStartCondition();
			TWI_voidSendSlaveAddWithWrite(Local_u8DeviceAddress);
			TWI_voidTransmitMasterDataByte((u8)copy_u16WordAdress);
			
			for(Local_u8WordCounter=0;Local_u8WordCounter<EEPROM_MAX_PAGE_SIZE;Local_u8WordCounter++)
     9b0:	cf 5f       	subi	r28, 0xFF	; 255
     9b2:	c8 30       	cpi	r28, 0x08	; 8
     9b4:	b8 f3       	brcs	.-18     	; 0x9a4 <EEPROM_voidWritePage+0x2a>
			{
				TWI_voidTransmitMasterDataByte(copy_pu8TxData[Local_u8WordCounter]);
					
			}
			TWI_voidSendStopCondition();
     9b6:	0e 94 39 0b 	call	0x1672	; 0x1672 <TWI_voidSendStopCondition>
     9ba:	8f e1       	ldi	r24, 0x1F	; 31
     9bc:	9e e4       	ldi	r25, 0x4E	; 78
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <EEPROM_voidWritePage+0x44>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <EEPROM_voidWritePage+0x4a>
     9c4:	00 00       	nop
		{
			//error state
		}
		
		
	}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	08 95       	ret

000009d0 <KPD_voidInit>:


void	KPD_voidInit(void)
{
	//Setting Columns to output
	DIO_voidSetPinDirection(KPD_C0_Port,KPD_C0_Pin,DIO_PIN_OUTPUT);
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	64 e0       	ldi	r22, 0x04	; 4
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C1_Port,KPD_C1_Pin,DIO_PIN_OUTPUT);
     9da:	41 e0       	ldi	r20, 0x01	; 1
     9dc:	65 e0       	ldi	r22, 0x05	; 5
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_C2_Port,KPD_C2_Pin,DIO_PIN_OUTPUT);
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	66 e0       	ldi	r22, 0x06	; 6
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(KPD_C3_Port,KPD_C3_Pin,DIO_PIN_OUTPUT);
	
	
	//Setting Rows To Input
	DIO_voidSetPinDirection(KPD_R0_Port,KPD_R0_Pin,DIO_PIN_INPUT);
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	63 e0       	ldi	r22, 0x03	; 3
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R1_Port,KPD_R1_Pin,DIO_PIN_INPUT);
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	64 e0       	ldi	r22, 0x04	; 4
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R2_Port,KPD_R2_Pin,DIO_PIN_INPUT);
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	65 e0       	ldi	r22, 0x05	; 5
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_R3_Port,KPD_R3_Pin,DIO_PIN_INPUT);
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	66 e0       	ldi	r22, 0x06	; 6
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	
	//Setting Rows For Pull UP
	DIO_voidActivePinInPullUpResistance(KPD_R0_Port,KPD_R0_Pin);
     a16:	63 e0       	ldi	r22, 0x03	; 3
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R1_Port,KPD_R1_Pin);
     a1e:	64 e0       	ldi	r22, 0x04	; 4
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R2_Port,KPD_R2_Pin);
     a26:	65 e0       	ldi	r22, 0x05	; 5
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidActivePinInPullUpResistance>
	DIO_voidActivePinInPullUpResistance(KPD_R3_Port,KPD_R3_Pin);
     a2e:	66 e0       	ldi	r22, 0x06	; 6
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	0e 94 77 09 	call	0x12ee	; 0x12ee <DIO_voidActivePinInPullUpResistance>
     a36:	08 95       	ret

00000a38 <KPD_voidGetValue>:
}


void	KPD_voidGetValue(u8* copy_pu8value)
{
     a38:	6f 92       	push	r6
     a3a:	7f 92       	push	r7
     a3c:	8f 92       	push	r8
     a3e:	9f 92       	push	r9
     a40:	af 92       	push	r10
     a42:	bf 92       	push	r11
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	6b 97       	sbiw	r28, 0x1b	; 27
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
	if (copy_pu8value != NULL)
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	09 f4       	brne	.+2      	; 0xa6a <KPD_voidGetValue+0x32>
     a68:	7e c0       	rjmp	.+252    	; 0xb66 <KPD_voidGetValue+0x12e>
     a6a:	5c 01       	movw	r10, r24
	{
		u8	Local_u8ColsPort[3]={KPD_C0_Port,KPD_C1_Port,KPD_C2_Port};
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	88 8f       	std	Y+24, r24	; 0x18
     a70:	89 8f       	std	Y+25, r24	; 0x19
     a72:	8a 8f       	std	Y+26, r24	; 0x1a
		u8	Local_u8ColsPins[3]={KPD_C0_Pin,KPD_C1_Pin,KPD_C2_Pin};
     a74:	34 e0       	ldi	r19, 0x04	; 4
     a76:	3d 8b       	std	Y+21, r19	; 0x15
     a78:	25 e0       	ldi	r18, 0x05	; 5
     a7a:	2e 8b       	std	Y+22, r18	; 0x16
     a7c:	96 e0       	ldi	r25, 0x06	; 6
     a7e:	9f 8b       	std	Y+23, r25	; 0x17
									 
		u8	Local_u8RowsPort[4]={KPD_R0_Port,KPD_R1_Port,KPD_R2_Port,KPD_R3_Port};
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	89 8b       	std	Y+17, r24	; 0x11
     a84:	8a 8b       	std	Y+18, r24	; 0x12
     a86:	8b 8b       	std	Y+19, r24	; 0x13
     a88:	8c 8b       	std	Y+20, r24	; 0x14
		u8	Local_u8RowsPins[4]={KPD_R0_Pin,KPD_R1_Pin,KPD_R2_Pin,KPD_R3_Pin};
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	8d 87       	std	Y+13, r24	; 0x0d
     a8e:	3e 87       	std	Y+14, r19	; 0x0e
     a90:	2f 87       	std	Y+15, r18	; 0x0f
     a92:	98 8b       	std	Y+16, r25	; 0x10
		u8	Local_Keys[4][3]   =KPD_Keys;
     a94:	8c e0       	ldi	r24, 0x0C	; 12
     a96:	e5 e6       	ldi	r30, 0x65	; 101
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	de 01       	movw	r26, r28
     a9c:	11 96       	adiw	r26, 0x01	; 1
     a9e:	01 90       	ld	r0, Z+
     aa0:	0d 92       	st	X+, r0
     aa2:	8a 95       	dec	r24
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <KPD_voidGetValue+0x66>
		
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	f5 01       	movw	r30, r10
     aaa:	80 83       	st	Z, r24
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     aac:	81 2c       	mov	r8, r1
     aae:	57 c0       	rjmp	.+174    	; 0xb5e <KPD_voidGetValue+0x126>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
     ab0:	c8 2c       	mov	r12, r8
     ab2:	d1 2c       	mov	r13, r1
     ab4:	e5 e1       	ldi	r30, 0x15	; 21
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	ec 0f       	add	r30, r28
     aba:	fd 1f       	adc	r31, r29
     abc:	ec 0d       	add	r30, r12
     abe:	fd 1d       	adc	r31, r13
     ac0:	60 80       	ld	r6, Z
     ac2:	e8 e1       	ldi	r30, 0x18	; 24
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	ec 0f       	add	r30, r28
     ac8:	fd 1f       	adc	r31, r29
     aca:	ec 0d       	add	r30, r12
     acc:	fd 1d       	adc	r31, r13
     ace:	70 80       	ld	r7, Z
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	66 2d       	mov	r22, r6
     ad4:	87 2d       	mov	r24, r7
     ad6:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     ada:	10 e0       	ldi	r17, 0x00	; 0
     adc:	38 c0       	rjmp	.+112    	; 0xb4e <KPD_voidGetValue+0x116>
			{
				//Get Row Pin Value
				DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     ade:	e1 2e       	mov	r14, r17
     ae0:	f1 2c       	mov	r15, r1
     ae2:	ed e0       	ldi	r30, 0x0D	; 13
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	ec 0f       	add	r30, r28
     ae8:	fd 1f       	adc	r31, r29
     aea:	ee 0d       	add	r30, r14
     aec:	ff 1d       	adc	r31, r15
     aee:	00 81       	ld	r16, Z
     af0:	e1 e1       	ldi	r30, 0x11	; 17
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	ec 0f       	add	r30, r28
     af6:	fd 1f       	adc	r31, r29
     af8:	ee 0d       	add	r30, r14
     afa:	ff 1d       	adc	r31, r15
     afc:	90 80       	ld	r9, Z
     afe:	ae 01       	movw	r20, r28
     b00:	45 5e       	subi	r20, 0xE5	; 229
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	60 2f       	mov	r22, r16
     b06:	89 2d       	mov	r24, r9
     b08:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
     b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b0e:	81 11       	cpse	r24, r1
     b10:	1d c0       	rjmp	.+58     	; 0xb4c <KPD_voidGetValue+0x114>
     b12:	07 c0       	rjmp	.+14     	; 0xb22 <KPD_voidGetValue+0xea>
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
     b14:	ae 01       	movw	r20, r28
     b16:	45 5e       	subi	r20, 0xE5	; 229
     b18:	5f 4f       	sbci	r21, 0xFF	; 255
     b1a:	60 2f       	mov	r22, r16
     b1c:	89 2d       	mov	r24, r9
     b1e:	0e 94 3c 09 	call	0x1278	; 0x1278 <DIO_voidGetPinValue>
				
				// Is Pressed ?
				if (0==Local_u8RowValue)
				{
					//Busy wait for button release
					while(0==Local_u8RowValue)
     b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b24:	88 23       	and	r24, r24
     b26:	b1 f3       	breq	.-20     	; 0xb14 <KPD_voidGetValue+0xdc>
					{
						DIO_voidGetPinValue(Local_u8RowsPort[Local_u8RowsCounter] ,Local_u8RowsPins[Local_u8RowsCounter], &Local_u8RowValue );
					}
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
     b28:	c7 01       	movw	r24, r14
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	e8 0e       	add	r14, r24
     b30:	f9 1e       	adc	r15, r25
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	8c 0f       	add	r24, r28
     b38:	9d 1f       	adc	r25, r29
     b3a:	e8 0e       	add	r14, r24
     b3c:	f9 1e       	adc	r15, r25
     b3e:	f7 01       	movw	r30, r14
     b40:	ec 0d       	add	r30, r12
     b42:	fd 1d       	adc	r31, r13
     b44:	80 81       	ld	r24, Z
     b46:	f5 01       	movw	r30, r10
     b48:	80 83       	st	Z, r24
     b4a:	0d c0       	rjmp	.+26     	; 0xb66 <KPD_voidGetValue+0x12e>
		{
			//Activate Each Column
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter] , Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_LOW);
			
			//LOOP Rows
			for(Local_u8RowsCounter=0 ; Local_u8RowsCounter<4 ; Local_u8RowsCounter++)
     b4c:	1f 5f       	subi	r17, 0xFF	; 255
     b4e:	14 30       	cpi	r17, 0x04	; 4
     b50:	30 f2       	brcs	.-116    	; 0xade <KPD_voidGetValue+0xa6>
					//return value
					*copy_pu8value = Local_Keys[Local_u8RowsCounter][Local_u8ColsCounter];
					return;
				}
			}
			DIO_voidSetPinValue(Local_u8ColsPort[Local_u8ColsCounter],Local_u8ColsPins[Local_u8ColsCounter],DIO_PIN_HIGH);
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	66 2d       	mov	r22, r6
     b56:	87 2d       	mov	r24, r7
     b58:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
		u8	Local_u8ColsCounter,Local_u8RowsCounter;
		u8	Local_u8RowValue;
		
		*copy_pu8value = KPD_Not_Pressed;
		//LOOP Columns
		for (Local_u8ColsCounter=0 ; Local_u8ColsCounter<3 ; Local_u8ColsCounter++)
     b5c:	83 94       	inc	r8
     b5e:	f2 e0       	ldi	r31, 0x02	; 2
     b60:	f8 15       	cp	r31, r8
     b62:	08 f0       	brcs	.+2      	; 0xb66 <KPD_voidGetValue+0x12e>
     b64:	a5 cf       	rjmp	.-182    	; 0xab0 <KPD_voidGetValue+0x78>
	}
	else
	{
		
	}
}
     b66:	6b 96       	adiw	r28, 0x1b	; 27
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	1f 91       	pop	r17
     b78:	0f 91       	pop	r16
     b7a:	ff 90       	pop	r15
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	7f 90       	pop	r7
     b8c:	6f 90       	pop	r6
     b8e:	08 95       	ret

00000b90 <PRV_voidWriteHalfPort>:
		
		/* Enable Pulse *//* H => L */
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
		_delay_ms(1);
		DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
}
     b90:	cf 93       	push	r28
     b92:	c8 2f       	mov	r28, r24
     b94:	80 ff       	sbrs	r24, 0
     b96:	06 c0       	rjmp	.+12     	; 0xba4 <PRV_voidWriteHalfPort+0x14>
     b98:	41 e0       	ldi	r20, 0x01	; 1
     b9a:	64 e0       	ldi	r22, 0x04	; 4
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <PRV_voidWriteHalfPort+0x1e>
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	64 e0       	ldi	r22, 0x04	; 4
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     bae:	c1 ff       	sbrs	r28, 1
     bb0:	06 c0       	rjmp	.+12     	; 0xbbe <PRV_voidWriteHalfPort+0x2e>
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	65 e0       	ldi	r22, 0x05	; 5
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <PRV_voidWriteHalfPort+0x38>
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	65 e0       	ldi	r22, 0x05	; 5
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     bc8:	c2 ff       	sbrs	r28, 2
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <PRV_voidWriteHalfPort+0x48>
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	66 e0       	ldi	r22, 0x06	; 6
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <PRV_voidWriteHalfPort+0x52>
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	66 e0       	ldi	r22, 0x06	; 6
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     be2:	c3 ff       	sbrs	r28, 3
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <PRV_voidWriteHalfPort+0x62>
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	67 e0       	ldi	r22, 0x07	; 7
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <PRV_voidWriteHalfPort+0x6c>
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	67 e0       	ldi	r22, 0x07	; 7
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <LCD_voidSendCommand>:
     c00:	cf 93       	push	r28
     c02:	c8 2f       	mov	r28, r24
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	62 e0       	ldi	r22, 0x02	; 2
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     c18:	8c 2f       	mov	r24, r28
     c1a:	82 95       	swap	r24
     c1c:	8f 70       	andi	r24, 0x0F	; 15
     c1e:	0e 94 c8 05 	call	0xb90	; 0xb90 <PRV_voidWriteHalfPort>
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	63 e0       	ldi	r22, 0x03	; 3
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     c2c:	8f e9       	ldi	r24, 0x9F	; 159
     c2e:	9f e0       	ldi	r25, 0x0F	; 15
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <LCD_voidSendCommand+0x30>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <LCD_voidSendCommand+0x36>
     c36:	00 00       	nop
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	63 e0       	ldi	r22, 0x03	; 3
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     c42:	8c 2f       	mov	r24, r28
     c44:	0e 94 c8 05 	call	0xb90	; 0xb90 <PRV_voidWriteHalfPort>
     c48:	41 e0       	ldi	r20, 0x01	; 1
     c4a:	63 e0       	ldi	r22, 0x03	; 3
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     c52:	8f e9       	ldi	r24, 0x9F	; 159
     c54:	9f e0       	ldi	r25, 0x0F	; 15
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LCD_voidSendCommand+0x56>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <LCD_voidSendCommand+0x5c>
     c5c:	00 00       	nop
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	63 e0       	ldi	r22, 0x03	; 3
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <LCD_voidInit>:
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	63 e0       	ldi	r22, 0x03	; 3
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	64 e0       	ldi	r22, 0x04	; 4
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     c94:	41 e0       	ldi	r20, 0x01	; 1
     c96:	65 e0       	ldi	r22, 0x05	; 5
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	66 e0       	ldi	r22, 0x06	; 6
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     ca8:	41 e0       	ldi	r20, 0x01	; 1
     caa:	67 e0       	ldi	r22, 0x07	; 7
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     cb2:	2f e7       	ldi	r18, 0x7F	; 127
     cb4:	85 eb       	ldi	r24, 0xB5	; 181
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	21 50       	subi	r18, 0x01	; 1
     cba:	80 40       	sbci	r24, 0x00	; 0
     cbc:	90 40       	sbci	r25, 0x00	; 0
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <LCD_voidInit+0x4c>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <LCD_voidInit+0x56>
     cc2:	00 00       	nop
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	62 e0       	ldi	r22, 0x02	; 2
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	0e 94 c8 05 	call	0xb90	; 0xb90 <PRV_voidWriteHalfPort>
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     ce8:	8f e9       	ldi	r24, 0x9F	; 159
     cea:	9f e0       	ldi	r25, 0x0F	; 15
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <LCD_voidInit+0x80>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <LCD_voidInit+0x86>
     cf2:	00 00       	nop
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	63 e0       	ldi	r22, 0x03	; 3
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     cfe:	88 e2       	ldi	r24, 0x28	; 40
     d00:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
     d04:	90 ef       	ldi	r25, 0xF0	; 240
     d06:	9a 95       	dec	r25
     d08:	f1 f7       	brne	.-4      	; 0xd06 <LCD_voidInit+0x9a>
     d0a:	8c e0       	ldi	r24, 0x0C	; 12
     d0c:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
     d10:	20 ef       	ldi	r18, 0xF0	; 240
     d12:	2a 95       	dec	r18
     d14:	f1 f7       	brne	.-4      	; 0xd12 <LCD_voidInit+0xa6>
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
     d1c:	8f e3       	ldi	r24, 0x3F	; 63
     d1e:	9f e1       	ldi	r25, 0x1F	; 31
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <LCD_voidInit+0xb4>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <LCD_voidInit+0xba>
     d26:	00 00       	nop
     d28:	86 e0       	ldi	r24, 0x06	; 6
     d2a:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
     d2e:	08 95       	ret

00000d30 <LCD_voidDisplayChar>:
     d30:	cf 93       	push	r28
     d32:	c8 2f       	mov	r28, r24
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     d48:	8c 2f       	mov	r24, r28
     d4a:	82 95       	swap	r24
     d4c:	8f 70       	andi	r24, 0x0F	; 15
     d4e:	0e 94 c8 05 	call	0xb90	; 0xb90 <PRV_voidWriteHalfPort>
     d52:	41 e0       	ldi	r20, 0x01	; 1
     d54:	63 e0       	ldi	r22, 0x03	; 3
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     d5c:	8f e9       	ldi	r24, 0x9F	; 159
     d5e:	9f e0       	ldi	r25, 0x0F	; 15
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <LCD_voidDisplayChar+0x30>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <LCD_voidDisplayChar+0x36>
     d66:	00 00       	nop
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	63 e0       	ldi	r22, 0x03	; 3
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     d72:	8c 2f       	mov	r24, r28
     d74:	0e 94 c8 05 	call	0xb90	; 0xb90 <PRV_voidWriteHalfPort>
     d78:	41 e0       	ldi	r20, 0x01	; 1
     d7a:	63 e0       	ldi	r22, 0x03	; 3
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     d82:	8f e9       	ldi	r24, 0x9F	; 159
     d84:	9f e0       	ldi	r25, 0x0F	; 15
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <LCD_voidDisplayChar+0x56>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <LCD_voidDisplayChar+0x5c>
     d8c:	00 00       	nop
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	63 e0       	ldi	r22, 0x03	; 3
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <LCD_voidDisplayString>:
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	29 f4       	brne	.+10     	; 0xdb0 <LCD_voidDisplayString+0x14>
     da6:	0c c0       	rjmp	.+24     	; 0xdc0 <LCD_voidDisplayString+0x24>
     da8:	0e 94 98 06 	call	0xd30	; 0xd30 <LCD_voidDisplayChar>
     dac:	cf 5f       	subi	r28, 0xFF	; 255
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <LCD_voidDisplayString+0x18>
     db0:	8c 01       	movw	r16, r24
     db2:	c0 e0       	ldi	r28, 0x00	; 0
     db4:	f8 01       	movw	r30, r16
     db6:	ec 0f       	add	r30, r28
     db8:	f1 1d       	adc	r31, r1
     dba:	80 81       	ld	r24, Z
     dbc:	81 11       	cpse	r24, r1
     dbe:	f4 cf       	rjmp	.-24     	; 0xda8 <LCD_voidDisplayString+0xc>
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	08 95       	ret

00000dc8 <LCD_voidDisplayStringDelay>:
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	71 f4       	brne	.+28     	; 0xdee <LCD_voidDisplayStringDelay+0x26>
     dd2:	15 c0       	rjmp	.+42     	; 0xdfe <LCD_voidDisplayStringDelay+0x36>
     dd4:	0e 94 98 06 	call	0xd30	; 0xd30 <LCD_voidDisplayChar>
     dd8:	cf 5f       	subi	r28, 0xFF	; 255
     dda:	2f ef       	ldi	r18, 0xFF	; 255
     ddc:	80 e7       	ldi	r24, 0x70	; 112
     dde:	92 e0       	ldi	r25, 0x02	; 2
     de0:	21 50       	subi	r18, 0x01	; 1
     de2:	80 40       	sbci	r24, 0x00	; 0
     de4:	90 40       	sbci	r25, 0x00	; 0
     de6:	e1 f7       	brne	.-8      	; 0xde0 <LCD_voidDisplayStringDelay+0x18>
     de8:	00 c0       	rjmp	.+0      	; 0xdea <LCD_voidDisplayStringDelay+0x22>
     dea:	00 00       	nop
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <LCD_voidDisplayStringDelay+0x2a>
     dee:	8c 01       	movw	r16, r24
     df0:	c0 e0       	ldi	r28, 0x00	; 0
     df2:	f8 01       	movw	r30, r16
     df4:	ec 0f       	add	r30, r28
     df6:	f1 1d       	adc	r31, r1
     df8:	80 81       	ld	r24, Z
     dfa:	81 11       	cpse	r24, r1
     dfc:	eb cf       	rjmp	.-42     	; 0xdd4 <LCD_voidDisplayStringDelay+0xc>
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <LCD_voidDisplayNumber>:
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <LCD_voidDisplayNumber+0xa>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <LCD_voidDisplayNumber+0xc>
     e12:	1f 92       	push	r1
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	26 2f       	mov	r18, r22
     e1a:	10 e0       	ldi	r17, 0x00	; 0
     e1c:	08 c0       	rjmp	.+16     	; 0xe2e <LCD_voidDisplayNumber+0x28>
     e1e:	1f 5f       	subi	r17, 0xFF	; 255
     e20:	ed ec       	ldi	r30, 0xCD	; 205
     e22:	6e 9f       	mul	r22, r30
     e24:	61 2d       	mov	r22, r1
     e26:	11 24       	eor	r1, r1
     e28:	66 95       	lsr	r22
     e2a:	66 95       	lsr	r22
     e2c:	66 95       	lsr	r22
     e2e:	61 11       	cpse	r22, r1
     e30:	f6 cf       	rjmp	.-20     	; 0xe1e <LCD_voidDisplayNumber+0x18>
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	1a c0       	rjmp	.+52     	; 0xe6a <LCD_voidDisplayNumber+0x64>
     e36:	62 2f       	mov	r22, r18
     e38:	2a e0       	ldi	r18, 0x0A	; 10
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__udivmodsi4>
     e44:	73 2f       	mov	r23, r19
     e46:	84 2f       	mov	r24, r20
     e48:	95 2f       	mov	r25, r21
     e4a:	a0 2f       	mov	r26, r16
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	e1 2f       	mov	r30, r17
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ea 1b       	sub	r30, r26
     e56:	fb 0b       	sbc	r31, r27
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	4c 0f       	add	r20, r28
     e5e:	5d 1f       	adc	r21, r29
     e60:	e4 0f       	add	r30, r20
     e62:	f5 1f       	adc	r31, r21
     e64:	60 5d       	subi	r22, 0xD0	; 208
     e66:	60 83       	st	Z, r22
     e68:	0f 5f       	subi	r16, 0xFF	; 255
     e6a:	01 17       	cp	r16, r17
     e6c:	20 f3       	brcs	.-56     	; 0xe36 <LCD_voidDisplayNumber+0x30>
     e6e:	e1 e0       	ldi	r30, 0x01	; 1
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	ec 0f       	add	r30, r28
     e74:	fd 1f       	adc	r31, r29
     e76:	e1 0f       	add	r30, r17
     e78:	f1 1d       	adc	r31, r1
     e7a:	10 82       	st	Z, r1
     e7c:	10 e0       	ldi	r17, 0x00	; 0
     e7e:	03 c0       	rjmp	.+6      	; 0xe86 <LCD_voidDisplayNumber+0x80>
     e80:	0e 94 98 06 	call	0xd30	; 0xd30 <LCD_voidDisplayChar>
     e84:	1f 5f       	subi	r17, 0xFF	; 255
     e86:	e1 e0       	ldi	r30, 0x01	; 1
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	ec 0f       	add	r30, r28
     e8c:	fd 1f       	adc	r31, r29
     e8e:	e1 0f       	add	r30, r17
     e90:	f1 1d       	adc	r31, r1
     e92:	80 81       	ld	r24, Z
     e94:	81 11       	cpse	r24, r1
     e96:	f4 cf       	rjmp	.-24     	; 0xe80 <LCD_voidDisplayNumber+0x7a>
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	08 95       	ret

00000eac <LCD_voidClear>:
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	61 e0       	ldi	r22, 0x01	; 1
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	62 e0       	ldi	r22, 0x02	; 2
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	0e 94 c8 05 	call	0xb90	; 0xb90 <PRV_voidWriteHalfPort>
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	63 e0       	ldi	r22, 0x03	; 3
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     ed0:	8f e9       	ldi	r24, 0x9F	; 159
     ed2:	9f e0       	ldi	r25, 0x0F	; 15
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <LCD_voidClear+0x28>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <LCD_voidClear+0x2e>
     eda:	00 00       	nop
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	63 e0       	ldi	r22, 0x03	; 3
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	0e 94 c8 05 	call	0xb90	; 0xb90 <PRV_voidWriteHalfPort>
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	63 e0       	ldi	r22, 0x03	; 3
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     ef6:	8f e9       	ldi	r24, 0x9F	; 159
     ef8:	9f e0       	ldi	r25, 0x0F	; 15
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <LCD_voidClear+0x4e>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <LCD_voidClear+0x54>
     f00:	00 00       	nop
     f02:	40 e0       	ldi	r20, 0x00	; 0
     f04:	63 e0       	ldi	r22, 0x03	; 3
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     f0c:	08 95       	ret

00000f0e <LCD_voidGoTOSpecificPosition>:


void LCD_voidGoTOSpecificPosition(u8 copy_u8LineNumber,u8 copy_u8Position)
{
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
	if(copy_u8Position<40)
     f12:	68 32       	cpi	r22, 0x28	; 40
     f14:	a0 f4       	brcc	.+40     	; 0xf3e <LCD_voidGoTOSpecificPosition+0x30>
     f16:	c6 2f       	mov	r28, r22
     f18:	d8 2f       	mov	r29, r24
	{
		//cmnd to return cursor to home position
		LCD_voidSendCommand(0b00000010);
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
		
		switch(copy_u8LineNumber)
     f20:	d1 30       	cpi	r29, 0x01	; 1
     f22:	19 f0       	breq	.+6      	; 0xf2a <LCD_voidGoTOSpecificPosition+0x1c>
     f24:	d2 30       	cpi	r29, 0x02	; 2
     f26:	31 f0       	breq	.+12     	; 0xf34 <LCD_voidGoTOSpecificPosition+0x26>
     f28:	0a c0       	rjmp	.+20     	; 0xf3e <LCD_voidGoTOSpecificPosition+0x30>
		{
			case LCD_LINE_ONE:
			
			LCD_voidSendCommand(0b10000000|copy_u8Position);
     f2a:	8c 2f       	mov	r24, r28
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
		
			
			break;
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <LCD_voidGoTOSpecificPosition+0x30>
			
			case LCD_LINE_TWO:

			LCD_voidSendCommand(0b10000000|(copy_u8Position+0x40));
     f34:	80 e4       	ldi	r24, 0x40	; 64
     f36:	8c 0f       	add	r24, r28
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	0e 94 00 06 	call	0xc00	; 0xc00 <LCD_voidSendCommand>
		//error state
	}
	
	
	
}
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <LED_voidInit>:
#include"BIT_MATH.h"
#include"STD_TYPES.h"

void LED_voidInit	(u8 copy_u8LedPortId,u8 copy_u8LedPinId)
{
	DIO_voidSetPinDirection( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_OUTPUT);
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
     f4a:	08 95       	ret

00000f4c <LED_voidOn>:
}


void LED_voidOn		(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     f4c:	41 30       	cpi	r20, 0x01	; 1
     f4e:	19 f0       	breq	.+6      	; 0xf56 <LED_voidOn+0xa>
     f50:	42 30       	cpi	r20, 0x02	; 2
     f52:	29 f0       	breq	.+10     	; 0xf5e <LED_voidOn+0x12>
     f54:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
		break;
     f5c:	08 95       	ret
	
	case LED_REVERSE_CONNECTION:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     f64:	08 95       	ret

00000f66 <LED_voidOff>:
		break;
	}
}
void LED_voidOff	(u8 copy_u8LedPortId,u8 copy_u8LedPinId,u8 copy_u8LedConnectionType)
{
	switch(copy_u8LedConnectionType)
     f66:	41 30       	cpi	r20, 0x01	; 1
     f68:	19 f0       	breq	.+6      	; 0xf70 <LED_voidOff+0xa>
     f6a:	42 30       	cpi	r20, 0x02	; 2
     f6c:	29 f0       	breq	.+10     	; 0xf78 <LED_voidOff+0x12>
     f6e:	08 95       	ret
	{
	case LED_FORWARD_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_LOW);
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
		break;
     f76:	08 95       	ret
	
	case LED_REVERSE_CONNECTION	:
		DIO_voidSetPinValue    ( copy_u8LedPortId,  copy_u8LedPinId, DIO_PIN_HIGH);
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	0e 94 bc 08 	call	0x1178	; 0x1178 <DIO_voidSetPinValue>
     f7e:	08 95       	ret

00000f80 <SERVO_voidInit>:
 
 
void SERVO_voidInit(u8 copy_u8PWMPortId,u8 copy_u8PWMPinId)
{
	//Init pin as an outputpin
	DIO_voidSetPinDirection(copy_u8PWMPortId,copy_u8PWMPinId,DIO_PIN_OUTPUT);
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	0e 94 3c 08 	call	0x1078	; 0x1078 <DIO_voidSetPinDirection>
	
	//init PWM(channel1A)
	PWM_voidInitChannel_1A();
     f86:	0e 94 b3 09 	call	0x1366	; 0x1366 <PWM_voidInitChannel_1A>
     f8a:	08 95       	ret

00000f8c <SERVO_voidStartByAngle>:
{
	
	f32 Local_f32Dutycycle;
	
	//calculate servo duty
	Local_f32Dutycycle=((2.5*copy_f32ServoAngle)+675)/90;
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e2       	ldi	r20, 0x20	; 32
     f92:	50 e4       	ldi	r21, 0x40	; 64
     f94:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__mulsf3>
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 ec       	ldi	r19, 0xC0	; 192
     f9c:	48 e2       	ldi	r20, 0x28	; 40
     f9e:	54 e4       	ldi	r21, 0x44	; 68
     fa0:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__addsf3>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	44 eb       	ldi	r20, 0xB4	; 180
     faa:	52 e4       	ldi	r21, 0x42	; 66
     fac:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
     fb0:	ab 01       	movw	r20, r22
     fb2:	bc 01       	movw	r22, r24
	
	PWM_voidGenerateChannel_1B(SERVO_FREQUENCY_HZ,Local_f32Dutycycle);
     fb4:	82 e3       	ldi	r24, 0x32	; 50
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 25 0a 	call	0x144a	; 0x144a <PWM_voidGenerateChannel_1B>
     fbc:	08 95       	ret

00000fbe <main>:
extern u8 global_accessType;

int main()
{
	u8 suc;
	APP_init();
     fbe:	0e 94 9a 00 	call	0x134	; 0x134 <APP_init>
		//}
		
		
		
		// HOME_voidChangeUserNameAndPass();
		if (global_accessType ==accessPermited)
     fc2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <global_accessType>
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <main+0x12>
		{
			KPD_Interface_user();
     fca:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <KPD_Interface_user>
     fce:	f9 cf       	rjmp	.-14     	; 0xfc2 <main+0x4>
		}
		else if (global_accessType ==accessDenied)
     fd0:	81 11       	cpse	r24, r1
     fd2:	f7 cf       	rjmp	.-18     	; 0xfc2 <main+0x4>
		{
			LCD_voidDisplayString((u8*)"Access Denied");
     fd4:	8a e8       	ldi	r24, 0x8A	; 138
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <LCD_voidDisplayString>
		}
		
		
		
	}
}
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	08 95       	ret

00000fe2 <ADC_voidInit>:


void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
	//Select the voltage source
	switch(copy_u8ReferenceVoltage)
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	59 f0       	breq	.+22     	; 0xffc <ADC_voidInit+0x1a>
     fe6:	83 30       	cpi	r24, 0x03	; 3
     fe8:	81 f0       	breq	.+32     	; 0x100a <ADC_voidInit+0x28>
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	a1 f4       	brne	.+40     	; 0x1016 <ADC_voidInit+0x34>
	{
		case ADC_REFERENCE_AVCC:
		SET_BIT(ADMUX_REG,REFS0);
     fee:	87 b1       	in	r24, 0x07	; 7
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
     ff4:	87 b1       	in	r24, 0x07	; 7
     ff6:	8f 77       	andi	r24, 0x7F	; 127
     ff8:	87 b9       	out	0x07, r24	; 7
		break;
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <ADC_voidInit+0x34>
		
		case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG,REFS0);
     ffc:	87 b1       	in	r24, 0x07	; 7
     ffe:	8f 7b       	andi	r24, 0xBF	; 191
    1000:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX_REG,REFS1);
    1002:	87 b1       	in	r24, 0x07	; 7
    1004:	8f 77       	andi	r24, 0x7F	; 127
    1006:	87 b9       	out	0x07, r24	; 7
		break;
    1008:	06 c0       	rjmp	.+12     	; 0x1016 <ADC_voidInit+0x34>
		
		// Vref = 2.56V internal
		case ADC_REFERENCE_INTRNAL:
		SET_BIT(ADMUX_REG,REFS0);
    100a:	87 b1       	in	r24, 0x07	; 7
    100c:	80 64       	ori	r24, 0x40	; 64
    100e:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX_REG,REFS1);
    1010:	87 b1       	in	r24, 0x07	; 7
    1012:	80 68       	ori	r24, 0x80	; 128
    1014:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	//Select Right Adjustment
	CLR_BIT(ADMUX_REG,ADLAR);
    1016:	87 b1       	in	r24, 0x07	; 7
    1018:	8f 7d       	andi	r24, 0xDF	; 223
    101a:	87 b9       	out	0x07, r24	; 7
	
	//Clear the auto trigger bit - Single Conversation Mode
	CLR_BIT(ADCSRA_REG,ADATE);
    101c:	86 b1       	in	r24, 0x06	; 6
    101e:	8f 7d       	andi	r24, 0xDF	; 223
    1020:	86 b9       	out	0x06, r24	; 6
	
	//Disable ADC Interrupt
	CLR_BIT(ADCSRA_REG,ADIE);
    1022:	86 b1       	in	r24, 0x06	; 6
    1024:	87 7f       	andi	r24, 0xF7	; 247
    1026:	86 b9       	out	0x06, r24	; 6
	
	//Prescaler 128 For 16MHZ (125 KHZ)
	SET_BIT(ADCSRA_REG,ADPS2);
    1028:	86 b1       	in	r24, 0x06	; 6
    102a:	84 60       	ori	r24, 0x04	; 4
    102c:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS1);
    102e:	86 b1       	in	r24, 0x06	; 6
    1030:	82 60       	ori	r24, 0x02	; 2
    1032:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA_REG,ADPS0);
    1034:	86 b1       	in	r24, 0x06	; 6
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	86 b9       	out	0x06, r24	; 6
	
	//ADC Enable (make the enable the last step)
	SET_BIT(ADCSRA_REG,ADEN);
    103a:	86 b1       	in	r24, 0x06	; 6
    103c:	80 68       	ori	r24, 0x80	; 128
    103e:	86 b9       	out	0x06, r24	; 6
    1040:	08 95       	ret

00001042 <ADC_voidGetDigitalValue>:
}


void ADC_voidGetDigitalValue(u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
	if(copy_pu16DigitalValue!=NULL)
    1042:	61 15       	cp	r22, r1
    1044:	71 05       	cpc	r23, r1
    1046:	b9 f0       	breq	.+46     	; 0x1076 <ADC_voidGetDigitalValue+0x34>
	{
		//1. Select channel
		ADMUX_REG &= 0xE0; //0b11100000
    1048:	97 b1       	in	r25, 0x07	; 7
    104a:	90 7e       	andi	r25, 0xE0	; 224
    104c:	97 b9       	out	0x07, r25	; 7
		// Select Channel Number 
		ADMUX_REG |= copy_u8ChannelNumber;
    104e:	97 b1       	in	r25, 0x07	; 7
    1050:	89 2b       	or	r24, r25
    1052:	87 b9       	out	0x07, r24	; 7
		
		//2. Start Conversition
	    SET_BIT(ADCSRA_REG,ADSC);
    1054:	86 b1       	in	r24, 0x06	; 6
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	86 b9       	out	0x06, r24	; 6
		// Busy Wait for ADC Flag 
		while(0 == GET_BIT(ADCSRA_REG,ADIF));
    105a:	34 9b       	sbis	0x06, 4	; 6
    105c:	fe cf       	rjmp	.-4      	; 0x105a <ADC_voidGetDigitalValue+0x18>
		u16 temp = ADC_u16_REG;
    105e:	84 b1       	in	r24, 0x04	; 4
    1060:	95 b1       	in	r25, 0x05	; 5
		*copy_pu16DigitalValue = temp/4;
    1062:	96 95       	lsr	r25
    1064:	87 95       	ror	r24
    1066:	96 95       	lsr	r25
    1068:	87 95       	ror	r24
    106a:	fb 01       	movw	r30, r22
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
		
		//Clear Flag(write one to clear)

		SET_BIT(ADCSRA_REG,ADIF);
    1070:	86 b1       	in	r24, 0x06	; 6
    1072:	80 61       	ori	r24, 0x10	; 16
    1074:	86 b9       	out	0x06, r24	; 6
    1076:	08 95       	ret

00001078 <DIO_voidSetPinDirection>:
			case DIO_PORTC:
			TOG_BIT(PORTC_REG,copy_u8PinId);
			break;
			
			case DIO_PORTD:
			TOG_BIT(PORTD_REG,copy_u8PinId);
    1078:	84 30       	cpi	r24, 0x04	; 4
    107a:	08 f0       	brcs	.+2      	; 0x107e <DIO_voidSetPinDirection+0x6>
    107c:	7c c0       	rjmp	.+248    	; 0x1176 <DIO_voidSetPinDirection+0xfe>
    107e:	68 30       	cpi	r22, 0x08	; 8
    1080:	08 f0       	brcs	.+2      	; 0x1084 <DIO_voidSetPinDirection+0xc>
    1082:	79 c0       	rjmp	.+242    	; 0x1176 <DIO_voidSetPinDirection+0xfe>
    1084:	42 30       	cpi	r20, 0x02	; 2
    1086:	08 f0       	brcs	.+2      	; 0x108a <DIO_voidSetPinDirection+0x12>
    1088:	76 c0       	rjmp	.+236    	; 0x1176 <DIO_voidSetPinDirection+0xfe>
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	19 f1       	breq	.+70     	; 0x10d4 <DIO_voidSetPinDirection+0x5c>
    108e:	30 f0       	brcs	.+12     	; 0x109c <DIO_voidSetPinDirection+0x24>
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	e1 f1       	breq	.+120    	; 0x110c <DIO_voidSetPinDirection+0x94>
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_voidSetPinDirection+0x22>
    1098:	54 c0       	rjmp	.+168    	; 0x1142 <DIO_voidSetPinDirection+0xca>
    109a:	08 95       	ret
    109c:	44 23       	and	r20, r20
    109e:	71 f0       	breq	.+28     	; 0x10bc <DIO_voidSetPinDirection+0x44>
    10a0:	41 30       	cpi	r20, 0x01	; 1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <DIO_voidSetPinDirection+0x2e>
    10a4:	68 c0       	rjmp	.+208    	; 0x1176 <DIO_voidSetPinDirection+0xfe>
    10a6:	2a b3       	in	r18, 0x1a	; 26
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_voidSetPinDirection+0x3a>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	6a 95       	dec	r22
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_voidSetPinDirection+0x36>
    10b6:	82 2b       	or	r24, r18
    10b8:	8a bb       	out	0x1a, r24	; 26
    10ba:	08 95       	ret
    10bc:	2a b3       	in	r18, 0x1a	; 26
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_voidSetPinDirection+0x50>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	6a 95       	dec	r22
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_voidSetPinDirection+0x4c>
    10cc:	80 95       	com	r24
    10ce:	82 23       	and	r24, r18
    10d0:	8a bb       	out	0x1a, r24	; 26
    10d2:	08 95       	ret
    10d4:	44 23       	and	r20, r20
    10d6:	71 f0       	breq	.+28     	; 0x10f4 <DIO_voidSetPinDirection+0x7c>
    10d8:	41 30       	cpi	r20, 0x01	; 1
    10da:	09 f0       	breq	.+2      	; 0x10de <DIO_voidSetPinDirection+0x66>
    10dc:	4c c0       	rjmp	.+152    	; 0x1176 <DIO_voidSetPinDirection+0xfe>
    10de:	27 b3       	in	r18, 0x17	; 23
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_voidSetPinDirection+0x72>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	6a 95       	dec	r22
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_voidSetPinDirection+0x6e>
    10ee:	82 2b       	or	r24, r18
    10f0:	87 bb       	out	0x17, r24	; 23
    10f2:	08 95       	ret
    10f4:	27 b3       	in	r18, 0x17	; 23
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_voidSetPinDirection+0x88>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	6a 95       	dec	r22
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_voidSetPinDirection+0x84>
    1104:	80 95       	com	r24
    1106:	82 23       	and	r24, r18
    1108:	87 bb       	out	0x17, r24	; 23
    110a:	08 95       	ret
    110c:	44 23       	and	r20, r20
    110e:	69 f0       	breq	.+26     	; 0x112a <DIO_voidSetPinDirection+0xb2>
    1110:	41 30       	cpi	r20, 0x01	; 1
    1112:	89 f5       	brne	.+98     	; 0x1176 <DIO_voidSetPinDirection+0xfe>
    1114:	24 b3       	in	r18, 0x14	; 20
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <DIO_voidSetPinDirection+0xa8>
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	6a 95       	dec	r22
    1122:	e2 f7       	brpl	.-8      	; 0x111c <DIO_voidSetPinDirection+0xa4>
    1124:	82 2b       	or	r24, r18
    1126:	84 bb       	out	0x14, r24	; 20
    1128:	08 95       	ret
    112a:	24 b3       	in	r18, 0x14	; 20
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_voidSetPinDirection+0xbe>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	6a 95       	dec	r22
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_voidSetPinDirection+0xba>
    113a:	80 95       	com	r24
    113c:	82 23       	and	r24, r18
    113e:	84 bb       	out	0x14, r24	; 20
    1140:	08 95       	ret
    1142:	44 23       	and	r20, r20
    1144:	69 f0       	breq	.+26     	; 0x1160 <DIO_voidSetPinDirection+0xe8>
    1146:	41 30       	cpi	r20, 0x01	; 1
    1148:	b1 f4       	brne	.+44     	; 0x1176 <DIO_voidSetPinDirection+0xfe>
    114a:	21 b3       	in	r18, 0x11	; 17
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_voidSetPinDirection+0xde>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	6a 95       	dec	r22
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_voidSetPinDirection+0xda>
    115a:	82 2b       	or	r24, r18
    115c:	81 bb       	out	0x11, r24	; 17
    115e:	08 95       	ret
    1160:	21 b3       	in	r18, 0x11	; 17
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_voidSetPinDirection+0xf4>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	6a 95       	dec	r22
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_voidSetPinDirection+0xf0>
    1170:	80 95       	com	r24
    1172:	82 23       	and	r24, r18
    1174:	81 bb       	out	0x11, r24	; 17
    1176:	08 95       	ret

00001178 <DIO_voidSetPinValue>:
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	08 f0       	brcs	.+2      	; 0x117e <DIO_voidSetPinValue+0x6>
    117c:	7c c0       	rjmp	.+248    	; 0x1276 <DIO_voidSetPinValue+0xfe>
    117e:	68 30       	cpi	r22, 0x08	; 8
    1180:	08 f0       	brcs	.+2      	; 0x1184 <DIO_voidSetPinValue+0xc>
    1182:	79 c0       	rjmp	.+242    	; 0x1276 <DIO_voidSetPinValue+0xfe>
    1184:	42 30       	cpi	r20, 0x02	; 2
    1186:	08 f0       	brcs	.+2      	; 0x118a <DIO_voidSetPinValue+0x12>
    1188:	76 c0       	rjmp	.+236    	; 0x1276 <DIO_voidSetPinValue+0xfe>
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	19 f1       	breq	.+70     	; 0x11d4 <DIO_voidSetPinValue+0x5c>
    118e:	30 f0       	brcs	.+12     	; 0x119c <DIO_voidSetPinValue+0x24>
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	e1 f1       	breq	.+120    	; 0x120c <DIO_voidSetPinValue+0x94>
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	09 f4       	brne	.+2      	; 0x119a <DIO_voidSetPinValue+0x22>
    1198:	54 c0       	rjmp	.+168    	; 0x1242 <DIO_voidSetPinValue+0xca>
    119a:	08 95       	ret
    119c:	44 23       	and	r20, r20
    119e:	71 f0       	breq	.+28     	; 0x11bc <DIO_voidSetPinValue+0x44>
    11a0:	41 30       	cpi	r20, 0x01	; 1
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <DIO_voidSetPinValue+0x2e>
    11a4:	68 c0       	rjmp	.+208    	; 0x1276 <DIO_voidSetPinValue+0xfe>
    11a6:	2b b3       	in	r18, 0x1b	; 27
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_voidSetPinValue+0x3a>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	6a 95       	dec	r22
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_voidSetPinValue+0x36>
    11b6:	82 2b       	or	r24, r18
    11b8:	8b bb       	out	0x1b, r24	; 27
    11ba:	08 95       	ret
    11bc:	2b b3       	in	r18, 0x1b	; 27
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_voidSetPinValue+0x50>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	6a 95       	dec	r22
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_voidSetPinValue+0x4c>
    11cc:	80 95       	com	r24
    11ce:	82 23       	and	r24, r18
    11d0:	8b bb       	out	0x1b, r24	; 27
    11d2:	08 95       	ret
    11d4:	44 23       	and	r20, r20
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <DIO_voidSetPinValue+0x7c>
    11d8:	41 30       	cpi	r20, 0x01	; 1
    11da:	09 f0       	breq	.+2      	; 0x11de <DIO_voidSetPinValue+0x66>
    11dc:	4c c0       	rjmp	.+152    	; 0x1276 <DIO_voidSetPinValue+0xfe>
    11de:	28 b3       	in	r18, 0x18	; 24
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_voidSetPinValue+0x72>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	6a 95       	dec	r22
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_voidSetPinValue+0x6e>
    11ee:	82 2b       	or	r24, r18
    11f0:	88 bb       	out	0x18, r24	; 24
    11f2:	08 95       	ret
    11f4:	28 b3       	in	r18, 0x18	; 24
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_voidSetPinValue+0x88>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	6a 95       	dec	r22
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_voidSetPinValue+0x84>
    1204:	80 95       	com	r24
    1206:	82 23       	and	r24, r18
    1208:	88 bb       	out	0x18, r24	; 24
    120a:	08 95       	ret
    120c:	44 23       	and	r20, r20
    120e:	69 f0       	breq	.+26     	; 0x122a <DIO_voidSetPinValue+0xb2>
    1210:	41 30       	cpi	r20, 0x01	; 1
    1212:	89 f5       	brne	.+98     	; 0x1276 <DIO_voidSetPinValue+0xfe>
    1214:	25 b3       	in	r18, 0x15	; 21
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_voidSetPinValue+0xa8>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	6a 95       	dec	r22
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_voidSetPinValue+0xa4>
    1224:	82 2b       	or	r24, r18
    1226:	85 bb       	out	0x15, r24	; 21
    1228:	08 95       	ret
    122a:	25 b3       	in	r18, 0x15	; 21
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_voidSetPinValue+0xbe>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	6a 95       	dec	r22
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_voidSetPinValue+0xba>
    123a:	80 95       	com	r24
    123c:	82 23       	and	r24, r18
    123e:	85 bb       	out	0x15, r24	; 21
    1240:	08 95       	ret
    1242:	44 23       	and	r20, r20
    1244:	69 f0       	breq	.+26     	; 0x1260 <DIO_voidSetPinValue+0xe8>
    1246:	41 30       	cpi	r20, 0x01	; 1
    1248:	b1 f4       	brne	.+44     	; 0x1276 <DIO_voidSetPinValue+0xfe>
    124a:	22 b3       	in	r18, 0x12	; 18
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_voidSetPinValue+0xde>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	6a 95       	dec	r22
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_voidSetPinValue+0xda>
    125a:	82 2b       	or	r24, r18
    125c:	82 bb       	out	0x12, r24	; 18
    125e:	08 95       	ret
    1260:	22 b3       	in	r18, 0x12	; 18
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_voidSetPinValue+0xf4>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	6a 95       	dec	r22
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_voidSetPinValue+0xf0>
    1270:	80 95       	com	r24
    1272:	82 23       	and	r24, r18
    1274:	82 bb       	out	0x12, r24	; 18
    1276:	08 95       	ret

00001278 <DIO_voidGetPinValue>:
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	c0 f5       	brcc	.+112    	; 0x12ec <DIO_voidGetPinValue+0x74>
    127c:	68 30       	cpi	r22, 0x08	; 8
    127e:	b0 f5       	brcc	.+108    	; 0x12ec <DIO_voidGetPinValue+0x74>
    1280:	41 15       	cp	r20, r1
    1282:	51 05       	cpc	r21, r1
    1284:	99 f1       	breq	.+102    	; 0x12ec <DIO_voidGetPinValue+0x74>
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	89 f0       	breq	.+34     	; 0x12ac <DIO_voidGetPinValue+0x34>
    128a:	28 f0       	brcs	.+10     	; 0x1296 <DIO_voidGetPinValue+0x1e>
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	c9 f0       	breq	.+50     	; 0x12c2 <DIO_voidGetPinValue+0x4a>
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	11 f1       	breq	.+68     	; 0x12d8 <DIO_voidGetPinValue+0x60>
    1294:	08 95       	ret
    1296:	89 b3       	in	r24, 0x19	; 25
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_voidGetPinValue+0x28>
    129c:	95 95       	asr	r25
    129e:	87 95       	ror	r24
    12a0:	6a 95       	dec	r22
    12a2:	e2 f7       	brpl	.-8      	; 0x129c <DIO_voidGetPinValue+0x24>
    12a4:	81 70       	andi	r24, 0x01	; 1
    12a6:	fa 01       	movw	r30, r20
    12a8:	80 83       	st	Z, r24
    12aa:	08 95       	ret
    12ac:	86 b3       	in	r24, 0x16	; 22
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_voidGetPinValue+0x3e>
    12b2:	95 95       	asr	r25
    12b4:	87 95       	ror	r24
    12b6:	6a 95       	dec	r22
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_voidGetPinValue+0x3a>
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	fa 01       	movw	r30, r20
    12be:	80 83       	st	Z, r24
    12c0:	08 95       	ret
    12c2:	83 b3       	in	r24, 0x13	; 19
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_voidGetPinValue+0x54>
    12c8:	95 95       	asr	r25
    12ca:	87 95       	ror	r24
    12cc:	6a 95       	dec	r22
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_voidGetPinValue+0x50>
    12d0:	81 70       	andi	r24, 0x01	; 1
    12d2:	fa 01       	movw	r30, r20
    12d4:	80 83       	st	Z, r24
    12d6:	08 95       	ret
    12d8:	80 b3       	in	r24, 0x10	; 16
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_voidGetPinValue+0x6a>
    12de:	95 95       	asr	r25
    12e0:	87 95       	ror	r24
    12e2:	6a 95       	dec	r22
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_voidGetPinValue+0x66>
    12e6:	81 70       	andi	r24, 0x01	; 1
    12e8:	fa 01       	movw	r30, r20
    12ea:	80 83       	st	Z, r24
    12ec:	08 95       	ret

000012ee <DIO_voidActivePinInPullUpResistance>:
}


void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
	if((copy_u8PortId<4)&&(copy_u8PinId<8))
    12ee:	84 30       	cpi	r24, 0x04	; 4
    12f0:	a8 f5       	brcc	.+106    	; 0x135c <DIO_voidActivePinInPullUpResistance+0x6e>
    12f2:	68 30       	cpi	r22, 0x08	; 8
    12f4:	98 f5       	brcc	.+102    	; 0x135c <DIO_voidActivePinInPullUpResistance+0x6e>
	{
		switch(copy_u8PortId)
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	89 f0       	breq	.+34     	; 0x131c <DIO_voidActivePinInPullUpResistance+0x2e>
    12fa:	28 f0       	brcs	.+10     	; 0x1306 <DIO_voidActivePinInPullUpResistance+0x18>
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	c9 f0       	breq	.+50     	; 0x1332 <DIO_voidActivePinInPullUpResistance+0x44>
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	11 f1       	breq	.+68     	; 0x1348 <DIO_voidActivePinInPullUpResistance+0x5a>
    1304:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA_REG,copy_u8PinId);
    1306:	2b b3       	in	r18, 0x1b	; 27
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_voidActivePinInPullUpResistance+0x24>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	6a 95       	dec	r22
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_voidActivePinInPullUpResistance+0x20>
    1316:	82 2b       	or	r24, r18
    1318:	8b bb       	out	0x1b, r24	; 27
			break;
    131a:	08 95       	ret
			
			case DIO_PORTB:
			SET_BIT(PORTB_REG,copy_u8PinId);
    131c:	28 b3       	in	r18, 0x18	; 24
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_voidActivePinInPullUpResistance+0x3a>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	6a 95       	dec	r22
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_voidActivePinInPullUpResistance+0x36>
    132c:	82 2b       	or	r24, r18
    132e:	88 bb       	out	0x18, r24	; 24
			break;
    1330:	08 95       	ret
			
			case DIO_PORTC:
			SET_BIT(PORTC_REG,copy_u8PinId);
    1332:	25 b3       	in	r18, 0x15	; 21
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_voidActivePinInPullUpResistance+0x50>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	6a 95       	dec	r22
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_voidActivePinInPullUpResistance+0x4c>
    1342:	82 2b       	or	r24, r18
    1344:	85 bb       	out	0x15, r24	; 21
			break;
    1346:	08 95       	ret
			
			case DIO_PORTD:
			SET_BIT(PORTD_REG,copy_u8PinId);
    1348:	22 b3       	in	r18, 0x12	; 18
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_voidActivePinInPullUpResistance+0x66>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	6a 95       	dec	r22
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_voidActivePinInPullUpResistance+0x62>
    1358:	82 2b       	or	r24, r18
    135a:	82 bb       	out	0x12, r24	; 18
    135c:	08 95       	ret

0000135e <GI_voidEnable>:
#include"GI_register.h"


void GI_voidEnable(void)
{
	SET_BIT(SREG_REG,I);
    135e:	8f b7       	in	r24, 0x3f	; 63
    1360:	80 68       	ori	r24, 0x80	; 128
    1362:	8f bf       	out	0x3f, r24	; 63
    1364:	08 95       	ret

00001366 <PWM_voidInitChannel_1A>:


void PWM_voidInitChannel_1A(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel A)*/
	SET_BIT(TCCR1B_REG, WGM13);
    1366:	8e b5       	in	r24, 0x2e	; 46
    1368:	80 61       	ori	r24, 0x10	; 16
    136a:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    136c:	8e b5       	in	r24, 0x2e	; 46
    136e:	88 60       	ori	r24, 0x08	; 8
    1370:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    1372:	8f b5       	in	r24, 0x2f	; 47
    1374:	82 60       	ori	r24, 0x02	; 2
    1376:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    1378:	8f b5       	in	r24, 0x2f	; 47
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1A1);
    137e:	8f b5       	in	r24, 0x2f	; 47
    1380:	80 68       	ori	r24, 0x80	; 128
    1382:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1A0);
    1384:	8f b5       	in	r24, 0x2f	; 47
    1386:	8f 7b       	andi	r24, 0xBF	; 191
    1388:	8f bd       	out	0x2f, r24	; 47
    138a:	08 95       	ret

0000138c <PWM_voidInitChannel_1B>:
}

void PWM_voidInitChannel_1B(void)
{
	/*Waveform Generation Mode>>Fast PWM(channel B)*/
	SET_BIT(TCCR1B_REG, WGM13);
    138c:	8e b5       	in	r24, 0x2e	; 46
    138e:	80 61       	ori	r24, 0x10	; 16
    1390:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B_REG, WGM12);
    1392:	8e b5       	in	r24, 0x2e	; 46
    1394:	88 60       	ori	r24, 0x08	; 8
    1396:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1A_REG, WGM11);
    1398:	8f b5       	in	r24, 0x2f	; 47
    139a:	82 60       	ori	r24, 0x02	; 2
    139c:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG, WGM10);
    139e:	8f b5       	in	r24, 0x2f	; 47
    13a0:	8e 7f       	andi	r24, 0xFE	; 254
    13a2:	8f bd       	out	0x2f, r24	; 47
	
	/*Compare Match Output Mode>>Clear OC1A/OC1B on compare match*/
	SET_BIT(TCCR1A_REG,COM1B1);
    13a4:	8f b5       	in	r24, 0x2f	; 47
    13a6:	80 62       	ori	r24, 0x20	; 32
    13a8:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A_REG,COM1B0);
    13aa:	8f b5       	in	r24, 0x2f	; 47
    13ac:	8f 7e       	andi	r24, 0xEF	; 239
    13ae:	8f bd       	out	0x2f, r24	; 47
    13b0:	08 95       	ret

000013b2 <PWM_voidGenerateChannel_1A>:
}


void PWM_voidGenerateChannel_1A(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
    13c0:	6a 01       	movw	r12, r20
    13c2:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	48 ec       	ldi	r20, 0xC8	; 200
    13ca:	52 e4       	ldi	r21, 0x42	; 66
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 df 0b 	call	0x17be	; 0x17be <__cmpsf2>
    13d4:	18 16       	cp	r1, r24
    13d6:	94 f1       	brlt	.+100    	; 0x143c <PWM_voidGenerateChannel_1A+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    13d8:	9e 01       	movw	r18, r28
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	60 e9       	ldi	r22, 0x90	; 144
    13e0:	70 ed       	ldi	r23, 0xD0	; 208
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__udivmodsi4>
    13ea:	21 50       	subi	r18, 0x01	; 1
    13ec:	31 09       	sbc	r19, r1
    13ee:	37 bd       	out	0x27, r19	; 39
    13f0:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1A_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    13f2:	66 b5       	in	r22, 0x26	; 38
    13f4:	77 b5       	in	r23, 0x27	; 39
    13f6:	6f 5f       	subi	r22, 0xFF	; 255
    13f8:	7f 4f       	sbci	r23, 0xFF	; 255
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
    1402:	a7 01       	movw	r20, r14
    1404:	96 01       	movw	r18, r12
    1406:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__mulsf3>
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	48 ec       	ldi	r20, 0xC8	; 200
    1410:	52 e4       	ldi	r21, 0x42	; 66
    1412:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__subsf3>
    1422:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fixunssfsi>
    1426:	7b bd       	out	0x2b, r23	; 43
    1428:	6a bd       	out	0x2a, r22	; 42
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    142a:	8e b5       	in	r24, 0x2e	; 46
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    1430:	8e b5       	in	r24, 0x2e	; 46
    1432:	82 60       	ori	r24, 0x02	; 2
    1434:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    1436:	8e b5       	in	r24, 0x2e	; 46
    1438:	8b 7f       	andi	r24, 0xFB	; 251
    143a:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	08 95       	ret

0000144a <PWM_voidGenerateChannel_1B>:



void PWM_voidGenerateChannel_1B(u16 copy_u16Frequency_hz,f32 copy_f32DutyCycle)
{
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	6a 01       	movw	r12, r20
    145a:	7b 01       	movw	r14, r22
	if(copy_f32DutyCycle<=100)
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	48 ec       	ldi	r20, 0xC8	; 200
    1462:	52 e4       	ldi	r21, 0x42	; 66
    1464:	c7 01       	movw	r24, r14
    1466:	b6 01       	movw	r22, r12
    1468:	0e 94 df 0b 	call	0x17be	; 0x17be <__cmpsf2>
    146c:	18 16       	cp	r1, r24
    146e:	94 f1       	brlt	.+100    	; 0x14d4 <PWM_voidGenerateChannel_1B+0x8a>
	{
		/*Set freq by clkI/O/64 (From prescaler)*/
		ICR1_REG=((1000000UL/copy_u16Frequency_hz)/4)-1;
    1470:	9e 01       	movw	r18, r28
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e9       	ldi	r22, 0x90	; 144
    1478:	70 ed       	ldi	r23, 0xD0	; 208
    147a:	83 e0       	ldi	r24, 0x03	; 3
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <__udivmodsi4>
    1482:	21 50       	subi	r18, 0x01	; 1
    1484:	31 09       	sbc	r19, r1
    1486:	37 bd       	out	0x27, r19	; 39
    1488:	26 bd       	out	0x26, r18	; 38
		
		/*Calculating Duty for non inverting*/
		OCR1B_REG=((copy_f32DutyCycle*(ICR1_REG+1))/100)-1;
    148a:	66 b5       	in	r22, 0x26	; 38
    148c:	77 b5       	in	r23, 0x27	; 39
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
    149a:	a7 01       	movw	r20, r14
    149c:	96 01       	movw	r18, r12
    149e:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__mulsf3>
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	48 ec       	ldi	r20, 0xC8	; 200
    14a8:	52 e4       	ldi	r21, 0x42	; 66
    14aa:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e8       	ldi	r20, 0x80	; 128
    14b4:	5f e3       	ldi	r21, 0x3F	; 63
    14b6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <__subsf3>
    14ba:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__fixunssfsi>
    14be:	79 bd       	out	0x29, r23	; 41
    14c0:	68 bd       	out	0x28, r22	; 40
		
		/*Clock Select>>clk/64(From prescaler)*/
		SET_BIT(TCCR1B_REG,CS10);
    14c2:	8e b5       	in	r24, 0x2e	; 46
    14c4:	81 60       	ori	r24, 0x01	; 1
    14c6:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(TCCR1B_REG,CS11);
    14c8:	8e b5       	in	r24, 0x2e	; 46
    14ca:	82 60       	ori	r24, 0x02	; 2
    14cc:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT(TCCR1B_REG,CS12);
    14ce:	8e b5       	in	r24, 0x2e	; 46
    14d0:	8b 7f       	andi	r24, 0xFB	; 251
    14d2:	8e bd       	out	0x2e, r24	; 46
	else
	{
		//error 
	}
	
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	df 90       	pop	r13
    14de:	cf 90       	pop	r12
    14e0:	08 95       	ret

000014e2 <TMR0_voidInit>:
void TMR0_SetCallBackOVF(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
	{
		
		PRV_pFunCallBackOVF=copy_pFunAction;
    14e2:	83 b7       	in	r24, 0x33	; 51
    14e4:	8f 7b       	andi	r24, 0xBF	; 191
    14e6:	83 bf       	out	0x33, r24	; 51
    14e8:	83 b7       	in	r24, 0x33	; 51
    14ea:	88 60       	ori	r24, 0x08	; 8
    14ec:	83 bf       	out	0x33, r24	; 51
    14ee:	83 b7       	in	r24, 0x33	; 51
    14f0:	8f 7e       	andi	r24, 0xEF	; 239
    14f2:	83 bf       	out	0x33, r24	; 51
    14f4:	83 b7       	in	r24, 0x33	; 51
    14f6:	8f 7d       	andi	r24, 0xDF	; 223
    14f8:	83 bf       	out	0x33, r24	; 51
    14fa:	89 b7       	in	r24, 0x39	; 57
    14fc:	82 60       	ori	r24, 0x02	; 2
    14fe:	89 bf       	out	0x39, r24	; 57
    1500:	89 ef       	ldi	r24, 0xF9	; 249
    1502:	8c bf       	out	0x3c, r24	; 60
    1504:	08 95       	ret

00001506 <TMR0_voidStart>:
    1506:	83 b7       	in	r24, 0x33	; 51
    1508:	81 60       	ori	r24, 0x01	; 1
    150a:	83 bf       	out	0x33, r24	; 51
    150c:	83 b7       	in	r24, 0x33	; 51
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	83 bf       	out	0x33, r24	; 51
    1512:	83 b7       	in	r24, 0x33	; 51
    1514:	8b 7f       	andi	r24, 0xFB	; 251
    1516:	83 bf       	out	0x33, r24	; 51
    1518:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <local_u16Counter+0x1>
    151c:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <local_u16Counter>
    1520:	08 95       	ret

00001522 <TMR0_voidStop>:
    1522:	83 b7       	in	r24, 0x33	; 51
    1524:	8e 7f       	andi	r24, 0xFE	; 254
    1526:	83 bf       	out	0x33, r24	; 51
    1528:	83 b7       	in	r24, 0x33	; 51
    152a:	8d 7f       	andi	r24, 0xFD	; 253
    152c:	83 bf       	out	0x33, r24	; 51
    152e:	83 b7       	in	r24, 0x33	; 51
    1530:	8b 7f       	andi	r24, 0xFB	; 251
    1532:	83 bf       	out	0x33, r24	; 51
    1534:	08 95       	ret

00001536 <TMR0_SetCallBackCTC>:
	}
}

void TMR0_SetCallBackCTC(void (*copy_pFunAction)(void))
{
	if(copy_pFunAction != NULL)
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	21 f0       	breq	.+8      	; 0x1542 <TMR0_SetCallBackCTC+0xc>
	{
		
		PRV_pFunCallBackCTC=copy_pFunAction;
    153a:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <PRV_pFunCallBackCTC+0x1>
    153e:	80 93 9d 03 	sts	0x039D, r24	; 0x80039d <PRV_pFunCallBackCTC>
    1542:	08 95       	ret

00001544 <TMR0clear_flag>:
}

void TMR0clear_flag(void)
{
	// SET_BIT(TIFR_REG,OCF0);
	TIFR_REG |= (1 << OCF0); 
    1544:	88 b7       	in	r24, 0x38	; 56
    1546:	82 60       	ori	r24, 0x02	; 2
    1548:	88 bf       	out	0x38, r24	; 56
	SET_BIT(TIFR_REG,TOV0);
    154a:	88 b7       	in	r24, 0x38	; 56
    154c:	81 60       	ori	r24, 0x01	; 1
    154e:	88 bf       	out	0x38, r24	; 56
    1550:	08 95       	ret

00001552 <__vector_11>:



void __vector_11(void)__attribute__((signal));
void __vector_11(void)
{
    1552:	1f 92       	push	r1
    1554:	0f 92       	push	r0
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	0f 92       	push	r0
    155a:	11 24       	eor	r1, r1
    155c:	2f 93       	push	r18
    155e:	3f 93       	push	r19
    1560:	4f 93       	push	r20
    1562:	5f 93       	push	r21
    1564:	6f 93       	push	r22
    1566:	7f 93       	push	r23
    1568:	8f 93       	push	r24
    156a:	9f 93       	push	r25
    156c:	af 93       	push	r26
    156e:	bf 93       	push	r27
    1570:	ef 93       	push	r30
    1572:	ff 93       	push	r31
	
	
	local_u16Counter++;
    1574:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <local_u16Counter>
    1578:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <local_u16Counter+0x1>
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <local_u16Counter+0x1>
    1582:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <local_u16Counter>
	
	if(local_u16Counter==TMR0_OVERFLOW_COUNTER)
    1586:	88 3e       	cpi	r24, 0xE8	; 232
    1588:	93 40       	sbci	r25, 0x03	; 3
    158a:	69 f4       	brne	.+26     	; 0x15a6 <__vector_11+0x54>
	{
		/*put preload value in timer register*/
		TCNT0_REG=TMR0_PRELOAD_VALUE;
    158c:	81 e7       	ldi	r24, 0x71	; 113
    158e:	82 bf       	out	0x32, r24	; 50
		
		/*CLR counter*/
		local_u16Counter=0;
    1590:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <local_u16Counter+0x1>
    1594:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <local_u16Counter>
		
		if(PRV_pFunCallBackOVF != NULL)
    1598:	e0 91 9f 03 	lds	r30, 0x039F	; 0x80039f <PRV_pFunCallBackOVF>
    159c:	f0 91 a0 03 	lds	r31, 0x03A0	; 0x8003a0 <PRV_pFunCallBackOVF+0x1>
    15a0:	30 97       	sbiw	r30, 0x00	; 0
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <__vector_11+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackOVF();
    15a4:	09 95       	icall
		else
		{
				//error state
		}
	}
}
    15a6:	ff 91       	pop	r31
    15a8:	ef 91       	pop	r30
    15aa:	bf 91       	pop	r27
    15ac:	af 91       	pop	r26
    15ae:	9f 91       	pop	r25
    15b0:	8f 91       	pop	r24
    15b2:	7f 91       	pop	r23
    15b4:	6f 91       	pop	r22
    15b6:	5f 91       	pop	r21
    15b8:	4f 91       	pop	r20
    15ba:	3f 91       	pop	r19
    15bc:	2f 91       	pop	r18
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	0f 90       	pop	r0
    15c4:	1f 90       	pop	r1
    15c6:	18 95       	reti

000015c8 <__vector_10>:

void __vector_10(void)__attribute__((signal));
void __vector_10(void)
{
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
	

	
	local_u16Counter++;
    15ea:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <local_u16Counter>
    15ee:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <local_u16Counter+0x1>
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <local_u16Counter+0x1>
    15f8:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <local_u16Counter>
	
	if(local_u16Counter==TMR0_CTC_COUNTER)
    15fc:	88 38       	cpi	r24, 0x88	; 136
    15fe:	93 41       	sbci	r25, 0x13	; 19
    1600:	69 f4       	brne	.+26     	; 0x161c <__vector_10+0x54>
	{
		
		/*CLR counter*/
		local_u16Counter=0;
    1602:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <local_u16Counter+0x1>
    1606:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <local_u16Counter>
		
		if(PRV_pFunCallBackCTC != NULL)
    160a:	e0 91 9d 03 	lds	r30, 0x039D	; 0x80039d <PRV_pFunCallBackCTC>
    160e:	f0 91 9e 03 	lds	r31, 0x039E	; 0x80039e <PRV_pFunCallBackCTC+0x1>
    1612:	30 97       	sbiw	r30, 0x00	; 0
    1614:	19 f0       	breq	.+6      	; 0x161c <__vector_10+0x54>
		{
			/*execute action*/
			PRV_pFunCallBackCTC();
    1616:	09 95       	icall
			TMR0clear_flag();
    1618:	0e 94 a2 0a 	call	0x1544	; 0x1544 <TMR0clear_flag>
		{
				//error state
		}
	}
	
    161c:	ff 91       	pop	r31
    161e:	ef 91       	pop	r30
    1620:	bf 91       	pop	r27
    1622:	af 91       	pop	r26
    1624:	9f 91       	pop	r25
    1626:	8f 91       	pop	r24
    1628:	7f 91       	pop	r23
    162a:	6f 91       	pop	r22
    162c:	5f 91       	pop	r21
    162e:	4f 91       	pop	r20
    1630:	3f 91       	pop	r19
    1632:	2f 91       	pop	r18
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <TWI_voidInitMaster>:
		/*clr flag*/
		SET_BIT(TWCR_REG,TWINT);
		
		while(0==GET_BIT(TWCR_REG,TWINT));
		
		while(TWI_STATUS_VALUE != TWI_SLAVE_ADDRESS_READ_ACK);
    163e:	8c e0       	ldi	r24, 0x0C	; 12
    1640:	80 b9       	out	0x00, r24	; 0
    1642:	81 b1       	in	r24, 0x01	; 1
    1644:	8d 7f       	andi	r24, 0xFD	; 253
    1646:	81 b9       	out	0x01, r24	; 1
    1648:	81 b1       	in	r24, 0x01	; 1
    164a:	8e 7f       	andi	r24, 0xFE	; 254
    164c:	81 b9       	out	0x01, r24	; 1
    164e:	86 b7       	in	r24, 0x36	; 54
    1650:	84 60       	ori	r24, 0x04	; 4
    1652:	86 bf       	out	0x36, r24	; 54
    1654:	08 95       	ret

00001656 <TWI_voidSendStartCondition>:
    1656:	86 b7       	in	r24, 0x36	; 54
    1658:	80 62       	ori	r24, 0x20	; 32
    165a:	86 bf       	out	0x36, r24	; 54
    165c:	86 b7       	in	r24, 0x36	; 54
    165e:	80 68       	ori	r24, 0x80	; 128
    1660:	86 bf       	out	0x36, r24	; 54
    1662:	06 b6       	in	r0, 0x36	; 54
    1664:	07 fe       	sbrs	r0, 7
    1666:	fd cf       	rjmp	.-6      	; 0x1662 <TWI_voidSendStartCondition+0xc>
    1668:	81 b1       	in	r24, 0x01	; 1
    166a:	88 7f       	andi	r24, 0xF8	; 248
    166c:	88 30       	cpi	r24, 0x08	; 8
    166e:	e1 f7       	brne	.-8      	; 0x1668 <TWI_voidSendStartCondition+0x12>
    1670:	08 95       	ret

00001672 <TWI_voidSendStopCondition>:
    1672:	86 b7       	in	r24, 0x36	; 54
    1674:	80 61       	ori	r24, 0x10	; 16
    1676:	86 bf       	out	0x36, r24	; 54
    1678:	86 b7       	in	r24, 0x36	; 54
    167a:	80 68       	ori	r24, 0x80	; 128
    167c:	86 bf       	out	0x36, r24	; 54
    167e:	08 95       	ret

00001680 <TWI_voidSendSlaveAddWithWrite>:
    1680:	88 23       	and	r24, r24
    1682:	94 f0       	brlt	.+36     	; 0x16a8 <TWI_voidSendSlaveAddWithWrite+0x28>
    1684:	88 0f       	add	r24, r24
    1686:	83 b9       	out	0x03, r24	; 3
    1688:	83 b1       	in	r24, 0x03	; 3
    168a:	8e 7f       	andi	r24, 0xFE	; 254
    168c:	83 b9       	out	0x03, r24	; 3
    168e:	86 b7       	in	r24, 0x36	; 54
    1690:	8f 7d       	andi	r24, 0xDF	; 223
    1692:	86 bf       	out	0x36, r24	; 54
    1694:	86 b7       	in	r24, 0x36	; 54
    1696:	80 68       	ori	r24, 0x80	; 128
    1698:	86 bf       	out	0x36, r24	; 54
    169a:	06 b6       	in	r0, 0x36	; 54
    169c:	07 fe       	sbrs	r0, 7
    169e:	fd cf       	rjmp	.-6      	; 0x169a <TWI_voidSendSlaveAddWithWrite+0x1a>
    16a0:	81 b1       	in	r24, 0x01	; 1
    16a2:	88 7f       	andi	r24, 0xF8	; 248
    16a4:	88 31       	cpi	r24, 0x18	; 24
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <TWI_voidSendSlaveAddWithWrite+0x20>
    16a8:	08 95       	ret

000016aa <TWI_voidTransmitMasterDataByte>:



void TWI_voidTransmitMasterDataByte(u8 copy_u8TxData)
{
	TWDR_REG=copy_u8TxData;
    16aa:	83 b9       	out	0x03, r24	; 3
	
	/*clr flag*/
	SET_BIT(TWCR_REG,TWINT);
    16ac:	86 b7       	in	r24, 0x36	; 54
    16ae:	80 68       	ori	r24, 0x80	; 128
    16b0:	86 bf       	out	0x36, r24	; 54
	
	while(0==GET_BIT(TWCR_REG,TWINT));
    16b2:	06 b6       	in	r0, 0x36	; 54
    16b4:	07 fe       	sbrs	r0, 7
    16b6:	fd cf       	rjmp	.-6      	; 0x16b2 <TWI_voidTransmitMasterDataByte+0x8>
		
	while(TWI_STATUS_VALUE != TWI_MATER_DATA_TRANSMIT_ACK);
    16b8:	81 b1       	in	r24, 0x01	; 1
    16ba:	88 7f       	andi	r24, 0xF8	; 248
    16bc:	88 32       	cpi	r24, 0x28	; 40
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <TWI_voidTransmitMasterDataByte+0xe>
}
    16c0:	08 95       	ret

000016c2 <UART_voidInit>:


void UART_voidInit(void)
{
	/*Double the USART Transmission Speed>>Disable*/
	CLR_BIT(UCSRA_REG,U2X);
    16c2:	8b b1       	in	r24, 0x0b	; 11
    16c4:	8d 7f       	andi	r24, 0xFD	; 253
    16c6:	8b b9       	out	0x0b, r24	; 11
	
	/*USART Baud Rate Register>> set buadrate to 9600 when using 16UL clock & dis double speed*/
	UBRRL_REG=103;
    16c8:	87 e6       	ldi	r24, 0x67	; 103
    16ca:	89 b9       	out	0x09, r24	; 9
	
	/*Stop Bit Select>>1-bit*/
	CLR_BIT(Local_u8InitVar,USBS);
	
	/*Character Size(Data size)>>8-bit*/
	CLR_BIT(UCSRB_REG,UCSZ2);
    16cc:	8a b1       	in	r24, 0x0a	; 10
    16ce:	8b 7f       	andi	r24, 0xFB	; 251
    16d0:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(Local_u8InitVar,UCSZ0);
	
	/*Clock Polarity>>Disable*/
	CLR_BIT(Local_u8InitVar,UCPOL);
	
	UCSRC_REG=Local_u8InitVar;
    16d2:	86 e8       	ldi	r24, 0x86	; 134
    16d4:	80 bd       	out	0x20, r24	; 32
	
	/*Receiver Enable>>Enable*/
	SET_BIT(UCSRB_REG,RXEN);
    16d6:	8a b1       	in	r24, 0x0a	; 10
    16d8:	80 61       	ori	r24, 0x10	; 16
    16da:	8a b9       	out	0x0a, r24	; 10
	
	/*Transmitter Enable>>Enable*/
	SET_BIT(UCSRB_REG,TXEN);
    16dc:	8a b1       	in	r24, 0x0a	; 10
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	8a b9       	out	0x0a, r24	; 10
    16e2:	08 95       	ret

000016e4 <__subsf3>:
    16e4:	50 58       	subi	r21, 0x80	; 128

000016e6 <__addsf3>:
    16e6:	bb 27       	eor	r27, r27
    16e8:	aa 27       	eor	r26, r26
    16ea:	0e 94 8a 0b 	call	0x1714	; 0x1714 <__addsf3x>
    16ee:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__fp_round>
    16f2:	0e 94 ef 0c 	call	0x19de	; 0x19de <__fp_pscA>
    16f6:	38 f0       	brcs	.+14     	; 0x1706 <__addsf3+0x20>
    16f8:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_pscB>
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__addsf3+0x20>
    16fe:	39 f4       	brne	.+14     	; 0x170e <__addsf3+0x28>
    1700:	9f 3f       	cpi	r25, 0xFF	; 255
    1702:	19 f4       	brne	.+6      	; 0x170a <__addsf3+0x24>
    1704:	26 f4       	brtc	.+8      	; 0x170e <__addsf3+0x28>
    1706:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__fp_nan>
    170a:	0e f4       	brtc	.+2      	; 0x170e <__addsf3+0x28>
    170c:	e0 95       	com	r30
    170e:	e7 fb       	bst	r30, 7
    1710:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__fp_inf>

00001714 <__addsf3x>:
    1714:	e9 2f       	mov	r30, r25
    1716:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__fp_split3>
    171a:	58 f3       	brcs	.-42     	; 0x16f2 <__addsf3+0xc>
    171c:	ba 17       	cp	r27, r26
    171e:	62 07       	cpc	r22, r18
    1720:	73 07       	cpc	r23, r19
    1722:	84 07       	cpc	r24, r20
    1724:	95 07       	cpc	r25, r21
    1726:	20 f0       	brcs	.+8      	; 0x1730 <__addsf3x+0x1c>
    1728:	79 f4       	brne	.+30     	; 0x1748 <__addsf3x+0x34>
    172a:	a6 f5       	brtc	.+104    	; 0x1794 <__addsf3x+0x80>
    172c:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_zero>
    1730:	0e f4       	brtc	.+2      	; 0x1734 <__addsf3x+0x20>
    1732:	e0 95       	com	r30
    1734:	0b 2e       	mov	r0, r27
    1736:	ba 2f       	mov	r27, r26
    1738:	a0 2d       	mov	r26, r0
    173a:	0b 01       	movw	r0, r22
    173c:	b9 01       	movw	r22, r18
    173e:	90 01       	movw	r18, r0
    1740:	0c 01       	movw	r0, r24
    1742:	ca 01       	movw	r24, r20
    1744:	a0 01       	movw	r20, r0
    1746:	11 24       	eor	r1, r1
    1748:	ff 27       	eor	r31, r31
    174a:	59 1b       	sub	r21, r25
    174c:	99 f0       	breq	.+38     	; 0x1774 <__addsf3x+0x60>
    174e:	59 3f       	cpi	r21, 0xF9	; 249
    1750:	50 f4       	brcc	.+20     	; 0x1766 <__addsf3x+0x52>
    1752:	50 3e       	cpi	r21, 0xE0	; 224
    1754:	68 f1       	brcs	.+90     	; 0x17b0 <__addsf3x+0x9c>
    1756:	1a 16       	cp	r1, r26
    1758:	f0 40       	sbci	r31, 0x00	; 0
    175a:	a2 2f       	mov	r26, r18
    175c:	23 2f       	mov	r18, r19
    175e:	34 2f       	mov	r19, r20
    1760:	44 27       	eor	r20, r20
    1762:	58 5f       	subi	r21, 0xF8	; 248
    1764:	f3 cf       	rjmp	.-26     	; 0x174c <__addsf3x+0x38>
    1766:	46 95       	lsr	r20
    1768:	37 95       	ror	r19
    176a:	27 95       	ror	r18
    176c:	a7 95       	ror	r26
    176e:	f0 40       	sbci	r31, 0x00	; 0
    1770:	53 95       	inc	r21
    1772:	c9 f7       	brne	.-14     	; 0x1766 <__addsf3x+0x52>
    1774:	7e f4       	brtc	.+30     	; 0x1794 <__addsf3x+0x80>
    1776:	1f 16       	cp	r1, r31
    1778:	ba 0b       	sbc	r27, r26
    177a:	62 0b       	sbc	r22, r18
    177c:	73 0b       	sbc	r23, r19
    177e:	84 0b       	sbc	r24, r20
    1780:	ba f0       	brmi	.+46     	; 0x17b0 <__addsf3x+0x9c>
    1782:	91 50       	subi	r25, 0x01	; 1
    1784:	a1 f0       	breq	.+40     	; 0x17ae <__addsf3x+0x9a>
    1786:	ff 0f       	add	r31, r31
    1788:	bb 1f       	adc	r27, r27
    178a:	66 1f       	adc	r22, r22
    178c:	77 1f       	adc	r23, r23
    178e:	88 1f       	adc	r24, r24
    1790:	c2 f7       	brpl	.-16     	; 0x1782 <__addsf3x+0x6e>
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <__addsf3x+0x9c>
    1794:	ba 0f       	add	r27, r26
    1796:	62 1f       	adc	r22, r18
    1798:	73 1f       	adc	r23, r19
    179a:	84 1f       	adc	r24, r20
    179c:	48 f4       	brcc	.+18     	; 0x17b0 <__addsf3x+0x9c>
    179e:	87 95       	ror	r24
    17a0:	77 95       	ror	r23
    17a2:	67 95       	ror	r22
    17a4:	b7 95       	ror	r27
    17a6:	f7 95       	ror	r31
    17a8:	9e 3f       	cpi	r25, 0xFE	; 254
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <__addsf3x+0x9a>
    17ac:	b0 cf       	rjmp	.-160    	; 0x170e <__addsf3+0x28>
    17ae:	93 95       	inc	r25
    17b0:	88 0f       	add	r24, r24
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <__addsf3x+0xa2>
    17b4:	99 27       	eor	r25, r25
    17b6:	ee 0f       	add	r30, r30
    17b8:	97 95       	ror	r25
    17ba:	87 95       	ror	r24
    17bc:	08 95       	ret

000017be <__cmpsf2>:
    17be:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__fp_cmp>
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <__cmpsf2+0x8>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	08 95       	ret

000017c8 <__divsf3>:
    17c8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__divsf3x>
    17cc:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__fp_round>
    17d0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_pscB>
    17d4:	58 f0       	brcs	.+22     	; 0x17ec <__divsf3+0x24>
    17d6:	0e 94 ef 0c 	call	0x19de	; 0x19de <__fp_pscA>
    17da:	40 f0       	brcs	.+16     	; 0x17ec <__divsf3+0x24>
    17dc:	29 f4       	brne	.+10     	; 0x17e8 <__divsf3+0x20>
    17de:	5f 3f       	cpi	r21, 0xFF	; 255
    17e0:	29 f0       	breq	.+10     	; 0x17ec <__divsf3+0x24>
    17e2:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__fp_inf>
    17e6:	51 11       	cpse	r21, r1
    17e8:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__fp_szero>
    17ec:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__fp_nan>

000017f0 <__divsf3x>:
    17f0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__fp_split3>
    17f4:	68 f3       	brcs	.-38     	; 0x17d0 <__divsf3+0x8>

000017f6 <__divsf3_pse>:
    17f6:	99 23       	and	r25, r25
    17f8:	b1 f3       	breq	.-20     	; 0x17e6 <__divsf3+0x1e>
    17fa:	55 23       	and	r21, r21
    17fc:	91 f3       	breq	.-28     	; 0x17e2 <__divsf3+0x1a>
    17fe:	95 1b       	sub	r25, r21
    1800:	55 0b       	sbc	r21, r21
    1802:	bb 27       	eor	r27, r27
    1804:	aa 27       	eor	r26, r26
    1806:	62 17       	cp	r22, r18
    1808:	73 07       	cpc	r23, r19
    180a:	84 07       	cpc	r24, r20
    180c:	38 f0       	brcs	.+14     	; 0x181c <__divsf3_pse+0x26>
    180e:	9f 5f       	subi	r25, 0xFF	; 255
    1810:	5f 4f       	sbci	r21, 0xFF	; 255
    1812:	22 0f       	add	r18, r18
    1814:	33 1f       	adc	r19, r19
    1816:	44 1f       	adc	r20, r20
    1818:	aa 1f       	adc	r26, r26
    181a:	a9 f3       	breq	.-22     	; 0x1806 <__divsf3_pse+0x10>
    181c:	35 d0       	rcall	.+106    	; 0x1888 <__divsf3_pse+0x92>
    181e:	0e 2e       	mov	r0, r30
    1820:	3a f0       	brmi	.+14     	; 0x1830 <__divsf3_pse+0x3a>
    1822:	e0 e8       	ldi	r30, 0x80	; 128
    1824:	32 d0       	rcall	.+100    	; 0x188a <__divsf3_pse+0x94>
    1826:	91 50       	subi	r25, 0x01	; 1
    1828:	50 40       	sbci	r21, 0x00	; 0
    182a:	e6 95       	lsr	r30
    182c:	00 1c       	adc	r0, r0
    182e:	ca f7       	brpl	.-14     	; 0x1822 <__divsf3_pse+0x2c>
    1830:	2b d0       	rcall	.+86     	; 0x1888 <__divsf3_pse+0x92>
    1832:	fe 2f       	mov	r31, r30
    1834:	29 d0       	rcall	.+82     	; 0x1888 <__divsf3_pse+0x92>
    1836:	66 0f       	add	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	88 1f       	adc	r24, r24
    183c:	bb 1f       	adc	r27, r27
    183e:	26 17       	cp	r18, r22
    1840:	37 07       	cpc	r19, r23
    1842:	48 07       	cpc	r20, r24
    1844:	ab 07       	cpc	r26, r27
    1846:	b0 e8       	ldi	r27, 0x80	; 128
    1848:	09 f0       	breq	.+2      	; 0x184c <__divsf3_pse+0x56>
    184a:	bb 0b       	sbc	r27, r27
    184c:	80 2d       	mov	r24, r0
    184e:	bf 01       	movw	r22, r30
    1850:	ff 27       	eor	r31, r31
    1852:	93 58       	subi	r25, 0x83	; 131
    1854:	5f 4f       	sbci	r21, 0xFF	; 255
    1856:	3a f0       	brmi	.+14     	; 0x1866 <__divsf3_pse+0x70>
    1858:	9e 3f       	cpi	r25, 0xFE	; 254
    185a:	51 05       	cpc	r21, r1
    185c:	78 f0       	brcs	.+30     	; 0x187c <__divsf3_pse+0x86>
    185e:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__fp_inf>
    1862:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__fp_szero>
    1866:	5f 3f       	cpi	r21, 0xFF	; 255
    1868:	e4 f3       	brlt	.-8      	; 0x1862 <__divsf3_pse+0x6c>
    186a:	98 3e       	cpi	r25, 0xE8	; 232
    186c:	d4 f3       	brlt	.-12     	; 0x1862 <__divsf3_pse+0x6c>
    186e:	86 95       	lsr	r24
    1870:	77 95       	ror	r23
    1872:	67 95       	ror	r22
    1874:	b7 95       	ror	r27
    1876:	f7 95       	ror	r31
    1878:	9f 5f       	subi	r25, 0xFF	; 255
    187a:	c9 f7       	brne	.-14     	; 0x186e <__divsf3_pse+0x78>
    187c:	88 0f       	add	r24, r24
    187e:	91 1d       	adc	r25, r1
    1880:	96 95       	lsr	r25
    1882:	87 95       	ror	r24
    1884:	97 f9       	bld	r25, 7
    1886:	08 95       	ret
    1888:	e1 e0       	ldi	r30, 0x01	; 1
    188a:	66 0f       	add	r22, r22
    188c:	77 1f       	adc	r23, r23
    188e:	88 1f       	adc	r24, r24
    1890:	bb 1f       	adc	r27, r27
    1892:	62 17       	cp	r22, r18
    1894:	73 07       	cpc	r23, r19
    1896:	84 07       	cpc	r24, r20
    1898:	ba 07       	cpc	r27, r26
    189a:	20 f0       	brcs	.+8      	; 0x18a4 <__divsf3_pse+0xae>
    189c:	62 1b       	sub	r22, r18
    189e:	73 0b       	sbc	r23, r19
    18a0:	84 0b       	sbc	r24, r20
    18a2:	ba 0b       	sbc	r27, r26
    18a4:	ee 1f       	adc	r30, r30
    18a6:	88 f7       	brcc	.-30     	; 0x188a <__divsf3_pse+0x94>
    18a8:	e0 95       	com	r30
    18aa:	08 95       	ret

000018ac <__fixunssfsi>:
    18ac:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__fp_splitA>
    18b0:	88 f0       	brcs	.+34     	; 0x18d4 <__fixunssfsi+0x28>
    18b2:	9f 57       	subi	r25, 0x7F	; 127
    18b4:	98 f0       	brcs	.+38     	; 0x18dc <__fixunssfsi+0x30>
    18b6:	b9 2f       	mov	r27, r25
    18b8:	99 27       	eor	r25, r25
    18ba:	b7 51       	subi	r27, 0x17	; 23
    18bc:	b0 f0       	brcs	.+44     	; 0x18ea <__fixunssfsi+0x3e>
    18be:	e1 f0       	breq	.+56     	; 0x18f8 <__fixunssfsi+0x4c>
    18c0:	66 0f       	add	r22, r22
    18c2:	77 1f       	adc	r23, r23
    18c4:	88 1f       	adc	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	1a f0       	brmi	.+6      	; 0x18d0 <__fixunssfsi+0x24>
    18ca:	ba 95       	dec	r27
    18cc:	c9 f7       	brne	.-14     	; 0x18c0 <__fixunssfsi+0x14>
    18ce:	14 c0       	rjmp	.+40     	; 0x18f8 <__fixunssfsi+0x4c>
    18d0:	b1 30       	cpi	r27, 0x01	; 1
    18d2:	91 f0       	breq	.+36     	; 0x18f8 <__fixunssfsi+0x4c>
    18d4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_zero>
    18d8:	b1 e0       	ldi	r27, 0x01	; 1
    18da:	08 95       	ret
    18dc:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__fp_zero>
    18e0:	67 2f       	mov	r22, r23
    18e2:	78 2f       	mov	r23, r24
    18e4:	88 27       	eor	r24, r24
    18e6:	b8 5f       	subi	r27, 0xF8	; 248
    18e8:	39 f0       	breq	.+14     	; 0x18f8 <__fixunssfsi+0x4c>
    18ea:	b9 3f       	cpi	r27, 0xF9	; 249
    18ec:	cc f3       	brlt	.-14     	; 0x18e0 <__fixunssfsi+0x34>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b3 95       	inc	r27
    18f6:	d9 f7       	brne	.-10     	; 0x18ee <__fixunssfsi+0x42>
    18f8:	3e f4       	brtc	.+14     	; 0x1908 <__fixunssfsi+0x5c>
    18fa:	90 95       	com	r25
    18fc:	80 95       	com	r24
    18fe:	70 95       	com	r23
    1900:	61 95       	neg	r22
    1902:	7f 4f       	sbci	r23, 0xFF	; 255
    1904:	8f 4f       	sbci	r24, 0xFF	; 255
    1906:	9f 4f       	sbci	r25, 0xFF	; 255
    1908:	08 95       	ret

0000190a <__floatunsisf>:
    190a:	e8 94       	clt
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <__floatsisf+0x12>

0000190e <__floatsisf>:
    190e:	97 fb       	bst	r25, 7
    1910:	3e f4       	brtc	.+14     	; 0x1920 <__floatsisf+0x12>
    1912:	90 95       	com	r25
    1914:	80 95       	com	r24
    1916:	70 95       	com	r23
    1918:	61 95       	neg	r22
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	99 23       	and	r25, r25
    1922:	a9 f0       	breq	.+42     	; 0x194e <__floatsisf+0x40>
    1924:	f9 2f       	mov	r31, r25
    1926:	96 e9       	ldi	r25, 0x96	; 150
    1928:	bb 27       	eor	r27, r27
    192a:	93 95       	inc	r25
    192c:	f6 95       	lsr	r31
    192e:	87 95       	ror	r24
    1930:	77 95       	ror	r23
    1932:	67 95       	ror	r22
    1934:	b7 95       	ror	r27
    1936:	f1 11       	cpse	r31, r1
    1938:	f8 cf       	rjmp	.-16     	; 0x192a <__floatsisf+0x1c>
    193a:	fa f4       	brpl	.+62     	; 0x197a <__floatsisf+0x6c>
    193c:	bb 0f       	add	r27, r27
    193e:	11 f4       	brne	.+4      	; 0x1944 <__floatsisf+0x36>
    1940:	60 ff       	sbrs	r22, 0
    1942:	1b c0       	rjmp	.+54     	; 0x197a <__floatsisf+0x6c>
    1944:	6f 5f       	subi	r22, 0xFF	; 255
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	16 c0       	rjmp	.+44     	; 0x197a <__floatsisf+0x6c>
    194e:	88 23       	and	r24, r24
    1950:	11 f0       	breq	.+4      	; 0x1956 <__floatsisf+0x48>
    1952:	96 e9       	ldi	r25, 0x96	; 150
    1954:	11 c0       	rjmp	.+34     	; 0x1978 <__floatsisf+0x6a>
    1956:	77 23       	and	r23, r23
    1958:	21 f0       	breq	.+8      	; 0x1962 <__floatsisf+0x54>
    195a:	9e e8       	ldi	r25, 0x8E	; 142
    195c:	87 2f       	mov	r24, r23
    195e:	76 2f       	mov	r23, r22
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__floatsisf+0x5e>
    1962:	66 23       	and	r22, r22
    1964:	71 f0       	breq	.+28     	; 0x1982 <__floatsisf+0x74>
    1966:	96 e8       	ldi	r25, 0x86	; 134
    1968:	86 2f       	mov	r24, r22
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	2a f0       	brmi	.+10     	; 0x197a <__floatsisf+0x6c>
    1970:	9a 95       	dec	r25
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	88 1f       	adc	r24, r24
    1978:	da f7       	brpl	.-10     	; 0x1970 <__floatsisf+0x62>
    197a:	88 0f       	add	r24, r24
    197c:	96 95       	lsr	r25
    197e:	87 95       	ror	r24
    1980:	97 f9       	bld	r25, 7
    1982:	08 95       	ret

00001984 <__fp_cmp>:
    1984:	99 0f       	add	r25, r25
    1986:	00 08       	sbc	r0, r0
    1988:	55 0f       	add	r21, r21
    198a:	aa 0b       	sbc	r26, r26
    198c:	e0 e8       	ldi	r30, 0x80	; 128
    198e:	fe ef       	ldi	r31, 0xFE	; 254
    1990:	16 16       	cp	r1, r22
    1992:	17 06       	cpc	r1, r23
    1994:	e8 07       	cpc	r30, r24
    1996:	f9 07       	cpc	r31, r25
    1998:	c0 f0       	brcs	.+48     	; 0x19ca <__fp_cmp+0x46>
    199a:	12 16       	cp	r1, r18
    199c:	13 06       	cpc	r1, r19
    199e:	e4 07       	cpc	r30, r20
    19a0:	f5 07       	cpc	r31, r21
    19a2:	98 f0       	brcs	.+38     	; 0x19ca <__fp_cmp+0x46>
    19a4:	62 1b       	sub	r22, r18
    19a6:	73 0b       	sbc	r23, r19
    19a8:	84 0b       	sbc	r24, r20
    19aa:	95 0b       	sbc	r25, r21
    19ac:	39 f4       	brne	.+14     	; 0x19bc <__fp_cmp+0x38>
    19ae:	0a 26       	eor	r0, r26
    19b0:	61 f0       	breq	.+24     	; 0x19ca <__fp_cmp+0x46>
    19b2:	23 2b       	or	r18, r19
    19b4:	24 2b       	or	r18, r20
    19b6:	25 2b       	or	r18, r21
    19b8:	21 f4       	brne	.+8      	; 0x19c2 <__fp_cmp+0x3e>
    19ba:	08 95       	ret
    19bc:	0a 26       	eor	r0, r26
    19be:	09 f4       	brne	.+2      	; 0x19c2 <__fp_cmp+0x3e>
    19c0:	a1 40       	sbci	r26, 0x01	; 1
    19c2:	a6 95       	lsr	r26
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	81 1d       	adc	r24, r1
    19c8:	81 1d       	adc	r24, r1
    19ca:	08 95       	ret

000019cc <__fp_inf>:
    19cc:	97 f9       	bld	r25, 7
    19ce:	9f 67       	ori	r25, 0x7F	; 127
    19d0:	80 e8       	ldi	r24, 0x80	; 128
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	08 95       	ret

000019d8 <__fp_nan>:
    19d8:	9f ef       	ldi	r25, 0xFF	; 255
    19da:	80 ec       	ldi	r24, 0xC0	; 192
    19dc:	08 95       	ret

000019de <__fp_pscA>:
    19de:	00 24       	eor	r0, r0
    19e0:	0a 94       	dec	r0
    19e2:	16 16       	cp	r1, r22
    19e4:	17 06       	cpc	r1, r23
    19e6:	18 06       	cpc	r1, r24
    19e8:	09 06       	cpc	r0, r25
    19ea:	08 95       	ret

000019ec <__fp_pscB>:
    19ec:	00 24       	eor	r0, r0
    19ee:	0a 94       	dec	r0
    19f0:	12 16       	cp	r1, r18
    19f2:	13 06       	cpc	r1, r19
    19f4:	14 06       	cpc	r1, r20
    19f6:	05 06       	cpc	r0, r21
    19f8:	08 95       	ret

000019fa <__fp_round>:
    19fa:	09 2e       	mov	r0, r25
    19fc:	03 94       	inc	r0
    19fe:	00 0c       	add	r0, r0
    1a00:	11 f4       	brne	.+4      	; 0x1a06 <__fp_round+0xc>
    1a02:	88 23       	and	r24, r24
    1a04:	52 f0       	brmi	.+20     	; 0x1a1a <__fp_round+0x20>
    1a06:	bb 0f       	add	r27, r27
    1a08:	40 f4       	brcc	.+16     	; 0x1a1a <__fp_round+0x20>
    1a0a:	bf 2b       	or	r27, r31
    1a0c:	11 f4       	brne	.+4      	; 0x1a12 <__fp_round+0x18>
    1a0e:	60 ff       	sbrs	r22, 0
    1a10:	04 c0       	rjmp	.+8      	; 0x1a1a <__fp_round+0x20>
    1a12:	6f 5f       	subi	r22, 0xFF	; 255
    1a14:	7f 4f       	sbci	r23, 0xFF	; 255
    1a16:	8f 4f       	sbci	r24, 0xFF	; 255
    1a18:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1a:	08 95       	ret

00001a1c <__fp_split3>:
    1a1c:	57 fd       	sbrc	r21, 7
    1a1e:	90 58       	subi	r25, 0x80	; 128
    1a20:	44 0f       	add	r20, r20
    1a22:	55 1f       	adc	r21, r21
    1a24:	59 f0       	breq	.+22     	; 0x1a3c <__fp_splitA+0x10>
    1a26:	5f 3f       	cpi	r21, 0xFF	; 255
    1a28:	71 f0       	breq	.+28     	; 0x1a46 <__fp_splitA+0x1a>
    1a2a:	47 95       	ror	r20

00001a2c <__fp_splitA>:
    1a2c:	88 0f       	add	r24, r24
    1a2e:	97 fb       	bst	r25, 7
    1a30:	99 1f       	adc	r25, r25
    1a32:	61 f0       	breq	.+24     	; 0x1a4c <__fp_splitA+0x20>
    1a34:	9f 3f       	cpi	r25, 0xFF	; 255
    1a36:	79 f0       	breq	.+30     	; 0x1a56 <__fp_splitA+0x2a>
    1a38:	87 95       	ror	r24
    1a3a:	08 95       	ret
    1a3c:	12 16       	cp	r1, r18
    1a3e:	13 06       	cpc	r1, r19
    1a40:	14 06       	cpc	r1, r20
    1a42:	55 1f       	adc	r21, r21
    1a44:	f2 cf       	rjmp	.-28     	; 0x1a2a <__fp_split3+0xe>
    1a46:	46 95       	lsr	r20
    1a48:	f1 df       	rcall	.-30     	; 0x1a2c <__fp_splitA>
    1a4a:	08 c0       	rjmp	.+16     	; 0x1a5c <__fp_splitA+0x30>
    1a4c:	16 16       	cp	r1, r22
    1a4e:	17 06       	cpc	r1, r23
    1a50:	18 06       	cpc	r1, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	f1 cf       	rjmp	.-30     	; 0x1a38 <__fp_splitA+0xc>
    1a56:	86 95       	lsr	r24
    1a58:	71 05       	cpc	r23, r1
    1a5a:	61 05       	cpc	r22, r1
    1a5c:	08 94       	sec
    1a5e:	08 95       	ret

00001a60 <__fp_zero>:
    1a60:	e8 94       	clt

00001a62 <__fp_szero>:
    1a62:	bb 27       	eor	r27, r27
    1a64:	66 27       	eor	r22, r22
    1a66:	77 27       	eor	r23, r23
    1a68:	cb 01       	movw	r24, r22
    1a6a:	97 f9       	bld	r25, 7
    1a6c:	08 95       	ret

00001a6e <__mulsf3>:
    1a6e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__mulsf3x>
    1a72:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__fp_round>
    1a76:	0e 94 ef 0c 	call	0x19de	; 0x19de <__fp_pscA>
    1a7a:	38 f0       	brcs	.+14     	; 0x1a8a <__mulsf3+0x1c>
    1a7c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <__fp_pscB>
    1a80:	20 f0       	brcs	.+8      	; 0x1a8a <__mulsf3+0x1c>
    1a82:	95 23       	and	r25, r21
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <__mulsf3+0x1c>
    1a86:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__fp_inf>
    1a8a:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__fp_nan>
    1a8e:	11 24       	eor	r1, r1
    1a90:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__fp_szero>

00001a94 <__mulsf3x>:
    1a94:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__fp_split3>
    1a98:	70 f3       	brcs	.-36     	; 0x1a76 <__mulsf3+0x8>

00001a9a <__mulsf3_pse>:
    1a9a:	95 9f       	mul	r25, r21
    1a9c:	c1 f3       	breq	.-16     	; 0x1a8e <__mulsf3+0x20>
    1a9e:	95 0f       	add	r25, r21
    1aa0:	50 e0       	ldi	r21, 0x00	; 0
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	62 9f       	mul	r22, r18
    1aa6:	f0 01       	movw	r30, r0
    1aa8:	72 9f       	mul	r23, r18
    1aaa:	bb 27       	eor	r27, r27
    1aac:	f0 0d       	add	r31, r0
    1aae:	b1 1d       	adc	r27, r1
    1ab0:	63 9f       	mul	r22, r19
    1ab2:	aa 27       	eor	r26, r26
    1ab4:	f0 0d       	add	r31, r0
    1ab6:	b1 1d       	adc	r27, r1
    1ab8:	aa 1f       	adc	r26, r26
    1aba:	64 9f       	mul	r22, r20
    1abc:	66 27       	eor	r22, r22
    1abe:	b0 0d       	add	r27, r0
    1ac0:	a1 1d       	adc	r26, r1
    1ac2:	66 1f       	adc	r22, r22
    1ac4:	82 9f       	mul	r24, r18
    1ac6:	22 27       	eor	r18, r18
    1ac8:	b0 0d       	add	r27, r0
    1aca:	a1 1d       	adc	r26, r1
    1acc:	62 1f       	adc	r22, r18
    1ace:	73 9f       	mul	r23, r19
    1ad0:	b0 0d       	add	r27, r0
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	62 1f       	adc	r22, r18
    1ad6:	83 9f       	mul	r24, r19
    1ad8:	a0 0d       	add	r26, r0
    1ada:	61 1d       	adc	r22, r1
    1adc:	22 1f       	adc	r18, r18
    1ade:	74 9f       	mul	r23, r20
    1ae0:	33 27       	eor	r19, r19
    1ae2:	a0 0d       	add	r26, r0
    1ae4:	61 1d       	adc	r22, r1
    1ae6:	23 1f       	adc	r18, r19
    1ae8:	84 9f       	mul	r24, r20
    1aea:	60 0d       	add	r22, r0
    1aec:	21 1d       	adc	r18, r1
    1aee:	82 2f       	mov	r24, r18
    1af0:	76 2f       	mov	r23, r22
    1af2:	6a 2f       	mov	r22, r26
    1af4:	11 24       	eor	r1, r1
    1af6:	9f 57       	subi	r25, 0x7F	; 127
    1af8:	50 40       	sbci	r21, 0x00	; 0
    1afa:	9a f0       	brmi	.+38     	; 0x1b22 <__mulsf3_pse+0x88>
    1afc:	f1 f0       	breq	.+60     	; 0x1b3a <__mulsf3_pse+0xa0>
    1afe:	88 23       	and	r24, r24
    1b00:	4a f0       	brmi	.+18     	; 0x1b14 <__mulsf3_pse+0x7a>
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	bb 1f       	adc	r27, r27
    1b08:	66 1f       	adc	r22, r22
    1b0a:	77 1f       	adc	r23, r23
    1b0c:	88 1f       	adc	r24, r24
    1b0e:	91 50       	subi	r25, 0x01	; 1
    1b10:	50 40       	sbci	r21, 0x00	; 0
    1b12:	a9 f7       	brne	.-22     	; 0x1afe <__mulsf3_pse+0x64>
    1b14:	9e 3f       	cpi	r25, 0xFE	; 254
    1b16:	51 05       	cpc	r21, r1
    1b18:	80 f0       	brcs	.+32     	; 0x1b3a <__mulsf3_pse+0xa0>
    1b1a:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <__fp_inf>
    1b1e:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__fp_szero>
    1b22:	5f 3f       	cpi	r21, 0xFF	; 255
    1b24:	e4 f3       	brlt	.-8      	; 0x1b1e <__mulsf3_pse+0x84>
    1b26:	98 3e       	cpi	r25, 0xE8	; 232
    1b28:	d4 f3       	brlt	.-12     	; 0x1b1e <__mulsf3_pse+0x84>
    1b2a:	86 95       	lsr	r24
    1b2c:	77 95       	ror	r23
    1b2e:	67 95       	ror	r22
    1b30:	b7 95       	ror	r27
    1b32:	f7 95       	ror	r31
    1b34:	e7 95       	ror	r30
    1b36:	9f 5f       	subi	r25, 0xFF	; 255
    1b38:	c1 f7       	brne	.-16     	; 0x1b2a <__mulsf3_pse+0x90>
    1b3a:	fe 2b       	or	r31, r30
    1b3c:	88 0f       	add	r24, r24
    1b3e:	91 1d       	adc	r25, r1
    1b40:	96 95       	lsr	r25
    1b42:	87 95       	ror	r24
    1b44:	97 f9       	bld	r25, 7
    1b46:	08 95       	ret

00001b48 <__udivmodsi4>:
    1b48:	a1 e2       	ldi	r26, 0x21	; 33
    1b4a:	1a 2e       	mov	r1, r26
    1b4c:	aa 1b       	sub	r26, r26
    1b4e:	bb 1b       	sub	r27, r27
    1b50:	fd 01       	movw	r30, r26
    1b52:	0d c0       	rjmp	.+26     	; 0x1b6e <__udivmodsi4_ep>

00001b54 <__udivmodsi4_loop>:
    1b54:	aa 1f       	adc	r26, r26
    1b56:	bb 1f       	adc	r27, r27
    1b58:	ee 1f       	adc	r30, r30
    1b5a:	ff 1f       	adc	r31, r31
    1b5c:	a2 17       	cp	r26, r18
    1b5e:	b3 07       	cpc	r27, r19
    1b60:	e4 07       	cpc	r30, r20
    1b62:	f5 07       	cpc	r31, r21
    1b64:	20 f0       	brcs	.+8      	; 0x1b6e <__udivmodsi4_ep>
    1b66:	a2 1b       	sub	r26, r18
    1b68:	b3 0b       	sbc	r27, r19
    1b6a:	e4 0b       	sbc	r30, r20
    1b6c:	f5 0b       	sbc	r31, r21

00001b6e <__udivmodsi4_ep>:
    1b6e:	66 1f       	adc	r22, r22
    1b70:	77 1f       	adc	r23, r23
    1b72:	88 1f       	adc	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	1a 94       	dec	r1
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <__udivmodsi4_loop>
    1b7a:	60 95       	com	r22
    1b7c:	70 95       	com	r23
    1b7e:	80 95       	com	r24
    1b80:	90 95       	com	r25
    1b82:	9b 01       	movw	r18, r22
    1b84:	ac 01       	movw	r20, r24
    1b86:	bd 01       	movw	r22, r26
    1b88:	cf 01       	movw	r24, r30
    1b8a:	08 95       	ret

00001b8c <_exit>:
    1b8c:	f8 94       	cli

00001b8e <__stop_program>:
    1b8e:	ff cf       	rjmp	.-2      	; 0x1b8e <__stop_program>
